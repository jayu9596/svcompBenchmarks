var $M.0: [ref]ref;

var $M.1: [ref]i8;

var $M.2: [ref]i8;

var $M.3: [ref]i8;

var $M.4: [ref]i8;

var $M.5: i32;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.8: [ref]ref;

var $M.9: [ref]i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i8;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]ref;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: [ref]i64;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]i32;

var $M.23: [ref]i32;

var $M.24: [ref]ref;

var $M.25: [ref]i32;

var $M.26: [ref]i32;

var $M.27: [ref]ref;

var $M.28: [ref]i16;

var $M.29: [ref]i32;

var $M.30: [ref]i32;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: i32;

var $M.36: [ref]i8;

var $M.37: [ref]ref;

var $M.38: [ref]i8;

var $M.39: [ref]i32;

var $M.40: [ref]i8;

var $M.41: i32;

var $M.42: [ref]i32;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i16;

var $M.46: [ref]i16;

var $M.47: [ref]i16;

var $M.48: [ref]ref;

var $M.49: [ref]i8;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]i32;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]i32;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i16;

var $M.67: [ref]i16;

var $M.68: [ref]i16;

var $M.69: [ref]ref;

var $M.70: [ref]i32;

var $M.71: [ref]i32;

var $M.72: [ref]i32;

var $M.73: [ref]i8;

var $M.74: [ref]i16;

var $M.75: [ref]i32;

var $M.76: [ref]i8;

var $M.77: [ref]i16;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.82: [ref]i8;

var $M.85: [ref]i32;

var $M.86: [ref]i8;

var $M.87: [ref]i32;

var $M.88: [ref]i32;

var $M.89: [ref]i32;

var $M.90: [ref]i32;

var $M.91: [ref]i32;

var $M.92: [ref]i32;

var $M.93: [ref]i32;

var $M.94: [ref]i32;

var $M.95: [ref]i32;

var $M.96: [ref]i32;

var $M.157: [ref]i32;

var $M.158: [ref]i8;

var $M.159: [ref]i32;

var $M.160: [ref]i8;

var $M.161: [ref]i32;

var $M.162: [ref]i8;

var $M.163: [ref]i32;

var $M.164: [ref]i8;

var $M.165: [ref]i8;

var $M.166: [ref]i32;

var $M.167: [ref]i8;

var $M.168: [ref]i8;

var $M.238: [ref]i32;

var $M.239: [ref]i8;

var $M.240: [ref]i32;

var $M.241: [ref]i8;

var $M.242: [ref]i32;

var $M.243: [ref]i8;

var $M.244: [ref]i32;

var $M.245: [ref]i8;

var $M.246: [ref]i32;

var $M.247: [ref]i8;

var $M.248: [ref]i32;

var $M.249: [ref]i8;

var $M.250: [ref]i32;

var $M.251: [ref]i8;

var $M.252: [ref]i8;

var $M.253: [ref]i32;

var $M.254: [ref]i8;

var $M.255: [ref]i8;

var $M.265: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 350698);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const tda18271_debug: ref;

axiom tda18271_debug == $sub.ref(0, 1028);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 2056);

const tda18271_tuner_ops: ref;

axiom tda18271_tuner_ops == $sub.ref(0, 3368);

const tda18271_cal_on_startup: ref;

axiom tda18271_cal_on_startup == $sub.ref(0, 4396);

const hybrid_tuner_instance_list: ref;

axiom hybrid_tuner_instance_list == $sub.ref(0, 5436);

const tda18271_list_mutex: ref;

axiom tda18271_list_mutex == $sub.ref(0, 6628);

const {:count 8} tda18271_rf_band_template: ref;

axiom tda18271_rf_band_template == $sub.ref(0, 8036);

const tda18271c2_std_map: ref;

axiom tda18271c2_std_map == $sub.ref(0, 9150);

const {:count 102} tda18271_rf_cal_dc_over_dt: ref;

axiom tda18271_rf_cal_dc_over_dt == $sub.ref(0, 10990);

const {:count 6} tda18271c2_km: ref;

axiom tda18271c2_km == $sub.ref(0, 12062);

const {:count 438} tda18271c2_rf_cal: ref;

axiom tda18271c2_rf_cal == $sub.ref(0, 16590);

const {:count 35} tda18271c2_cal_pll: ref;

axiom tda18271c2_cal_pll == $sub.ref(0, 17894);

const {:count 41} tda18271c2_main_pll: ref;

axiom tda18271c2_main_pll == $sub.ref(0, 19246);

const tda18271c2_map_layout: ref;

axiom tda18271c2_map_layout == $sub.ref(0, 20342);

const tda18271c1_std_map: ref;

axiom tda18271c1_std_map == $sub.ref(0, 21456);

const {:count 5} tda18271_ir_measure: ref;

axiom tda18271_ir_measure == $sub.ref(0, 22520);

const {:count 86} tda18271_gain_taper: ref;

axiom tda18271_gain_taper == $sub.ref(0, 24232);

const {:count 8} tda18271_rf_band: ref;

axiom tda18271_rf_band == $sub.ref(0, 25320);

const {:count 8} tda18271_bp_filter: ref;

axiom tda18271_bp_filter == $sub.ref(0, 26408);

const {:count 5} tda18271c1_km: ref;

axiom tda18271c1_km == $sub.ref(0, 27472);

const {:count 18} tda18271c1_rf_cal: ref;

axiom tda18271c1_rf_cal == $sub.ref(0, 28640);

const {:count 36} tda18271c1_cal_pll: ref;

axiom tda18271c1_cal_pll == $sub.ref(0, 29952);

const {:count 41} tda18271c1_main_pll: ref;

axiom tda18271c1_main_pll == $sub.ref(0, 31304);

const tda18271c1_map_layout: ref;

axiom tda18271c1_map_layout == $sub.ref(0, 32400);

const {:count 13} tda18271_cid_target: ref;

axiom tda18271_cid_target == $sub.ref(0, 33528);

const {:count 17} tda18271_thermometer: ref;

axiom tda18271_thermometer == $sub.ref(0, 34603);

const ldv_mutex_tda18271_list_mutex: ref;

axiom ldv_mutex_tda18271_list_mutex == $sub.ref(0, 35631);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 36659);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 37687);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 38715);

const .str: ref;

axiom .str == $sub.ref(0, 39741);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 40793);

const {:count 14} .str.2: ref;

axiom .str.2 == $sub.ref(0, 41831);

const {:count 23} .str.42: ref;

axiom .str.42 == $sub.ref(0, 42878);

const {:count 10} .str.43: ref;

axiom .str.43 == $sub.ref(0, 43912);

const {:count 30} .str.93: ref;

axiom .str.93 == $sub.ref(0, 44966);

const {:count 20} .str.94: ref;

axiom .str.94 == $sub.ref(0, 46010);

const {:count 24} .str.118: ref;

axiom .str.118 == $sub.ref(0, 47058);

const {:count 32} .str.119: ref;

axiom .str.119 == $sub.ref(0, 48114);

const {:count 3} .str.120: ref;

axiom .str.120 == $sub.ref(0, 49141);

const {:count 6} .str.121: ref;

axiom .str.121 == $sub.ref(0, 50171);

const {:count 7} .str.122: ref;

axiom .str.122 == $sub.ref(0, 51202);

const {:count 7} .str.123: ref;

axiom .str.123 == $sub.ref(0, 52233);

const {:count 6} .str.124: ref;

axiom .str.124 == $sub.ref(0, 53263);

const {:count 6} .str.125: ref;

axiom .str.125 == $sub.ref(0, 54293);

const {:count 7} .str.126: ref;

axiom .str.126 == $sub.ref(0, 55324);

const {:count 7} .str.127: ref;

axiom .str.127 == $sub.ref(0, 56355);

const {:count 7} .str.128: ref;

axiom .str.128 == $sub.ref(0, 57386);

const {:count 7} .str.129: ref;

axiom .str.129 == $sub.ref(0, 58417);

const {:count 7} .str.130: ref;

axiom .str.130 == $sub.ref(0, 59448);

const {:count 7} .str.131: ref;

axiom .str.131 == $sub.ref(0, 60479);

const {:count 6} .str.132: ref;

axiom .str.132 == $sub.ref(0, 61509);

const {:count 6} .str.133: ref;

axiom .str.133 == $sub.ref(0, 62539);

const {:count 3} .str.159: ref;

axiom .str.159 == $sub.ref(0, 63566);

const {:count 2} .str.160: ref;

axiom .str.160 == $sub.ref(0, 64592);

const {:count 3} .str.161: ref;

axiom .str.161 == $sub.ref(0, 65619);

const {:count 2} .str.162: ref;

axiom .str.162 == $sub.ref(0, 66645);

const {:count 3} .str.163: ref;

axiom .str.163 == $sub.ref(0, 67672);

const {:count 2} .str.164: ref;

axiom .str.164 == $sub.ref(0, 68698);

const {:count 3} .str.165: ref;

axiom .str.165 == $sub.ref(0, 69725);

const {:count 3} .str.166: ref;

axiom .str.166 == $sub.ref(0, 70752);

const {:count 27} .str.167: ref;

axiom .str.167 == $sub.ref(0, 71803);

const {:count 31} .str.168: ref;

axiom .str.168 == $sub.ref(0, 72858);

const {:count 2} .str.26: ref;

axiom .str.26 == $sub.ref(0, 73884);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 74929);

const {:count 14} .str.149: ref;

axiom .str.149 == $sub.ref(0, 75967);

const {:count 55} .str.150: ref;

axiom .str.150 == $sub.ref(0, 77046);

const {:count 2} .str.12: ref;

axiom .str.12 == $sub.ref(0, 78072);

const {:count 25} .str.151: ref;

axiom .str.151 == $sub.ref(0, 79121);

const {:count 31} .str.158: ref;

axiom .str.158 == $sub.ref(0, 80176);

const {:count 301} .str.90: ref;

axiom .str.90 == $sub.ref(0, 81501);

const {:count 22} .str.91: ref;

axiom .str.91 == $sub.ref(0, 82547);

const {:count 56} .str.92: ref;

axiom .str.92 == $sub.ref(0, 83627);

const {:count 22} .str.36: ref;

axiom .str.36 == $sub.ref(0, 84673);

const {:count 299} .str.8: ref;

axiom .str.8 == $sub.ref(0, 85996);

const {:count 9} .str.9: ref;

axiom .str.9 == $sub.ref(0, 87029);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 88061);

const {:count 10} .str.11: ref;

axiom .str.11 == $sub.ref(0, 89095);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 90143);

const {:count 20} .str.14: ref;

axiom .str.14 == $sub.ref(0, 91187);

const {:count 33} .str.15: ref;

axiom .str.15 == $sub.ref(0, 92244);

const {:count 42} .str.16: ref;

axiom .str.16 == $sub.ref(0, 93310);

const {:count 23} .str.34: ref;

axiom .str.34 == $sub.ref(0, 94357);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 95406);

const {:count 10} .str.17: ref;

axiom .str.17 == $sub.ref(0, 96440);

const {:count 3} .str.18: ref;

axiom .str.18 == $sub.ref(0, 97467);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 98499);

const {:count 11} .str.20: ref;

axiom .str.20 == $sub.ref(0, 99534);

const {:count 7} .str.21: ref;

axiom .str.21 == $sub.ref(0, 100565);

const {:count 11} .str.22: ref;

axiom .str.22 == $sub.ref(0, 101600);

const {:count 18} .str.23: ref;

axiom .str.23 == $sub.ref(0, 102642);

const {:count 20} .str.24: ref;

axiom .str.24 == $sub.ref(0, 103686);

const {:count 17} .str.25: ref;

axiom .str.25 == $sub.ref(0, 104727);

const {:count 22} .str.39: ref;

axiom .str.39 == $sub.ref(0, 105773);

const {:count 24} .str.37: ref;

axiom .str.37 == $sub.ref(0, 106821);

const {:count 25} .str.41: ref;

axiom .str.41 == $sub.ref(0, 107870);

const {:count 42} .str.157: ref;

axiom .str.157 == $sub.ref(0, 108936);

const {:count 24} .str.5: ref;

axiom .str.5 == $sub.ref(0, 109984);

const {:count 149} .str.6: ref;

axiom .str.6 == $sub.ref(0, 111157);

const {:count 21} .str.7: ref;

axiom .str.7 == $sub.ref(0, 112202);

const {:count 19} .str.27: ref;

axiom .str.27 == $sub.ref(0, 113245);

const {:count 34} .str.28: ref;

axiom .str.28 == $sub.ref(0, 114303);

const {:count 19} .str.49: ref;

axiom .str.49 == $sub.ref(0, 115346);

const {:count 27} .str.50: ref;

axiom .str.50 == $sub.ref(0, 116397);

const {:count 29} .str.51: ref;

axiom .str.51 == $sub.ref(0, 117450);

const {:count 29} .str.52: ref;

axiom .str.52 == $sub.ref(0, 118503);

const {:count 29} .str.53: ref;

axiom .str.53 == $sub.ref(0, 119556);

const {:count 29} .str.54: ref;

axiom .str.54 == $sub.ref(0, 120609);

const {:count 29} .str.55: ref;

axiom .str.55 == $sub.ref(0, 121662);

const {:count 29} .str.56: ref;

axiom .str.56 == $sub.ref(0, 122715);

const {:count 29} .str.57: ref;

axiom .str.57 == $sub.ref(0, 123768);

const {:count 29} .str.58: ref;

axiom .str.58 == $sub.ref(0, 124821);

const {:count 29} .str.59: ref;

axiom .str.59 == $sub.ref(0, 125874);

const {:count 29} .str.60: ref;

axiom .str.60 == $sub.ref(0, 126927);

const {:count 29} .str.61: ref;

axiom .str.61 == $sub.ref(0, 127980);

const {:count 29} .str.62: ref;

axiom .str.62 == $sub.ref(0, 129033);

const {:count 29} .str.63: ref;

axiom .str.63 == $sub.ref(0, 130086);

const {:count 29} .str.64: ref;

axiom .str.64 == $sub.ref(0, 131139);

const {:count 29} .str.65: ref;

axiom .str.65 == $sub.ref(0, 132192);

const {:count 29} .str.66: ref;

axiom .str.66 == $sub.ref(0, 133245);

const {:count 29} .str.67: ref;

axiom .str.67 == $sub.ref(0, 134298);

const {:count 29} .str.68: ref;

axiom .str.68 == $sub.ref(0, 135351);

const {:count 29} .str.69: ref;

axiom .str.69 == $sub.ref(0, 136404);

const {:count 29} .str.70: ref;

axiom .str.70 == $sub.ref(0, 137457);

const {:count 29} .str.71: ref;

axiom .str.71 == $sub.ref(0, 138510);

const {:count 29} .str.72: ref;

axiom .str.72 == $sub.ref(0, 139563);

const {:count 29} .str.73: ref;

axiom .str.73 == $sub.ref(0, 140616);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 141669);

const {:count 29} .str.75: ref;

axiom .str.75 == $sub.ref(0, 142722);

const {:count 29} .str.76: ref;

axiom .str.76 == $sub.ref(0, 143775);

const {:count 29} .str.77: ref;

axiom .str.77 == $sub.ref(0, 144828);

const {:count 29} .str.78: ref;

axiom .str.78 == $sub.ref(0, 145881);

const {:count 29} .str.79: ref;

axiom .str.79 == $sub.ref(0, 146934);

const {:count 29} .str.80: ref;

axiom .str.80 == $sub.ref(0, 147987);

const {:count 29} .str.81: ref;

axiom .str.81 == $sub.ref(0, 149040);

const {:count 29} .str.82: ref;

axiom .str.82 == $sub.ref(0, 150093);

const {:count 29} .str.83: ref;

axiom .str.83 == $sub.ref(0, 151146);

const {:count 29} .str.84: ref;

axiom .str.84 == $sub.ref(0, 152199);

const {:count 29} .str.85: ref;

axiom .str.85 == $sub.ref(0, 153252);

const {:count 29} .str.86: ref;

axiom .str.86 == $sub.ref(0, 154305);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 155358);

const {:count 29} .str.88: ref;

axiom .str.88 == $sub.ref(0, 156411);

const {:count 29} .str.89: ref;

axiom .str.89 == $sub.ref(0, 157464);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 158514);

const {:count 33} .str.33: ref;

axiom .str.33 == $sub.ref(0, 159571);

const {:count 42} .str.156: ref;

axiom .str.156 == $sub.ref(0, 160637);

const {:count 17} .str.38: ref;

axiom .str.38 == $sub.ref(0, 161678);

const {:count 13} .str.152: ref;

axiom .str.152 == $sub.ref(0, 162715);

const {:count 31} .str.153: ref;

axiom .str.153 == $sub.ref(0, 163770);

const {:count 19} .str.154: ref;

axiom .str.154 == $sub.ref(0, 164813);

const {:count 31} .str.155: ref;

axiom .str.155 == $sub.ref(0, 165868);

const {:count 20} .str.147: ref;

axiom .str.147 == $sub.ref(0, 166912);

const {:count 32} .str.148: ref;

axiom .str.148 == $sub.ref(0, 167968);

const {:count 23} .str.112: ref;

axiom .str.112 == $sub.ref(0, 169015);

const {:count 8} .str.114: ref;

axiom .str.114 == $sub.ref(0, 170047);

const {:count 7} .str.115: ref;

axiom .str.115 == $sub.ref(0, 171078);

const {:count 4} .str.116: ref;

axiom .str.116 == $sub.ref(0, 172106);

const {:count 3} .str.117: ref;

axiom .str.117 == $sub.ref(0, 173133);

const {:count 55} .str.113: ref;

axiom .str.113 == $sub.ref(0, 174212);

const {:count 14} .str.134: ref;

axiom .str.134 == $sub.ref(0, 175250);

const {:count 23} .str.100: ref;

axiom .str.100 == $sub.ref(0, 176297);

const {:count 52} .str.101: ref;

axiom .str.101 == $sub.ref(0, 177373);

const {:count 51} .str.102: ref;

axiom .str.102 == $sub.ref(0, 178448);

const {:count 13} .str.111: ref;

axiom .str.111 == $sub.ref(0, 179485);

const {:count 54} .str.103: ref;

axiom .str.103 == $sub.ref(0, 180563);

const {:count 30} .str.104: ref;

axiom .str.104 == $sub.ref(0, 181617);

const {:count 34} .str.106: ref;

axiom .str.106 == $sub.ref(0, 182675);

const {:count 20} .str.107: ref;

axiom .str.107 == $sub.ref(0, 183719);

const {:count 297} .str.108: ref;

axiom .str.108 == $sub.ref(0, 185040);

const {:count 23} .str.29: ref;

axiom .str.29 == $sub.ref(0, 186087);

const {:count 19} .str.109: ref;

axiom .str.109 == $sub.ref(0, 187130);

const {:count 52} .str.110: ref;

axiom .str.110 == $sub.ref(0, 188206);

const {:count 27} .str.3: ref;

axiom .str.3 == $sub.ref(0, 189257);

const {:count 42} .str.4: ref;

axiom .str.4 == $sub.ref(0, 190323);

const {:count 24} .str.105: ref;

axiom .str.105 == $sub.ref(0, 191371);

const {:count 21} .str.135: ref;

axiom .str.135 == $sub.ref(0, 192416);

const {:count 19} .str.30: ref;

axiom .str.30 == $sub.ref(0, 193459);

const {:count 45} .str.31: ref;

axiom .str.31 == $sub.ref(0, 194528);

const {:count 34} .str.146: ref;

axiom .str.146 == $sub.ref(0, 195586);

const {:count 42} .str.44: ref;

axiom .str.44 == $sub.ref(0, 196652);

const {:count 9} .str.45: ref;

axiom .str.45 == $sub.ref(0, 197685);

const {:count 36} .str.46: ref;

axiom .str.46 == $sub.ref(0, 198745);

const {:count 12} .str.47: ref;

axiom .str.47 == $sub.ref(0, 199781);

const {:count 16} .str.48: ref;

axiom .str.48 == $sub.ref(0, 200821);

const {:count 22} .str.137: ref;

axiom .str.137 == $sub.ref(0, 201867);

const {:count 45} .str.138: ref;

axiom .str.138 == $sub.ref(0, 202936);

const {:count 77} .str.139: ref;

axiom .str.139 == $sub.ref(0, 204037);

const {:count 7} .str.140: ref;

axiom .str.140 == $sub.ref(0, 205068);

const {:count 7} .str.141: ref;

axiom .str.141 == $sub.ref(0, 206099);

const {:count 7} .str.142: ref;

axiom .str.142 == $sub.ref(0, 207130);

const {:count 7} .str.143: ref;

axiom .str.143 == $sub.ref(0, 208161);

const {:count 7} .str.144: ref;

axiom .str.144 == $sub.ref(0, 209192);

const {:count 7} .str.145: ref;

axiom .str.145 == $sub.ref(0, 210223);

const {:count 50} .str.95: ref;

axiom .str.95 == $sub.ref(0, 211297);

const {:count 14} .str.96: ref;

axiom .str.96 == $sub.ref(0, 212335);

const {:count 14} .str.97: ref;

axiom .str.97 == $sub.ref(0, 213373);

const {:count 64} .str.98: ref;

axiom .str.98 == $sub.ref(0, 214461);

const {:count 24} .str.99: ref;

axiom .str.99 == $sub.ref(0, 215509);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 216541);

const {:count 3} .str.1.310: ref;

axiom .str.1.310 == $sub.ref(0, 217568);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 218606);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 219634);

const tda18271_lookup_thermometer: ref;

axiom tda18271_lookup_thermometer == $sub.ref(0, 220666);

procedure tda18271_lookup_thermometer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation tda18271_lookup_thermometer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i14: i32;
  var $i34: i32;
  var $i13: i32;
  var $i23: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i45: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, tda18271_thermometer);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, $i11);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $i13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p35);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 32);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i23);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref($i46, 3)), $mul.ref(1, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.4, $p48);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    call {:si_unique_call 2} {:cexpr "val"} boogie_si_record_i32($i50);
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i51 := $M.5;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} vslice_dummy_var_84 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str, .str.1, .str.2, $i23, $i45);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i23);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref($i40, 3)), $mul.ref(2, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.3, $p42);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    call {:si_unique_call 1} {:cexpr "val"} boogie_si_record_i32($i44);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb15;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i24, $i25, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i14, $i34 := tda18271_lookup_thermometer_loop_$bb4($p8, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i24, $i25, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i14, $i34);
    goto $bb4_last;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref($i16, 3)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i22 := $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i14, 1);
    call {:si_unique_call 0} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref($i25, 3)), $mul.ref(0, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.2, $p8);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 15);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i29, $i32);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb3;

  $bb10:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb10_dummy;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 221698);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const _tda_printk: ref;

axiom _tda_printk == $sub.ref(0, 222730);

procedure _tda_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} __builtinx_va_start($p7, $p3);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 12} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} llvm.va_end($p29);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 10} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;
}



procedure _tda_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __builtinx_va_start($p7, $p3);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 22} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} llvm.va_end($p29);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 20} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb7;
}



procedure _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __builtinx_va_start($p7, $p3);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 32} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} llvm.va_end($p29);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 28} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 30} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb11;
}



procedure _tda_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} __builtinx_va_start($p7, $p3);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 42} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} llvm.va_end($p29);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 38} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 40} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb15;
}



procedure _tda_printk.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref, p.6: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __builtinx_va_start($p7, $p3);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 52} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} llvm.va_end($p29);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 48} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 50} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb19;
}



procedure _tda_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} __builtinx_va_start($p7, $p3);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 62} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} llvm.va_end($p29);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 58} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 60} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb23;
}



procedure _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32, p.12: i32, p.13: i32, p.14: i32, p.15: i32, p.16: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} __builtinx_va_start($p7, $p3);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i11 == 1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 72} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} llvm.va_end($p29);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb25:
    assume $i11 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 68} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 70} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb27;
}



procedure _tda_printk.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref, p.6: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __builtinx_va_start($p7, $p3);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i11 == 1);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 82} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} llvm.va_end($p29);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb29:
    assume $i11 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 78} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 80} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb31;
}



procedure _tda_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} __builtinx_va_start($p7, $p3);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i11 == 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 92} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} llvm.va_end($p29);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb33:
    assume $i11 == 1;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 88} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 90} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb35;
}



procedure _tda_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __builtinx_va_start($p7, $p3);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i11 == 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 102} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} llvm.va_end($p29);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb37:
    assume $i11 == 1;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 100} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb39;
}



procedure _tda_printk.ref.ref.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} __builtinx_va_start($p7, $p3);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i11 == 1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 112} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} llvm.va_end($p29);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb41:
    assume $i11 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 108} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 110} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb43;
}



procedure _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} __builtinx_va_start($p7, $p3);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $p3);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p5);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i11 == 1);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i26 := printk.ref.ref.ref.ref(.str.43, $p1, $p2, $p4);
    call {:si_unique_call 122} {:cexpr "rtn"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} llvm.va_end($p29);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb45:
    assume $i11 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i15 := i2c_adapter_id($p14);
    call {:si_unique_call 118} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 77 else 83);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i24 := printk.ref.ref.ref.i32.i32.i32.ref(.str.42, $p1, $p2, $i15, $i19, $i23, $p4);
    call {:si_unique_call 120} {:cexpr "rtn"} boogie_si_record_i32($i24);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb47;
}



const __builtinx_va_start: ref;

axiom __builtinx_va_start == $sub.ref(0, 223762);

procedure __builtinx_va_start($p0: ref, $p1: ref);



const i2c_adapter_id: ref;

axiom i2c_adapter_id == $sub.ref(0, 224794);

procedure i2c_adapter_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_adapter_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(1320, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.7, $p1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 225826);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.va_end: ref;

axiom llvm.va_end == $sub.ref(0, 226858);

procedure llvm.va_end($p0: ref);



const tda18271_release: ref;

axiom tda18271_release == $sub.ref(0, 227890);

procedure tda18271_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.8, $M.78, assertsPassed;



implementation tda18271_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.8, $p1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_mutex_lock_42(tda18271_list_mutex);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv_mutex_unlock_43(tda18271_list_mutex);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p36, $0.ref);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.9, $p7);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p11, $i9);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.9, $p13);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.10, $p17);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.11, $p27);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.12, $p30);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_85 := printk.ref.ref.i32.i32(.str.146, $p28, $i25, $i32);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(40, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} list_del($p34);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} kfree($p35);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.10, $p22);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i24 := i2c_adapter_id($p23);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb7;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const tda18271_init: ref;

axiom tda18271_init == $sub.ref(0, 228922);

procedure tda18271_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.41, $M.2, $M.66, $M.67, $M.68, $M.69, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr, $M.39, $M.65, $M.70, $M.40, $M.71, $M.72, $M.42, $M.73, $M.74, $M.43, $M.44;



implementation tda18271_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i11: i32;
  var $p22: ref;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_mutex_lock_36($p4);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i5 := tda18271_set_standby_mode($p0, 0, 0, 0);
    call {:si_unique_call 141} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 142} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i12 := tda18271_ir_cal_init($p0);
    call {:si_unique_call 146} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 147} {:cexpr "__ret___0"} boogie_si_record_i32($i14);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i14, 0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_mutex_unlock_37($p22);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_88 := tda18271c2_rf_cal_init($p0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb6;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_87 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.134, .str.35, $i12, 876);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i11 := $i5;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_86 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.134, .str.35, $i5, 871);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const tda18271_sleep: ref;

axiom tda18271_sleep == $sub.ref(0, 229954);

procedure tda18271_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.6, $M.2, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_sleep($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} ldv_mutex_lock_38($p4);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i5 := tda18271_toggle_output($p0, 1);
    call {:si_unique_call 152} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} ldv_mutex_unlock_39($p6);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const tda18271_set_params: ref;

axiom tda18271_set_params == $sub.ref(0, 230986);

procedure tda18271_set_params($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.6, $CurrAddr, $M.41, $M.66, $M.67, $M.68, $M.69, $M.39, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.65, $M.42, $M.70, $M.71, $M.72, $M.43, $M.44, $M.73, $M.74;



implementation tda18271_set_params($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p27: ref;
  var $i30: i1;
  var $p31: ref;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $p35: ref;
  var $p32: ref;
  var $i26: i32;
  var $i17: i32;
  var $i37: i1;
  var $p38: ref;
  var $i40: i1;
  var $p41: ref;
  var $p43: ref;
  var $p42: ref;
  var $p39: ref;
  var $i28: i32;
  var $p29: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i61: i1;
  var $p62: ref;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i45: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(816, 1)), $mul.ref(64, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.13, $p2);
    call {:si_unique_call 154} {:cexpr "delsys"} boogie_si_record_i32($i3);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(816, 1)), $mul.ref(32, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.14, $p4);
    call {:si_unique_call 155} {:cexpr "bw"} boogie_si_record_i32($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(816, 1)), $mul.ref(4, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.15, $p6);
    call {:si_unique_call 156} {:cexpr "freq"} boogie_si_record_i32($i7);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p12, 1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i3, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i3, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 18);
    assume {:verifier.code 0} true;
    $i17 := $i5;
    assume {:branchcond $i16} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_89 := _tda_printk.ref.ref.ref.ref($p10, .str.12, .str.147, .str.148);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 22);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i37 := $ule.i32($i17, 6000000);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i37 == 1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i17, 7000000);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i40 == 1);
    $p43 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(84, 1));
    assume {:verifier.code 0} true;
    $p42 := $p43;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p39 := $p42;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i28, $p29 := $i17, $p39;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(680, 1)), $mul.ref(40, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.16, $p48);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i56 := tda18271_tune($p0, $p29, $i7, $i28);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 160} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 161} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i58, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p29, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.2, $p62);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(776, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p64, $i63);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(780, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p65, $i7);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(784, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p66, $i28);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i45 := $i56;
    goto $bb45;

  $bb52:
    assume $i61 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i59 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_90 := _tda_printk.ref.ref.ref.ref.i32.i32($p10, .str.26, .str.147, .str.35, $i56, 1024);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i51 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(680, 1)), $mul.ref(40, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.16, $p54);
    call {:si_unique_call 158} devirtbounce($p55, $p0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(78, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p42 := $p41;
    goto $bb43;

  $bb38:
    assume $i37 == 1;
    $p38 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(72, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p39 := $p38;
    goto $bb40;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i3, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $ule.i32($i5, 6000000);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i30 == 1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i33 := $ule.i32($i5, 7000000);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i33 == 1);
    $p36 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(66, 1));
    assume {:verifier.code 0} true;
    $p35 := $p36;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p32 := $p35;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i28, $p29 := $i5, $p32;
    goto $bb31;

  $bb35:
    assume $i33 == 1;
    $p34 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(60, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb37;

  $bb32:
    assume $i30 == 1;
    $p31 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(54, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb34;

  $bb4:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i3, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb17:
    assume $i20 == 1;
    $p27 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(48, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i28, $p29 := 6000000, $p27;
    goto $bb31;

  $bb15:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb11;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb11;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb26;

  $bb23:
    assume $i23 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i26 := 6000000;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i17 := $i26;
    goto $bb9;

  $bb21:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    $i26 := $i5;
    assume {:branchcond $i25} true;
    goto $bb28, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb29;
}



const tda18271_set_analog_params: ref;

axiom tda18271_set_analog_params == $sub.ref(0, 232018);

procedure tda18271_set_analog_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.6, $CurrAddr, $M.41, $M.66, $M.67, $M.68, $M.69, $M.39, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.65, $M.42, $M.70, $M.71, $M.72, $M.43, $M.44, $M.73, $M.74;



implementation tda18271_set_analog_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p71: ref;
  var $p69: ref;
  var $p70: ref;
  var $p62: ref;
  var $p63: ref;
  var $p55: ref;
  var $p56: ref;
  var $p48: ref;
  var $p49: ref;
  var $p41: ref;
  var $p42: ref;
  var $p34: ref;
  var $p35: ref;
  var $p27: ref;
  var $p28: ref;
  var $p20: ref;
  var $p21: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i81: i1;
  var $p82: ref;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.17, $p6);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.18, $p8);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i11 := (if $i10 == 1 then 1 else 1000);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i7, $i11);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 125);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 2);
    call {:si_unique_call 163} {:cexpr "freq"} boogie_si_record_i32($i14);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.18, $p16);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.19, $p22);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 46848);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.19, $p29);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 65539);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.19, $p36);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 786444);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.19, $p43);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 16);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.19, $p50);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 3277024);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.19, $p57);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 4194304);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.19, $p64);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 8388608);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    $p71 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(24, 1));
    assume {:verifier.code 0} true;
    $p69, $p70 := $p71, .str.166;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p62, $p63 := $p69, $p70;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p55, $p56 := $p62, $p63;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p48, $p49 := $p55, $p56;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p41, $p42 := $p48, $p49;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p34, $p35 := $p41, $p42;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p27, $p28 := $p34, $p35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p27, $p28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i72 := $M.5;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i76 := tda18271_tune($p0, $p20, $i14, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 166} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 167} {:cexpr "__ret"} boogie_si_record_i32($i78);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i78, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p20, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.2, $p82);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(776, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p84, $i83);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(780, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p85, $i14);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(784, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p86, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_92 := _tda_printk.ref.ref.ref.ref.i32.i32($p4, .str.26, .str.167, .str.35, $i76, 1080);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i74 == 1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_91 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.167, .str.168, $p21);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i67 == 1;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(36, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p69, $p70 := $p68, .str.165;
    goto $bb24;

  $bb19:
    assume $i60 == 1;
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(30, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p62, $p63 := $p61, .str.164;
    goto $bb21;

  $bb16:
    assume $i53 == 1;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(12, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p55, $p56 := $p54, .str.163;
    goto $bb18;

  $bb13:
    assume $i46 == 1;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p48, $p49 := $p47, .str.162;
    goto $bb15;

  $bb10:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(18, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p41, $p42 := $p40, .str.161;
    goto $bb12;

  $bb7:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(6, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p34, $p35 := $p33, .str.160;
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(42, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p26, .str.159;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p19, .str.120;
    goto $bb3;
}



const tda18271_set_config: ref;

axiom tda18271_set_config == $sub.ref(0, 233050);

procedure tda18271_set_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.41, $M.66, $M.67, $M.68, $M.69, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr, $M.39, $M.65, $M.70, $M.40, $M.71, $M.72, $M.42, $M.73, $M.74, $M.43, $M.44;



implementation tda18271_set_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_93 := tda18271_setup_configuration($p0, $p2);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i4 := tda18271_need_cal_on_startup($p2);
    call {:si_unique_call 171} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p2);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.20, $p9);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.20, $p13);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_95 := tda18271_update_std_map($p0, $p14);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_94 := tda18271_init($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const tda18271_get_frequency: ref;

axiom tda18271_get_frequency == $sub.ref(0, 234082);

procedure tda18271_get_frequency($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23;



implementation tda18271_get_frequency($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.21, $p2);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(780, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.22, $p5);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p1, $i6);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tda18271_get_bandwidth: ref;

axiom tda18271_get_bandwidth == $sub.ref(0, 235114);

procedure tda18271_get_bandwidth($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26;



implementation tda18271_get_bandwidth($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.24, $p2);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(784, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.25, $p5);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p1, $i6);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tda18271_get_if_frequency: ref;

axiom tda18271_get_if_frequency == $sub.ref(0, 236146);

procedure tda18271_get_if_frequency($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29;



implementation tda18271_get_if_frequency($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.27, $p2);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(776, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.28, $p5);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 1000);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p1, $i8);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tda18271_setup_configuration: ref;

axiom tda18271_setup_configuration == $sub.ref(0, 237178);

procedure tda18271_setup_configuration($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation tda18271_setup_configuration($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(96, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p10, $i9);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, $i15);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(112, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p22, $i21);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(108, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p28, $i27);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(104, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p34, $i33);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.34, $p31);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.33, $p25);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.32, $p19);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.31, $p13);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.30, $p7);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const tda18271_need_cal_on_startup: ref;

axiom tda18271_need_cal_on_startup == $sub.ref(0, 238210);

procedure tda18271_need_cal_on_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tda18271_need_cal_on_startup($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i5: i1;
  var $i11: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i13 := $M.35;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i5);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.36, $p7);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb5;
}



const tda18271_update_std_map: ref;

axiom tda18271_update_std_map == $sub.ref(0, 239242);

procedure tda18271_update_std_map($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $CurrAddr;



implementation tda18271_update_std_map($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i8;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $p76: ref;
  var $i77: i8;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $p100: ref;
  var $i101: i8;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i8;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $p113: ref;
  var $i114: i8;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $p119: ref;
  var $i120: i8;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $p143: ref;
  var $i144: i8;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $p149: ref;
  var $i150: i8;
  var $i151: i8;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $p156: ref;
  var $i157: i8;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $p162: ref;
  var $i163: i8;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $i183: i16;
  var $i184: i32;
  var $p186: ref;
  var $i187: i8;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $p192: ref;
  var $i193: i8;
  var $i194: i8;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $p199: ref;
  var $i200: i8;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $p205: ref;
  var $i206: i8;
  var $i207: i8;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p225: ref;
  var $i226: i16;
  var $i227: i32;
  var $p229: ref;
  var $i230: i8;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $p235: ref;
  var $i236: i8;
  var $i237: i8;
  var $i238: i8;
  var $i239: i32;
  var $i240: i32;
  var $p242: ref;
  var $i243: i8;
  var $i244: i8;
  var $i245: i32;
  var $i246: i32;
  var $p248: ref;
  var $i249: i8;
  var $i250: i8;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p268: ref;
  var $i269: i16;
  var $i270: i32;
  var $p272: ref;
  var $i273: i8;
  var $i274: i8;
  var $i275: i32;
  var $i276: i32;
  var $p278: ref;
  var $i279: i8;
  var $i280: i8;
  var $i281: i8;
  var $i282: i32;
  var $i283: i32;
  var $p285: ref;
  var $i286: i8;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $p291: ref;
  var $i292: i8;
  var $i293: i8;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i32;
  var $i299: i1;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p311: ref;
  var $i312: i16;
  var $i313: i32;
  var $p315: ref;
  var $i316: i8;
  var $i317: i8;
  var $i318: i32;
  var $i319: i32;
  var $p321: ref;
  var $i322: i8;
  var $i323: i8;
  var $i324: i8;
  var $i325: i32;
  var $i326: i32;
  var $p328: ref;
  var $i329: i8;
  var $i330: i8;
  var $i331: i32;
  var $i332: i32;
  var $p334: ref;
  var $i335: i8;
  var $i336: i8;
  var $i337: i32;
  var $i338: i32;
  var $i339: i1;
  var $i340: i32;
  var $i341: i32;
  var $i342: i1;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p354: ref;
  var $i355: i16;
  var $i356: i32;
  var $p358: ref;
  var $i359: i8;
  var $i360: i8;
  var $i361: i32;
  var $i362: i32;
  var $p364: ref;
  var $i365: i8;
  var $i366: i8;
  var $i367: i8;
  var $i368: i32;
  var $i369: i32;
  var $p371: ref;
  var $i372: i8;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $p377: ref;
  var $i378: i8;
  var $i379: i8;
  var $i380: i32;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i32;
  var $i385: i1;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p397: ref;
  var $i398: i16;
  var $i399: i32;
  var $p401: ref;
  var $i402: i8;
  var $i403: i8;
  var $i404: i32;
  var $i405: i32;
  var $p407: ref;
  var $i408: i8;
  var $i409: i8;
  var $i410: i8;
  var $i411: i32;
  var $i412: i32;
  var $p414: ref;
  var $i415: i8;
  var $i416: i8;
  var $i417: i32;
  var $i418: i32;
  var $p420: ref;
  var $i421: i8;
  var $i422: i8;
  var $i423: i32;
  var $i424: i32;
  var $i425: i1;
  var $i426: i32;
  var $i427: i32;
  var $i428: i1;
  var $i430: i1;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p440: ref;
  var $i441: i16;
  var $i442: i32;
  var $p444: ref;
  var $i445: i8;
  var $i446: i8;
  var $i447: i32;
  var $i448: i32;
  var $p450: ref;
  var $i451: i8;
  var $i452: i8;
  var $i453: i8;
  var $i454: i32;
  var $i455: i32;
  var $p457: ref;
  var $i458: i8;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $p463: ref;
  var $i464: i8;
  var $i465: i8;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i32;
  var $i471: i1;
  var $i473: i1;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $p480: ref;
  var $p481: ref;
  var $p483: ref;
  var $i484: i16;
  var $i485: i32;
  var $p487: ref;
  var $i488: i8;
  var $i489: i8;
  var $i490: i32;
  var $i491: i32;
  var $p493: ref;
  var $i494: i8;
  var $i495: i8;
  var $i496: i8;
  var $i497: i32;
  var $i498: i32;
  var $p500: ref;
  var $i501: i8;
  var $i502: i8;
  var $i503: i32;
  var $i504: i32;
  var $p506: ref;
  var $i507: i8;
  var $i508: i8;
  var $i509: i32;
  var $i510: i32;
  var $i511: i1;
  var $i512: i32;
  var $i513: i32;
  var $i514: i1;
  var $i516: i1;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p526: ref;
  var $i527: i16;
  var $i528: i32;
  var $p530: ref;
  var $i531: i8;
  var $i532: i8;
  var $i533: i32;
  var $i534: i32;
  var $p536: ref;
  var $i537: i8;
  var $i538: i8;
  var $i539: i8;
  var $i540: i32;
  var $i541: i32;
  var $p543: ref;
  var $i544: i8;
  var $i545: i8;
  var $i546: i32;
  var $i547: i32;
  var $p549: ref;
  var $i550: i8;
  var $i551: i8;
  var $i552: i32;
  var $i553: i32;
  var $i554: i1;
  var $i555: i32;
  var $i556: i32;
  var $i557: i1;
  var $i559: i1;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p569: ref;
  var $i570: i16;
  var $i571: i32;
  var $p573: ref;
  var $i574: i8;
  var $i575: i8;
  var $i576: i32;
  var $i577: i32;
  var $p579: ref;
  var $i580: i8;
  var $i581: i8;
  var $i582: i8;
  var $i583: i32;
  var $i584: i32;
  var $p586: ref;
  var $i587: i8;
  var $i588: i8;
  var $i589: i32;
  var $i590: i32;
  var $p592: ref;
  var $i593: i8;
  var $i594: i8;
  var $i595: i32;
  var $i596: i32;
  var $i597: i1;
  var $i598: i32;
  var $i599: i32;
  var $i600: i1;
  var $i602: i1;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $i8: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.2, $p10);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, 3);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i12, $i17);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i8($i21, 2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 7);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i18, $i24);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.2, $p27);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i28, 7);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i25, $i30);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.2, $p33);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, 127);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i31, $i36);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.2, $p53);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.2, $p57);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i58, 3);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i55, $i60);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.2, $p63);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i65 := $lshr.i8($i64, 2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i66 := $and.i8($i65, 7);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i61, $i67);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(3, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.2, $p70);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i71, 7);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i68, $i73);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1)), $mul.ref(4, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.2, $p76);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i78 := $and.i8($i77, 127);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i74, $i79);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i81 := $sgt.i32($i80, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.2, $p96);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.2, $p100);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i102 := $and.i8($i101, 3);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i98, $i103);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.2, $p106);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i108 := $lshr.i8($i107, 2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i109 := $and.i8($i108, 7);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i104, $i110);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(3, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.2, $p113);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i115 := $and.i8($i114, 7);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i111, $i116);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.2, $p119);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i121 := $and.i8($i120, 127);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i117, $i122);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i124 := $sgt.i32($i123, 0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.2, $p139);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(2, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.2, $p143);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i145 := $and.i8($i144, 3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i141, $i146);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(2, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.2, $p149);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i151 := $lshr.i8($i150, 2);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i152 := $and.i8($i151, 7);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i147, $i153);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(3, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.2, $p156);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i158 := $and.i8($i157, 7);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i154, $i159);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1)), $mul.ref(4, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.2, $p162);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i164 := $and.i8($i163, 127);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i160, $i165);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i167 := $sgt.i32($i166, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.2, $p182);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.2, $p186);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i188 := $and.i8($i187, 3);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i184, $i189);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(2, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.2, $p192);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i194 := $lshr.i8($i193, 2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i195 := $and.i8($i194, 7);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i190, $i196);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(3, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.2, $p199);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i201 := $and.i8($i200, 7);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i203 := $add.i32($i197, $i202);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1)), $mul.ref(4, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.2, $p205);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i207 := $and.i8($i206, 127);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i203, $i208);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i210 := $sgt.i32($i209, 0);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i226 := $load.i16($M.2, $p225);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i226);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(2, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.2, $p229);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i231 := $and.i8($i230, 3);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i227, $i232);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(2, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.2, $p235);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i237 := $lshr.i8($i236, 2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i238 := $and.i8($i237, 7);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i233, $i239);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(3, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.2, $p242);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i244 := $and.i8($i243, 7);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i240, $i245);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1)), $mul.ref(4, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.2, $p248);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i250 := $and.i8($i249, 127);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i246, $i251);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i253 := $sgt.i32($i252, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i269 := $load.i16($M.2, $p268);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i270 := $zext.i16.i32($i269);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.2, $p272);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i274 := $and.i8($i273, 3);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i276 := $add.i32($i270, $i275);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(2, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.2, $p278);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i280 := $lshr.i8($i279, 2);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i281 := $and.i8($i280, 7);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i276, $i282);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(3, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.2, $p285);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i287 := $and.i8($i286, 7);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i289 := $add.i32($i283, $i288);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1)), $mul.ref(4, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i292 := $load.i8($M.2, $p291);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i293 := $and.i8($i292, 127);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i289, $i294);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i296 := $sgt.i32($i295, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i312 := $load.i16($M.2, $p311);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i312);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(2, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.2, $p315);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i317 := $and.i8($i316, 3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i313, $i318);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(2, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i322 := $load.i8($M.2, $p321);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i323 := $lshr.i8($i322, 2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i324 := $and.i8($i323, 7);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i326 := $add.i32($i319, $i325);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(3, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.2, $p328);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i330 := $and.i8($i329, 7);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i330);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i332 := $add.i32($i326, $i331);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1)), $mul.ref(4, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.2, $p334);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i336 := $and.i8($i335, 127);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i336);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i338 := $add.i32($i332, $i337);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i339 := $sgt.i32($i338, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i355 := $load.i16($M.2, $p354);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i356 := $zext.i16.i32($i355);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.2, $p358);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i360 := $and.i8($i359, 3);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i361 := $zext.i8.i32($i360);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i362 := $add.i32($i356, $i361);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.2, $p364);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i366 := $lshr.i8($i365, 2);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i367 := $and.i8($i366, 7);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i32($i367);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i369 := $add.i32($i362, $i368);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(3, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i372 := $load.i8($M.2, $p371);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i373 := $and.i8($i372, 7);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i375 := $add.i32($i369, $i374);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1)), $mul.ref(4, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.2, $p377);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i379 := $and.i8($i378, 127);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i380 := $zext.i8.i32($i379);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i381 := $add.i32($i375, $i380);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i382 := $sgt.i32($i381, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(0, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i398 := $load.i16($M.2, $p397);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i399 := $zext.i16.i32($i398);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(2, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.2, $p401);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i403 := $and.i8($i402, 3);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i403);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i405 := $add.i32($i399, $i404);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(2, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i408 := $load.i8($M.2, $p407);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i409 := $lshr.i8($i408, 2);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i410 := $and.i8($i409, 7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i412 := $add.i32($i405, $i411);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(3, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i415 := $load.i8($M.2, $p414);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i416 := $and.i8($i415, 7);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i418 := $add.i32($i412, $i417);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1)), $mul.ref(4, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.2, $p420);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i422 := $and.i8($i421, 127);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i423 := $zext.i8.i32($i422);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i424 := $add.i32($i418, $i423);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i425 := $sgt.i32($i424, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(0, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i441 := $load.i16($M.2, $p440);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i442 := $zext.i16.i32($i441);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(2, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.2, $p444);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i446 := $and.i8($i445, 3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i447 := $zext.i8.i32($i446);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i448 := $add.i32($i442, $i447);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(2, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i451 := $load.i8($M.2, $p450);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i452 := $lshr.i8($i451, 2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i453 := $and.i8($i452, 7);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i455 := $add.i32($i448, $i454);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(3, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i458 := $load.i8($M.2, $p457);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i459 := $and.i8($i458, 7);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i461 := $add.i32($i455, $i460);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1)), $mul.ref(4, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.2, $p463);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i465 := $and.i8($i464, 127);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i466 := $zext.i8.i32($i465);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i467 := $add.i32($i461, $i466);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i468 := $sgt.i32($i467, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(0, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i484 := $load.i16($M.2, $p483);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i485 := $zext.i16.i32($i484);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(2, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i488 := $load.i8($M.2, $p487);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i489 := $and.i8($i488, 3);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i490 := $zext.i8.i32($i489);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i491 := $add.i32($i485, $i490);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(2, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i494 := $load.i8($M.2, $p493);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i495 := $lshr.i8($i494, 2);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i496 := $and.i8($i495, 7);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i497 := $zext.i8.i32($i496);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i491, $i497);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(3, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.2, $p500);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i502 := $and.i8($i501, 7);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i503 := $zext.i8.i32($i502);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i504 := $add.i32($i498, $i503);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1)), $mul.ref(4, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.2, $p506);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i508 := $and.i8($i507, 127);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i32($i508);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i510 := $add.i32($i504, $i509);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i511 := $sgt.i32($i510, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i527 := $load.i16($M.2, $p526);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i528 := $zext.i16.i32($i527);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(2, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.2, $p530);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i532 := $and.i8($i531, 3);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i533 := $zext.i8.i32($i532);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i534 := $add.i32($i528, $i533);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(2, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.2, $p536);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i538 := $lshr.i8($i537, 2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i539 := $and.i8($i538, 7);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i540 := $zext.i8.i32($i539);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i541 := $add.i32($i534, $i540);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(3, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.2, $p543);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i545 := $and.i8($i544, 7);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i547 := $add.i32($i541, $i546);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1)), $mul.ref(4, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.2, $p549);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i551 := $and.i8($i550, 127);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i552 := $zext.i8.i32($i551);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i553 := $add.i32($i547, $i552);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i554 := $sgt.i32($i553, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(0, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i570 := $load.i16($M.2, $p569);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i571 := $zext.i16.i32($i570);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(2, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i574 := $load.i8($M.2, $p573);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i575 := $and.i8($i574, 3);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i576 := $zext.i8.i32($i575);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i577 := $add.i32($i571, $i576);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(2, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i580 := $load.i8($M.2, $p579);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i581 := $lshr.i8($i580, 2);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i582 := $and.i8($i581, 7);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i583 := $zext.i8.i32($i582);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i584 := $add.i32($i577, $i583);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(3, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i587 := $load.i8($M.2, $p586);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i588 := $and.i8($i587, 7);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i589 := $zext.i8.i32($i588);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i590 := $add.i32($i584, $i589);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1)), $mul.ref(4, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.2, $p592);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i594 := $and.i8($i593, 127);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i595 := $zext.i8.i32($i594);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i596 := $add.i32($i590, $i595);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i597 := $sgt.i32($i596, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb122:
    assume $i597 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i598 := $M.5;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i599 := $and.i32($i598, 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i600 := $ne.i32($i599, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i600} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i602 := $ugt.i64(4, 63);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i602 == 1);
    $p607 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(84, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p608 := $bitcast.ref.ref($p607);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p610 := $bitcast.ref.ref($p609);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.2;
    cmdloc_dummy_var_82 := $M.2;
    call {:si_unique_call 215} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p608, $p610, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_83;
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb127:
    assume $i602 == 1;
    $p603 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(84, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p603);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(84, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p606 := $bitcast.ref.ref($p605);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.2;
    cmdloc_dummy_var_79 := $M.2;
    call {:si_unique_call 214} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p604, $p606, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_80;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i600 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_109 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.133);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb113:
    assume $i554 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i555 := $M.5;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i556 := $and.i32($i555, 1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i557 := $ne.i32($i556, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i557 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i559 := $ugt.i64(4, 63);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i559 == 1);
    $p564 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(72, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p565 := $bitcast.ref.ref($p564);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p567 := $bitcast.ref.ref($p566);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.2;
    cmdloc_dummy_var_76 := $M.2;
    call {:si_unique_call 212} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p565, $p567, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_77;
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i559 == 1;
    $p560 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(72, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p561 := $bitcast.ref.ref($p560);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(72, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p563 := $bitcast.ref.ref($p562);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.2;
    cmdloc_dummy_var_73 := $M.2;
    call {:si_unique_call 211} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p561, $p563, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_74;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume $i557 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_108 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.132);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb104:
    assume $i511 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i512 := $M.5;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i513 := $and.i32($i512, 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i514 := $ne.i32($i513, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i516 := $ugt.i64(4, 63);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i516} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i516 == 1);
    $p521 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(66, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p522 := $bitcast.ref.ref($p521);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p524 := $bitcast.ref.ref($p523);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.2;
    cmdloc_dummy_var_70 := $M.2;
    call {:si_unique_call 209} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p522, $p524, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_71;
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb109:
    assume $i516 == 1;
    $p517 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(66, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p517);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(66, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p520 := $bitcast.ref.ref($p519);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.2;
    cmdloc_dummy_var_67 := $M.2;
    call {:si_unique_call 208} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p518, $p520, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_68;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb106:
    assume $i514 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_107 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.131);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb95:
    assume $i468 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i469 := $M.5;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i470 := $and.i32($i469, 1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i471 := $ne.i32($i470, 0);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i473 := $ugt.i64(4, 63);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i473 == 1);
    $p478 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(60, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p479 := $bitcast.ref.ref($p478);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p481 := $bitcast.ref.ref($p480);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.2;
    cmdloc_dummy_var_64 := $M.2;
    call {:si_unique_call 206} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p479, $p481, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_65;
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i473 == 1;
    $p474 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(60, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p475 := $bitcast.ref.ref($p474);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(60, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p477 := $bitcast.ref.ref($p476);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.2;
    cmdloc_dummy_var_61 := $M.2;
    call {:si_unique_call 205} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p475, $p477, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_62;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i471 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_106 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.130);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb86:
    assume $i425 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i426 := $M.5;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i427 := $and.i32($i426, 1);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i428 := $ne.i32($i427, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i430 := $ugt.i64(4, 63);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i430 == 1);
    $p435 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(54, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p436 := $bitcast.ref.ref($p435);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p438 := $bitcast.ref.ref($p437);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.2;
    cmdloc_dummy_var_58 := $M.2;
    call {:si_unique_call 203} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p436, $p438, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_59;
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i430 == 1;
    $p431 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(54, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p431);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(54, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p434 := $bitcast.ref.ref($p433);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.2;
    cmdloc_dummy_var_55 := $M.2;
    call {:si_unique_call 202} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p432, $p434, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_56;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i428 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_105 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.129);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb77:
    assume $i382 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i383 := $M.5;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i384 := $and.i32($i383, 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i385 := $ne.i32($i384, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i387 := $ugt.i64(4, 63);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i387 == 1);
    $p392 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(48, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.2;
    cmdloc_dummy_var_52 := $M.2;
    call {:si_unique_call 200} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p393, $p395, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_53;
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i387 == 1;
    $p388 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(48, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(48, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.2;
    cmdloc_dummy_var_49 := $M.2;
    call {:si_unique_call 199} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p389, $p391, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_50;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i385 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_104 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.128);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb68:
    assume $i339 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i340 := $M.5;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i341 := $and.i32($i340, 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i344 := $ugt.i64(4, 63);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i344 == 1);
    $p349 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(42, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p352 := $bitcast.ref.ref($p351);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.2;
    cmdloc_dummy_var_46 := $M.2;
    call {:si_unique_call 197} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p350, $p352, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_47;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i344 == 1;
    $p345 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(42, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(42, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p348 := $bitcast.ref.ref($p347);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.2;
    cmdloc_dummy_var_43 := $M.2;
    call {:si_unique_call 196} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p346, $p348, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_44;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i342 == 1;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_103 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.127);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb59:
    assume $i296 == 1;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i297 := $M.5;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, 1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i301 := $ugt.i64(4, 63);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i301 == 1);
    $p306 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(36, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p307 := $bitcast.ref.ref($p306);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p308);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.2;
    cmdloc_dummy_var_40 := $M.2;
    call {:si_unique_call 194} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p307, $p309, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_41;
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i301 == 1;
    $p302 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(36, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(36, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.2;
    cmdloc_dummy_var_37 := $M.2;
    call {:si_unique_call 193} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p303, $p305, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_38;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i299 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_102 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.126);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb50:
    assume $i253 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i254 := $M.5;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i258 := $ugt.i64(4, 63);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i258 == 1);
    $p263 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(30, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p266 := $bitcast.ref.ref($p265);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.2;
    cmdloc_dummy_var_34 := $M.2;
    call {:si_unique_call 191} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p264, $p266, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i258 == 1;
    $p259 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(30, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(30, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.2;
    cmdloc_dummy_var_31 := $M.2;
    call {:si_unique_call 190} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p260, $p262, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_32;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i256 == 1;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_101 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.125);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb41:
    assume $i210 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i211 := $M.5;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i212 := $and.i32($i211, 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i213 := $ne.i32($i212, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i215 := $ugt.i64(4, 63);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i215 == 1);
    $p220 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.2;
    cmdloc_dummy_var_28 := $M.2;
    call {:si_unique_call 188} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p221, $p223, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_29;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i215 == 1;
    $p216 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.2;
    cmdloc_dummy_var_25 := $M.2;
    call {:si_unique_call 187} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p217, $p219, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_26;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i213 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_100 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.124);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32:
    assume $i167 == 1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i168 := $M.5;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i172 := $ugt.i64(4, 63);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i172 == 1);
    $p177 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(18, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.2;
    cmdloc_dummy_var_22 := $M.2;
    call {:si_unique_call 185} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p178, $p180, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_23;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i172 == 1;
    $p173 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(18, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.2;
    cmdloc_dummy_var_19 := $M.2;
    call {:si_unique_call 184} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p174, $p176, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_20;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i170 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_99 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.123);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i124 == 1;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i125 := $M.5;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i129 := $ugt.i64(4, 63);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i129 == 1);
    $p134 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(12, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.2;
    cmdloc_dummy_var_16 := $M.2;
    call {:si_unique_call 182} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p135, $p137, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_17;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i129 == 1;
    $p130 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(12, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.2;
    cmdloc_dummy_var_13 := $M.2;
    call {:si_unique_call 181} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p131, $p133, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_14;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i127 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} vslice_dummy_var_98 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.122);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i81 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i82 := $M.5;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i64(4, 63);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i86 == 1);
    $p91 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(6, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.2;
    cmdloc_dummy_var_10 := $M.2;
    call {:si_unique_call 179} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p92, $p94, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i86 == 1;
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(6, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(6, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.2;
    cmdloc_dummy_var_7 := $M.2;
    call {:si_unique_call 178} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p88, $p90, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_8;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i84 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_97 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.121);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i39 := $M.5;
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i43 := $ugt.i64(4, 63);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    cmdloc_dummy_var_4 := $M.2;
    call {:si_unique_call 176} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p49, $p51, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i43 == 1;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 175} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p45, $p47, 4, $zext.i32.i64(2), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vslice_dummy_var_96 := _tda_printk.ref.ref.ref.ref.ref($p4, .str, .str.118, .str.119, .str.120);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 240274);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const tda18271_tune: ref;

axiom tda18271_tune == $sub.ref(0, 241306);

procedure tda18271_tune($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.41, $M.2, $M.66, $M.67, $M.68, $M.69, $M.39, $CurrAddr, assertsPassed, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.65, $M.42, $M.70, $M.71, $M.72, $M.43, $M.44, $M.73, $M.74;



implementation tda18271_tune($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i45: i32;
  var $p46: ref;
  var $i36: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} {:cexpr "tda18271_tune:arg:freq"} boogie_si_record_i32($i2);
    call {:si_unique_call 217} {:cexpr "tda18271_tune:arg:bw"} boogie_si_record_i32($i3);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i23 := tda18271_agc($p0);
    call {:si_unique_call 220} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 221} {:cexpr "__ret"} boogie_si_record_i32($i25);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i25, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i30 := tda18271_init($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 225} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 226} {:cexpr "__ret___0"} boogie_si_record_i32($i32);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i32, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv_mutex_lock_40($p37);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i45 := tda18271_channel_configuration($p0, $p1, $i2, $i3);
    call {:si_unique_call 232} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(608, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_mutex_unlock_41($p46);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i36 := $i45;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_114 := tda18271c2_rf_tracking_filters_correction($p0, $i2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_115 := tda18271c1_rf_tracking_filter_calibration($p0, $i2, $i3);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i36 := $i30;
    goto $bb15;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_113 := _tda_printk.ref.ref.ref.ref.i32.i32($p6, .str.26, .str.149, .str.35, $i30, 949);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_112 := _tda_printk.ref.ref.ref.ref($p6, .str.12, .str.149, .str.151);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_111 := _tda_printk.ref.ref.ref.ref.i32.i32($p6, .str.26, .str.149, .str.35, $i23, 945);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.2, $p10);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 3);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i8($i18, 2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, 7);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} vslice_dummy_var_110 := _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32($p6, .str, .str.149, .str.150, $i2, $i12, $i3, $i16, $i21);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_agc: ref;

axiom tda18271_agc == $sub.ref(0, 242338);

procedure tda18271_agc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation tda18271_agc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i18: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(112, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(112, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_118 := _tda_printk.ref.ref.ref.ref.i32($p3, .str.26, .str.152, .str.155, $i39);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i19 := $M.5;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(976, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.37, $p23);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i18 := $i37;
    goto $bb20;

  $bb24:
    assume $i26 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(976, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.37, $p27);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1656)), $mul.ref(24, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.38, $p32);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    call {:si_unique_call 236} $i36 := devirtbounce.1($p28, $p33, 0, 0, $i35);
    call {:si_unique_call 237} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb26;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_117 := _tda_printk.ref.ref.ref.ref($p3, .str, .str.152, .str.154);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb12:
    assume $i10 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i11 := $M.5;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 8);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb20;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i14 := $M.5;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_116 := _tda_printk.ref.ref.ref.ref($p3, .str, .str.152, .str.153);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const ldv_mutex_lock_40: ref;

axiom ldv_mutex_lock_40 == $sub.ref(0, 243370);

procedure ldv_mutex_lock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_mutex_lock_lock($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} mutex_lock($p0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const tda18271c1_rf_tracking_filter_calibration: ref;

axiom tda18271c1_rf_tracking_filter_calibration == $sub.ref(0, 244402);

procedure tda18271c1_rf_tracking_filter_calibration($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.2, $M.6, $M.42, $M.40, $CurrAddr, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44;



implementation tda18271c1_rf_tracking_filter_calibration($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i43: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i55: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i66: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i101: i32;
  var $i102: i1;
  var $i67: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p3, $i1);
    call {:si_unique_call 242} {:cexpr "tda18271c1_rf_tracking_filter_calibration:arg:bw"} boogie_si_record_i32($i2);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_119 := tda18271_calc_bp_filter($p0, $p3);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_120 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 7);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, $i15);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 96);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p22, $i21);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_121 := tda18271_write_regs($p0, 19, 1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p8, $mul.ref(22, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p24, 96);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_122 := tda18271_write_regs($p0, 22, 1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p8, $mul.ref(29, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p26, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_123 := tda18271_write_regs($p0, 29, 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p8, $mul.ref(35, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $sub.i8(0, 52));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_124 := tda18271_write_regs($p0, 35, 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 3);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p35, $i34);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p36);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_125 := tda18271_calc_cal_pll($p0, $i43);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i49, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i55 := $i43;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_126 := tda18271_calc_main_pll($p0, $i55);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i61 := tda18271_write_regs($p0, 5, 11);
    call {:si_unique_call 256} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 257} {:cexpr "__ret"} boogie_si_record_i32($i63);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i63, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} msleep(5);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_128 := tda18271_calc_km($p0, $p3);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} vslice_dummy_var_129 := tda18271_write_regs($p0, 28, 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_130 := tda18271_calc_rf_band($p0, $p3);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_131 := tda18271_calc_gain_taper($p0, $p3);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} vslice_dummy_var_132 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_133 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_134 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_135 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.2, $p76);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 7);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p81, $i80);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.2, $p82);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, 64);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p87, $i86);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_136 := tda18271_write_regs($p0, 19, 1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p8, $mul.ref(22, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p89, 64);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_137 := tda18271_write_regs($p0, 22, 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} msleep(10);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p8, $mul.ref(35, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p91, $sub.i8(0, 20));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_138 := tda18271_write_regs($p0, 35, 1);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} msleep(60);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.2, $p93);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 252);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p98, $i97);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_139 := tda18271_write_regs($p0, 6, 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_140 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i101 := tda18271_calc_rf_cal($p0, $p3);
    call {:si_unique_call 276} {:cexpr "tmp"} boogie_si_record_i32($i101);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb28:
    assume $i102 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_141 := tda18271_write_regs($p0, 29, 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i67 := $i61;
    goto $bb26;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_127 := _tda_printk.ref.ref.ref.ref.i32.i32($p6, .str.26, .str.156, .str.35, $i61, 799);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i56 := $udiv.i32($i2, 2);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.39, $p3);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i56, $i57);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1000000);
    call {:si_unique_call 252} {:cexpr "N"} boogie_si_record_i32($i59);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i55 := $i59;
    goto $bb19;

  $bb12:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i49, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb16;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.39, $p3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 250000);
    call {:si_unique_call 253} {:cexpr "N"} boogie_si_record_i32($i54);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb19;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i44 := $udiv.i32($i2, 2);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.39, $p3);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i44, $i45);
    call {:si_unique_call 249} {:cexpr "N"} boogie_si_record_i32($i46);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i43 := $i46;
    goto $bb9;

  $bb2:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb6;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.39, $p3);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i41, 1250000);
    call {:si_unique_call 250} {:cexpr "N"} boogie_si_record_i32($i42);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb9;
}



const tda18271c2_rf_tracking_filters_correction: ref;

axiom tda18271c2_rf_tracking_filters_correction == $sub.ref(0, 245434);

procedure tda18271c2_rf_tracking_filters_correction($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.2, $M.40, $M.65, $CurrAddr, $M.45, $M.46, $M.47, $M.48, $M.49, $M.66, $M.67, $M.68, $M.69;



implementation tda18271c2_rf_tracking_filters_correction($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i18: i32;
  var $i19: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i28: i1;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i62: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i61: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $i102: i32;
  var $i17: i32;
  var $i29: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p2, $i1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(220, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i11 := tda18271_set_standby_mode($p0, 0, 0, 0);
    call {:si_unique_call 281} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 282} {:cexpr "__ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i13, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i18 := tda18271_read_thermometer($p0);
    call {:si_unique_call 285} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 286} {:cexpr "tm_current"} boogie_si_record_i8($i19);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_143 := tda18271_calc_rf_cal($p0, $p2);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p10, $mul.ref(29, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    call {:si_unique_call 288} {:cexpr "rf_tab"} boogie_si_record_i8($i22);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i23 := tda18271_lookup_rf_band($p0, $p2, $0.ref);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 291} {:cexpr "__ret___0"} boogie_si_record_i32($i25);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i25, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i23);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref($i30, 48)), $mul.ref(28, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i34 == 1);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.39, $p2);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i36 := $udiv.i32($i35, 1000);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i23);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref($i37, 48)), $mul.ref(24, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i36, $i40);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i23);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref($i62, 48)), $mul.ref(40, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.2, $p64);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.39, $p2);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i67 := $udiv.i32($i66, 1000);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i23);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref($i68, 48)), $mul.ref(24, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i67, $i71);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i73 := $mul.i32($i65, $i72);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i23);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref($i74, 48)), $mul.ref(44, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i73, $i77);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i22);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i78, $i79);
    call {:si_unique_call 294} {:cexpr "approx"} boogie_si_record_i32($i80);
    assume {:verifier.code 0} true;
    $i61 := $i80;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i61, 0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i61;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 255);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_145 := tda18271_lookup_map($p0, 4, $p2, $p3);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.40, $p3);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i19);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(117, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.2, $p89);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i88, $i91);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i93 := $mul.i32($i87, $i92);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i94 := $sdiv.i32($i93, 1000);
    call {:si_unique_call 296} {:cexpr "rfcal_comp"} boogie_si_record_i32($i94);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i84);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i94);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i96, $i98);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p10, $mul.ref(29, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p101, $i100);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i102 := tda18271_write_regs($p0, 29, 1);
    call {:si_unique_call 298} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i17 := $i102;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i29 := $i17;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb24:
    assume $i83 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i84 := 255;
    goto $bb26;

  $bb21:
    assume $i81 == 1;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i23);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref($i42, 48)), $mul.ref(32, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.2, $p44);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.39, $p2);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i47 := $udiv.i32($i46, 1000);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i23);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref($i48, 48)), $mul.ref(20, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i47, $i51);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i45, $i52);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i23);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref($i54, 48)), $mul.ref(36, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i53, $i57);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i22);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i58, $i59);
    call {:si_unique_call 293} {:cexpr "approx"} boogie_si_record_i32($i60);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_144 := _tda_printk.ref.ref.ref.ref.i32.i32($p6, .str.26, .str.157, .str.35, $i23, 317);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i17 := $i11;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_142 := _tda_printk.ref.ref.ref.ref.i32.i32($p6, .str.26, .str.157, .str.35, $i11, 305);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_channel_configuration: ref;

axiom tda18271_channel_configuration == $sub.ref(0, 246466);

procedure tda18271_channel_configuration($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.2, $M.6, $M.42, $CurrAddr, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.43, $M.44;



implementation tda18271_channel_configuration($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $p59: ref;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i105: i1;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i8;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $p118: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i8;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i8;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i32;
  var $i177: i8;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $i185: i1;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i8;
  var $p201: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i8;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i106: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p4, $i2);
    call {:si_unique_call 300} {:cexpr "tda18271_channel_configuration:arg:bw"} boogie_si_record_i32($i3);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 224);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p15, $i14);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, 3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i8($i27, 2);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i28, 7);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i30 := $sext.i8.i32($i29);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i25, $i30);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i18, $i31);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p34, $i33);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.2, $p44);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 252);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p49, $i48);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.2, $p50);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 227);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p55, $i54);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i57);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.2, $p59);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i60, 7);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 2);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i58, $i65);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p68, $i67);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.2, $p69);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 127);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p74, $i73);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.2, $p75);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i77 := $sext.i8.i32($i76);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.2, $p78);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i8($i79, 5);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i81 := $and.i8($i80, 1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 7);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i85 := $sext.i8.i32($i84);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i77, $i85);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p9, $mul.ref(6, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p88, $i87);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p9, $mul.ref(37, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p89, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p9, $mul.ref(37, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.2, $p90);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.2, $p93);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i95 := $and.i8($i94, 127);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i92, $i96);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p9, $mul.ref(37, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p99, $i98);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i100 := tda18271_write_regs($p0, 37, 1);
    call {:si_unique_call 302} {:cexpr "ret"} boogie_si_record_i32($i100);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    call {:si_unique_call 303} {:cexpr "__ret"} boogie_si_record_i32($i102);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i102, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p9, $mul.ref(3, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.2, $p107);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i109, 64);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p9, $mul.ref(3, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p112, $i111);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p9, $mul.ref(1, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.2, $p113);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 239);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p9, $mul.ref(1, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p118, $i117);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_147 := tda18271_calc_ir_measure($p0, $p4);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} vslice_dummy_var_148 := tda18271_calc_bp_filter($p0, $p4);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_149 := tda18271_calc_rf_band($p0, $p4);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_150 := tda18271_calc_gain_taper($p0, $p4);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.2, $p123);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i124, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.2, $p140);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 253);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i8($i143);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p145, $i144);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.2, $p146);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 254);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i8($i149);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p151, $i150);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i152 := tda18271_write_regs($p0, 16, 1);
    call {:si_unique_call 310} {:cexpr "ret"} boogie_si_record_i32($i152);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i152, 0);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i154 := $zext.i1.i32($i153);
    call {:si_unique_call 311} {:cexpr "__ret___0"} boogie_si_record_i32($i154);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i154, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.2, $p158);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i161 := $mul.i32($i160, 1000);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.39, $p4);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i161, $i162);
    call {:si_unique_call 313} {:cexpr "N"} boogie_si_record_i32($i163);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.2, $p164);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i166 := $slt.i32($i165, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i165, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i180 := tda18271_write_regs($p0, 1, 7);
    call {:si_unique_call 322} {:cexpr "ret"} boogie_si_record_i32($i180);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i182 := $zext.i1.i32($i181);
    call {:si_unique_call 323} {:cexpr "__ret___1"} boogie_si_record_i32($i182);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i182, 0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_158 := charge_pump_source($p0, 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} msleep(1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_159 := charge_pump_source($p0, 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} msleep(20);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.2, $p188);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i209 := $i180;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i106 := $i209;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $r := $i106;
    return;

  $bb43:
    assume $i190 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p191, $mul.ref(2, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.2, $p192);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i195 == 1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.2, $p202);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i205 := $or.i32($i204, 4);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i8($i205);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p207, $i206);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i208 := tda18271_write_regs($p0, 5, 1);
    call {:si_unique_call 330} {:cexpr "ret"} boogie_si_record_i32($i208);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i209 := $i208;
    goto $bb48;

  $bb45:
    assume $i195 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.2, $p196);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i198, 251);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i32.i8($i199);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p201, $i200);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume $i185 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i106 := $i180;
    goto $bb9;

  $bb37:
    assume $i183 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_157 := _tda_printk.ref.ref.ref.ref.i32.i32($p7, .str.26, .str.158, .str.35, $i180, 224);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb30:
    assume $i167 == 1;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_152 := tda18271_calc_cal_pll($p0, $i163);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_153 := tda18271_write_regs($p0, 8, 4);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p9, $mul.ref(8, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.2, $p173);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 127);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i8($i176);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p9, $mul.ref(12, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p178, $i177);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} tda18271_set_if_notch($p0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_154 := tda18271_write_regs($p0, 12, 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i165, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb32;

  $bb33:
    assume $i168 == 1;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_155 := tda18271_calc_main_pll($p0, $i163);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} tda18271_set_if_notch($p0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_156 := tda18271_write_regs($p0, 12, 4);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb24:
    assume $i157 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i106 := $i152;
    goto $bb9;

  $bb21:
    assume $i155 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_151 := _tda_printk.ref.ref.ref.ref.i32.i32($p7, .str.26, .str.158, .str.35, $i152, 200);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i126 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.2, $p134);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 251);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p139, $i138);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i124, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb16;

  $bb17:
    assume $i127 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.2, $p128);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i130, 4);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p9, $mul.ref(16, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p133, $i132);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb7:
    assume $i105 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i106 := $i100;
    goto $bb9;

  $bb4:
    assume $i103 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_146 := _tda_printk.ref.ref.ref.ref.i32.i32($p7, .str.26, .str.158, .str.35, $i100, 159);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i37 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 251);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p9, $mul.ref(5, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p43, $i42);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_41: ref;

axiom ldv_mutex_unlock_41 == $sub.ref(0, 247498);

procedure ldv_mutex_unlock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ldv_mutex_unlock_lock($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} mutex_unlock($p0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_lock: ref;

axiom ldv_mutex_unlock_lock == $sub.ref(0, 248530);

procedure ldv_mutex_unlock_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i1 := $M.41;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 334} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 249562);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 250594);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} __VERIFIER_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const tda18271_write_regs: ref;

axiom tda18271_write_regs == $sub.ref(0, 251626);

procedure tda18271_write_regs($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $CurrAddr;



implementation tda18271_write_regs($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "tda18271_write_regs:arg:idx"} boogie_si_record_i32($i1);
    call {:si_unique_call 337} {:cexpr "tda18271_write_regs:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i3 := __tda18271_write_regs($p0, $i1, $i2, 1);
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tda18271_calc_ir_measure: ref;

axiom tda18271_calc_ir_measure == $sub.ref(0, 252658);

procedure tda18271_calc_ir_measure($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.40, $CurrAddr;



implementation tda18271_calc_ir_measure($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i8 := tda18271_lookup_map($p0, 8, $p1, $p2);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 343} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 248);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i18);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p2);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 7);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $i27);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_160 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str.26, .str.41, .str.35, $i8, 726);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_calc_bp_filter: ref;

axiom tda18271_calc_bp_filter == $sub.ref(0, 253690);

procedure tda18271_calc_bp_filter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.40, $CurrAddr;



implementation tda18271_calc_bp_filter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i8 := tda18271_lookup_map($p0, 5, $p1, $p2);
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 348} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 248);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i18);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 7);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $i27);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_161 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str.26, .str.37, .str.35, $i8, 658);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_calc_rf_band: ref;

axiom tda18271_calc_rf_band == $sub.ref(0, 254722);

procedure tda18271_calc_rf_band($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.40, $CurrAddr;



implementation tda18271_calc_rf_band($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i8 := tda18271_lookup_map($p0, 6, $p1, $p2);
    call {:si_unique_call 352} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 353} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 31);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i18);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 5);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i22, $i27);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i29);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_162 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str.26, .str.39, .str.35, $i8, 692);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_calc_gain_taper: ref;

axiom tda18271_calc_gain_taper == $sub.ref(0, 255754);

procedure tda18271_calc_gain_taper($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.40, $CurrAddr;



implementation tda18271_calc_gain_taper($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i8 := tda18271_lookup_map($p0, 7, $p1, $p2);
    call {:si_unique_call 357} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 358} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 224);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i18);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p2);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 31);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p7, $mul.ref(4, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $i27);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_163 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str.26, .str.40, .str.35, $i8, 709);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_calc_main_pll: ref;

axiom tda18271_calc_main_pll == $sub.ref(0, 256786);

procedure tda18271_calc_main_pll($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $M.2, $M.43, $M.44, $CurrAddr;



implementation tda18271_calc_main_pll($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p2, $i1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i10 := tda18271_lookup_pll_map($p0, 0, $p2, $p4, $p3);
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 365} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i12, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.43, $p4);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 127);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p9, $mul.ref(12, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, $i19);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.44, $p3);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.42, $p2);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 1000);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i22, $i24);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 7);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i27 := $udiv.i32($i26, 125);
    call {:si_unique_call 367} {:cexpr "div"} boogie_si_record_i32($i27);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i27, 16);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 127);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p9, $mul.ref(13, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p33, $i32);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i32($i27, 8);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p9, $mul.ref(14, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p36, $i35);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i27);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p9, $mul.ref(15, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p38, $i37);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_164 := _tda_printk.ref.ref.ref.ref.i32.i32($p7, .str.26, .str.34, .str.35, $i10, 611);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_set_if_notch: ref;

axiom tda18271_set_if_notch == $sub.ref(0, 257818);

procedure tda18271_set_if_notch($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation tda18271_set_if_notch($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.2, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 128);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p22, $i21);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 127);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, $i15);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const tda18271_calc_cal_pll: ref;

axiom tda18271_calc_cal_pll == $sub.ref(0, 258850);

procedure tda18271_calc_cal_pll($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.6, $M.2, $M.43, $M.44, $CurrAddr;



implementation tda18271_calc_cal_pll($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p2, $i1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i10 := tda18271_lookup_pll_map($p0, 1, $p2, $p4, $p3);
    call {:si_unique_call 372} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 373} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i12, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.43, $p4);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p9, $mul.ref(8, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, $i16);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.44, $p3);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.42, $p2);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i20, 1000);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i19, $i21);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 7);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 125);
    call {:si_unique_call 375} {:cexpr "div"} boogie_si_record_i32($i24);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i24, 16);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 127);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p9, $mul.ref(9, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i29);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i24, 8);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p9, $mul.ref(10, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p33, $i32);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i24);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p9, $mul.ref(11, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p35, $i34);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_165 := _tda_printk.ref.ref.ref.ref.i32.i32($p7, .str.26, .str.36, .str.35, $i10, 634);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const charge_pump_source: ref;

axiom charge_pump_source == $sub.ref(0, 259882);

procedure charge_pump_source($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $CurrAddr;



implementation charge_pump_source($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "charge_pump_source:arg:force"} boogie_si_record_i32($i1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(92, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i9 := tda18271_charge_pump_source($p0, $i8, $i1);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 260914);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    return;
}



const tda18271_charge_pump_source: ref;

axiom tda18271_charge_pump_source == $sub.ref(0, 261946);

procedure tda18271_charge_pump_source($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $CurrAddr;



implementation tda18271_charge_pump_source($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "tda18271_charge_pump_source:arg:pll"} boogie_si_record_i32($i1);
    call {:si_unique_call 381} {:cexpr "tda18271_charge_pump_source:arg:force"} boogie_si_record_i32($i2);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i3 := __tda18271_charge_pump_source($p0, $i1, $i2, 1);
    call {:si_unique_call 383} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __tda18271_charge_pump_source: ref;

axiom __tda18271_charge_pump_source == $sub.ref(0, 262978);

procedure __tda18271_charge_pump_source($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $CurrAddr;



implementation __tda18271_charge_pump_source($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i64;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "__tda18271_charge_pump_source:arg:pll"} boogie_si_record_i32($i1);
    call {:si_unique_call 385} {:cexpr "__tda18271_charge_pump_source:arg:force"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 386} {:cexpr "__tda18271_charge_pump_source:arg:lock_i2c"} boogie_si_record_i1($i3);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i11 := (if $i10 == 1 then 22 else 19);
    call {:si_unique_call 387} {:cexpr "r_cp"} boogie_si_record_i32($i11);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p9, $mul.ref($i12, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 223);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i11);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p9, $mul.ref($i18, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i17);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i11);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p9, $mul.ref($i20, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i2, 1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 5);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i23, $i27);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i11);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p9, $mul.ref($i30, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p31, $i29);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i4);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i33 := __tda18271_write_regs($p0, $i11, 1, $i32);
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const __tda18271_write_regs: ref;

axiom __tda18271_write_regs == $sub.ref(0, 264010);

procedure __tda18271_write_regs($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $CurrAddr;



implementation __tda18271_write_regs($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i59: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $i96: i1;
  var $i98: i1;
  var $i99: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 392} {:cexpr "__tda18271_write_regs:arg:idx"} boogie_si_record_i32($i1);
    call {:si_unique_call 393} {:cexpr "__tda18271_write_regs:arg:len"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 394} {:cexpr "__tda18271_write_regs:arg:lock_i2c"} boogie_si_record_i1($i3);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i14);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.45 := $store.i16($M.45, $p16, $i15);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.46 := $store.i16($M.46, $p17, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p18, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, $p20, $p4);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i2, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i1, $i2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 40);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 398} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(108, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i41 := 39;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i6);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i2, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i48, $i49, $i50 := 1, $i1, $i41;
    assume {:branchcond $i47} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i82, $i83, $i84 := $i49, $i48, $i50;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1($i6);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i83, 1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i83, 1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i98 == 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $i99;
    return;

  $bb60:
    assume $i98 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i99 := $i83;
    goto $bb62;

  $bb57:
    assume $i96 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_168 := _tda_printk.ref.ref.ref.ref.i32.i32.i32($p9, .str.26, .str.91, .str.92, $i82, $i84, $i83);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i91 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.2, $p93);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} i2c_unlock_adapter($p94);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_167 := tda18271_i2c_gate_ctrl($p0, 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb31:
    assume $i47 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i51, $i52, $i53 := $i41, $i1, $i2;
    goto $bb34;

  $bb34:
    call $i54, $i55, $i56, $p57, $i58, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i59, $i69, $i70, $i71, $i72, $p73, $p75, $p76, $i77, $i78, $i79, $i80, $i81, $i85, $i86, $i87, $i51, $i52, $i53, $i88, $i89, $i90 := __tda18271_write_regs_loop_$bb34($p4, $p5, $p9, $p11, $i54, $i55, $i56, $p57, $i58, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i59, $i69, $i70, $i71, $i72, $p73, $p75, $p76, $i77, $i78, $i79, $i80, $i81, $i85, $i86, $i87, $i51, $i52, $i53, $i88, $i89, $i90);
    goto $bb34_last;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i51, $i53);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i51;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i52);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p57, $i56);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i58 := $sle.i32(1, $i55);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i55);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p73, $i72);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.2, $p75);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i77 := __i2c_transfer($p76, $p5, 1);
    call {:si_unique_call 404} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i79, $i80, $i81 := $i52, $i55, $i77;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i52, $i55);
    call {:si_unique_call 405} {:cexpr "idx"} boogie_si_record_i32($i85);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i53, $i55);
    call {:si_unique_call 406} {:cexpr "len"} boogie_si_record_i32($i86);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i88, $i89, $i90 := $i77, $i85, $i55;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i48, $i49, $i50 := $i88, $i89, $i90;
    goto $bb33;

  $bb51:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i51, $i52, $i53 := $i55, $i85, $i86;
    goto $bb51_dummy;

  $bb47:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i82, $i83, $i84 := $i79, $i81, $i80;
    goto $bb49;

  $bb39:
    assume $i58 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb42;

  $bb42:
    call $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i59 := __tda18271_write_regs_loop_$bb42($p4, $p11, $i55, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i59, $i52);
    goto $bb42_last;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i59);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p11, $mul.ref($i62, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.2, $p63);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i59);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref($i65, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p66, $i64);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i59, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i68 := $sle.i32($i67, $i55);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i68 == 1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb44:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i59 := $i67;
    goto $bb44_dummy;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb38;

  $bb28:
    assume $i42 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_166 := tda18271_i2c_gate_ctrl($p0, 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} i2c_lock_adapter($p46);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i41 := 16;
    goto $bb25;

  $bb12:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i33, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i41 := 8;
    goto $bb25;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i41 := 3;
    goto $bb25;

  $bb19:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb16;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 399} devirtbounce.2(0, .str.90, 240, 12);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call __tda18271_write_regs_loop_$bb6();
    goto $bb6_last;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  $bb51_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 265042);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 411} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tda18271_i2c_gate_ctrl: ref;

axiom tda18271_i2c_gate_ctrl == $sub.ref(0, 266074);

procedure tda18271_i2c_gate_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation tda18271_i2c_gate_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i13: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "tda18271_i2c_gate_ctrl:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(96, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(88, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.51, $p37);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i35 := $i45;
    goto $bb36;

  $bb37:
    assume $i40 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(360, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.51, $p42);
    call {:si_unique_call 416} $i44 := devirtbounce.3($p43, $p0, $i1);
    call {:si_unique_call 417} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb39;

  $bb26:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb30;

  $bb31:
    assume $i22 == 1;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(680, 1)), $mul.ref(56, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.50, $p25);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb36;

  $bb33:
    assume $i28 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(680, 1)), $mul.ref(56, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.50, $p31);
    call {:si_unique_call 414} $i33 := devirtbounce.3($p32, $p0, $i1);
    call {:si_unique_call 415} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb35;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i19 := 2;
    goto $bb22;

  $bb15:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb19;

  $bb20:
    assume $i18 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(96, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    call {:si_unique_call 413} {:cexpr "gate"} boogie_si_record_i32($i12);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const i2c_lock_adapter: ref;

axiom i2c_lock_adapter == $sub.ref(0, 267106);

procedure i2c_lock_adapter($p0: ref);
  free requires assertsPassed;



implementation i2c_lock_adapter($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    return;
}



const __i2c_transfer: ref;

axiom __i2c_transfer == $sub.ref(0, 268138);

procedure __i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} {:cexpr "__i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2c_unlock_adapter: ref;

axiom i2c_unlock_adapter == $sub.ref(0, 269170);

procedure i2c_unlock_adapter($p0: ref);
  free requires assertsPassed;



implementation i2c_unlock_adapter($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    return;
}



const tda18271_lookup_pll_map: ref;

axiom tda18271_lookup_pll_map == $sub.ref(0, 270202);

procedure tda18271_lookup_pll_map($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.43, $M.44, $CurrAddr;



implementation tda18271_lookup_pll_map($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p23: ref;
  var $p24: ref;
  var $i29: i64;
  var $i30: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i39: i32;
  var $i62: i32;
  var $i38: i32;
  var $i52: i32;
  var $i53: i32;
  var $i63: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i32: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "tda18271_lookup_pll_map:arg:map_type"} boogie_si_record_i32($i1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p23, $p24 := $0.ref, .str.11;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p23);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p23, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.54, $p33);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 1000);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.42, $p2);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32($i35, $i36);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i38 := 0;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i52, $i53 := $i38, 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i52);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p23, $mul.ref($i63, 8)), $mul.ref(4, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.55, $p65);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p3, $i66);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i52);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p23, $mul.ref($i67, 8)), $mul.ref(5, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.56, $p69);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p4, $i70);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i71 := $M.5;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 2);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i32 := $i53;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.43, $p3);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.44, $p4);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_171 := _tda_printk.ref.ref.ref.ref.i32.ref.i32.i32($p7, .str, .str.13, .str.16, $i52, $p24, $i75, $i77);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb22;

  $bb22:
    call $i40, $i41, $p43, $i44, $i45, $i46, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i39, $i62 := tda18271_lookup_pll_map_loop_$bb22($p2, $p23, $i40, $i41, $p43, $i44, $i45, $i46, $i54, $i55, $p57, $i58, $i59, $i60, $i61, $i39, $i62);
    goto $bb22_last;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p23, $mul.ref($i41, 8)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.54, $p43);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i46 := $i39;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i39, 1);
    call {:si_unique_call 427} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p23, $mul.ref($i55, 8)), $mul.ref(0, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.54, $p57);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 1000);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.42, $p2);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i59, $i60);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i62 := $i54;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i38 := $i62;
    goto $bb21;

  $bb31:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i54;
    goto $bb31_dummy;

  $bb24:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i47 := $M.5;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i52, $i53 := $i46, $sub.i32(0, 34);
    goto $bb29;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.42, $p2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_170 := _tda_printk.ref.ref.ref.ref.ref.i32($p7, .str, .str.13, .str.15, $p24, $i50);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_169 := _tda_printk.ref.ref.ref.ref.ref($p7, .str.12, .str.13, .str.14, $p24);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb17;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.53, $p27);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p28, .str.10;
    goto $bb13;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.52, $p21);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p22, .str.9;
    goto $bb13;

  $bb1:
    assume $i15 == 1;
    call {:si_unique_call 424} devirtbounce.2(0, .str.8, 1117, 12);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tda18271_lookup_pll_map_loop_$bb3();
    goto $bb3_last;

  $bb31_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tda18271_lookup_map: ref;

axiom tda18271_lookup_map == $sub.ref(0, 271234);

procedure tda18271_lookup_map($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $CurrAddr;



implementation tda18271_lookup_map($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p27: ref;
  var $p28: ref;
  var $i53: i64;
  var $i54: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i64: i32;
  var $i65: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i78: i32;
  var $i79: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i63: i32;
  var $i86: i32;
  var $i62: i32;
  var $i76: i32;
  var $i77: i32;
  var $i87: i64;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i8;
  var $i95: i32;
  var $i56: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "tda18271_lookup_map:arg:map_type"} boogie_si_record_i32($i1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p27, $p28 := $0.ref, .str.11;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p27);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.63, $p57);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 1000);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.39, $p2);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i59, $i60);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i62 := 0;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i76, $i77 := $i62, 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i76);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p27, $mul.ref($i87, 8)), $mul.ref(4, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.64, $p89);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p3, $i90);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i91 := $M.5;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 2);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i56 := $i77;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $r := $i56;
    return;

  $bb44:
    assume $i93 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.40, $p3);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_174 := _tda_printk.ref.ref.ref.ref.i32.ref.i32($p6, .str, .str.24, .str.25, $i76, $p28, $i95);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb29:
    assume $i61 == 1;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb32;

  $bb32:
    call $i64, $i65, $p67, $i68, $i69, $i70, $i78, $i79, $p81, $i82, $i83, $i84, $i85, $i63, $i86 := tda18271_lookup_map_loop_$bb32($p2, $p27, $i64, $i65, $p67, $i68, $i69, $i70, $i78, $i79, $p81, $i82, $i83, $i84, $i85, $i63, $i86);
    goto $bb32_last;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 1);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p27, $mul.ref($i65, 8)), $mul.ref(0, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.63, $p67);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i70 := $i63;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i63, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p27, $mul.ref($i79, 8)), $mul.ref(0, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.63, $p81);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i83 := $mul.i32($i82, 1000);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.39, $p2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i85 := $ult.i32($i83, $i84);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i86 := $i78;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i62 := $i86;
    goto $bb31;

  $bb41:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $i63 := $i78;
    goto $bb41_dummy;

  $bb34:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i71 := $M.5;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 2);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i76, $i77 := $i70, $sub.i32(0, 34);
    goto $bb39;

  $bb36:
    assume $i73 == 1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.39, $p2);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_173 := _tda_printk.ref.ref.ref.ref.ref.i32($p6, .str, .str.24, .str.15, $p28, $i74);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_172 := _tda_printk.ref.ref.ref.ref.ref($p6, .str.12, .str.24, .str.14, $p28);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32(0, 22);
    goto $bb27;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.61, $p47);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p48, .str.22;
    goto $bb23;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.59, $p39);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p40, .str.20;
    goto $bb23;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.58, $p35);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p36, .str.19;
    goto $bb23;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.57, $p25);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p26, .str.17;
    goto $bb23;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.2, $p49);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.62, $p51);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p52, .str.23;
    goto $bb23;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.38, $p31);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p32, .str.18;
    goto $bb23;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(120, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.60, $p43);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p44, .str.21;
    goto $bb23;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 432} devirtbounce.2(0, .str.8, 1168, 12);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call tda18271_lookup_map_loop_$bb3();
    goto $bb3_last;

  $bb41_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const tda18271_set_standby_mode: ref;

axiom tda18271_set_standby_mode == $sub.ref(0, 272266);

procedure tda18271_set_standby_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_set_standby_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i32;
  var vslice_dummy_var_175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "tda18271_set_standby_mode:arg:sm"} boogie_si_record_i32($i1);
    call {:si_unique_call 438} {:cexpr "tda18271_set_standby_mode:arg:sm_lt"} boogie_si_record_i32($i2);
    call {:si_unique_call 439} {:cexpr "tda18271_set_standby_mode:arg:sm_xt"} boogie_si_record_i32($i3);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i9 := $M.5;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p8, $mul.ref(5, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 31);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p8, $mul.ref(5, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, $i20);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p8, $mul.ref(5, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i1, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then $sub.i32(0, 128) else 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 64 else 0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i26, $i28);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i3, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 32 else 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i29, $i31);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i24, $i32);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p8, $mul.ref(5, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p35, $i34);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i36 := tda18271_write_regs($p0, 5, 1);
    call {:si_unique_call 442} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_175 := _tda_printk.ref.ref.ref.ref.i32.i32.i32($p6, .str, .str.32, .str.33, $i1, $i2, $i3);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const tda18271_read_thermometer: ref;

axiom tda18271_read_thermometer == $sub.ref(0, 273298);

procedure tda18271_read_thermometer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $M.6, $M.66, $M.67, $M.68, $M.69, $CurrAddr;



implementation tda18271_read_thermometer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.2, $p6);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 16);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, $i10);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_176 := tda18271_write_regs($p0, 1, 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_177 := tda18271_read_regs($p0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 15);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.2, $p24);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 15);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 8);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i53 := tda18271_lookup_thermometer($p0);
    call {:si_unique_call 449} {:cexpr "tm"} boogie_si_record_i32($i53);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.2, $p54);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 239);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p59, $i58);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_180 := tda18271_write_regs($p0, 1, 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.2, $p61);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 252);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p66, $i65);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_181 := tda18271_write_regs($p0, 6, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.2, $p29);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 32);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.2, $p34);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 32);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.2, $p45);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 32);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p50, $i49);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_178 := tda18271_write_regs($p0, 1, 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} msleep(10);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vslice_dummy_var_179 := tda18271_read_regs($p0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.2, $p39);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 223);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p44, $i43);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 32);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb5;
}



const tda18271_calc_rf_cal: ref;

axiom tda18271_calc_rf_cal == $sub.ref(0, 274330);

procedure tda18271_calc_rf_cal($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.2, $CurrAddr;



implementation tda18271_calc_rf_cal($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i8 := tda18271_lookup_map($p0, 2, $p1, $p2);
    call {:si_unique_call 454} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.40, $p2);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p7, $mul.ref(29, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, $i10);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_lookup_rf_band: ref;

axiom tda18271_lookup_rf_band == $sub.ref(0, 275362);

procedure tda18271_lookup_rf_band($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.65, $CurrAddr;



implementation tda18271_lookup_rf_band($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p65: ref;
  var $i66: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i74: i32;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i14: i32;
  var $i82: i32;
  var $i13: i32;
  var $i83: i64;
  var $i84: i1;
  var $i85: i64;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i73: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(220, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 1000);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.39, $p1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i10, $i11);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p2);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i89 := $M.5;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 2);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := $i13;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb22:
    assume $i91 == 1;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i13);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref($i92, 48)), $mul.ref(4, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.2, $p94);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_183 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str, .str.5, .str.7, $i13, $i96);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i84 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i13);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref($i85, 48)), $mul.ref(4, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.2, $p87);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p2, $i88);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $p29, $i30, $i31, $p33, $i34, $i35, $p37, $i38, $i39, $p41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $i51, $p53, $i54, $i55, $p57, $i58, $i59, $p61, $i62, $i63, $p65, $i66, $i68, $p70, $i71, $i72, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $i14, $i82, vslice_dummy_var_182 := tda18271_lookup_rf_band_loop_$bb4($p1, $p5, $p7, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $p29, $i30, $i31, $p33, $i34, $i35, $p37, $i38, $i39, $p41, $i42, $i43, $p45, $i46, $i47, $p49, $i50, $i51, $p53, $i54, $i55, $p57, $i58, $i59, $p61, $i62, $i63, $p65, $i66, $i68, $p70, $i71, $i72, $i74, $i75, $p77, $i78, $i79, $i80, $i81, $i14, $i82, vslice_dummy_var_182);
    goto $bb4_last;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $M.5;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i14);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref($i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i14, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref($i75, 48)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.2, $p77);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i79 := $mul.i32($i78, 1000);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.39, $p1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32($i79, $i80);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i82 := $i74;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i13 := $i82;
    goto $bb3;

  $bb16:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i74;
    goto $bb16_dummy;

  $bb12:
    assume $i72 == 1;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 22);
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i18 := $M.5;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i14);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref($i21, 48)), $mul.ref(0, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 1000);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.39, $p1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i14);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref($i27, 48)), $mul.ref(8, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.2, $p29);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i14);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref($i31, 48)), $mul.ref(12, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i14);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref($i35, 48)), $mul.ref(16, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i14);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref($i39, 48)), $mul.ref(20, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.2, $p41);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i14);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref($i43, 48)), $mul.ref(24, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.2, $p45);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i14);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref($i47, 48)), $mul.ref(28, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.2, $p49);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i14);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref($i51, 48)), $mul.ref(32, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i14);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref($i55, 48)), $mul.ref(40, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i14);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p7, $mul.ref($i59, 48)), $mul.ref(36, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i14);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref($i63, 48)), $mul.ref(44, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.2, $p65);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_182 := _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32($p5, .str, .str.5, .str.6, $i14, $i25, $i26, $i30, $i34, $i38, $i42, $i46, $i50, $i54, $i58, $i62, $i66);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;
}



const tda18271_read_regs: ref;

axiom tda18271_read_regs == $sub.ref(0, 276394);

procedure tda18271_read_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.66, $M.67, $M.68, $M.69, $M.6, $CurrAddr;



implementation tda18271_read_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i16;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i16;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p1, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i16($i10);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $M.66 := $store.i16($M.66, $p13, $i11);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p15, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.68 := $store.i16($M.68, $p17, 1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p19, $p1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i16($i22);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.66 := $store.i16($M.66, $p25, $i23);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p27, 1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.68 := $store.i16($M.68, $p29, 16);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p31, $p4);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_184 := tda18271_i2c_gate_ctrl($p0, 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i37 := i2c_transfer($p35, $p36, 2);
    call {:si_unique_call 462} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_185 := tda18271_i2c_gate_ctrl($p0, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i37, 2);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i41 := $M.5;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 4);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i37, 2);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i45 := $i37;
    goto $bb9;

  $bb4:
    assume $i43 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} tda18271_dump_regs($p0, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_186 := _tda_printk.ref.ref.ref.ref.i32($p5, .str.26, .str.27, .str.28, $i37);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_transfer: ref;

axiom i2c_transfer == $sub.ref(0, 277426);

procedure i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} {:cexpr "i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tda18271_dump_regs: ref;

axiom tda18271_dump_regs == $sub.ref(0, 278458);

procedure tda18271_dump_regs($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation tda18271_dump_regs($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i8;
  var $i186: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i8;
  var $i221: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i8;
  var $i235: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i8;
  var $i242: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i8;
  var $i263: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i269: i8;
  var $i270: i32;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i8;
  var $i277: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "tda18271_dump_regs:arg:extended"} boogie_si_record_i32($i1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 4);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $M.5;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 4);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $M.5;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $M.5;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 4);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $M.5;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i38 := $M.5;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 4);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := $M.5;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i52 := $M.5;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 4);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := $M.5;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 4);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i66 := $M.5;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 4);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i73 := $M.5;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 4);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i80 := $M.5;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 4);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i87 := $M.5;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 4);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i94 := $M.5;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i101 := $M.5;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 4);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i108 := $M.5;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 4);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i115 := $M.5;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 4);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i122 := $M.5;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 8);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i125 := $M.5;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 4);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i132 := $M.5;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 4);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i139 := $M.5;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 4);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i146 := $M.5;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 4);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i153 := $M.5;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 4);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i160 := $M.5;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 4);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i167 := $M.5;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 4);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i174 := $M.5;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 4);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i181 := $M.5;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i188 := $M.5;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 4);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i195 := $M.5;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, 4);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i202 := $M.5;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 4);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i209 := $M.5;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 4);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i216 := $M.5;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 4);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i223 := $M.5;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i230 := $M.5;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 4);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i237 := $M.5;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 4);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i244 := $M.5;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 4);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i251 := $M.5;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i251, 4);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i258 := $M.5;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 4);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i265 := $M.5;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 4);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i272 := $M.5;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i273 := $and.i32($i272, 4);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i279 := $M.5;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i280 := $and.i32($i279, 4);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb122:
    assume $i281 == 1;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($p6, $mul.ref(38, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.2, $p282);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_226 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.89, $i284);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i274 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($p6, $mul.ref(37, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.2, $p275);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vslice_dummy_var_225 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.88, $i277);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i267 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($p6, $mul.ref(36, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.2, $p268);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_224 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.87, $i270);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb113:
    assume $i260 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($p6, $mul.ref(35, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i262 := $load.i8($M.2, $p261);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i262);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_223 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.86, $i263);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i253 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($p6, $mul.ref(34, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.2, $p254);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_222 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.85, $i256);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume $i246 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p6, $mul.ref(33, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.2, $p247);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_221 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.84, $i249);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i239 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($p6, $mul.ref(32, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.2, $p240);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_220 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.83, $i242);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i232 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($p6, $mul.ref(31, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.2, $p233);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i234);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_219 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.82, $i235);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb98:
    assume $i225 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p6, $mul.ref(30, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.2, $p226);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_218 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.81, $i228);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i218 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p6, $mul.ref(29, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.2, $p219);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_217 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.80, $i221);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i211 == 1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p6, $mul.ref(28, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.2, $p212);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_216 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.79, $i214);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i204 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p6, $mul.ref(27, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.2, $p205);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_215 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.78, $i207);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i197 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p6, $mul.ref(26, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.2, $p198);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_214 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.77, $i200);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i190 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p6, $mul.ref(25, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.2, $p191);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_213 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.76, $i193);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i183 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p6, $mul.ref(24, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.2, $p184);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_212 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.75, $i186);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i176 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p6, $mul.ref(23, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.2, $p177);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_211 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.74, $i179);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i169 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p6, $mul.ref(22, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.2, $p170);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_210 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.73, $i172);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i162 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p6, $mul.ref(21, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.2, $p163);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_209 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.72, $i165);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i155 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p6, $mul.ref(20, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.2, $p156);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_208 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.71, $i158);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i148 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p6, $mul.ref(19, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.2, $p149);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_207 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.70, $i151);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i141 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p6, $mul.ref(18, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.2, $p142);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_206 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.69, $i144);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i134 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p6, $mul.ref(17, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.2, $p135);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_205 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.68, $i137);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i127 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p6, $mul.ref(16, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.2, $p128);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_204 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.67, $i130);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i124 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i117 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p6, $mul.ref(15, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.2, $p118);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_203 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.66, $i120);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i110 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p6, $mul.ref(14, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.2, $p111);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_202 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.65, $i113);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i103 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p6, $mul.ref(13, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.2, $p104);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_201 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.64, $i106);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i96 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p6, $mul.ref(12, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.2, $p97);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_200 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.63, $i99);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i89 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p6, $mul.ref(11, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.2, $p90);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_199 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.62, $i92);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i82 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p6, $mul.ref(10, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.2, $p83);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} vslice_dummy_var_198 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.61, $i85);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i75 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p6, $mul.ref(9, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.2, $p76);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_197 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.60, $i78);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p6, $mul.ref(8, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.2, $p69);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_196 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.59, $i71);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p6, $mul.ref(7, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.2, $p62);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_195 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.58, $i64);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p6, $mul.ref(6, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.2, $p55);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_194 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.57, $i57);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p6, $mul.ref(5, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.2, $p48);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_193 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.56, $i50);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p6, $mul.ref(4, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.2, $p41);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_192 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.55, $i43);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p6, $mul.ref(3, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.2, $p34);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_191 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.54, $i36);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p6, $mul.ref(2, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.2, $p27);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_190 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.53, $i29);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p6, $mul.ref(1, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_189 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.52, $i22);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p6);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_188 := _tda_printk.ref.ref.ref.ref.i32($p4, .str, .str.49, .str.51, $i15);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_187 := _tda_printk.ref.ref.ref.ref($p4, .str, .str.49, .str.50);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_calc_km: ref;

axiom tda18271_calc_km == $sub.ref(0, 279490);

procedure tda18271_calc_km($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.40, $M.2, $CurrAddr;



implementation tda18271_calc_km($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i8 := tda18271_lookup_map($p0, 3, $p1, $p2);
    call {:si_unique_call 512} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 513} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i10, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref(28, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 131);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(28, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p19, $i18);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(28, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p2);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 124);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p7, $mul.ref(28, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $i27);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_227 := _tda_printk.ref.ref.ref.ref.i32.i32($p5, .str.26, .str.38, .str.35, $i8, 675);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_lock: ref;

axiom ldv_mutex_lock_lock == $sub.ref(0, 280522);

procedure ldv_mutex_lock_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_lock($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i1 := $M.41;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 516} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 281554);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_38: ref;

axiom ldv_mutex_lock_38 == $sub.ref(0, 282586);

procedure ldv_mutex_lock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} ldv_mutex_lock_lock($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} mutex_lock($p0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const tda18271_toggle_output: ref;

axiom tda18271_toggle_output == $sub.ref(0, 283618);

procedure tda18271_toggle_output($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_toggle_output($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "tda18271_toggle_output:arg:standby"} boogie_si_record_i32($i1);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(104, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(104, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i15 := tda18271_set_standby_mode($p0, $i6, $i9, $i14);
    call {:si_unique_call 521} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 522} {:cexpr "__ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i17, 0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $M.5;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i1, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p25 := (if $i24 == 1 then .str.114 else .str.115);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(104, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p30 := (if $i29 == 1 then .str.116 else .str.117);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 792)), $mul.ref(104, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.2, $p31);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p35 := (if $i34 == 1 then .str.116 else .str.117);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_229 := _tda_printk.ref.ref.ref.ref.ref.ref.ref($p4, .str, .str.112, .str.113, $p25, $p30, $p35);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_228 := _tda_printk.ref.ref.ref.ref.i32.i32($p4, .str.26, .str.112, .str.35, $i15, 87);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 284650);

procedure ldv_mutex_unlock_39($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_39($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} ldv_mutex_unlock_lock($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} mutex_unlock($p0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_36: ref;

axiom ldv_mutex_lock_36 == $sub.ref(0, 285682);

procedure ldv_mutex_lock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_lock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} ldv_mutex_lock_lock($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} mutex_lock($p0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const tda18271_ir_cal_init: ref;

axiom tda18271_ir_cal_init == $sub.ref(0, 286714);

procedure tda18271_ir_cal_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.66, $M.67, $M.68, $M.69, $M.6, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_ir_cal_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i12: i32;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i6 := tda18271_read_regs($p0);
    call {:si_unique_call 530} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 531} {:cexpr "__ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(3, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.2, $p13);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i6;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i18 := tda18271_init_regs($p0);
    call {:si_unique_call 534} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_230 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.135, .str.35, $i6, 852);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271c2_rf_cal_init: ref;

axiom tda18271c2_rf_cal_init == $sub.ref(0, 287746);

procedure tda18271c2_rf_cal_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.6, $M.39, $M.65, $M.70, $M.40, $M.71, $M.72, $M.45, $M.46, $M.47, $M.48, $M.49, $M.66, $M.67, $M.68, $M.69, $CurrAddr, $M.42, $M.73, $M.74, $M.43, $M.44;



implementation tda18271c2_rf_cal_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $i26: i32;
  var $i38: i32;
  var $i19: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(3, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.2, $p6);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(116, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.2, $p15);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i20 := tda18271_calc_rf_filter_curve($p0);
    call {:si_unique_call 536} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 537} {:cexpr "__ret"} boogie_si_record_i32($i22);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i22, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i27 := tda18271_por($p0);
    call {:si_unique_call 541} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 542} {:cexpr "__ret___0"} boogie_si_record_i32($i29);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i29, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_234 := printk.ref(.str.101);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(116, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.2, $p34);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i35, $sub.i8(0, 2));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i37 := $or.i8($i36, 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p34, $i37);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i38 := $i27;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i19 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_232 := printk.ref(.str.102);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i38 := $i26;
    goto $bb21;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_233 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.100, .str.35, $i27, 731);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_231 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.100, .str.35, $i20, 727);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(116, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, $sub.i8(0, 2));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, $i13);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 288778);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.41, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_mutex_unlock_lock($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} mutex_unlock($p0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const tda18271_calc_rf_filter_curve: ref;

axiom tda18271_calc_rf_filter_curve == $sub.ref(0, 289810);

procedure tda18271_calc_rf_filter_curve($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.39, $M.65, $M.70, $M.40, $M.71, $M.72, $M.45, $M.46, $M.47, $M.48, $M.49, $M.66, $M.67, $M.68, $M.69, $CurrAddr, $M.42, $M.73, $M.74, $M.43, $M.44;



implementation tda18271_calc_rf_filter_curve($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i19: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i18: i32;
  var $i38: i32;
  var $i17: i32;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i11: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_235 := printk.ref(.str.103);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} msleep(200);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i5 := tda18271_powerscan_init($p0);
    call {:si_unique_call 550} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 551} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(220, 1)), $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i17 := $i5;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i39 := tda18271_read_thermometer($p0);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(117, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p41, $i40);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb11:
    call $i19, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $p35, $i36, $i37, $i18, $i38, vslice_dummy_var_237 := tda18271_calc_rf_filter_curve_loop_$bb11($p0, $p3, $i19, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $p35, $i36, $i37, $i18, $i38, vslice_dummy_var_237);
    goto $bb11_last;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(220, 1)), $mul.ref($i19, 48)), $mul.ref(0, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i23, 1000);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i25 := tda18271_rf_tracking_filters_init($p0, $i24);
    call {:si_unique_call 554} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 555} {:cexpr "__ret___0"} boogie_si_record_i32($i27);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i27, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i18, 1);
    call {:si_unique_call 557} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(220, 1)), $mul.ref($i33, 48)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i38 := $i25;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i17 := $i38;
    goto $bb10;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i32;
    goto $bb19_dummy;

  $bb16:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i11 := $i31;
    goto $bb6;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_237 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.104, .str.35, $i25, 702);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i11 := $i5;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_236 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.104, .str.35, $i5, 694);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3877;
}



const tda18271_por: ref;

axiom tda18271_por == $sub.ref(0, 290842);

procedure tda18271_por($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.6, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_por($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i32;
  var $i18: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(27, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.2, $p6);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 223);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p5, $mul.ref(27, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, $i10);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i12 := tda18271_write_regs($p0, 27, 1);
    call {:si_unique_call 561} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 562} {:cexpr "__ret"} boogie_si_record_i32($i14);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i14, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 127);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p24, $i23);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.2, $p25);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 252);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $i29);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i31 := tda18271_write_regs($p0, 33, 1);
    call {:si_unique_call 565} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 566} {:cexpr "__ret___0"} boogie_si_record_i32($i33);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.2, $p37);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 3);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p42, $i41);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i43 := tda18271_set_standby_mode($p0, 1, 0, 0);
    call {:si_unique_call 569} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 570} {:cexpr "__ret___1"} boogie_si_record_i32($i45);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i45, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.2, $p49);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 251);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p54, $i53);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.2, $p55);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 253);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p60, $i59);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i61 := tda18271_write_regs($p0, 36, 3);
    call {:si_unique_call 573} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i18 := $i61;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i18 := $i43;
    goto $bb6;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_240 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.111, .str.35, $i43, 366);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb6;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_239 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.111, .str.35, $i31, 359);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_238 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.111, .str.35, $i12, 353);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_powerscan_init: ref;

axiom tda18271_powerscan_init == $sub.ref(0, 291874);

procedure tda18271_powerscan_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.6, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_powerscan_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var $i67: i32;
  var $i36: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.2, $p6);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 224);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p11, $i10);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.2, $p12);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 18);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, $i16);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.2, $p18);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 252);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p23, $i22);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.2, $p24);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 227);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p29, $i28);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i30 := tda18271_write_regs($p0, 5, 2);
    call {:si_unique_call 575} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 576} {:cexpr "__ret"} boogie_si_record_i32($i32);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i32, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.2, $p37);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 252);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p42, $i41);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i43 := tda18271_write_regs($p0, 33, 1);
    call {:si_unique_call 579} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    call {:si_unique_call 580} {:cexpr "__ret___0"} boogie_si_record_i32($i45);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i45, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.2, $p49);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 252);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p54, $i53);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.2, $p55);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 4);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p60, $i59);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.2, $p61);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 2);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p66, $i65);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i67 := tda18271_write_regs($p0, 36, 3);
    call {:si_unique_call 583} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i36 := $i67;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i36 := $i43;
    goto $bb6;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_242 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.105, .str.35, $i43, 596);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i36 := $i30;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_241 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str.26, .str.105, .str.35, $i30, 591);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_rf_tracking_filters_init: ref;

axiom tda18271_rf_tracking_filters_init == $sub.ref(0, 292906);

procedure tda18271_rf_tracking_filters_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.65, $M.70, $M.40, $M.2, $M.71, $M.72, $M.42, $CurrAddr, $M.73, $M.74, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44, $M.66, $M.67, $M.68, $M.69;



implementation tda18271_rf_tracking_filters_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i1;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $i71: i1;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i64;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i64;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i64;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i64;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i39: i32;
  var $i20: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p5 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p6 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p2, $i1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(220, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i14 := tda18271_lookup_rf_band($p0, $p2, $0.ref);
    call {:si_unique_call 590} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 591} {:cexpr "__ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i16, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i14);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref($i21, 48)), $mul.ref(8, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p23);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i24, 1000);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p26, $i25);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i14);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p11, $mul.ref($i27, 48)), $mul.ref(12, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.2, $p29);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 1000);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p32, $i31);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i14);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref($i33, 48)), $mul.ref(16, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i36, 1000);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p38, $i37);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb8;

  $bb8:
    call $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $p49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $i57, $i58, $i60, $i61, $p62, $i63, $p64, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $p92, $i93, $i94, $i95, $p97, $p98, $i99, $i100, $i101, $p103, $p104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $p124, $p125, $i126, $i127, $i128, $p130, $p131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p151, $p152, $i153, $p154, $i155, $i156, $i157, $p159, $p160, $i161, $i162, $i163, $p165, $i166, $i167, $i39, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246 := tda18271_rf_tracking_filters_init_loop_$bb8($p0, $p2, $p3, $p4, $p5, $p6, $p9, $p11, $p13, $i14, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $p49, $i50, $p51, $p52, $i53, $p54, $i55, $i56, $i57, $i58, $i60, $i61, $p62, $i63, $p64, $p66, $i67, $i68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $i76, $p77, $i78, $p79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p89, $p90, $i91, $p92, $i93, $i94, $i95, $p97, $p98, $i99, $i100, $i101, $p103, $p104, $i105, $p106, $i107, $i108, $p109, $i110, $i111, $p112, $i113, $i114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $p124, $p125, $i126, $i127, $i128, $p130, $p131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $p144, $i145, $i146, $i147, $i148, $i149, $p151, $p152, $i153, $p154, $i155, $i156, $i157, $p159, $p160, $i161, $i162, $i163, $p165, $i166, $i167, $i39, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246);
    goto $bb8_last;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref($i40, 4));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.70, $p41);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $M.5;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i39);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 4));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i39);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p52, $mul.ref($i53, 4));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i55 := tda18271_powerscan($p0, $p51, $p54);
    call {:si_unique_call 595} {:cexpr "bcal"} boogie_si_record_i32($i55);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 596} {:cexpr "__ret___0"} boogie_si_record_i32($i57);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i57, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i61 := $i55;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p4);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i39);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 4));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_246 := tda18271_calc_rf_cal($p0, $p64);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p13, $mul.ref(29, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.2, $p66);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i39);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref($i69, 4));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p70, $i68);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i55, 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i39);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref($i78, 4));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.71, $p79);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i39);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref($i81, 4));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.72 := $store.i32($M.72, $p82, $i80);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    call {:si_unique_call 605} devirtbounce.2(0, .str.108, 675, 12);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    call tda18271_rf_tracking_filters_init_loop_$bb37();
    goto $bb37_last;

  $bb30:
    assume $i85 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.72, $p131);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.71, $p133);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i135 := $sub.i32($i132, $i134);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.72, $p136);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i138 := $sub.i32($i135, $i137);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.71, $p139);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i138, $i140);
    call {:si_unique_call 602} {:cexpr "dividend"} boogie_si_record_i32($i141);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.39, $p142);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.39, $p144);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i143, $i145);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i147 := $sdiv.i32($i146, 1000);
    call {:si_unique_call 603} {:cexpr "divisor"} boogie_si_record_i32($i147);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i148 := $sdiv.i32($i141, $i147);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i14);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p11, $mul.ref($i149, 48)), $mul.ref(40, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p151, $i148);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.72, $p152);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.71, $p154);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i156 := $sub.i32($i153, $i155);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i14);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p11, $mul.ref($i157, 48)), $mul.ref(44, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p159, $i156);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.39, $p160);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i162 := $udiv.i32($i161, 1000);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i14);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p11, $mul.ref($i163, 48)), $mul.ref(28, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p165, $i162);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i39, 1);
    call {:si_unique_call 604} {:cexpr "rf"} boogie_si_record_i32($i166);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i167 := $sle.i32($i166, 2);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb38:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i166;
    goto $bb38_dummy;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.72, $p104);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.71, $p106);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i108 := $sub.i32($i105, $i107);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.72, $p109);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32($i108, $i110);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.71, $p112);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i111, $i113);
    call {:si_unique_call 600} {:cexpr "dividend"} boogie_si_record_i32($i114);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.39, $p115);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.39, $p117);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i119 := $sub.i32($i116, $i118);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i120 := $sdiv.i32($i119, 1000);
    call {:si_unique_call 601} {:cexpr "divisor"} boogie_si_record_i32($i120);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i121 := $sdiv.i32($i114, $i120);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i14);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p11, $mul.ref($i122, 48)), $mul.ref(32, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p124, $i121);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.39, $p125);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i127 := $udiv.i32($i126, 1000);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i14);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p11, $mul.ref($i128, 48)), $mul.ref(24, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p130, $i127);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb32;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i14);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p11, $mul.ref($i87, 48)), $mul.ref(32, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p89, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.72, $p90);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.71, $p92);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i91, $i93);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i14);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p11, $mul.ref($i95, 48)), $mul.ref(36, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p97, $i94);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.39, $p98);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i100 := $udiv.i32($i99, 1000);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i14);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref($i101, 48)), $mul.ref(20, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p103, $i100);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i39);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref($i72, 4));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.39, $p73);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i75 := tda18271_calibrate_rf($p0, $i74);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i39);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 12)), $mul.ref($i76, 4));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $M.72 := $store.i32($M.72, $p77, $i75);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i20 := $i61;
    goto $bb6;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_245 := _tda_printk.ref.ref.ref.ref.i32.i32($p9, .str.26, .str.106, .str.35, $i55, 641);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.39, $p2);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_244 := _tda_printk.ref.ref.ref.ref.i32.i32($p9, .str, .str.106, .str.107, $i47, $i39);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i20 := $i14;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_243 := _tda_printk.ref.ref.ref.ref.i32.i32($p9, .str.26, .str.106, .str.35, $i14, 627);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb38_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4129;
}



const tda18271_powerscan: ref;

axiom tda18271_powerscan == $sub.ref(0, 293938);

procedure tda18271_powerscan($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.2, $M.40, $M.42, $M.73, $M.74, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44, $M.66, $M.67, $M.68, $M.69, $CurrAddr;



implementation tda18271_powerscan($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $i44: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i55: i32;
  var $i56: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i63: i1;
  var $i65: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i78: i32;
  var $i79: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i64: i32;
  var $i57: i32;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i43: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.70, $p1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p5, $i11);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_247 := tda18271_calc_rf_band($p0, $p5);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_248 := tda18271_calc_rf_cal($p0, $p5);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_249 := tda18271_calc_gain_taper($p0, $p5);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_250 := tda18271_lookup_cid_target($p0, $p5, $p3, $p4);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_251 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_252 := tda18271_write_regs($p0, 29, 1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.39, $p5);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1000000);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p5, $i19);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.39, $p5);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_253 := tda18271_calc_main_pll($p0, $i20);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_254 := tda18271_write_regs($p0, 12, 4);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} msleep(5);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p10, $mul.ref(6, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.2, $p23);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 252);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p10, $mul.ref(6, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $i27);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p10, $mul.ref(6, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.2, $p29);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p10, $mul.ref(6, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p34, $i33);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_255 := tda18271_write_regs($p0, 6, 1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_256 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i37 := tda18271_read_extended($p0);
    call {:si_unique_call 621} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 622} {:cexpr "__ret"} boogie_si_record_i32($i39);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i39, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.70, $p1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p2, $i44);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p10, $mul.ref(25, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.2, $p45);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 63);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.73, $p3);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i48, $i50);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p10, $mul.ref(25, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.2, $p94);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 63);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.73, $p3);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i100 := $sge.i32($i97, $i99);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i104 := $M.5;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 16);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i43 := $i103;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb39:
    assume $i106 == 1;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.70, $p1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.39, $p2);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.39, $p5);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_262 := _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32($p8, .str, .str.109, .str.110, $i103, $i107, $i108, $i109);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i100 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.39, $p5);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32($i101, 1000000);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p2, $i102);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i103 := 1;
    goto $bb38;

  $bb8:
    assume $i51 == 1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i52, $i53, $i54 := 0, 0, 1;
    goto $bb11;

  $bb11:
    call $i55, $i56, $i58, $i59, $i60, $i63, $i65, $i67, $i68, $i69, $i70, $i72, $i73, $i74, $i75, $i76, $i77, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i52, $i53, $i54, $i78, $i79, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i57, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261 := tda18271_powerscan_loop_$bb11($p0, $p1, $p3, $p4, $p5, $p8, $p45, $i55, $i56, $i58, $i59, $i60, $i63, $i65, $i67, $i68, $i69, $i70, $i72, $i73, $i74, $i75, $i76, $i77, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i52, $i53, $i54, $i78, $i79, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i57, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261);
    goto $bb11_last;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i64, $i57 := $i52, $i53;
    goto $bb31;

  $bb31:
    call $i55, $i56, $i58, $i59, $i60, $i63, $i65, $i67, $i68, $i69, $i70, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i57, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261 := tda18271_powerscan_loop_$bb31($p0, $p1, $p3, $p4, $p5, $p8, $p45, $i55, $i56, $i58, $i59, $i60, $i63, $i65, $i67, $i68, $i69, $i70, $i72, $i73, $i74, $i75, $i76, $i77, $i54, $i78, $i79, $i88, $i89, $i90, $i91, $i92, $i93, $i64, $i57, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261);
    goto $bb31_last;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.70, $p1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i56 := $mul.i32($i54, $i57);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i55, $i56);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1000000);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p5, $i59);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.39, $p5);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_258 := tda18271_calc_main_pll($p0, $i60);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_259 := tda18271_write_regs($p0, 12, 4);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i64, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(429500);
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_260 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i67 := tda18271_read_extended($p0);
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 631} {:cexpr "__ret___0"} boogie_si_record_i32($i69);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i69, 0);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i73 := $i67;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i57, 200);
    call {:si_unique_call 633} {:cexpr "count"} boogie_si_record_i32($i74);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.74, $p4);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i77 := $sge.i32($i76, $i74);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i74, $i65;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i54, 0);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32(0, $i54);
    call {:si_unique_call 634} {:cexpr "sgn"} boogie_si_record_i32($i81);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.2, $p45);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 63);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.73, $p3);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i84, $i86);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i52, $i53, $i54 := 1, 200, $i81;
    goto $bb29_dummy;

  $bb25:
    assume $i80 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.2, $p45);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 63);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.73, $p3);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i90, $i92);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i93 == 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i64, $i57 := $i79, $i78;
    goto $bb32_dummy;

  $bb19:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i43 := $i73;
    goto $bb6;

  $bb16:
    assume $i70 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_261 := _tda_printk.ref.ref.ref.ref.i32.i32($p8, .str.26, .str.109, .str.35, $i67, 546);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} msleep(5);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb15;

  $bb4:
    assume $i42 == 1;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i43 := $i37;
    goto $bb6;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_257 := _tda_printk.ref.ref.ref.ref.i32.i32($p8, .str.26, .str.109, .str.35, $i37, 518);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4419;

  $bb29_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;
}



const tda18271_calibrate_rf: ref;

axiom tda18271_calibrate_rf == $sub.ref(0, 294970);

procedure tda18271_calibrate_rf($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.2, $M.6, $M.40, $M.42, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44, $M.66, $M.67, $M.68, $M.69, $CurrAddr;



implementation tda18271_calibrate_rf($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $p26: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i52: i32;
  var $i55: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p2, $i1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 252);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p13, $i12);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_263 := tda18271_write_regs($p0, 6, 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p7, $mul.ref(5, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.2, $p15);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 64);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p7, $mul.ref(5, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p20, $i19);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p7, $mul.ref(33, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 3);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p7, $mul.ref(33, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p26, $i25);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_264 := tda18271_write_regs($p0, 33, 1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_265 := tda18271_calc_bp_filter($p0, $p2);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_266 := tda18271_calc_gain_taper($p0, $p2);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_267 := tda18271_calc_rf_band($p0, $p2);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_268 := tda18271_calc_km($p0, $p2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} vslice_dummy_var_269 := tda18271_write_regs($p0, 3, 3);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_270 := tda18271_write_regs($p0, 28, 1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_271 := tda18271_charge_pump_source($p0, 0, 1);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_272 := tda18271_charge_pump_source($p0, 1, 1);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p7, $mul.ref(29, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p36, 0);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_273 := tda18271_write_regs($p0, 29, 1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p7, $mul.ref(35, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 223);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p7, $mul.ref(35, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p43, $i42);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_274 := tda18271_write_regs($p0, 35, 1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.2, $p45);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 3);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p50, $i49);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_275 := tda18271_write_regs($p0, 6, 2);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.39, $p2);
    call {:si_unique_call 650} {:cexpr "N"} boogie_si_record_i32($i52);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_276 := tda18271_calc_cal_pll($p0, $i52);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_277 := tda18271_write_regs($p0, 8, 4);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i52, 1000000);
    call {:si_unique_call 653} {:cexpr "N"} boogie_si_record_i32($i55);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_278 := tda18271_calc_main_pll($p0, $i55);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_279 := tda18271_write_regs($p0, 12, 4);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} msleep(5);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_280 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_281 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_282 := tda18271_write_regs($p0, 4, 1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_283 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_284 := tda18271_charge_pump_source($p0, 0, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_285 := tda18271_charge_pump_source($p0, 1, 0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} msleep(10);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p7, $mul.ref(35, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.2, $p64);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 32);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p7, $mul.ref(35, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p69, $i68);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_286 := tda18271_write_regs($p0, 35, 1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} msleep(60);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.2, $p71);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 252);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p76, $i75);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p7, $mul.ref(5, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.2, $p77);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 191);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p7, $mul.ref(5, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p82, $i81);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p7, $mul.ref(33, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.2, $p83);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 252);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p7, $mul.ref(33, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p88, $i87);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_287 := tda18271_write_regs($p0, 33, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_288 := tda18271_write_regs($p0, 5, 2);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_289 := tda18271_write_regs($p0, 3, 1);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_290 := tda18271_read_extended($p0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p7, $mul.ref(29, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.2, $p93);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $r := $i95;
    return;
}



const tda18271_read_extended: ref;

axiom tda18271_read_extended == $sub.ref(0, 296002);

procedure tda18271_read_extended($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.66, $M.67, $M.68, $M.69, $M.6, $CurrAddr;



implementation tda18271_read_extended($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i16;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $i51: i8;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $p121: ref;
  var $p122: ref;
  var $i123: i8;
  var $p124: ref;
  var $p125: ref;
  var $i126: i8;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $p163: ref;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p1 := $alloc($mul.ref(39, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p2, 0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i16($i11);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.66 := $store.i16($M.66, $p14, $i12);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p16, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.68 := $store.i16($M.68, $p18, 1);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p20, $p2);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i16($i23);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.66 := $store.i16($M.66, $p26, $i24);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p28, 1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.68 := $store.i16($M.68, $p30, 39);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.69 := $store.ref($M.69, $p33, $p1);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_291 := tda18271_i2c_gate_ctrl($p0, 1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.2, $p36);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i39 := i2c_transfer($p37, $p38, 2);
    call {:si_unique_call 675} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_292 := tda18271_i2c_gate_ctrl($p0, 0);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i39, 2);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb143, $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb286, $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb312, $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb338, $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb377, $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb390, $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb403, $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb416, $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb455, $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb468, $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb481, $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb494, $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb507, $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i45 := $M.5;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i39, 2);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i49 := $i39;
    goto $bb25;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} tda18271_dump_regs($p0, 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb507:
    assume 1 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb510, $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb509;

  $bb510:
    assume 1 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb512, $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb509;

  $bb512:
    assume 1 == 1;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb514, $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb509;

  $bb514:
    assume 1 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb516, $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb509;

  $bb516:
    assume 1 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(38, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.2, $p161);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p8, $mul.ref(38, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p163, $i162);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb494:
    assume 1 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb497, $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb496;

  $bb497:
    assume 1 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb499, $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb496;

  $bb499:
    assume 1 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb501, $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb496;

  $bb501:
    assume 1 == 1;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb503, $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb496;

  $bb503:
    assume 1 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(37, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.2, $p158);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p8, $mul.ref(37, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p160, $i159);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb481:
    assume 1 == 1;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb484, $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb483;

  $bb484:
    assume 1 == 1;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb486, $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb483;

  $bb486:
    assume 1 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb488, $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb483;

  $bb488:
    assume 1 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb490, $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb483;

  $bb490:
    assume 1 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(36, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.2, $p155);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p8, $mul.ref(36, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p157, $i156);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb468:
    assume 1 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb471, $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb470;

  $bb471:
    assume 1 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb470;

  $bb473:
    assume 1 == 1;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb475, $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb470;

  $bb475:
    assume 1 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb477, $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb470;

  $bb477:
    assume 0 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(35, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.2, $p152);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($p8, $mul.ref(35, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p154, $i153);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb455:
    assume 1 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb458, $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb457;

  $bb458:
    assume 1 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb460, $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb457;

  $bb460:
    assume 1 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb462, $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb457;

  $bb462:
    assume 0 == 1;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb464, $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb457;

  $bb464:
    assume 1 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(34, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.2, $p149);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p8, $mul.ref(34, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p151, $i150);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb442:
    assume 1 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb444;

  $bb445:
    assume 1 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb447, $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb444;

  $bb447:
    assume 1 == 1;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb449, $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb444;

  $bb449:
    assume 1 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb451, $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb444;

  $bb451:
    assume 1 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(33, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.2, $p146);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p8, $mul.ref(33, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p148, $i147);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb429:
    assume 1 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb432, $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb431;

  $bb432:
    assume 1 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb434, $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb431;

  $bb434:
    assume 0 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb436, $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb431;

  $bb436:
    assume 1 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb438, $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb431;

  $bb438:
    assume 1 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(32, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.2, $p143);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p8, $mul.ref(32, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p145, $i144);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb416:
    assume 1 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb419, $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb418;

  $bb419:
    assume 0 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb421, $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb418;

  $bb421:
    assume 1 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb418;

  $bb423:
    assume 1 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb425, $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb418;

  $bb425:
    assume 1 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(31, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.2, $p140);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p8, $mul.ref(31, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p142, $i141);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb403:
    assume 1 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb406, $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb405;

  $bb406:
    assume 1 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb408, $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb405;

  $bb408:
    assume 1 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb410, $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb405;

  $bb410:
    assume 1 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb412, $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb405;

  $bb412:
    assume 1 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(30, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.2, $p137);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p8, $mul.ref(30, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p139, $i138);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb390:
    assume 1 == 1;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb392;

  $bb393:
    assume 1 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb395, $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb392;

  $bb395:
    assume 1 == 1;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb392;

  $bb397:
    assume 1 == 1;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb399, $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb392;

  $bb399:
    assume 1 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(29, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.2, $p134);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p8, $mul.ref(29, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p136, $i135);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb377:
    assume 1 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb380, $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb379;

  $bb380:
    assume 1 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb379;

  $bb382:
    assume 1 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb384, $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb379;

  $bb384:
    assume 1 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb379;

  $bb386:
    assume 1 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(28, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.2, $p131);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p8, $mul.ref(28, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p133, $i132);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb364:
    assume 1 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb366;

  $bb367:
    assume 1 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb366;

  $bb369:
    assume 1 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb371, $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb366;

  $bb371:
    assume 1 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb373, $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb366;

  $bb373:
    assume 1 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(27, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.2, $p128);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p8, $mul.ref(27, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p130, $i129);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb351:
    assume 1 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb354, $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb353;

  $bb354:
    assume 1 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb356, $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb353;

  $bb356:
    assume 1 == 1;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb353;

  $bb358:
    assume 1 == 1;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb360, $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb353;

  $bb360:
    assume 1 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(26, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.2, $p125);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p8, $mul.ref(26, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p127, $i126);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb338:
    assume 1 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb340;

  $bb341:
    assume 1 == 1;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb343, $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb340;

  $bb343:
    assume 1 == 1;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb340;

  $bb345:
    assume 1 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb340;

  $bb347:
    assume 1 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(25, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.2, $p122);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p8, $mul.ref(25, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p124, $i123);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb325:
    assume 0 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb327;

  $bb328:
    assume 1 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb330, $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb327;

  $bb330:
    assume 1 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb332, $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb327;

  $bb332:
    assume 1 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb327;

  $bb334:
    assume 1 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(24, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.2, $p119);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p8, $mul.ref(24, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p121, $i120);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb312:
    assume 1 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb314;

  $bb315:
    assume 1 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb314;

  $bb317:
    assume 1 == 1;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb314;

  $bb319:
    assume 1 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb314;

  $bb321:
    assume 1 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(23, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.2, $p116);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p8, $mul.ref(23, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p118, $i117);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb299:
    assume 1 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb301;

  $bb302:
    assume 1 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb301;

  $bb304:
    assume 1 == 1;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb301;

  $bb306:
    assume 1 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb308, $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb301;

  $bb308:
    assume 1 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(22, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.2, $p113);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p8, $mul.ref(22, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p115, $i114);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb286:
    assume 1 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb288;

  $bb289:
    assume 1 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb288;

  $bb291:
    assume 1 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb288;

  $bb293:
    assume 1 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb288;

  $bb295:
    assume 1 == 1;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(21, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.2, $p110);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p8, $mul.ref(21, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p112, $i111);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb273:
    assume 1 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb275;

  $bb276:
    assume 1 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb275;

  $bb278:
    assume 1 == 1;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb275;

  $bb280:
    assume 1 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb275;

  $bb282:
    assume 1 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(20, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.2, $p107);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p8, $mul.ref(20, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p109, $i108);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb260:
    assume 1 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb262;

  $bb263:
    assume 1 == 1;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb262;

  $bb265:
    assume 1 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb262;

  $bb267:
    assume 1 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb262;

  $bb269:
    assume 1 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(19, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.2, $p104);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p8, $mul.ref(19, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p106, $i105);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb247:
    assume 1 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb250, $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb249;

  $bb250:
    assume 1 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb249;

  $bb252:
    assume 1 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb249;

  $bb254:
    assume 1 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb249;

  $bb256:
    assume 1 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(18, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.2, $p101);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p8, $mul.ref(18, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p103, $i102);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb234:
    assume 1 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb236;

  $bb237:
    assume 1 == 1;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb236;

  $bb239:
    assume 1 == 1;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb236;

  $bb241:
    assume 1 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb236;

  $bb243:
    assume 1 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(17, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.2, $p98);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p8, $mul.ref(17, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p100, $i99);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb221:
    assume 1 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb223;

  $bb224:
    assume 1 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb226, $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb223;

  $bb226:
    assume 1 == 1;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb223;

  $bb228:
    assume 1 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb223;

  $bb230:
    assume 1 == 1;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(16, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.2, $p95);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p8, $mul.ref(16, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p97, $i96);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb208:
    assume 1 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb210;

  $bb211:
    assume 1 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb210;

  $bb213:
    assume 1 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb210;

  $bb215:
    assume 1 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb210;

  $bb217:
    assume 1 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(15, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.2, $p92);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p8, $mul.ref(15, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p94, $i93);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb195:
    assume 1 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb197;

  $bb198:
    assume 1 == 1;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb197;

  $bb200:
    assume 1 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb197;

  $bb202:
    assume 1 == 1;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb197;

  $bb204:
    assume 1 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(14, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.2, $p89);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p8, $mul.ref(14, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p91, $i90);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb182:
    assume 1 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb184;

  $bb185:
    assume 1 == 1;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb184;

  $bb187:
    assume 1 == 1;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb184;

  $bb189:
    assume 1 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb184;

  $bb191:
    assume 1 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(13, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.2, $p86);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p8, $mul.ref(13, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p88, $i87);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb169:
    assume 1 == 1;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb172:
    assume 1 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb174:
    assume 1 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb176:
    assume 1 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb171;

  $bb178:
    assume 1 == 1;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(12, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.2, $p83);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p8, $mul.ref(12, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p85, $i84);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb156:
    assume 1 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb158;

  $bb159:
    assume 1 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb158;

  $bb161:
    assume 1 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb158;

  $bb163:
    assume 1 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb158;

  $bb165:
    assume 1 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(11, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.2, $p80);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p8, $mul.ref(11, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p82, $i81);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb143:
    assume 1 == 1;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb145;

  $bb146:
    assume 1 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb145;

  $bb148:
    assume 1 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb145;

  $bb150:
    assume 1 == 1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb145;

  $bb152:
    assume 1 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(10, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.2, $p77);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p8, $mul.ref(10, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p79, $i78);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb130:
    assume 1 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb132;

  $bb133:
    assume 1 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb132;

  $bb135:
    assume 1 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb132;

  $bb137:
    assume 1 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb132;

  $bb139:
    assume 1 == 1;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(9, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.2, $p74);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p8, $mul.ref(9, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p76, $i75);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb117:
    assume 1 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb120:
    assume 1 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb122:
    assume 1 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb124:
    assume 1 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb126:
    assume 1 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(8, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.2, $p71);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p8, $mul.ref(8, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p73, $i72);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb104:
    assume 1 == 1;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb107:
    assume 1 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb109:
    assume 1 == 1;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb111:
    assume 1 == 1;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb113:
    assume 1 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(7, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.2, $p68);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p8, $mul.ref(7, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p70, $i69);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb91:
    assume 1 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb93;

  $bb94:
    assume 1 == 1;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb93;

  $bb96:
    assume 1 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb93;

  $bb98:
    assume 1 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb93;

  $bb100:
    assume 1 == 1;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(6, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.2, $p65);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p67, $i66);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb78:
    assume 1 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb80;

  $bb81:
    assume 1 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb80;

  $bb83:
    assume 1 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb80;

  $bb85:
    assume 1 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb80;

  $bb87:
    assume 1 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(5, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.2, $p62);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p8, $mul.ref(5, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p64, $i63);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb65:
    assume 1 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb68:
    assume 1 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb70:
    assume 1 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb72:
    assume 1 == 1;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb67;

  $bb74:
    assume 1 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(4, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.2, $p59);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p8, $mul.ref(4, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p61, $i60);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb52:
    assume 1 == 1;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb54;

  $bb55:
    assume 1 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb54;

  $bb57:
    assume 1 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb54;

  $bb59:
    assume 1 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb54;

  $bb61:
    assume 1 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(3, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p8, $mul.ref(3, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p58, $i57);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb39:
    assume 1 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb41;

  $bb42:
    assume 1 == 1;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb41;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb41;

  $bb46:
    assume 1 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb41;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(2, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.2, $p53);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p8, $mul.ref(2, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p55, $i54);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb26:
    assume 1 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb29:
    assume 1 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb31:
    assume 1 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb33:
    assume 1 == 1;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb28;

  $bb35:
    assume 1 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(1, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.2, $p50);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p8, $mul.ref(1, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p52, $i51);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume 1 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb8;

  $bb9:
    assume 1 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb8;

  $bb11:
    assume 1 == 1;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb8;

  $bb13:
    assume 1 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb8;

  $bb15:
    assume 1 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 39)), $mul.ref(0, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.2, $p43);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p8, $i44);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i41 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_293 := _tda_printk.ref.ref.ref.ref.i32($p6, .str.26, .str.29, .str.28, $i39);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tda18271_lookup_cid_target: ref;

axiom tda18271_lookup_cid_target == $sub.ref(0, 297034);

procedure tda18271_lookup_cid_target($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.73, $M.74, $M.6, $CurrAddr;



implementation tda18271_lookup_cid_target($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i12: i32;
  var $i29: i32;
  var $i11: i32;
  var $i20: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var vslice_dummy_var_294: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.75, tda18271_cid_target);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 1000);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.39, $p1);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i8, $i9);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i20);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i30, 8)), $mul.ref(4, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.76, $p32);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.73 := $store.i8($M.73, $p2, $i33);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i20);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i34, 8)), $mul.ref(6, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.77, $p36);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $M.74 := $store.i16($M.74, $p3, $i37);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i38 := $M.5;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 2);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i20);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i41, 8)), $mul.ref(4, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.76, $p43);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i20);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i46, 8)), $mul.ref(6, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.77, $p48);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_294 := _tda_printk.ref.ref.ref.ref.i32.i32.i32($p6, .str, .str.3, .str.4, $i20, $i45, $i50);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    call $i13, $i14, $p16, $i17, $i18, $i19, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $i12, $i29 := tda18271_lookup_cid_target_loop_$bb4($p1, $i13, $i14, $p16, $i17, $i18, $i19, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $i12, $i29);
    goto $bb4_last;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i14, 8)), $mul.ref(0, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.75, $p16);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i19 := $i12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i12, 1);
    call {:si_unique_call 679} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref($i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.75, $p24);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 1000);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.39, $p1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i27);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i11 := $i29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i21;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5159;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 298066);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    return;
}



const tda18271_init_regs: ref;

axiom tda18271_init_regs == $sub.ref(0, 299098);

procedure tda18271_init_regs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.2, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr;



implementation tda18271_init_regs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p161: ref;
  var $p165: ref;
  var $p166: ref;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(784, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(0, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_296 := tda18271_i2c_gate_ctrl($p0, 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} i2c_lock_adapter($p21);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i23, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p27, 8);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p5, $mul.ref(2, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p28, $sub.i8(0, 128));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p5, $mul.ref(3, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p29, $sub.i8(0, 58));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p5, $mul.ref(4, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p30, $sub.i8(0, 33));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p31, 22);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p32, 96);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p33, $sub.i8(0, 128));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p34, $sub.i8(0, 128));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p35, 0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p36, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p5, $mul.ref(11, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p37, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p38, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p5, $mul.ref(13, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p39, 0);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p5, $mul.ref(14, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p40, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p5, $mul.ref(15, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p41, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p5, $mul.ref(17, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p49, 1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p5, $mul.ref(18, 1));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p50, $sub.i8(0, 124));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p5, $mul.ref(19, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p51, 65);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p5, $mul.ref(20, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p52, 1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p5, $mul.ref(21, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p53, $sub.i8(0, 124));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p5, $mul.ref(22, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p54, 64);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p5, $mul.ref(23, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p55, 7);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p5, $mul.ref(24, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p56, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p5, $mul.ref(25, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p57, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p5, $mul.ref(26, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p58, $sub.i8(0, 106));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.2, $p59);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p5, $mul.ref(28, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p66, $sub.i8(0, 63));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p5, $mul.ref(29, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p67, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p5, $mul.ref(30, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p68, $sub.i8(0, 113));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p5, $mul.ref(31, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p69, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p70, 0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.2, $p71);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i72, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p5, $mul.ref(34, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p78, 0);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p5, $mul.ref(35, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p79, 32);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.2, $p80);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i81, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p5, $mul.ref(37, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p87, 72);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p5, $mul.ref(38, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p88, $sub.i8(0, 80));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_297 := __tda18271_write_regs($p0, 0, 39, 0);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p90, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_298 := __tda18271_write_regs($p0, 32, 1, 0);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p92, 3);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_299 := __tda18271_write_regs($p0, 32, 1, 0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p94, 67);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_300 := __tda18271_write_regs($p0, 32, 1, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p5, $mul.ref(32, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p96, 76);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_301 := __tda18271_write_regs($p0, 32, 1, 0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.2, $p98);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p5, $mul.ref(5, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p109, 31);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p110, 102);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p111, $sub.i8(0, 127));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p112, $sub.i8(0, 52));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p113, 108);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p114, 0);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p5, $mul.ref(11, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p115, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p116, $sub.i8(0, 51));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p5, $mul.ref(13, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p117, 119);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p5, $mul.ref(14, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p118, 8);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p5, $mul.ref(15, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p119, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_306 := __tda18271_write_regs($p0, 5, 11, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(100, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.2, $p121);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} msleep(5);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_309 := __tda18271_write_regs($p0, 3, 1, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} msleep(5);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p127, $sub.i8(0, 123));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p128, $sub.i8(0, 53));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p129, 102);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p130, 112);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_310 := __tda18271_write_regs($p0, 5, 7, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} msleep(5);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_311 := __tda18271_write_regs($p0, 4, 1, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} msleep(30);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p133, $sub.i8(0, 126));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p134, $sub.i8(0, 88));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p135, 0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p136, $sub.i8(0, 87));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p5, $mul.ref(13, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p137, 115);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p5, $mul.ref(14, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p138, 26);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_312 := __tda18271_write_regs($p0, 5, 11, 0);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} msleep(5);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_313 := __tda18271_write_regs($p0, 3, 1, 0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} msleep(5);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p141, $sub.i8(0, 122));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p142, $sub.i8(0, 88));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p143, 102);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p144, $sub.i8(0, 96));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_314 := __tda18271_write_regs($p0, 5, 7, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} msleep(5);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_315 := __tda18271_write_regs($p0, 4, 1, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} msleep(30);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p147, $sub.i8(0, 125));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p5, $mul.ref(8, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p148, $sub.i8(0, 104));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p149, 101);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p150, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p5, $mul.ref(12, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p151, $sub.i8(0, 103));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p5, $mul.ref(13, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p152, 113);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p5, $mul.ref(14, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p153, $sub.i8(0, 51));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_316 := __tda18271_write_regs($p0, 5, 11, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} msleep(5);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_317 := __tda18271_write_regs($p0, 3, 1, 0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} msleep(5);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p5, $mul.ref(7, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p156, $sub.i8(0, 121));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p5, $mul.ref(9, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p157, 101);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p5, $mul.ref(10, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p158, 80);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_318 := __tda18271_write_regs($p0, 5, 7, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} msleep(5);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_319 := __tda18271_write_regs($p0, 4, 1, 0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} msleep(30);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p5, $mul.ref(6, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p161, 100);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_320 := __tda18271_write_regs($p0, 6, 1, 0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vslice_dummy_var_321 := __tda18271_write_regs($p0, 3, 1, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.2, $p165);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} i2c_unlock_adapter($p166);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_322 := tda18271_i2c_gate_ctrl($p0, 0);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb57:
    assume $i123 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_307 := __tda18271_charge_pump_source($p0, 0, 1, 0);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} msleep(1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_308 := __tda18271_charge_pump_source($p0, 0, 0, 0);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i100 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p5, $mul.ref(35, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p101, $sub.i8(0, 96));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_302 := __tda18271_write_regs($p0, 35, 1, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p5, $mul.ref(35, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p103, $sub.i8(0, 89));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_303 := __tda18271_write_regs($p0, 35, 1, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p5, $mul.ref(35, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p105, $sub.i8(0, 25));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_304 := __tda18271_write_regs($p0, 35, 1, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p5, $mul.ref(35, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p107, $sub.i8(0, 20));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_305 := __tda18271_write_regs($p0, 35, 1, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb47:
    assume $i83 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p86, $sub.i8(0, 77));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i81, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb49;

  $bb50:
    assume $i84 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p5, $mul.ref(36, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p85, 51);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p77, $sub.i8(0, 116));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i72, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb39;

  $bb40:
    assume $i75 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p5, $mul.ref(33, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p76, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p5, $mul.ref(27, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p65, 51);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb29;

  $bb30:
    assume $i63 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p5, $mul.ref(27, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p64, 15);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p48, $sub.i8(0, 4));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p47, $sub.i8(0, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, $sub.i8(0, 124));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p5, $sub.i8(0, 125));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i12 := i2c_adapter_id($p11);
    call {:si_unique_call 683} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.2, $p14);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_295 := _tda_printk.ref.ref.ref.ref.i32.i32($p3, .str, .str.30, .str.31, $i12, $i16);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_42: ref;

axiom ldv_mutex_lock_42 == $sub.ref(0, 300130);

procedure ldv_mutex_lock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.78, assertsPassed;



implementation ldv_mutex_lock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} ldv_mutex_lock_tda18271_list_mutex($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} mutex_lock($p0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 301162);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 302194);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} free_($p0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 303226);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.78, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_mutex_unlock_tda18271_list_mutex($p0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} mutex_unlock($p0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_tda18271_list_mutex: ref;

axiom ldv_mutex_unlock_tda18271_list_mutex == $sub.ref(0, 304258);

procedure ldv_mutex_unlock_tda18271_list_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.78, assertsPassed;



implementation ldv_mutex_unlock_tda18271_list_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i1 := $M.78;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} ldv_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 733} {:cexpr "ldv_mutex_tda18271_list_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_: ref;

axiom free_ == $sub.ref(0, 305290);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 734} $free($p0);
    return;
}



const ldv_mutex_lock_tda18271_list_mutex: ref;

axiom ldv_mutex_lock_tda18271_list_mutex == $sub.ref(0, 306322);

procedure ldv_mutex_lock_tda18271_list_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.78, assertsPassed;



implementation ldv_mutex_lock_tda18271_list_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i1 := $M.78;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 736} {:cexpr "ldv_mutex_tda18271_list_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 307354);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.79, $M.41, $M.80, $M.78;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 737} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 738} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 739} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 740} {:cexpr "ldv_mutex_tda18271_list_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 308386);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i0 := $M.79;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.41;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_error();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.80;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_error();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.78;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_error();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const main: ref;

axiom main == $sub.ref(0, 309418);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.41, $M.80, $M.78, $M.23, $M.26, $M.29, $M.2, $M.6, $M.9, $M.8, $M.5, $M.82, $M.35, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.75, $M.76, $M.77, $M.1, $M.4, $M.3, $M.265, $CurrAddr, $M.66, $M.67, $M.68, $M.69, assertsPassed, $M.39, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.65, $M.42, $M.70, $M.71, $M.72, $M.43, $M.44, $M.73, $M.74;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i2: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;

  $bb0:
    call {:si_unique_call 745} $initialize();
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} ldv_initialize();
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 751} {:cexpr "tmp___0"} boogie_si_record_i32($i0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_check_final_state();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb4;

  $bb4:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i26, $i27, $i28, $i29, $i2, vslice_dummy_var_323, vslice_dummy_var_324, vslice_dummy_var_325, vslice_dummy_var_326, vslice_dummy_var_327, vslice_dummy_var_328, vslice_dummy_var_329, vslice_dummy_var_330, vslice_dummy_var_331 := main_loop_$bb4($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i26, $i27, $i28, $i29, $i2, vslice_dummy_var_323, vslice_dummy_var_324, vslice_dummy_var_325, vslice_dummy_var_326, vslice_dummy_var_327, vslice_dummy_var_328, vslice_dummy_var_329, vslice_dummy_var_330, vslice_dummy_var_331);
    goto $bb4_last;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} $i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i26);
    call {:si_unique_call 775} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i17, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i29 := $or.i1($i27, $i28);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i29 == 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i17;
    goto $bb33_dummy;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_handler_precall();
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_325 := tda18271_get_if_frequency($u0, $u3);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_handler_precall();
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_324 := tda18271_get_bandwidth($u0, $u3);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  $bb11:
    assume $i6 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} ldv_handler_precall();
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_323 := tda18271_get_frequency($u0, $u3);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  $bb9:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i9 == 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} ldv_handler_precall();
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_327 := tda18271_set_config($u0, $u2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i9 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_handler_precall();
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_326 := tda18271_set_analog_params($u0, $u1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_handler_precall();
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_329 := tda18271_set_params($u0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_handler_precall();
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_328 := tda18271_sleep($u0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i12 == 1);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_handler_precall();
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_330 := tda18271_init($u0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb31;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb17;

  $bb26:
    assume $i13 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb31;

  $bb28:
    assume $i14 == 1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_handler_precall();
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_331 := tda18271_release($u0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb30;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 310450);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 311482);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 777} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 1} true;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 312514);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 313546);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 314578);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 315610);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 316642);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 317674);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 318706);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 319738);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 320770);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 321802);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 322834);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 323866);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 324898);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 778} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 779} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 780} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 781} __VERIFIER_assume($i4);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 325930);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 326962);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 327994);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 329026);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 330058);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 331090);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 332122);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 333154);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 334186);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 335218);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 336250);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 337282);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 338314);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 339346);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 340378);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 341410);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 342442);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 782} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 343474);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 344506);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 345538);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 346570);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.5, $M.82, $M.35, $M.2, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.75, $M.76, $M.77, $M.1, $M.4, $M.3, $M.78, $M.80, $M.41, $M.79, $M.265;



implementation __SMACK_static_init()
{

  $bb0:
    $M.5 := 0;
    call {:si_unique_call 783} {:cexpr "tda18271_debug"} boogie_si_record_i32(0);
    call {:si_unique_call 784} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.82 := $store.i8($M.82, tda18271_tuner_ops, 78);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 88);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 32);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 84);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 68);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 65);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 49);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 56);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 50);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 55);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 49);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 72);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 68);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(81, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(82, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(83, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(84, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(85, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(86, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(87, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(89, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(90, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(91, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(92, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(93, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(94, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(95, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(97, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(98, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(99, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(101, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(102, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(103, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(105, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(106, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(107, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(108, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(109, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(110, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(111, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(113, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(114, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(115, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(116, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(117, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(118, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(119, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(120, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(121, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(122, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(123, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(124, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(125, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(126, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(127, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(128, 1)), 45000000);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(132, 1)), 864000000);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(136, 1)), 62500);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(140, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(144, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(148, 1)), 0);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(152, 1)), tda18271_release);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(160, 1)), tda18271_init);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(168, 1)), tda18271_sleep);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(176, 1)), tda18271_set_params);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(184, 1)), tda18271_set_analog_params);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(192, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(200, 1)), tda18271_set_config);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(208, 1)), tda18271_get_frequency);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(216, 1)), tda18271_get_bandwidth);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(224, 1)), tda18271_get_if_frequency);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(232, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(240, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(248, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(256, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(264, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(272, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref(tda18271_tuner_ops, $mul.ref(0, 288)), $mul.ref(280, 1)), $0.ref);
    $M.35 := $sub.i32(0, 1);
    call {:si_unique_call 785} {:cexpr "tda18271_cal_on_startup"} boogie_si_record_i32($sub.i32(0, 1));
    $M.2 := $store.i32($M.2, tda18271_list_mutex, 1);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.93);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(tda18271_list_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(tda18271_list_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), tda18271_list_mutex);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.94);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(tda18271_list_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.85 := $store.i32($M.85, tda18271_rf_band_template, 47900);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(8, 1)), 46000);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(0, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(0, 1)), 61100);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(4, 1)), 1);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(8, 1)), 52200);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(1, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(0, 1)), 152600);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(4, 1)), 2);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(8, 1)), 70100);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(12, 1)), 136800);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(2, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(0, 1)), 164700);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(4, 1)), 3);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(8, 1)), 156700);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(3, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(0, 1)), 203500);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(4, 1)), 4);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(8, 1)), 186250);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(4, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(0, 1)), 457800);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(4, 1)), 5);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(8, 1)), 230000);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(12, 1)), 345000);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(16, 1)), 426000);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(5, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(0, 1)), 865000);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(4, 1)), 6);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(8, 1)), 489500);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(12, 1)), 697500);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(16, 1)), 842000);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(6, 48)), $mul.ref(44, 1)), 0);
    $M.85 := $store.i32($M.85, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(16, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i32($M.91, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(24, 1)), 0);
    $M.92 := $store.i32($M.92, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(28, 1)), 0);
    $M.93 := $store.i32($M.93, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(32, 1)), 0);
    $M.94 := $store.i32($M.94, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(36, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(40, 1)), 0);
    $M.96 := $store.i32($M.96, $add.ref($add.ref($add.ref(tda18271_rf_band_template, $mul.ref(0, 384)), $mul.ref(7, 48)), $mul.ref(44, 1)), 0);
    $M.157 := $store.i32($M.157, tda18271_rf_cal_dc_over_dt, 47900);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(1, 8)), $mul.ref(0, 1)), 55000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(1, 8)), $mul.ref(4, 1)), 0);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(2, 8)), $mul.ref(0, 1)), 61100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(2, 8)), $mul.ref(4, 1)), 10);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(3, 8)), $mul.ref(0, 1)), 64000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(3, 8)), $mul.ref(4, 1)), 10);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(4, 8)), $mul.ref(0, 1)), 82000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(4, 8)), $mul.ref(4, 1)), 20);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(5, 8)), $mul.ref(0, 1)), 84000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(5, 8)), $mul.ref(4, 1)), 25);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(6, 8)), $mul.ref(0, 1)), 119000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(6, 8)), $mul.ref(4, 1)), 28);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(7, 8)), $mul.ref(0, 1)), 124000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(7, 8)), $mul.ref(4, 1)), 32);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(8, 8)), $mul.ref(0, 1)), 129000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(8, 8)), $mul.ref(4, 1)), 42);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(9, 8)), $mul.ref(0, 1)), 134000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(9, 8)), $mul.ref(4, 1)), 50);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(10, 8)), $mul.ref(0, 1)), 139000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(10, 8)), $mul.ref(4, 1)), 57);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(11, 8)), $mul.ref(0, 1)), 144000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(11, 8)), $mul.ref(4, 1)), 62);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(12, 8)), $mul.ref(0, 1)), 149000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(12, 8)), $mul.ref(4, 1)), 63);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(13, 8)), $mul.ref(0, 1)), 152600);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(13, 8)), $mul.ref(4, 1)), 64);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(14, 8)), $mul.ref(0, 1)), 154000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(14, 8)), $mul.ref(4, 1)), 64);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(15, 8)), $mul.ref(0, 1)), 164700);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(15, 8)), $mul.ref(4, 1)), 65);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(16, 8)), $mul.ref(0, 1)), 203500);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(16, 8)), $mul.ref(4, 1)), 50);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(17, 8)), $mul.ref(0, 1)), 353000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(17, 8)), $mul.ref(4, 1)), 25);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(18, 8)), $mul.ref(0, 1)), 356000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(18, 8)), $mul.ref(4, 1)), 26);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(19, 8)), $mul.ref(0, 1)), 359000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(19, 8)), $mul.ref(4, 1)), 27);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(20, 8)), $mul.ref(0, 1)), 363000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(20, 8)), $mul.ref(4, 1)), 28);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(21, 8)), $mul.ref(0, 1)), 366000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(21, 8)), $mul.ref(4, 1)), 29);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(22, 8)), $mul.ref(0, 1)), 369000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(22, 8)), $mul.ref(4, 1)), 30);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(23, 8)), $mul.ref(0, 1)), 373000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(23, 8)), $mul.ref(4, 1)), 31);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(24, 8)), $mul.ref(0, 1)), 376000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(24, 8)), $mul.ref(4, 1)), 32);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(25, 8)), $mul.ref(0, 1)), 379000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(25, 8)), $mul.ref(4, 1)), 33);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(26, 8)), $mul.ref(0, 1)), 383000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(26, 8)), $mul.ref(4, 1)), 34);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(27, 8)), $mul.ref(0, 1)), 386000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(27, 8)), $mul.ref(4, 1)), 35);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(28, 8)), $mul.ref(0, 1)), 389000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(28, 8)), $mul.ref(4, 1)), 36);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(29, 8)), $mul.ref(0, 1)), 393000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(29, 8)), $mul.ref(4, 1)), 37);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(30, 8)), $mul.ref(0, 1)), 396000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(30, 8)), $mul.ref(4, 1)), 38);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(31, 8)), $mul.ref(0, 1)), 399000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(31, 8)), $mul.ref(4, 1)), 39);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(32, 8)), $mul.ref(0, 1)), 402000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(32, 8)), $mul.ref(4, 1)), 40);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(33, 8)), $mul.ref(0, 1)), 404000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(33, 8)), $mul.ref(4, 1)), 41);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(34, 8)), $mul.ref(0, 1)), 407000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(34, 8)), $mul.ref(4, 1)), 42);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(35, 8)), $mul.ref(0, 1)), 409000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(35, 8)), $mul.ref(4, 1)), 43);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(36, 8)), $mul.ref(0, 1)), 412000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(36, 8)), $mul.ref(4, 1)), 44);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(37, 8)), $mul.ref(0, 1)), 414000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(37, 8)), $mul.ref(4, 1)), 45);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(38, 8)), $mul.ref(0, 1)), 417000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(38, 8)), $mul.ref(4, 1)), 46);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(39, 8)), $mul.ref(0, 1)), 419000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(39, 8)), $mul.ref(4, 1)), 47);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(40, 8)), $mul.ref(0, 1)), 422000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(40, 8)), $mul.ref(4, 1)), 48);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(41, 8)), $mul.ref(0, 1)), 424000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(41, 8)), $mul.ref(4, 1)), 49);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(42, 8)), $mul.ref(0, 1)), 427000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(42, 8)), $mul.ref(4, 1)), 50);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(43, 8)), $mul.ref(0, 1)), 429000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(43, 8)), $mul.ref(4, 1)), 51);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(44, 8)), $mul.ref(0, 1)), 432000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(44, 8)), $mul.ref(4, 1)), 52);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(45, 8)), $mul.ref(0, 1)), 434000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(45, 8)), $mul.ref(4, 1)), 53);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(46, 8)), $mul.ref(0, 1)), 437000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(46, 8)), $mul.ref(4, 1)), 54);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(47, 8)), $mul.ref(0, 1)), 439000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(47, 8)), $mul.ref(4, 1)), 55);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(48, 8)), $mul.ref(0, 1)), 442000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(48, 8)), $mul.ref(4, 1)), 56);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(49, 8)), $mul.ref(0, 1)), 444000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(49, 8)), $mul.ref(4, 1)), 57);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(50, 8)), $mul.ref(0, 1)), 447000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(50, 8)), $mul.ref(4, 1)), 58);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(51, 8)), $mul.ref(0, 1)), 449000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(51, 8)), $mul.ref(4, 1)), 59);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(52, 8)), $mul.ref(0, 1)), 457800);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(52, 8)), $mul.ref(4, 1)), 60);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(53, 8)), $mul.ref(0, 1)), 465000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(53, 8)), $mul.ref(4, 1)), 15);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(54, 8)), $mul.ref(0, 1)), 477000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(54, 8)), $mul.ref(4, 1)), 18);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(55, 8)), $mul.ref(0, 1)), 483000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(55, 8)), $mul.ref(4, 1)), 20);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(56, 8)), $mul.ref(0, 1)), 502000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(56, 8)), $mul.ref(4, 1)), 25);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(57, 8)), $mul.ref(0, 1)), 508000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(57, 8)), $mul.ref(4, 1)), 27);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(58, 8)), $mul.ref(0, 1)), 519000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(58, 8)), $mul.ref(4, 1)), 28);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(59, 8)), $mul.ref(0, 1)), 522000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(59, 8)), $mul.ref(4, 1)), 29);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(60, 8)), $mul.ref(0, 1)), 524000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(60, 8)), $mul.ref(4, 1)), 30);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(61, 8)), $mul.ref(0, 1)), 534000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(61, 8)), $mul.ref(4, 1)), 31);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(62, 8)), $mul.ref(0, 1)), 549000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(62, 8)), $mul.ref(4, 1)), 32);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(63, 8)), $mul.ref(0, 1)), 554000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(63, 8)), $mul.ref(4, 1)), 34);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(64, 8)), $mul.ref(0, 1)), 584000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(64, 8)), $mul.ref(4, 1)), 36);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(65, 8)), $mul.ref(0, 1)), 589000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(65, 8)), $mul.ref(4, 1)), 38);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(66, 8)), $mul.ref(0, 1)), 658000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(66, 8)), $mul.ref(4, 1)), 39);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(67, 8)), $mul.ref(0, 1)), 664000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(67, 8)), $mul.ref(4, 1)), 44);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(68, 8)), $mul.ref(0, 1)), 669000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(68, 8)), $mul.ref(4, 1)), 45);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(69, 8)), $mul.ref(0, 1)), 699000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(69, 8)), $mul.ref(4, 1)), 46);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(70, 8)), $mul.ref(0, 1)), 704000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(70, 8)), $mul.ref(4, 1)), 48);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(71, 8)), $mul.ref(0, 1)), 709000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(71, 8)), $mul.ref(4, 1)), 49);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(72, 8)), $mul.ref(0, 1)), 714000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(72, 8)), $mul.ref(4, 1)), 50);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(73, 8)), $mul.ref(0, 1)), 724000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(73, 8)), $mul.ref(4, 1)), 51);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(74, 8)), $mul.ref(0, 1)), 729000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(74, 8)), $mul.ref(4, 1)), 54);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(75, 8)), $mul.ref(0, 1)), 739000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(75, 8)), $mul.ref(4, 1)), 56);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(76, 8)), $mul.ref(0, 1)), 744000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(76, 8)), $mul.ref(4, 1)), 57);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(77, 8)), $mul.ref(0, 1)), 749000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(77, 8)), $mul.ref(4, 1)), 59);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(78, 8)), $mul.ref(0, 1)), 754000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(78, 8)), $mul.ref(4, 1)), 60);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(79, 8)), $mul.ref(0, 1)), 759000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(79, 8)), $mul.ref(4, 1)), 61);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(80, 8)), $mul.ref(0, 1)), 764000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(80, 8)), $mul.ref(4, 1)), 62);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(81, 8)), $mul.ref(0, 1)), 769000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(81, 8)), $mul.ref(4, 1)), 63);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(82, 8)), $mul.ref(0, 1)), 774000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(82, 8)), $mul.ref(4, 1)), 64);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(83, 8)), $mul.ref(0, 1)), 779000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(83, 8)), $mul.ref(4, 1)), 65);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(84, 8)), $mul.ref(0, 1)), 784000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(84, 8)), $mul.ref(4, 1)), 67);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(85, 8)), $mul.ref(0, 1)), 789000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(85, 8)), $mul.ref(4, 1)), 70);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(86, 8)), $mul.ref(0, 1)), 794000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(86, 8)), $mul.ref(4, 1)), 72);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(87, 8)), $mul.ref(0, 1)), 799000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(87, 8)), $mul.ref(4, 1)), 75);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(88, 8)), $mul.ref(0, 1)), 804000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(88, 8)), $mul.ref(4, 1)), 79);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(89, 8)), $mul.ref(0, 1)), 809000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(89, 8)), $mul.ref(4, 1)), 84);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(90, 8)), $mul.ref(0, 1)), 814000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(90, 8)), $mul.ref(4, 1)), 89);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(91, 8)), $mul.ref(0, 1)), 819000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(91, 8)), $mul.ref(4, 1)), 93);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(92, 8)), $mul.ref(0, 1)), 824000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(92, 8)), $mul.ref(4, 1)), 97);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(93, 8)), $mul.ref(0, 1)), 829000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(93, 8)), $mul.ref(4, 1)), 104);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(94, 8)), $mul.ref(0, 1)), 834000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(94, 8)), $mul.ref(4, 1)), 110);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(95, 8)), $mul.ref(0, 1)), 839000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(95, 8)), $mul.ref(4, 1)), 117);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(96, 8)), $mul.ref(0, 1)), 844000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(96, 8)), $mul.ref(4, 1)), 126);
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(97, 8)), $mul.ref(0, 1)), 849000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(97, 8)), $mul.ref(4, 1)), $sub.i8(0, 126));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(98, 8)), $mul.ref(0, 1)), 854000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(98, 8)), $mul.ref(4, 1)), $sub.i8(0, 124));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(99, 8)), $mul.ref(0, 1)), 859000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(99, 8)), $mul.ref(4, 1)), $sub.i8(0, 113));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(100, 8)), $mul.ref(0, 1)), 865000);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(100, 8)), $mul.ref(4, 1)), $sub.i8(0, 102));
    $M.157 := $store.i32($M.157, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(101, 8)), $mul.ref(0, 1)), 0);
    $M.158 := $store.i8($M.158, $add.ref($add.ref($add.ref(tda18271_rf_cal_dc_over_dt, $mul.ref(0, 816)), $mul.ref(101, 8)), $mul.ref(4, 1)), 0);
    $M.159 := $store.i32($M.159, tda18271c2_km, 47900);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(0, 8)), $mul.ref(4, 1)), 56);
    $M.159 := $store.i32($M.159, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(1, 8)), $mul.ref(0, 1)), 61100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(1, 8)), $mul.ref(4, 1)), 68);
    $M.159 := $store.i32($M.159, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(2, 8)), $mul.ref(0, 1)), 350000);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(2, 8)), $mul.ref(4, 1)), 48);
    $M.159 := $store.i32($M.159, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(3, 8)), $mul.ref(0, 1)), 720000);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(3, 8)), $mul.ref(4, 1)), 36);
    $M.159 := $store.i32($M.159, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(4, 8)), $mul.ref(0, 1)), 865000);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(4, 8)), $mul.ref(4, 1)), 60);
    $M.159 := $store.i32($M.159, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(5, 8)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref(tda18271c2_km, $mul.ref(0, 48)), $mul.ref(5, 8)), $mul.ref(4, 1)), 0);
    $M.161 := $store.i32($M.161, tda18271c2_rf_cal, 41000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(0, 8)), $mul.ref(4, 1)), 15);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(1, 8)), $mul.ref(0, 1)), 43000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(1, 8)), $mul.ref(4, 1)), 28);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(2, 8)), $mul.ref(0, 1)), 45000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(2, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(3, 8)), $mul.ref(0, 1)), 46000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(3, 8)), $mul.ref(4, 1)), 57);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(4, 8)), $mul.ref(0, 1)), 47000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(4, 8)), $mul.ref(4, 1)), 64);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(5, 8)), $mul.ref(0, 1)), 47900);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(5, 8)), $mul.ref(4, 1)), 80);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(6, 8)), $mul.ref(0, 1)), 49100);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(6, 8)), $mul.ref(4, 1)), 22);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(7, 8)), $mul.ref(0, 1)), 50000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(7, 8)), $mul.ref(4, 1)), 24);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(8, 8)), $mul.ref(0, 1)), 51000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(8, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(9, 8)), $mul.ref(0, 1)), 53000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(9, 8)), $mul.ref(4, 1)), 40);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(10, 8)), $mul.ref(0, 1)), 55000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(10, 8)), $mul.ref(4, 1)), 43);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(11, 8)), $mul.ref(0, 1)), 56000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(11, 8)), $mul.ref(4, 1)), 50);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(12, 8)), $mul.ref(0, 1)), 57000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(12, 8)), $mul.ref(4, 1)), 53);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(13, 8)), $mul.ref(0, 1)), 58000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(13, 8)), $mul.ref(4, 1)), 62);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(14, 8)), $mul.ref(0, 1)), 59000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(14, 8)), $mul.ref(4, 1)), 67);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(15, 8)), $mul.ref(0, 1)), 60000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(15, 8)), $mul.ref(4, 1)), 78);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(16, 8)), $mul.ref(0, 1)), 61100);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(16, 8)), $mul.ref(4, 1)), 85);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(17, 8)), $mul.ref(0, 1)), 63000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(17, 8)), $mul.ref(4, 1)), 15);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(18, 8)), $mul.ref(0, 1)), 64000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(18, 8)), $mul.ref(4, 1)), 17);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(19, 8)), $mul.ref(0, 1)), 65000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(19, 8)), $mul.ref(4, 1)), 18);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(20, 8)), $mul.ref(0, 1)), 66000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(20, 8)), $mul.ref(4, 1)), 21);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(21, 8)), $mul.ref(0, 1)), 67000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(21, 8)), $mul.ref(4, 1)), 22);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(22, 8)), $mul.ref(0, 1)), 68000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(22, 8)), $mul.ref(4, 1)), 23);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(23, 8)), $mul.ref(0, 1)), 70000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(23, 8)), $mul.ref(4, 1)), 25);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(24, 8)), $mul.ref(0, 1)), 71000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(24, 8)), $mul.ref(4, 1)), 28);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(25, 8)), $mul.ref(0, 1)), 72000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(25, 8)), $mul.ref(4, 1)), 29);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(26, 8)), $mul.ref(0, 1)), 73000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(26, 8)), $mul.ref(4, 1)), 31);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(27, 8)), $mul.ref(0, 1)), 74000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(27, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(28, 8)), $mul.ref(0, 1)), 75000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(28, 8)), $mul.ref(4, 1)), 33);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(29, 8)), $mul.ref(0, 1)), 76000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(29, 8)), $mul.ref(4, 1)), 36);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(30, 8)), $mul.ref(0, 1)), 77000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(30, 8)), $mul.ref(4, 1)), 37);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(31, 8)), $mul.ref(0, 1)), 78000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(31, 8)), $mul.ref(4, 1)), 39);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(32, 8)), $mul.ref(0, 1)), 80000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(32, 8)), $mul.ref(4, 1)), 40);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(33, 8)), $mul.ref(0, 1)), 81000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(33, 8)), $mul.ref(4, 1)), 41);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(34, 8)), $mul.ref(0, 1)), 82000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(34, 8)), $mul.ref(4, 1)), 45);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(35, 8)), $mul.ref(0, 1)), 83000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(35, 8)), $mul.ref(4, 1)), 46);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(36, 8)), $mul.ref(0, 1)), 84000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(36, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(37, 8)), $mul.ref(0, 1)), 85000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(37, 8)), $mul.ref(4, 1)), 49);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(38, 8)), $mul.ref(0, 1)), 86000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(38, 8)), $mul.ref(4, 1)), 51);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(39, 8)), $mul.ref(0, 1)), 87000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(39, 8)), $mul.ref(4, 1)), 52);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(40, 8)), $mul.ref(0, 1)), 88000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(40, 8)), $mul.ref(4, 1)), 53);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(41, 8)), $mul.ref(0, 1)), 89000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(41, 8)), $mul.ref(4, 1)), 55);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(42, 8)), $mul.ref(0, 1)), 90000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(42, 8)), $mul.ref(4, 1)), 56);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(43, 8)), $mul.ref(0, 1)), 91000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(43, 8)), $mul.ref(4, 1)), 57);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(44, 8)), $mul.ref(0, 1)), 93000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(44, 8)), $mul.ref(4, 1)), 60);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(45, 8)), $mul.ref(0, 1)), 94000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(45, 8)), $mul.ref(4, 1)), 62);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(46, 8)), $mul.ref(0, 1)), 95000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(46, 8)), $mul.ref(4, 1)), 63);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(47, 8)), $mul.ref(0, 1)), 96000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(47, 8)), $mul.ref(4, 1)), 64);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(48, 8)), $mul.ref(0, 1)), 97000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(48, 8)), $mul.ref(4, 1)), 66);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(49, 8)), $mul.ref(0, 1)), 99000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(49, 8)), $mul.ref(4, 1)), 69);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(50, 8)), $mul.ref(0, 1)), 100000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(50, 8)), $mul.ref(4, 1)), 70);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(51, 8)), $mul.ref(0, 1)), 102000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(51, 8)), $mul.ref(4, 1)), 72);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(52, 8)), $mul.ref(0, 1)), 103000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(52, 8)), $mul.ref(4, 1)), 74);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(53, 8)), $mul.ref(0, 1)), 105000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(53, 8)), $mul.ref(4, 1)), 77);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(54, 8)), $mul.ref(0, 1)), 106000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(54, 8)), $mul.ref(4, 1)), 78);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(55, 8)), $mul.ref(0, 1)), 107000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(55, 8)), $mul.ref(4, 1)), 80);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(56, 8)), $mul.ref(0, 1)), 108000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(56, 8)), $mul.ref(4, 1)), 81);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(57, 8)), $mul.ref(0, 1)), 110000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(57, 8)), $mul.ref(4, 1)), 84);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(58, 8)), $mul.ref(0, 1)), 111000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(58, 8)), $mul.ref(4, 1)), 86);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(59, 8)), $mul.ref(0, 1)), 112000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(59, 8)), $mul.ref(4, 1)), 87);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(60, 8)), $mul.ref(0, 1)), 113000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(60, 8)), $mul.ref(4, 1)), 88);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(61, 8)), $mul.ref(0, 1)), 114000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(61, 8)), $mul.ref(4, 1)), 89);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(62, 8)), $mul.ref(0, 1)), 115000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(62, 8)), $mul.ref(4, 1)), 92);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(63, 8)), $mul.ref(0, 1)), 116000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(63, 8)), $mul.ref(4, 1)), 93);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(64, 8)), $mul.ref(0, 1)), 117000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(64, 8)), $mul.ref(4, 1)), 95);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(65, 8)), $mul.ref(0, 1)), 119000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(65, 8)), $mul.ref(4, 1)), 96);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(66, 8)), $mul.ref(0, 1)), 120000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(66, 8)), $mul.ref(4, 1)), 100);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(67, 8)), $mul.ref(0, 1)), 121000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(67, 8)), $mul.ref(4, 1)), 101);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(68, 8)), $mul.ref(0, 1)), 122000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(68, 8)), $mul.ref(4, 1)), 102);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(69, 8)), $mul.ref(0, 1)), 123000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(69, 8)), $mul.ref(4, 1)), 104);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(70, 8)), $mul.ref(0, 1)), 124000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(70, 8)), $mul.ref(4, 1)), 105);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(71, 8)), $mul.ref(0, 1)), 125000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(71, 8)), $mul.ref(4, 1)), 108);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(72, 8)), $mul.ref(0, 1)), 126000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(72, 8)), $mul.ref(4, 1)), 109);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(73, 8)), $mul.ref(0, 1)), 127000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(73, 8)), $mul.ref(4, 1)), 110);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(74, 8)), $mul.ref(0, 1)), 128000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(74, 8)), $mul.ref(4, 1)), 112);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(75, 8)), $mul.ref(0, 1)), 129000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(75, 8)), $mul.ref(4, 1)), 113);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(76, 8)), $mul.ref(0, 1)), 130000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(76, 8)), $mul.ref(4, 1)), 117);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(77, 8)), $mul.ref(0, 1)), 131000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(77, 8)), $mul.ref(4, 1)), 119);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(78, 8)), $mul.ref(0, 1)), 132000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(78, 8)), $mul.ref(4, 1)), 120);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(79, 8)), $mul.ref(0, 1)), 133000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(79, 8)), $mul.ref(4, 1)), 123);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(80, 8)), $mul.ref(0, 1)), 134000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(80, 8)), $mul.ref(4, 1)), 126);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(81, 8)), $mul.ref(0, 1)), 135000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(81, 8)), $mul.ref(4, 1)), $sub.i8(0, 127));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(82, 8)), $mul.ref(0, 1)), 136000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(82, 8)), $mul.ref(4, 1)), $sub.i8(0, 126));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(83, 8)), $mul.ref(0, 1)), 137000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(83, 8)), $mul.ref(4, 1)), $sub.i8(0, 121));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(84, 8)), $mul.ref(0, 1)), 138000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(84, 8)), $mul.ref(4, 1)), $sub.i8(0, 120));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(85, 8)), $mul.ref(0, 1)), 139000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(85, 8)), $mul.ref(4, 1)), $sub.i8(0, 115));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(86, 8)), $mul.ref(0, 1)), 140000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(86, 8)), $mul.ref(4, 1)), $sub.i8(0, 114));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(87, 8)), $mul.ref(0, 1)), 141000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(87, 8)), $mul.ref(4, 1)), $sub.i8(0, 111));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(88, 8)), $mul.ref(0, 1)), 142000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(88, 8)), $mul.ref(4, 1)), $sub.i8(0, 107));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(89, 8)), $mul.ref(0, 1)), 143000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(89, 8)), $mul.ref(4, 1)), $sub.i8(0, 102));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(90, 8)), $mul.ref(0, 1)), 144000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(90, 8)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(91, 8)), $mul.ref(0, 1)), 145000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(91, 8)), $mul.ref(4, 1)), $sub.i8(0, 95));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(92, 8)), $mul.ref(0, 1)), 146000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(92, 8)), $mul.ref(4, 1)), $sub.i8(0, 94));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(93, 8)), $mul.ref(0, 1)), 147000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(93, 8)), $mul.ref(4, 1)), $sub.i8(0, 92));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(94, 8)), $mul.ref(0, 1)), 148000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(94, 8)), $mul.ref(4, 1)), $sub.i8(0, 87));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(95, 8)), $mul.ref(0, 1)), 149000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(95, 8)), $mul.ref(4, 1)), $sub.i8(0, 82));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(96, 8)), $mul.ref(0, 1)), 150000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(96, 8)), $mul.ref(4, 1)), $sub.i8(0, 80));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(97, 8)), $mul.ref(0, 1)), 151000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(97, 8)), $mul.ref(4, 1)), $sub.i8(0, 79));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(98, 8)), $mul.ref(0, 1)), 152000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(98, 8)), $mul.ref(4, 1)), $sub.i8(0, 73));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(99, 8)), $mul.ref(0, 1)), 152600);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(99, 8)), $mul.ref(4, 1)), $sub.i8(0, 67));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(100, 8)), $mul.ref(0, 1)), 154000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(100, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(101, 8)), $mul.ref(0, 1)), 155000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(101, 8)), $mul.ref(4, 1)), 34);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(102, 8)), $mul.ref(0, 1)), 156000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(102, 8)), $mul.ref(4, 1)), 36);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(103, 8)), $mul.ref(0, 1)), 157000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(103, 8)), $mul.ref(4, 1)), 37);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(104, 8)), $mul.ref(0, 1)), 158000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(104, 8)), $mul.ref(4, 1)), 39);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(105, 8)), $mul.ref(0, 1)), 159000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(105, 8)), $mul.ref(4, 1)), 41);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(106, 8)), $mul.ref(0, 1)), 160000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(106, 8)), $mul.ref(4, 1)), 44);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(107, 8)), $mul.ref(0, 1)), 161000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(107, 8)), $mul.ref(4, 1)), 45);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(108, 8)), $mul.ref(0, 1)), 163000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(108, 8)), $mul.ref(4, 1)), 46);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(109, 8)), $mul.ref(0, 1)), 164000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(109, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(110, 8)), $mul.ref(0, 1)), 164700);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(110, 8)), $mul.ref(4, 1)), 48);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(111, 8)), $mul.ref(0, 1)), 166000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(111, 8)), $mul.ref(4, 1)), 17);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(112, 8)), $mul.ref(0, 1)), 167000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(112, 8)), $mul.ref(4, 1)), 18);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(113, 8)), $mul.ref(0, 1)), 168000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(113, 8)), $mul.ref(4, 1)), 19);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(114, 8)), $mul.ref(0, 1)), 169000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(114, 8)), $mul.ref(4, 1)), 20);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(115, 8)), $mul.ref(0, 1)), 170000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(115, 8)), $mul.ref(4, 1)), 21);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(116, 8)), $mul.ref(0, 1)), 172000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(116, 8)), $mul.ref(4, 1)), 22);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(117, 8)), $mul.ref(0, 1)), 173000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(117, 8)), $mul.ref(4, 1)), 23);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(118, 8)), $mul.ref(0, 1)), 174000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(118, 8)), $mul.ref(4, 1)), 24);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(119, 8)), $mul.ref(0, 1)), 175000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(119, 8)), $mul.ref(4, 1)), 26);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(120, 8)), $mul.ref(0, 1)), 176000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(120, 8)), $mul.ref(4, 1)), 27);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(121, 8)), $mul.ref(0, 1)), 178000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(121, 8)), $mul.ref(4, 1)), 29);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(122, 8)), $mul.ref(0, 1)), 179000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(122, 8)), $mul.ref(4, 1)), 30);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(123, 8)), $mul.ref(0, 1)), 180000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(123, 8)), $mul.ref(4, 1)), 31);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(124, 8)), $mul.ref(0, 1)), 181000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(124, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(125, 8)), $mul.ref(0, 1)), 182000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(125, 8)), $mul.ref(4, 1)), 33);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(126, 8)), $mul.ref(0, 1)), 183000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(126, 8)), $mul.ref(4, 1)), 34);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(127, 8)), $mul.ref(0, 1)), 184000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(127, 8)), $mul.ref(4, 1)), 36);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(128, 8)), $mul.ref(0, 1)), 185000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(128, 8)), $mul.ref(4, 1)), 37);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(129, 8)), $mul.ref(0, 1)), 186000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(129, 8)), $mul.ref(4, 1)), 38);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(130, 8)), $mul.ref(0, 1)), 187000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(130, 8)), $mul.ref(4, 1)), 39);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(131, 8)), $mul.ref(0, 1)), 188000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(131, 8)), $mul.ref(4, 1)), 41);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(132, 8)), $mul.ref(0, 1)), 189000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(132, 8)), $mul.ref(4, 1)), 42);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(133, 8)), $mul.ref(0, 1)), 190000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(133, 8)), $mul.ref(4, 1)), 44);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(134, 8)), $mul.ref(0, 1)), 191000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(134, 8)), $mul.ref(4, 1)), 45);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(135, 8)), $mul.ref(0, 1)), 192000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(135, 8)), $mul.ref(4, 1)), 46);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(136, 8)), $mul.ref(0, 1)), 193000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(136, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(137, 8)), $mul.ref(0, 1)), 194000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(137, 8)), $mul.ref(4, 1)), 48);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(138, 8)), $mul.ref(0, 1)), 195000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(138, 8)), $mul.ref(4, 1)), 51);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(139, 8)), $mul.ref(0, 1)), 196000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(139, 8)), $mul.ref(4, 1)), 53);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(140, 8)), $mul.ref(0, 1)), 198000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(140, 8)), $mul.ref(4, 1)), 54);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(141, 8)), $mul.ref(0, 1)), 200000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(141, 8)), $mul.ref(4, 1)), 56);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(142, 8)), $mul.ref(0, 1)), 201000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(142, 8)), $mul.ref(4, 1)), 60);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(143, 8)), $mul.ref(0, 1)), 202000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(143, 8)), $mul.ref(4, 1)), 61);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(144, 8)), $mul.ref(0, 1)), 203500);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(144, 8)), $mul.ref(4, 1)), 62);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(145, 8)), $mul.ref(0, 1)), 206000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(145, 8)), $mul.ref(4, 1)), 14);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(146, 8)), $mul.ref(0, 1)), 208000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(146, 8)), $mul.ref(4, 1)), 15);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(147, 8)), $mul.ref(0, 1)), 212000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(147, 8)), $mul.ref(4, 1)), 16);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(148, 8)), $mul.ref(0, 1)), 216000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(148, 8)), $mul.ref(4, 1)), 17);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(149, 8)), $mul.ref(0, 1)), 217000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(149, 8)), $mul.ref(4, 1)), 18);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(150, 8)), $mul.ref(0, 1)), 218000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(150, 8)), $mul.ref(4, 1)), 19);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(151, 8)), $mul.ref(0, 1)), 220000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(151, 8)), $mul.ref(4, 1)), 20);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(152, 8)), $mul.ref(0, 1)), 222000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(152, 8)), $mul.ref(4, 1)), 21);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(153, 8)), $mul.ref(0, 1)), 225000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(153, 8)), $mul.ref(4, 1)), 22);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(154, 8)), $mul.ref(0, 1)), 228000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(154, 8)), $mul.ref(4, 1)), 23);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(155, 8)), $mul.ref(0, 1)), 231000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(155, 8)), $mul.ref(4, 1)), 24);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(156, 8)), $mul.ref(0, 1)), 234000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(156, 8)), $mul.ref(4, 1)), 25);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(157, 8)), $mul.ref(0, 1)), 235000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(157, 8)), $mul.ref(4, 1)), 26);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(158, 8)), $mul.ref(0, 1)), 236000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(158, 8)), $mul.ref(4, 1)), 27);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(159, 8)), $mul.ref(0, 1)), 237000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(159, 8)), $mul.ref(4, 1)), 28);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(160, 8)), $mul.ref(0, 1)), 240000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(160, 8)), $mul.ref(4, 1)), 29);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(161, 8)), $mul.ref(0, 1)), 242000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(161, 8)), $mul.ref(4, 1)), 30);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(162, 8)), $mul.ref(0, 1)), 244000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(162, 8)), $mul.ref(4, 1)), 31);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(163, 8)), $mul.ref(0, 1)), 247000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(163, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(164, 8)), $mul.ref(0, 1)), 249000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(164, 8)), $mul.ref(4, 1)), 33);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(165, 8)), $mul.ref(0, 1)), 252000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(165, 8)), $mul.ref(4, 1)), 34);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(166, 8)), $mul.ref(0, 1)), 253000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(166, 8)), $mul.ref(4, 1)), 35);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(167, 8)), $mul.ref(0, 1)), 254000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(167, 8)), $mul.ref(4, 1)), 36);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(168, 8)), $mul.ref(0, 1)), 256000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(168, 8)), $mul.ref(4, 1)), 37);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(169, 8)), $mul.ref(0, 1)), 259000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(169, 8)), $mul.ref(4, 1)), 38);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(170, 8)), $mul.ref(0, 1)), 262000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(170, 8)), $mul.ref(4, 1)), 39);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(171, 8)), $mul.ref(0, 1)), 264000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(171, 8)), $mul.ref(4, 1)), 40);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(172, 8)), $mul.ref(0, 1)), 267000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(172, 8)), $mul.ref(4, 1)), 41);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(173, 8)), $mul.ref(0, 1)), 269000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(173, 8)), $mul.ref(4, 1)), 42);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(174, 8)), $mul.ref(0, 1)), 271000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(174, 8)), $mul.ref(4, 1)), 43);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(175, 8)), $mul.ref(0, 1)), 273000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(175, 8)), $mul.ref(4, 1)), 44);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(176, 8)), $mul.ref(0, 1)), 275000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(176, 8)), $mul.ref(4, 1)), 45);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(177, 8)), $mul.ref(0, 1)), 277000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(177, 8)), $mul.ref(4, 1)), 46);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(178, 8)), $mul.ref(0, 1)), 279000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(178, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(179, 8)), $mul.ref(0, 1)), 282000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(179, 8)), $mul.ref(4, 1)), 48);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(180, 8)), $mul.ref(0, 1)), 284000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(180, 8)), $mul.ref(4, 1)), 49);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(181, 8)), $mul.ref(0, 1)), 286000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(181, 8)), $mul.ref(4, 1)), 50);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(182, 8)), $mul.ref(0, 1)), 287000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(182, 8)), $mul.ref(4, 1)), 51);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(183, 8)), $mul.ref(0, 1)), 290000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(183, 8)), $mul.ref(4, 1)), 52);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(184, 8)), $mul.ref(0, 1)), 293000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(184, 8)), $mul.ref(4, 1)), 53);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(185, 8)), $mul.ref(0, 1)), 295000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(185, 8)), $mul.ref(4, 1)), 54);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(186, 8)), $mul.ref(0, 1)), 297000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(186, 8)), $mul.ref(4, 1)), 55);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(187, 8)), $mul.ref(0, 1)), 300000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(187, 8)), $mul.ref(4, 1)), 56);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(188, 8)), $mul.ref(0, 1)), 303000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(188, 8)), $mul.ref(4, 1)), 57);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(189, 8)), $mul.ref(0, 1)), 305000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(189, 8)), $mul.ref(4, 1)), 58);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(190, 8)), $mul.ref(0, 1)), 306000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(190, 8)), $mul.ref(4, 1)), 59);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(191, 8)), $mul.ref(0, 1)), 307000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(191, 8)), $mul.ref(4, 1)), 60);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(192, 8)), $mul.ref(0, 1)), 310000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(192, 8)), $mul.ref(4, 1)), 61);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(193, 8)), $mul.ref(0, 1)), 312000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(193, 8)), $mul.ref(4, 1)), 62);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(194, 8)), $mul.ref(0, 1)), 315000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(194, 8)), $mul.ref(4, 1)), 63);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(195, 8)), $mul.ref(0, 1)), 318000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(195, 8)), $mul.ref(4, 1)), 64);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(196, 8)), $mul.ref(0, 1)), 320000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(196, 8)), $mul.ref(4, 1)), 65);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(197, 8)), $mul.ref(0, 1)), 323000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(197, 8)), $mul.ref(4, 1)), 66);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(198, 8)), $mul.ref(0, 1)), 324000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(198, 8)), $mul.ref(4, 1)), 67);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(199, 8)), $mul.ref(0, 1)), 325000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(199, 8)), $mul.ref(4, 1)), 68);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(200, 8)), $mul.ref(0, 1)), 327000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(200, 8)), $mul.ref(4, 1)), 69);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(201, 8)), $mul.ref(0, 1)), 331000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(201, 8)), $mul.ref(4, 1)), 70);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(202, 8)), $mul.ref(0, 1)), 334000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(202, 8)), $mul.ref(4, 1)), 71);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(203, 8)), $mul.ref(0, 1)), 337000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(203, 8)), $mul.ref(4, 1)), 72);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(204, 8)), $mul.ref(0, 1)), 339000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(204, 8)), $mul.ref(4, 1)), 73);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(205, 8)), $mul.ref(0, 1)), 340000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(205, 8)), $mul.ref(4, 1)), 74);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(206, 8)), $mul.ref(0, 1)), 341000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(206, 8)), $mul.ref(4, 1)), 75);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(207, 8)), $mul.ref(0, 1)), 343000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(207, 8)), $mul.ref(4, 1)), 76);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(208, 8)), $mul.ref(0, 1)), 345000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(208, 8)), $mul.ref(4, 1)), 77);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(209, 8)), $mul.ref(0, 1)), 349000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(209, 8)), $mul.ref(4, 1)), 78);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(210, 8)), $mul.ref(0, 1)), 352000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(210, 8)), $mul.ref(4, 1)), 79);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(211, 8)), $mul.ref(0, 1)), 353000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(211, 8)), $mul.ref(4, 1)), 80);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(212, 8)), $mul.ref(0, 1)), 355000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(212, 8)), $mul.ref(4, 1)), 81);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(213, 8)), $mul.ref(0, 1)), 357000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(213, 8)), $mul.ref(4, 1)), 82);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(214, 8)), $mul.ref(0, 1)), 359000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(214, 8)), $mul.ref(4, 1)), 83);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(215, 8)), $mul.ref(0, 1)), 361000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(215, 8)), $mul.ref(4, 1)), 84);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(216, 8)), $mul.ref(0, 1)), 362000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(216, 8)), $mul.ref(4, 1)), 85);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(217, 8)), $mul.ref(0, 1)), 364000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(217, 8)), $mul.ref(4, 1)), 86);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(218, 8)), $mul.ref(0, 1)), 368000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(218, 8)), $mul.ref(4, 1)), 87);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(219, 8)), $mul.ref(0, 1)), 370000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(219, 8)), $mul.ref(4, 1)), 88);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(220, 8)), $mul.ref(0, 1)), 372000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(220, 8)), $mul.ref(4, 1)), 89);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(221, 8)), $mul.ref(0, 1)), 375000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(221, 8)), $mul.ref(4, 1)), 90);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(222, 8)), $mul.ref(0, 1)), 376000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(222, 8)), $mul.ref(4, 1)), 91);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(223, 8)), $mul.ref(0, 1)), 377000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(223, 8)), $mul.ref(4, 1)), 92);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(224, 8)), $mul.ref(0, 1)), 379000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(224, 8)), $mul.ref(4, 1)), 93);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(225, 8)), $mul.ref(0, 1)), 382000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(225, 8)), $mul.ref(4, 1)), 94);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(226, 8)), $mul.ref(0, 1)), 384000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(226, 8)), $mul.ref(4, 1)), 95);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(227, 8)), $mul.ref(0, 1)), 385000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(227, 8)), $mul.ref(4, 1)), 96);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(228, 8)), $mul.ref(0, 1)), 386000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(228, 8)), $mul.ref(4, 1)), 97);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(229, 8)), $mul.ref(0, 1)), 388000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(229, 8)), $mul.ref(4, 1)), 98);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(230, 8)), $mul.ref(0, 1)), 390000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(230, 8)), $mul.ref(4, 1)), 99);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(231, 8)), $mul.ref(0, 1)), 393000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(231, 8)), $mul.ref(4, 1)), 100);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(232, 8)), $mul.ref(0, 1)), 394000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(232, 8)), $mul.ref(4, 1)), 101);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(233, 8)), $mul.ref(0, 1)), 396000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(233, 8)), $mul.ref(4, 1)), 102);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(234, 8)), $mul.ref(0, 1)), 397000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(234, 8)), $mul.ref(4, 1)), 103);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(235, 8)), $mul.ref(0, 1)), 398000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(235, 8)), $mul.ref(4, 1)), 104);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(236, 8)), $mul.ref(0, 1)), 400000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(236, 8)), $mul.ref(4, 1)), 105);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(237, 8)), $mul.ref(0, 1)), 402000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(237, 8)), $mul.ref(4, 1)), 106);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(238, 8)), $mul.ref(0, 1)), 403000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(238, 8)), $mul.ref(4, 1)), 107);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(239, 8)), $mul.ref(0, 1)), 407000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(239, 8)), $mul.ref(4, 1)), 108);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(240, 8)), $mul.ref(0, 1)), 408000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(240, 8)), $mul.ref(4, 1)), 109);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(241, 8)), $mul.ref(0, 1)), 409000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(241, 8)), $mul.ref(4, 1)), 110);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(242, 8)), $mul.ref(0, 1)), 410000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(242, 8)), $mul.ref(4, 1)), 111);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(243, 8)), $mul.ref(0, 1)), 411000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(243, 8)), $mul.ref(4, 1)), 112);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(244, 8)), $mul.ref(0, 1)), 412000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(244, 8)), $mul.ref(4, 1)), 113);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(245, 8)), $mul.ref(0, 1)), 413000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(245, 8)), $mul.ref(4, 1)), 114);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(246, 8)), $mul.ref(0, 1)), 414000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(246, 8)), $mul.ref(4, 1)), 115);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(247, 8)), $mul.ref(0, 1)), 417000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(247, 8)), $mul.ref(4, 1)), 116);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(248, 8)), $mul.ref(0, 1)), 418000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(248, 8)), $mul.ref(4, 1)), 117);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(249, 8)), $mul.ref(0, 1)), 420000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(249, 8)), $mul.ref(4, 1)), 118);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(250, 8)), $mul.ref(0, 1)), 422000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(250, 8)), $mul.ref(4, 1)), 119);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(251, 8)), $mul.ref(0, 1)), 423000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(251, 8)), $mul.ref(4, 1)), 120);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(252, 8)), $mul.ref(0, 1)), 424000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(252, 8)), $mul.ref(4, 1)), 121);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(253, 8)), $mul.ref(0, 1)), 427000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(253, 8)), $mul.ref(4, 1)), 122);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(254, 8)), $mul.ref(0, 1)), 428000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(254, 8)), $mul.ref(4, 1)), 123);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(255, 8)), $mul.ref(0, 1)), 429000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(255, 8)), $mul.ref(4, 1)), 125);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(256, 8)), $mul.ref(0, 1)), 432000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(256, 8)), $mul.ref(4, 1)), 127);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(257, 8)), $mul.ref(0, 1)), 434000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(257, 8)), $mul.ref(4, 1)), $sub.i8(0, 128));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(258, 8)), $mul.ref(0, 1)), 435000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(258, 8)), $mul.ref(4, 1)), $sub.i8(0, 127));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(259, 8)), $mul.ref(0, 1)), 436000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(259, 8)), $mul.ref(4, 1)), $sub.i8(0, 125));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(260, 8)), $mul.ref(0, 1)), 437000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(260, 8)), $mul.ref(4, 1)), $sub.i8(0, 124));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(261, 8)), $mul.ref(0, 1)), 438000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(261, 8)), $mul.ref(4, 1)), $sub.i8(0, 123));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(262, 8)), $mul.ref(0, 1)), 439000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(262, 8)), $mul.ref(4, 1)), $sub.i8(0, 122));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(263, 8)), $mul.ref(0, 1)), 440000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(263, 8)), $mul.ref(4, 1)), $sub.i8(0, 121));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(264, 8)), $mul.ref(0, 1)), 441000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(264, 8)), $mul.ref(4, 1)), $sub.i8(0, 120));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(265, 8)), $mul.ref(0, 1)), 442000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(265, 8)), $mul.ref(4, 1)), $sub.i8(0, 119));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(266, 8)), $mul.ref(0, 1)), 445000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(266, 8)), $mul.ref(4, 1)), $sub.i8(0, 118));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(267, 8)), $mul.ref(0, 1)), 446000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(267, 8)), $mul.ref(4, 1)), $sub.i8(0, 117));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(268, 8)), $mul.ref(0, 1)), 447000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(268, 8)), $mul.ref(4, 1)), $sub.i8(0, 116));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(269, 8)), $mul.ref(0, 1)), 448000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(269, 8)), $mul.ref(4, 1)), $sub.i8(0, 114));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(270, 8)), $mul.ref(0, 1)), 449000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(270, 8)), $mul.ref(4, 1)), $sub.i8(0, 113));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(271, 8)), $mul.ref(0, 1)), 450000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(271, 8)), $mul.ref(4, 1)), $sub.i8(0, 112));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(272, 8)), $mul.ref(0, 1)), 452000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(272, 8)), $mul.ref(4, 1)), $sub.i8(0, 111));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(273, 8)), $mul.ref(0, 1)), 453000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(273, 8)), $mul.ref(4, 1)), $sub.i8(0, 109));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(274, 8)), $mul.ref(0, 1)), 454000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(274, 8)), $mul.ref(4, 1)), $sub.i8(0, 108));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(275, 8)), $mul.ref(0, 1)), 456000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(275, 8)), $mul.ref(4, 1)), $sub.i8(0, 106));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(276, 8)), $mul.ref(0, 1)), 457800);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(276, 8)), $mul.ref(4, 1)), $sub.i8(0, 104));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(277, 8)), $mul.ref(0, 1)), 461000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(277, 8)), $mul.ref(4, 1)), 17);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(278, 8)), $mul.ref(0, 1)), 468000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(278, 8)), $mul.ref(4, 1)), 18);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(279, 8)), $mul.ref(0, 1)), 472000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(279, 8)), $mul.ref(4, 1)), 19);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(280, 8)), $mul.ref(0, 1)), 473000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(280, 8)), $mul.ref(4, 1)), 20);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(281, 8)), $mul.ref(0, 1)), 474000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(281, 8)), $mul.ref(4, 1)), 21);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(282, 8)), $mul.ref(0, 1)), 481000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(282, 8)), $mul.ref(4, 1)), 22);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(283, 8)), $mul.ref(0, 1)), 486000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(283, 8)), $mul.ref(4, 1)), 23);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(284, 8)), $mul.ref(0, 1)), 491000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(284, 8)), $mul.ref(4, 1)), 24);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(285, 8)), $mul.ref(0, 1)), 498000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(285, 8)), $mul.ref(4, 1)), 25);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(286, 8)), $mul.ref(0, 1)), 499000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(286, 8)), $mul.ref(4, 1)), 26);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(287, 8)), $mul.ref(0, 1)), 501000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(287, 8)), $mul.ref(4, 1)), 27);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(288, 8)), $mul.ref(0, 1)), 506000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(288, 8)), $mul.ref(4, 1)), 28);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(289, 8)), $mul.ref(0, 1)), 511000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(289, 8)), $mul.ref(4, 1)), 29);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(290, 8)), $mul.ref(0, 1)), 516000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(290, 8)), $mul.ref(4, 1)), 30);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(291, 8)), $mul.ref(0, 1)), 520000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(291, 8)), $mul.ref(4, 1)), 31);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(292, 8)), $mul.ref(0, 1)), 521000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(292, 8)), $mul.ref(4, 1)), 32);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(293, 8)), $mul.ref(0, 1)), 525000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(293, 8)), $mul.ref(4, 1)), 33);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(294, 8)), $mul.ref(0, 1)), 529000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(294, 8)), $mul.ref(4, 1)), 34);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(295, 8)), $mul.ref(0, 1)), 533000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(295, 8)), $mul.ref(4, 1)), 35);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(296, 8)), $mul.ref(0, 1)), 539000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(296, 8)), $mul.ref(4, 1)), 36);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(297, 8)), $mul.ref(0, 1)), 541000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(297, 8)), $mul.ref(4, 1)), 37);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(298, 8)), $mul.ref(0, 1)), 547000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(298, 8)), $mul.ref(4, 1)), 38);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(299, 8)), $mul.ref(0, 1)), 549000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(299, 8)), $mul.ref(4, 1)), 39);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(300, 8)), $mul.ref(0, 1)), 551000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(300, 8)), $mul.ref(4, 1)), 40);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(301, 8)), $mul.ref(0, 1)), 556000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(301, 8)), $mul.ref(4, 1)), 41);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(302, 8)), $mul.ref(0, 1)), 561000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(302, 8)), $mul.ref(4, 1)), 42);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(303, 8)), $mul.ref(0, 1)), 563000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(303, 8)), $mul.ref(4, 1)), 43);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(304, 8)), $mul.ref(0, 1)), 565000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(304, 8)), $mul.ref(4, 1)), 44);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(305, 8)), $mul.ref(0, 1)), 569000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(305, 8)), $mul.ref(4, 1)), 45);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(306, 8)), $mul.ref(0, 1)), 571000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(306, 8)), $mul.ref(4, 1)), 46);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(307, 8)), $mul.ref(0, 1)), 577000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(307, 8)), $mul.ref(4, 1)), 47);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(308, 8)), $mul.ref(0, 1)), 580000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(308, 8)), $mul.ref(4, 1)), 48);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(309, 8)), $mul.ref(0, 1)), 582000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(309, 8)), $mul.ref(4, 1)), 49);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(310, 8)), $mul.ref(0, 1)), 584000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(310, 8)), $mul.ref(4, 1)), 50);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(311, 8)), $mul.ref(0, 1)), 588000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(311, 8)), $mul.ref(4, 1)), 51);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(312, 8)), $mul.ref(0, 1)), 591000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(312, 8)), $mul.ref(4, 1)), 52);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(313, 8)), $mul.ref(0, 1)), 596000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(313, 8)), $mul.ref(4, 1)), 53);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(314, 8)), $mul.ref(0, 1)), 598000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(314, 8)), $mul.ref(4, 1)), 54);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(315, 8)), $mul.ref(0, 1)), 603000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(315, 8)), $mul.ref(4, 1)), 55);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(316, 8)), $mul.ref(0, 1)), 604000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(316, 8)), $mul.ref(4, 1)), 56);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(317, 8)), $mul.ref(0, 1)), 606000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(317, 8)), $mul.ref(4, 1)), 57);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(318, 8)), $mul.ref(0, 1)), 612000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(318, 8)), $mul.ref(4, 1)), 58);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(319, 8)), $mul.ref(0, 1)), 615000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(319, 8)), $mul.ref(4, 1)), 59);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(320, 8)), $mul.ref(0, 1)), 617000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(320, 8)), $mul.ref(4, 1)), 60);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(321, 8)), $mul.ref(0, 1)), 621000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(321, 8)), $mul.ref(4, 1)), 61);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(322, 8)), $mul.ref(0, 1)), 622000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(322, 8)), $mul.ref(4, 1)), 62);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(323, 8)), $mul.ref(0, 1)), 625000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(323, 8)), $mul.ref(4, 1)), 63);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(324, 8)), $mul.ref(0, 1)), 632000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(324, 8)), $mul.ref(4, 1)), 64);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(325, 8)), $mul.ref(0, 1)), 633000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(325, 8)), $mul.ref(4, 1)), 65);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(326, 8)), $mul.ref(0, 1)), 634000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(326, 8)), $mul.ref(4, 1)), 66);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(327, 8)), $mul.ref(0, 1)), 642000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(327, 8)), $mul.ref(4, 1)), 67);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(328, 8)), $mul.ref(0, 1)), 643000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(328, 8)), $mul.ref(4, 1)), 68);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(329, 8)), $mul.ref(0, 1)), 647000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(329, 8)), $mul.ref(4, 1)), 69);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(330, 8)), $mul.ref(0, 1)), 650000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(330, 8)), $mul.ref(4, 1)), 70);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(331, 8)), $mul.ref(0, 1)), 652000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(331, 8)), $mul.ref(4, 1)), 71);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(332, 8)), $mul.ref(0, 1)), 657000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(332, 8)), $mul.ref(4, 1)), 72);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(333, 8)), $mul.ref(0, 1)), 661000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(333, 8)), $mul.ref(4, 1)), 73);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(334, 8)), $mul.ref(0, 1)), 662000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(334, 8)), $mul.ref(4, 1)), 74);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(335, 8)), $mul.ref(0, 1)), 665000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(335, 8)), $mul.ref(4, 1)), 75);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(336, 8)), $mul.ref(0, 1)), 667000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(336, 8)), $mul.ref(4, 1)), 76);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(337, 8)), $mul.ref(0, 1)), 670000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(337, 8)), $mul.ref(4, 1)), 77);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(338, 8)), $mul.ref(0, 1)), 673000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(338, 8)), $mul.ref(4, 1)), 78);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(339, 8)), $mul.ref(0, 1)), 676000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(339, 8)), $mul.ref(4, 1)), 79);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(340, 8)), $mul.ref(0, 1)), 677000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(340, 8)), $mul.ref(4, 1)), 80);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(341, 8)), $mul.ref(0, 1)), 681000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(341, 8)), $mul.ref(4, 1)), 81);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(342, 8)), $mul.ref(0, 1)), 683000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(342, 8)), $mul.ref(4, 1)), 82);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(343, 8)), $mul.ref(0, 1)), 686000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(343, 8)), $mul.ref(4, 1)), 83);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(344, 8)), $mul.ref(0, 1)), 688000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(344, 8)), $mul.ref(4, 1)), 84);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(345, 8)), $mul.ref(0, 1)), 689000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(345, 8)), $mul.ref(4, 1)), 85);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(346, 8)), $mul.ref(0, 1)), 691000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(346, 8)), $mul.ref(4, 1)), 86);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(347, 8)), $mul.ref(0, 1)), 695000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(347, 8)), $mul.ref(4, 1)), 87);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(348, 8)), $mul.ref(0, 1)), 698000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(348, 8)), $mul.ref(4, 1)), 88);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(349, 8)), $mul.ref(0, 1)), 703000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(349, 8)), $mul.ref(4, 1)), 89);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(350, 8)), $mul.ref(0, 1)), 704000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(350, 8)), $mul.ref(4, 1)), 90);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(351, 8)), $mul.ref(0, 1)), 705000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(351, 8)), $mul.ref(4, 1)), 91);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(352, 8)), $mul.ref(0, 1)), 707000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(352, 8)), $mul.ref(4, 1)), 92);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(353, 8)), $mul.ref(0, 1)), 710000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(353, 8)), $mul.ref(4, 1)), 93);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(354, 8)), $mul.ref(0, 1)), 712000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(354, 8)), $mul.ref(4, 1)), 94);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(355, 8)), $mul.ref(0, 1)), 717000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(355, 8)), $mul.ref(4, 1)), 95);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(356, 8)), $mul.ref(0, 1)), 718000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(356, 8)), $mul.ref(4, 1)), 96);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(357, 8)), $mul.ref(0, 1)), 721000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(357, 8)), $mul.ref(4, 1)), 97);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(358, 8)), $mul.ref(0, 1)), 722000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(358, 8)), $mul.ref(4, 1)), 98);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(359, 8)), $mul.ref(0, 1)), 723000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(359, 8)), $mul.ref(4, 1)), 99);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(360, 8)), $mul.ref(0, 1)), 725000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(360, 8)), $mul.ref(4, 1)), 100);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(361, 8)), $mul.ref(0, 1)), 727000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(361, 8)), $mul.ref(4, 1)), 101);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(362, 8)), $mul.ref(0, 1)), 730000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(362, 8)), $mul.ref(4, 1)), 102);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(363, 8)), $mul.ref(0, 1)), 732000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(363, 8)), $mul.ref(4, 1)), 103);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(364, 8)), $mul.ref(0, 1)), 735000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(364, 8)), $mul.ref(4, 1)), 104);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(365, 8)), $mul.ref(0, 1)), 740000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(365, 8)), $mul.ref(4, 1)), 105);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(366, 8)), $mul.ref(0, 1)), 741000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(366, 8)), $mul.ref(4, 1)), 106);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(367, 8)), $mul.ref(0, 1)), 742000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(367, 8)), $mul.ref(4, 1)), 107);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(368, 8)), $mul.ref(0, 1)), 743000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(368, 8)), $mul.ref(4, 1)), 108);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(369, 8)), $mul.ref(0, 1)), 745000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(369, 8)), $mul.ref(4, 1)), 109);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(370, 8)), $mul.ref(0, 1)), 747000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(370, 8)), $mul.ref(4, 1)), 110);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(371, 8)), $mul.ref(0, 1)), 748000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(371, 8)), $mul.ref(4, 1)), 111);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(372, 8)), $mul.ref(0, 1)), 750000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(372, 8)), $mul.ref(4, 1)), 112);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(373, 8)), $mul.ref(0, 1)), 752000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(373, 8)), $mul.ref(4, 1)), 113);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(374, 8)), $mul.ref(0, 1)), 754000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(374, 8)), $mul.ref(4, 1)), 114);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(375, 8)), $mul.ref(0, 1)), 757000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(375, 8)), $mul.ref(4, 1)), 115);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(376, 8)), $mul.ref(0, 1)), 758000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(376, 8)), $mul.ref(4, 1)), 116);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(377, 8)), $mul.ref(0, 1)), 760000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(377, 8)), $mul.ref(4, 1)), 117);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(378, 8)), $mul.ref(0, 1)), 763000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(378, 8)), $mul.ref(4, 1)), 118);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(379, 8)), $mul.ref(0, 1)), 764000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(379, 8)), $mul.ref(4, 1)), 119);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(380, 8)), $mul.ref(0, 1)), 766000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(380, 8)), $mul.ref(4, 1)), 120);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(381, 8)), $mul.ref(0, 1)), 767000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(381, 8)), $mul.ref(4, 1)), 121);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(382, 8)), $mul.ref(0, 1)), 768000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(382, 8)), $mul.ref(4, 1)), 122);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(383, 8)), $mul.ref(0, 1)), 773000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(383, 8)), $mul.ref(4, 1)), 123);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(384, 8)), $mul.ref(0, 1)), 774000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(384, 8)), $mul.ref(4, 1)), 124);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(385, 8)), $mul.ref(0, 1)), 776000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(385, 8)), $mul.ref(4, 1)), 125);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(386, 8)), $mul.ref(0, 1)), 777000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(386, 8)), $mul.ref(4, 1)), 126);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(387, 8)), $mul.ref(0, 1)), 778000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(387, 8)), $mul.ref(4, 1)), 127);
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(388, 8)), $mul.ref(0, 1)), 779000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(388, 8)), $mul.ref(4, 1)), $sub.i8(0, 128));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(389, 8)), $mul.ref(0, 1)), 781000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(389, 8)), $mul.ref(4, 1)), $sub.i8(0, 127));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(390, 8)), $mul.ref(0, 1)), 783000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(390, 8)), $mul.ref(4, 1)), $sub.i8(0, 126));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(391, 8)), $mul.ref(0, 1)), 784000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(391, 8)), $mul.ref(4, 1)), $sub.i8(0, 125));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(392, 8)), $mul.ref(0, 1)), 785000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(392, 8)), $mul.ref(4, 1)), $sub.i8(0, 124));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(393, 8)), $mul.ref(0, 1)), 786000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(393, 8)), $mul.ref(4, 1)), $sub.i8(0, 123));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(394, 8)), $mul.ref(0, 1)), 793000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(394, 8)), $mul.ref(4, 1)), $sub.i8(0, 122));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(395, 8)), $mul.ref(0, 1)), 794000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(395, 8)), $mul.ref(4, 1)), $sub.i8(0, 121));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(396, 8)), $mul.ref(0, 1)), 795000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(396, 8)), $mul.ref(4, 1)), $sub.i8(0, 120));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(397, 8)), $mul.ref(0, 1)), 797000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(397, 8)), $mul.ref(4, 1)), $sub.i8(0, 119));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(398, 8)), $mul.ref(0, 1)), 799000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(398, 8)), $mul.ref(4, 1)), $sub.i8(0, 118));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(399, 8)), $mul.ref(0, 1)), 801000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(399, 8)), $mul.ref(4, 1)), $sub.i8(0, 117));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(400, 8)), $mul.ref(0, 1)), 802000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(400, 8)), $mul.ref(4, 1)), $sub.i8(0, 116));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(401, 8)), $mul.ref(0, 1)), 803000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(401, 8)), $mul.ref(4, 1)), $sub.i8(0, 115));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(402, 8)), $mul.ref(0, 1)), 804000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(402, 8)), $mul.ref(4, 1)), $sub.i8(0, 114));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(403, 8)), $mul.ref(0, 1)), 810000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(403, 8)), $mul.ref(4, 1)), $sub.i8(0, 112));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(404, 8)), $mul.ref(0, 1)), 811000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(404, 8)), $mul.ref(4, 1)), $sub.i8(0, 111));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(405, 8)), $mul.ref(0, 1)), 812000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(405, 8)), $mul.ref(4, 1)), $sub.i8(0, 110));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(406, 8)), $mul.ref(0, 1)), 814000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(406, 8)), $mul.ref(4, 1)), $sub.i8(0, 109));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(407, 8)), $mul.ref(0, 1)), 816000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(407, 8)), $mul.ref(4, 1)), $sub.i8(0, 108));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(408, 8)), $mul.ref(0, 1)), 817000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(408, 8)), $mul.ref(4, 1)), $sub.i8(0, 106));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(409, 8)), $mul.ref(0, 1)), 818000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(409, 8)), $mul.ref(4, 1)), $sub.i8(0, 105));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(410, 8)), $mul.ref(0, 1)), 820000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(410, 8)), $mul.ref(4, 1)), $sub.i8(0, 104));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(411, 8)), $mul.ref(0, 1)), 821000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(411, 8)), $mul.ref(4, 1)), $sub.i8(0, 103));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(412, 8)), $mul.ref(0, 1)), 822000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(412, 8)), $mul.ref(4, 1)), $sub.i8(0, 102));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(413, 8)), $mul.ref(0, 1)), 828000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(413, 8)), $mul.ref(4, 1)), $sub.i8(0, 101));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(414, 8)), $mul.ref(0, 1)), 829000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(414, 8)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(415, 8)), $mul.ref(0, 1)), 830000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(415, 8)), $mul.ref(4, 1)), $sub.i8(0, 97));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(416, 8)), $mul.ref(0, 1)), 831000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(416, 8)), $mul.ref(4, 1)), $sub.i8(0, 96));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(417, 8)), $mul.ref(0, 1)), 833000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(417, 8)), $mul.ref(4, 1)), $sub.i8(0, 95));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(418, 8)), $mul.ref(0, 1)), 835000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(418, 8)), $mul.ref(4, 1)), $sub.i8(0, 94));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(419, 8)), $mul.ref(0, 1)), 836000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(419, 8)), $mul.ref(4, 1)), $sub.i8(0, 93));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(420, 8)), $mul.ref(0, 1)), 837000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(420, 8)), $mul.ref(4, 1)), $sub.i8(0, 92));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(421, 8)), $mul.ref(0, 1)), 838000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(421, 8)), $mul.ref(4, 1)), $sub.i8(0, 90));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(422, 8)), $mul.ref(0, 1)), 840000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(422, 8)), $mul.ref(4, 1)), $sub.i8(0, 88));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(423, 8)), $mul.ref(0, 1)), 842000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(423, 8)), $mul.ref(4, 1)), $sub.i8(0, 87));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(424, 8)), $mul.ref(0, 1)), 845000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(424, 8)), $mul.ref(4, 1)), $sub.i8(0, 86));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(425, 8)), $mul.ref(0, 1)), 846000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(425, 8)), $mul.ref(4, 1)), $sub.i8(0, 85));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(426, 8)), $mul.ref(0, 1)), 847000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(426, 8)), $mul.ref(4, 1)), $sub.i8(0, 83));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(427, 8)), $mul.ref(0, 1)), 848000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(427, 8)), $mul.ref(4, 1)), $sub.i8(0, 82));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(428, 8)), $mul.ref(0, 1)), 852000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(428, 8)), $mul.ref(4, 1)), $sub.i8(0, 81));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(429, 8)), $mul.ref(0, 1)), 853000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(429, 8)), $mul.ref(4, 1)), $sub.i8(0, 80));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(430, 8)), $mul.ref(0, 1)), 858000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(430, 8)), $mul.ref(4, 1)), $sub.i8(0, 79));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(431, 8)), $mul.ref(0, 1)), 860000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(431, 8)), $mul.ref(4, 1)), $sub.i8(0, 78));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(432, 8)), $mul.ref(0, 1)), 861000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(432, 8)), $mul.ref(4, 1)), $sub.i8(0, 77));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(433, 8)), $mul.ref(0, 1)), 862000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(433, 8)), $mul.ref(4, 1)), $sub.i8(0, 76));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(434, 8)), $mul.ref(0, 1)), 863000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(434, 8)), $mul.ref(4, 1)), $sub.i8(0, 74));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(435, 8)), $mul.ref(0, 1)), 864000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(435, 8)), $mul.ref(4, 1)), $sub.i8(0, 72));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(436, 8)), $mul.ref(0, 1)), 865000);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(436, 8)), $mul.ref(4, 1)), $sub.i8(0, 71));
    $M.161 := $store.i32($M.161, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(437, 8)), $mul.ref(0, 1)), 0);
    $M.162 := $store.i8($M.162, $add.ref($add.ref($add.ref(tda18271c2_rf_cal, $mul.ref(0, 3504)), $mul.ref(437, 8)), $mul.ref(4, 1)), 0);
    $M.163 := $store.i32($M.163, tda18271c2_cal_pll, 33813);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i8(0, 35));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 48));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(1, 8)), $mul.ref(0, 1)), 36625);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(1, 8)), $mul.ref(4, 1)), $sub.i8(0, 36));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(1, 8)), $mul.ref(5, 1)), $sub.i8(0, 64));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(2, 8)), $mul.ref(0, 1)), 39938);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(2, 8)), $mul.ref(4, 1)), $sub.i8(0, 37));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(2, 8)), $mul.ref(5, 1)), $sub.i8(0, 80));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(3, 8)), $mul.ref(0, 1)), 43938);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(3, 8)), $mul.ref(4, 1)), $sub.i8(0, 38));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(3, 8)), $mul.ref(5, 1)), $sub.i8(0, 96));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(4, 8)), $mul.ref(0, 1)), 48813);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(4, 8)), $mul.ref(4, 1)), $sub.i8(0, 39));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(4, 8)), $mul.ref(5, 1)), $sub.i8(0, 112));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(5, 8)), $mul.ref(0, 1)), 54938);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(5, 8)), $mul.ref(4, 1)), $sub.i8(0, 40));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(5, 8)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(6, 8)), $mul.ref(0, 1)), 62813);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(6, 8)), $mul.ref(4, 1)), $sub.i8(0, 45));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(6, 8)), $mul.ref(5, 1)), 112);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(7, 8)), $mul.ref(0, 1)), 67625);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(7, 8)), $mul.ref(4, 1)), $sub.i8(0, 51));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(7, 8)), $mul.ref(5, 1)), 104);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(8, 8)), $mul.ref(0, 1)), 73250);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(8, 8)), $mul.ref(4, 1)), $sub.i8(0, 52));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(8, 8)), $mul.ref(5, 1)), 96);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(9, 8)), $mul.ref(0, 1)), 79875);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(9, 8)), $mul.ref(4, 1)), $sub.i8(0, 53));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(9, 8)), $mul.ref(5, 1)), 88);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(10, 8)), $mul.ref(0, 1)), 87875);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(10, 8)), $mul.ref(4, 1)), $sub.i8(0, 54));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(10, 8)), $mul.ref(5, 1)), 80);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(11, 8)), $mul.ref(0, 1)), 97625);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(11, 8)), $mul.ref(4, 1)), $sub.i8(0, 55));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(11, 8)), $mul.ref(5, 1)), 72);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(12, 8)), $mul.ref(0, 1)), 109875);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(12, 8)), $mul.ref(4, 1)), $sub.i8(0, 56));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(12, 8)), $mul.ref(5, 1)), 64);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(13, 8)), $mul.ref(0, 1)), 125625);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(13, 8)), $mul.ref(4, 1)), $sub.i8(0, 61));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(13, 8)), $mul.ref(5, 1)), 56);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(14, 8)), $mul.ref(0, 1)), 135250);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(14, 8)), $mul.ref(4, 1)), $sub.i8(0, 67));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(14, 8)), $mul.ref(5, 1)), 52);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(15, 8)), $mul.ref(0, 1)), 146500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(15, 8)), $mul.ref(4, 1)), $sub.i8(0, 68));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(15, 8)), $mul.ref(5, 1)), 48);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(16, 8)), $mul.ref(0, 1)), 159750);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(16, 8)), $mul.ref(4, 1)), $sub.i8(0, 69));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(16, 8)), $mul.ref(5, 1)), 44);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(17, 8)), $mul.ref(0, 1)), 175750);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(17, 8)), $mul.ref(4, 1)), $sub.i8(0, 70));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(17, 8)), $mul.ref(5, 1)), 40);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(18, 8)), $mul.ref(0, 1)), 195250);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(18, 8)), $mul.ref(4, 1)), $sub.i8(0, 71));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(18, 8)), $mul.ref(5, 1)), 36);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(19, 8)), $mul.ref(0, 1)), 219750);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(19, 8)), $mul.ref(4, 1)), $sub.i8(0, 72));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(19, 8)), $mul.ref(5, 1)), 32);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(20, 8)), $mul.ref(0, 1)), 251250);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(20, 8)), $mul.ref(4, 1)), $sub.i8(0, 77));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(20, 8)), $mul.ref(5, 1)), 28);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(21, 8)), $mul.ref(0, 1)), 270500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(21, 8)), $mul.ref(4, 1)), $sub.i8(0, 83));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(21, 8)), $mul.ref(5, 1)), 26);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(22, 8)), $mul.ref(0, 1)), 293000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(22, 8)), $mul.ref(4, 1)), $sub.i8(0, 84));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(22, 8)), $mul.ref(5, 1)), 24);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(23, 8)), $mul.ref(0, 1)), 319500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(23, 8)), $mul.ref(4, 1)), $sub.i8(0, 85));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(23, 8)), $mul.ref(5, 1)), 22);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(24, 8)), $mul.ref(0, 1)), 351500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(24, 8)), $mul.ref(4, 1)), $sub.i8(0, 86));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(24, 8)), $mul.ref(5, 1)), 20);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(25, 8)), $mul.ref(0, 1)), 390500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(25, 8)), $mul.ref(4, 1)), $sub.i8(0, 87));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(25, 8)), $mul.ref(5, 1)), 18);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(26, 8)), $mul.ref(0, 1)), 439500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(26, 8)), $mul.ref(4, 1)), $sub.i8(0, 88));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(26, 8)), $mul.ref(5, 1)), 16);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(27, 8)), $mul.ref(0, 1)), 502500);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(27, 8)), $mul.ref(4, 1)), $sub.i8(0, 93));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(27, 8)), $mul.ref(5, 1)), 14);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(28, 8)), $mul.ref(0, 1)), 541000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(28, 8)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(28, 8)), $mul.ref(5, 1)), 13);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(29, 8)), $mul.ref(0, 1)), 586000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(29, 8)), $mul.ref(4, 1)), $sub.i8(0, 100));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(29, 8)), $mul.ref(5, 1)), 12);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(30, 8)), $mul.ref(0, 1)), 639000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(30, 8)), $mul.ref(4, 1)), $sub.i8(0, 101));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(30, 8)), $mul.ref(5, 1)), 11);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(31, 8)), $mul.ref(0, 1)), 703000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(31, 8)), $mul.ref(4, 1)), $sub.i8(0, 102));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(31, 8)), $mul.ref(5, 1)), 10);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(32, 8)), $mul.ref(0, 1)), 781000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(32, 8)), $mul.ref(4, 1)), $sub.i8(0, 103));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(32, 8)), $mul.ref(5, 1)), 9);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(33, 8)), $mul.ref(0, 1)), 879000);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(33, 8)), $mul.ref(4, 1)), $sub.i8(0, 104));
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(33, 8)), $mul.ref(5, 1)), 8);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(34, 8)), $mul.ref(0, 1)), 0);
    $M.164 := $store.i8($M.164, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(34, 8)), $mul.ref(4, 1)), 0);
    $M.165 := $store.i8($M.165, $add.ref($add.ref($add.ref(tda18271c2_cal_pll, $mul.ref(0, 280)), $mul.ref(34, 8)), $mul.ref(5, 1)), 0);
    $M.166 := $store.i32($M.166, tda18271c2_main_pll, 33125);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(0, 8)), $mul.ref(4, 1)), 87);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 16));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(0, 1)), 35500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(4, 1)), 86);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(5, 1)), $sub.i8(0, 32));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(0, 1)), 38188);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(4, 1)), 85);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(5, 1)), $sub.i8(0, 48));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(0, 1)), 41375);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(4, 1)), 84);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(5, 1)), $sub.i8(0, 64));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(0, 1)), 45125);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(4, 1)), 83);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(5, 1)), $sub.i8(0, 80));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(0, 1)), 49688);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(4, 1)), 82);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(5, 1)), $sub.i8(0, 96));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(0, 1)), 55188);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(4, 1)), 81);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(5, 1)), $sub.i8(0, 112));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(0, 1)), 62125);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(4, 1)), 80);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(0, 1)), 66250);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(4, 1)), 71);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(5, 1)), 120);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(0, 1)), 71000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(4, 1)), 70);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(5, 1)), 112);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(0, 1)), 76375);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(4, 1)), 69);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(5, 1)), 104);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(0, 1)), 82750);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(4, 1)), 68);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(5, 1)), 96);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(0, 1)), 90250);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(4, 1)), 67);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(5, 1)), 88);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(0, 1)), 99375);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(4, 1)), 66);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(5, 1)), 80);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(0, 1)), 110375);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(4, 1)), 65);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(5, 1)), 72);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(0, 1)), 124250);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(4, 1)), 64);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(5, 1)), 64);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(0, 1)), 132500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(4, 1)), 55);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(5, 1)), 60);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(0, 1)), 142000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(4, 1)), 54);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(5, 1)), 56);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(0, 1)), 152750);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(4, 1)), 53);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(5, 1)), 52);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(0, 1)), 165500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(4, 1)), 52);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(5, 1)), 48);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(0, 1)), 180500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(4, 1)), 51);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(5, 1)), 44);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(0, 1)), 198750);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(4, 1)), 50);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(5, 1)), 40);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(0, 1)), 220750);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(4, 1)), 49);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(5, 1)), 36);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(0, 1)), 248500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(4, 1)), 48);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(5, 1)), 32);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(0, 1)), 265000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(4, 1)), 39);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(5, 1)), 30);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(0, 1)), 284000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(4, 1)), 38);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(5, 1)), 28);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(0, 1)), 305500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(4, 1)), 37);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(5, 1)), 26);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(0, 1)), 331000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(4, 1)), 36);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(5, 1)), 24);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(0, 1)), 361000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(4, 1)), 35);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(5, 1)), 22);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(0, 1)), 397500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(4, 1)), 34);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(5, 1)), 20);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(0, 1)), 441500);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(4, 1)), 33);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(5, 1)), 18);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(0, 1)), 497000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(4, 1)), 32);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(5, 1)), 16);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(0, 1)), 530000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(4, 1)), 23);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(5, 1)), 15);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(0, 1)), 568000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(4, 1)), 22);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(5, 1)), 14);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(0, 1)), 611000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(4, 1)), 21);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(5, 1)), 13);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(0, 1)), 662000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(4, 1)), 20);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(5, 1)), 12);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(0, 1)), 722000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(4, 1)), 19);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(5, 1)), 11);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(0, 1)), 795000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(4, 1)), 18);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(5, 1)), 10);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(0, 1)), 883000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(4, 1)), 17);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(5, 1)), 9);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(0, 1)), 994000);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(4, 1)), 16);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(5, 1)), 8);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(0, 1)), 0);
    $M.167 := $store.i8($M.167, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(4, 1)), 0);
    $M.168 := $store.i8($M.168, $add.ref($add.ref($add.ref(tda18271c2_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(5, 1)), 0);
    $M.238 := $store.i32($M.238, tda18271_ir_measure, 30000);
    $M.239 := $store.i8($M.239, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)), 4);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), 200000);
    $M.239 := $store.i8($M.239, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)), 5);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), 600000);
    $M.239 := $store.i8($M.239, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)), 6);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), 865000);
    $M.239 := $store.i8($M.239, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)), 7);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.239 := $store.i8($M.239, $add.ref($add.ref($add.ref(tda18271_ir_measure, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)), 0);
    $M.240 := $store.i32($M.240, tda18271_gain_taper, 45400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(0, 8)), $mul.ref(4, 1)), 31);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(1, 8)), $mul.ref(0, 1)), 45800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(1, 8)), $mul.ref(4, 1)), 30);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(2, 8)), $mul.ref(0, 1)), 46200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(2, 8)), $mul.ref(4, 1)), 29);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(3, 8)), $mul.ref(0, 1)), 46700);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(3, 8)), $mul.ref(4, 1)), 28);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(4, 8)), $mul.ref(0, 1)), 47100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(4, 8)), $mul.ref(4, 1)), 27);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(5, 8)), $mul.ref(0, 1)), 47500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(5, 8)), $mul.ref(4, 1)), 26);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(6, 8)), $mul.ref(0, 1)), 47900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(6, 8)), $mul.ref(4, 1)), 25);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(7, 8)), $mul.ref(0, 1)), 49600);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(7, 8)), $mul.ref(4, 1)), 23);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(8, 8)), $mul.ref(0, 1)), 51200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(8, 8)), $mul.ref(4, 1)), 22);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(9, 8)), $mul.ref(0, 1)), 52900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(9, 8)), $mul.ref(4, 1)), 21);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(10, 8)), $mul.ref(0, 1)), 54500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(10, 8)), $mul.ref(4, 1)), 20);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(11, 8)), $mul.ref(0, 1)), 56200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(11, 8)), $mul.ref(4, 1)), 19);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(12, 8)), $mul.ref(0, 1)), 57800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(12, 8)), $mul.ref(4, 1)), 18);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(13, 8)), $mul.ref(0, 1)), 59500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(13, 8)), $mul.ref(4, 1)), 17);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(14, 8)), $mul.ref(0, 1)), 61100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(14, 8)), $mul.ref(4, 1)), 16);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(15, 8)), $mul.ref(0, 1)), 67600);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(15, 8)), $mul.ref(4, 1)), 13);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(16, 8)), $mul.ref(0, 1)), 74200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(16, 8)), $mul.ref(4, 1)), 12);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(17, 8)), $mul.ref(0, 1)), 80700);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(17, 8)), $mul.ref(4, 1)), 11);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(18, 8)), $mul.ref(0, 1)), 87200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(18, 8)), $mul.ref(4, 1)), 10);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(19, 8)), $mul.ref(0, 1)), 93800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(19, 8)), $mul.ref(4, 1)), 9);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(20, 8)), $mul.ref(0, 1)), 100300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(20, 8)), $mul.ref(4, 1)), 8);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(21, 8)), $mul.ref(0, 1)), 106900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(21, 8)), $mul.ref(4, 1)), 7);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(22, 8)), $mul.ref(0, 1)), 113400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(22, 8)), $mul.ref(4, 1)), 6);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(23, 8)), $mul.ref(0, 1)), 119900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(23, 8)), $mul.ref(4, 1)), 5);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(24, 8)), $mul.ref(0, 1)), 126500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(24, 8)), $mul.ref(4, 1)), 4);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(25, 8)), $mul.ref(0, 1)), 133000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(25, 8)), $mul.ref(4, 1)), 3);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(26, 8)), $mul.ref(0, 1)), 139500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(26, 8)), $mul.ref(4, 1)), 2);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(27, 8)), $mul.ref(0, 1)), 146100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(27, 8)), $mul.ref(4, 1)), 1);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(28, 8)), $mul.ref(0, 1)), 152600);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(28, 8)), $mul.ref(4, 1)), 0);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(29, 8)), $mul.ref(0, 1)), 154300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(29, 8)), $mul.ref(4, 1)), 31);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(30, 8)), $mul.ref(0, 1)), 156100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(30, 8)), $mul.ref(4, 1)), 30);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(31, 8)), $mul.ref(0, 1)), 157800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(31, 8)), $mul.ref(4, 1)), 29);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(32, 8)), $mul.ref(0, 1)), 159500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(32, 8)), $mul.ref(4, 1)), 28);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(33, 8)), $mul.ref(0, 1)), 161200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(33, 8)), $mul.ref(4, 1)), 27);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(34, 8)), $mul.ref(0, 1)), 163000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(34, 8)), $mul.ref(4, 1)), 26);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(35, 8)), $mul.ref(0, 1)), 164700);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(35, 8)), $mul.ref(4, 1)), 25);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(36, 8)), $mul.ref(0, 1)), 170200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(36, 8)), $mul.ref(4, 1)), 23);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(37, 8)), $mul.ref(0, 1)), 175800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(37, 8)), $mul.ref(4, 1)), 22);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(38, 8)), $mul.ref(0, 1)), 181300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(38, 8)), $mul.ref(4, 1)), 21);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(39, 8)), $mul.ref(0, 1)), 186900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(39, 8)), $mul.ref(4, 1)), 20);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(40, 8)), $mul.ref(0, 1)), 192400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(40, 8)), $mul.ref(4, 1)), 19);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(41, 8)), $mul.ref(0, 1)), 198000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(41, 8)), $mul.ref(4, 1)), 18);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(42, 8)), $mul.ref(0, 1)), 203500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(42, 8)), $mul.ref(4, 1)), 17);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(43, 8)), $mul.ref(0, 1)), 216200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(43, 8)), $mul.ref(4, 1)), 20);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(44, 8)), $mul.ref(0, 1)), 228900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(44, 8)), $mul.ref(4, 1)), 19);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(45, 8)), $mul.ref(0, 1)), 241600);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(45, 8)), $mul.ref(4, 1)), 18);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(46, 8)), $mul.ref(0, 1)), 254400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(46, 8)), $mul.ref(4, 1)), 17);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(47, 8)), $mul.ref(0, 1)), 267100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(47, 8)), $mul.ref(4, 1)), 16);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(48, 8)), $mul.ref(0, 1)), 279800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(48, 8)), $mul.ref(4, 1)), 15);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(49, 8)), $mul.ref(0, 1)), 292500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(49, 8)), $mul.ref(4, 1)), 14);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(50, 8)), $mul.ref(0, 1)), 305200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(50, 8)), $mul.ref(4, 1)), 13);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(51, 8)), $mul.ref(0, 1)), 317900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(51, 8)), $mul.ref(4, 1)), 12);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(52, 8)), $mul.ref(0, 1)), 330700);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(52, 8)), $mul.ref(4, 1)), 11);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(53, 8)), $mul.ref(0, 1)), 343400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(53, 8)), $mul.ref(4, 1)), 10);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(54, 8)), $mul.ref(0, 1)), 356100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(54, 8)), $mul.ref(4, 1)), 9);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(55, 8)), $mul.ref(0, 1)), 368800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(55, 8)), $mul.ref(4, 1)), 8);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(56, 8)), $mul.ref(0, 1)), 381500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(56, 8)), $mul.ref(4, 1)), 7);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(57, 8)), $mul.ref(0, 1)), 394200);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(57, 8)), $mul.ref(4, 1)), 6);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(58, 8)), $mul.ref(0, 1)), 406900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(58, 8)), $mul.ref(4, 1)), 5);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(59, 8)), $mul.ref(0, 1)), 419700);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(59, 8)), $mul.ref(4, 1)), 4);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(60, 8)), $mul.ref(0, 1)), 432400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(60, 8)), $mul.ref(4, 1)), 3);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(61, 8)), $mul.ref(0, 1)), 445100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(61, 8)), $mul.ref(4, 1)), 2);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(62, 8)), $mul.ref(0, 1)), 457800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(62, 8)), $mul.ref(4, 1)), 1);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(63, 8)), $mul.ref(0, 1)), 476300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(63, 8)), $mul.ref(4, 1)), 25);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(64, 8)), $mul.ref(0, 1)), 494800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(64, 8)), $mul.ref(4, 1)), 24);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(65, 8)), $mul.ref(0, 1)), 513300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(65, 8)), $mul.ref(4, 1)), 23);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(66, 8)), $mul.ref(0, 1)), 531800);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(66, 8)), $mul.ref(4, 1)), 22);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(67, 8)), $mul.ref(0, 1)), 550300);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(67, 8)), $mul.ref(4, 1)), 21);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(68, 8)), $mul.ref(0, 1)), 568900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(68, 8)), $mul.ref(4, 1)), 20);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(69, 8)), $mul.ref(0, 1)), 587400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(69, 8)), $mul.ref(4, 1)), 19);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(70, 8)), $mul.ref(0, 1)), 605900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(70, 8)), $mul.ref(4, 1)), 18);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(71, 8)), $mul.ref(0, 1)), 624400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(71, 8)), $mul.ref(4, 1)), 17);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(72, 8)), $mul.ref(0, 1)), 642900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(72, 8)), $mul.ref(4, 1)), 16);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(73, 8)), $mul.ref(0, 1)), 661400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(73, 8)), $mul.ref(4, 1)), 15);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(74, 8)), $mul.ref(0, 1)), 679900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(74, 8)), $mul.ref(4, 1)), 14);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(75, 8)), $mul.ref(0, 1)), 698400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(75, 8)), $mul.ref(4, 1)), 13);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(76, 8)), $mul.ref(0, 1)), 716900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(76, 8)), $mul.ref(4, 1)), 12);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(77, 8)), $mul.ref(0, 1)), 735400);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(77, 8)), $mul.ref(4, 1)), 11);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(78, 8)), $mul.ref(0, 1)), 753900);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(78, 8)), $mul.ref(4, 1)), 10);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(79, 8)), $mul.ref(0, 1)), 772500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(79, 8)), $mul.ref(4, 1)), 9);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(80, 8)), $mul.ref(0, 1)), 791000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(80, 8)), $mul.ref(4, 1)), 8);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(81, 8)), $mul.ref(0, 1)), 809500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(81, 8)), $mul.ref(4, 1)), 7);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(82, 8)), $mul.ref(0, 1)), 828000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(82, 8)), $mul.ref(4, 1)), 6);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(83, 8)), $mul.ref(0, 1)), 846500);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(83, 8)), $mul.ref(4, 1)), 5);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(84, 8)), $mul.ref(0, 1)), 865000);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(84, 8)), $mul.ref(4, 1)), 4);
    $M.240 := $store.i32($M.240, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(85, 8)), $mul.ref(0, 1)), 0);
    $M.241 := $store.i8($M.241, $add.ref($add.ref($add.ref(tda18271_gain_taper, $mul.ref(0, 688)), $mul.ref(85, 8)), $mul.ref(4, 1)), 0);
    $M.242 := $store.i32($M.242, tda18271_rf_band, 47900);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), 61100);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), 152600);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), 2);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), 164700);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), 3);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), 203500);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), 4);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), 457800);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), 5);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), 865000);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), 6);
    $M.242 := $store.i32($M.242, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), 0);
    $M.243 := $store.i8($M.243, $add.ref($add.ref($add.ref(tda18271_rf_band, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), 0);
    $M.244 := $store.i32($M.244, tda18271_bp_filter, 62000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(0, 1)), 84000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(0, 1)), 100000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(2, 8)), $mul.ref(4, 1)), 2);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(0, 1)), 140000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(3, 8)), $mul.ref(4, 1)), 3);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(0, 1)), 170000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(4, 8)), $mul.ref(4, 1)), 4);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(0, 1)), 180000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(5, 8)), $mul.ref(4, 1)), 5);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(0, 1)), 865000);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(6, 8)), $mul.ref(4, 1)), 6);
    $M.244 := $store.i32($M.244, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(0, 1)), 0);
    $M.245 := $store.i8($M.245, $add.ref($add.ref($add.ref(tda18271_bp_filter, $mul.ref(0, 64)), $mul.ref(7, 8)), $mul.ref(4, 1)), 0);
    $M.246 := $store.i32($M.246, tda18271c1_km, 61100);
    $M.247 := $store.i8($M.247, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(0, 8)), $mul.ref(4, 1)), 116);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(0, 1)), 350000);
    $M.247 := $store.i8($M.247, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(1, 8)), $mul.ref(4, 1)), 64);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(0, 1)), 720000);
    $M.247 := $store.i8($M.247, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(2, 8)), $mul.ref(4, 1)), 48);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(0, 1)), 865000);
    $M.247 := $store.i8($M.247, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(3, 8)), $mul.ref(4, 1)), 64);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.247 := $store.i8($M.247, $add.ref($add.ref($add.ref(tda18271c1_km, $mul.ref(0, 40)), $mul.ref(4, 8)), $mul.ref(4, 1)), 0);
    $M.248 := $store.i32($M.248, tda18271c1_rf_cal, 41000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(0, 8)), $mul.ref(4, 1)), 30);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(1, 8)), $mul.ref(0, 1)), 43000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(1, 8)), $mul.ref(4, 1)), 48);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(2, 8)), $mul.ref(0, 1)), 45000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(2, 8)), $mul.ref(4, 1)), 67);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(3, 8)), $mul.ref(0, 1)), 46000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(3, 8)), $mul.ref(4, 1)), 77);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(4, 8)), $mul.ref(0, 1)), 47000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(4, 8)), $mul.ref(4, 1)), 84);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(5, 8)), $mul.ref(0, 1)), 47900);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(5, 8)), $mul.ref(4, 1)), 100);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(6, 8)), $mul.ref(0, 1)), 49100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(6, 8)), $mul.ref(4, 1)), 32);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(7, 8)), $mul.ref(0, 1)), 50000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(7, 8)), $mul.ref(4, 1)), 34);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(8, 8)), $mul.ref(0, 1)), 51000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(8, 8)), $mul.ref(4, 1)), 42);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(9, 8)), $mul.ref(0, 1)), 53000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(9, 8)), $mul.ref(4, 1)), 50);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(10, 8)), $mul.ref(0, 1)), 55000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(10, 8)), $mul.ref(4, 1)), 53);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(11, 8)), $mul.ref(0, 1)), 56000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(11, 8)), $mul.ref(4, 1)), 60);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(12, 8)), $mul.ref(0, 1)), 57000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(12, 8)), $mul.ref(4, 1)), 63);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(13, 8)), $mul.ref(0, 1)), 58000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(13, 8)), $mul.ref(4, 1)), 72);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(14, 8)), $mul.ref(0, 1)), 59000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(14, 8)), $mul.ref(4, 1)), 77);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(15, 8)), $mul.ref(0, 1)), 60000);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(15, 8)), $mul.ref(4, 1)), 88);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(16, 8)), $mul.ref(0, 1)), 61100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(16, 8)), $mul.ref(4, 1)), 95);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(17, 8)), $mul.ref(0, 1)), 0);
    $M.249 := $store.i8($M.249, $add.ref($add.ref($add.ref(tda18271c1_rf_cal, $mul.ref(0, 144)), $mul.ref(17, 8)), $mul.ref(4, 1)), 0);
    $M.250 := $store.i32($M.250, tda18271c1_cal_pll, 33000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i8(0, 35));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 48));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(1, 8)), $mul.ref(0, 1)), 36000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(1, 8)), $mul.ref(4, 1)), $sub.i8(0, 36));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(1, 8)), $mul.ref(5, 1)), $sub.i8(0, 64));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(2, 8)), $mul.ref(0, 1)), 40000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(2, 8)), $mul.ref(4, 1)), $sub.i8(0, 37));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(2, 8)), $mul.ref(5, 1)), $sub.i8(0, 80));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(3, 8)), $mul.ref(0, 1)), 44000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(3, 8)), $mul.ref(4, 1)), $sub.i8(0, 38));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(3, 8)), $mul.ref(5, 1)), $sub.i8(0, 96));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(4, 8)), $mul.ref(0, 1)), 49000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(4, 8)), $mul.ref(4, 1)), $sub.i8(0, 39));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(4, 8)), $mul.ref(5, 1)), $sub.i8(0, 112));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(5, 8)), $mul.ref(0, 1)), 55000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(5, 8)), $mul.ref(4, 1)), $sub.i8(0, 40));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(5, 8)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(6, 8)), $mul.ref(0, 1)), 63000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(6, 8)), $mul.ref(4, 1)), $sub.i8(0, 45));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(6, 8)), $mul.ref(5, 1)), 112);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(7, 8)), $mul.ref(0, 1)), 67000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(7, 8)), $mul.ref(4, 1)), $sub.i8(0, 51));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(7, 8)), $mul.ref(5, 1)), 104);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(8, 8)), $mul.ref(0, 1)), 73000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(8, 8)), $mul.ref(4, 1)), $sub.i8(0, 52));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(8, 8)), $mul.ref(5, 1)), 96);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(9, 8)), $mul.ref(0, 1)), 80000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(9, 8)), $mul.ref(4, 1)), $sub.i8(0, 53));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(9, 8)), $mul.ref(5, 1)), 88);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(10, 8)), $mul.ref(0, 1)), 88000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(10, 8)), $mul.ref(4, 1)), $sub.i8(0, 54));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(10, 8)), $mul.ref(5, 1)), 80);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(11, 8)), $mul.ref(0, 1)), 98000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(11, 8)), $mul.ref(4, 1)), $sub.i8(0, 55));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(11, 8)), $mul.ref(5, 1)), 72);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(12, 8)), $mul.ref(0, 1)), 110000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(12, 8)), $mul.ref(4, 1)), $sub.i8(0, 56));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(12, 8)), $mul.ref(5, 1)), 64);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(13, 8)), $mul.ref(0, 1)), 126000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(13, 8)), $mul.ref(4, 1)), $sub.i8(0, 61));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(13, 8)), $mul.ref(5, 1)), 56);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(14, 8)), $mul.ref(0, 1)), 135000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(14, 8)), $mul.ref(4, 1)), $sub.i8(0, 67));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(14, 8)), $mul.ref(5, 1)), 52);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(15, 8)), $mul.ref(0, 1)), 147000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(15, 8)), $mul.ref(4, 1)), $sub.i8(0, 68));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(15, 8)), $mul.ref(5, 1)), 48);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(16, 8)), $mul.ref(0, 1)), 160000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(16, 8)), $mul.ref(4, 1)), $sub.i8(0, 69));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(16, 8)), $mul.ref(5, 1)), 44);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(17, 8)), $mul.ref(0, 1)), 176000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(17, 8)), $mul.ref(4, 1)), $sub.i8(0, 70));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(17, 8)), $mul.ref(5, 1)), 40);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(18, 8)), $mul.ref(0, 1)), 196000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(18, 8)), $mul.ref(4, 1)), $sub.i8(0, 71));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(18, 8)), $mul.ref(5, 1)), 36);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(19, 8)), $mul.ref(0, 1)), 220000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(19, 8)), $mul.ref(4, 1)), $sub.i8(0, 72));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(19, 8)), $mul.ref(5, 1)), 32);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(20, 8)), $mul.ref(0, 1)), 252000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(20, 8)), $mul.ref(4, 1)), $sub.i8(0, 77));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(20, 8)), $mul.ref(5, 1)), 28);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(21, 8)), $mul.ref(0, 1)), 271000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(21, 8)), $mul.ref(4, 1)), $sub.i8(0, 83));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(21, 8)), $mul.ref(5, 1)), 26);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(22, 8)), $mul.ref(0, 1)), 294000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(22, 8)), $mul.ref(4, 1)), $sub.i8(0, 84));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(22, 8)), $mul.ref(5, 1)), 24);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(23, 8)), $mul.ref(0, 1)), 321000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(23, 8)), $mul.ref(4, 1)), $sub.i8(0, 85));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(23, 8)), $mul.ref(5, 1)), 22);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(24, 8)), $mul.ref(0, 1)), 353000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(24, 8)), $mul.ref(4, 1)), $sub.i8(0, 86));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(24, 8)), $mul.ref(5, 1)), 20);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(25, 8)), $mul.ref(0, 1)), 392000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(25, 8)), $mul.ref(4, 1)), $sub.i8(0, 87));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(25, 8)), $mul.ref(5, 1)), 18);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(26, 8)), $mul.ref(0, 1)), 441000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(26, 8)), $mul.ref(4, 1)), $sub.i8(0, 88));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(26, 8)), $mul.ref(5, 1)), 16);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(27, 8)), $mul.ref(0, 1)), 505000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(27, 8)), $mul.ref(4, 1)), $sub.i8(0, 93));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(27, 8)), $mul.ref(5, 1)), 14);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(28, 8)), $mul.ref(0, 1)), 543000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(28, 8)), $mul.ref(4, 1)), $sub.i8(0, 99));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(28, 8)), $mul.ref(5, 1)), 13);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(29, 8)), $mul.ref(0, 1)), 589000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(29, 8)), $mul.ref(4, 1)), $sub.i8(0, 100));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(29, 8)), $mul.ref(5, 1)), 12);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(30, 8)), $mul.ref(0, 1)), 642000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(30, 8)), $mul.ref(4, 1)), $sub.i8(0, 101));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(30, 8)), $mul.ref(5, 1)), 11);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(31, 8)), $mul.ref(0, 1)), 707000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(31, 8)), $mul.ref(4, 1)), $sub.i8(0, 102));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(31, 8)), $mul.ref(5, 1)), 10);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(32, 8)), $mul.ref(0, 1)), 785000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(32, 8)), $mul.ref(4, 1)), $sub.i8(0, 103));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(32, 8)), $mul.ref(5, 1)), 9);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(33, 8)), $mul.ref(0, 1)), 883000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(33, 8)), $mul.ref(4, 1)), $sub.i8(0, 104));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(33, 8)), $mul.ref(5, 1)), 8);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(34, 8)), $mul.ref(0, 1)), 1010000);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(34, 8)), $mul.ref(4, 1)), $sub.i8(0, 109));
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(34, 8)), $mul.ref(5, 1)), 7);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(35, 8)), $mul.ref(0, 1)), 0);
    $M.251 := $store.i8($M.251, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(35, 8)), $mul.ref(4, 1)), 0);
    $M.252 := $store.i8($M.252, $add.ref($add.ref($add.ref(tda18271c1_cal_pll, $mul.ref(0, 288)), $mul.ref(35, 8)), $mul.ref(5, 1)), 0);
    $M.253 := $store.i32($M.253, tda18271c1_main_pll, 32000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(0, 8)), $mul.ref(5, 1)), $sub.i8(0, 16));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(0, 1)), 35000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(4, 1)), 94);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(1, 8)), $mul.ref(5, 1)), $sub.i8(0, 32));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(0, 1)), 37000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(4, 1)), 93);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(2, 8)), $mul.ref(5, 1)), $sub.i8(0, 48));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(0, 1)), 41000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(4, 1)), 92);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(3, 8)), $mul.ref(5, 1)), $sub.i8(0, 64));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(0, 1)), 44000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(4, 1)), 91);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(4, 8)), $mul.ref(5, 1)), $sub.i8(0, 80));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(0, 1)), 49000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(4, 1)), 90);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(5, 8)), $mul.ref(5, 1)), $sub.i8(0, 96));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(0, 1)), 54000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(4, 1)), 89);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(6, 8)), $mul.ref(5, 1)), $sub.i8(0, 112));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(0, 1)), 61000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(4, 1)), 88);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(7, 8)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(0, 1)), 65000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(4, 1)), 79);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(8, 8)), $mul.ref(5, 1)), 120);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(0, 1)), 70000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(4, 1)), 78);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(9, 8)), $mul.ref(5, 1)), 112);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(0, 1)), 75000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(4, 1)), 77);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(10, 8)), $mul.ref(5, 1)), 104);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(0, 1)), 82000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(4, 1)), 76);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(11, 8)), $mul.ref(5, 1)), 96);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(0, 1)), 89000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(4, 1)), 75);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(12, 8)), $mul.ref(5, 1)), 88);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(0, 1)), 98000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(4, 1)), 74);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(13, 8)), $mul.ref(5, 1)), 80);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(0, 1)), 109000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(4, 1)), 73);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(14, 8)), $mul.ref(5, 1)), 72);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(0, 1)), 123000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(4, 1)), 72);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(15, 8)), $mul.ref(5, 1)), 64);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(0, 1)), 131000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(4, 1)), 63);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(16, 8)), $mul.ref(5, 1)), 60);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(0, 1)), 141000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(4, 1)), 62);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(17, 8)), $mul.ref(5, 1)), 56);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(0, 1)), 151000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(4, 1)), 61);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(18, 8)), $mul.ref(5, 1)), 52);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(0, 1)), 164000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(4, 1)), 60);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(19, 8)), $mul.ref(5, 1)), 48);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(0, 1)), 179000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(4, 1)), 59);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(20, 8)), $mul.ref(5, 1)), 44);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(0, 1)), 197000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(4, 1)), 58);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(21, 8)), $mul.ref(5, 1)), 40);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(0, 1)), 219000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(4, 1)), 57);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(22, 8)), $mul.ref(5, 1)), 36);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(0, 1)), 246000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(4, 1)), 56);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(23, 8)), $mul.ref(5, 1)), 32);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(0, 1)), 263000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(4, 1)), 47);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(24, 8)), $mul.ref(5, 1)), 30);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(0, 1)), 282000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(4, 1)), 46);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(25, 8)), $mul.ref(5, 1)), 28);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(0, 1)), 303000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(4, 1)), 45);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(26, 8)), $mul.ref(5, 1)), 26);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(0, 1)), 329000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(4, 1)), 44);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(27, 8)), $mul.ref(5, 1)), 24);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(0, 1)), 359000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(4, 1)), 43);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(28, 8)), $mul.ref(5, 1)), 22);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(0, 1)), 395000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(4, 1)), 42);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(29, 8)), $mul.ref(5, 1)), 20);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(0, 1)), 438000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(4, 1)), 41);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(30, 8)), $mul.ref(5, 1)), 18);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(0, 1)), 493000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(4, 1)), 40);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(31, 8)), $mul.ref(5, 1)), 16);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(0, 1)), 526000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(4, 1)), 31);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(32, 8)), $mul.ref(5, 1)), 15);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(0, 1)), 564000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(4, 1)), 30);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(33, 8)), $mul.ref(5, 1)), 14);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(0, 1)), 607000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(4, 1)), 29);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(34, 8)), $mul.ref(5, 1)), 13);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(0, 1)), 658000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(4, 1)), 28);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(35, 8)), $mul.ref(5, 1)), 12);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(0, 1)), 718000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(4, 1)), 27);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(36, 8)), $mul.ref(5, 1)), 11);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(0, 1)), 790000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(4, 1)), 26);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(37, 8)), $mul.ref(5, 1)), 10);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(0, 1)), 877000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(4, 1)), 25);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(38, 8)), $mul.ref(5, 1)), 9);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(0, 1)), 987000);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(4, 1)), 24);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(39, 8)), $mul.ref(5, 1)), 8);
    $M.253 := $store.i32($M.253, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(0, 1)), 0);
    $M.254 := $store.i8($M.254, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(4, 1)), 0);
    $M.255 := $store.i8($M.255, $add.ref($add.ref($add.ref(tda18271c1_main_pll, $mul.ref(0, 328)), $mul.ref(40, 8)), $mul.ref(5, 1)), 0);
    $M.75 := $store.i32($M.75, tda18271_cid_target, 46000);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1)), 4);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(6, 1)), 1800);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), 52200);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1)), 10);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(6, 1)), 1500);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), 70100);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), 136800);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1)), 24);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), 156700);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1)), 24);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), 186250);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1)), 10);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), 230000);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1)), 10);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), 345000);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1)), 24);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), 426000);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1)), 14);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), 489500);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1)), 30);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), 697500);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1)), 50);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), 842000);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1)), 58);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(6, 1)), 4000);
    $M.75 := $store.i32($M.75, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), 0);
    $M.76 := $store.i8($M.76, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, tda18271_thermometer, 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(0, 3)), $mul.ref(1, 1)), 60);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(0, 3)), $mul.ref(2, 1)), 92);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(1, 3)), $mul.ref(0, 1)), 1);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(1, 3)), $mul.ref(1, 1)), 62);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(1, 3)), $mul.ref(2, 1)), 94);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(2, 3)), $mul.ref(0, 1)), 2);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(2, 3)), $mul.ref(1, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(2, 3)), $mul.ref(2, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(3, 3)), $mul.ref(0, 1)), 3);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(3, 3)), $mul.ref(1, 1)), 64);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(3, 3)), $mul.ref(2, 1)), 96);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(4, 3)), $mul.ref(0, 1)), 4);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(4, 3)), $mul.ref(1, 1)), 74);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(4, 3)), $mul.ref(2, 1)), 106);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(5, 3)), $mul.ref(0, 1)), 5);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(5, 3)), $mul.ref(1, 1)), 72);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(5, 3)), $mul.ref(2, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(6, 3)), $mul.ref(0, 1)), 6);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(6, 3)), $mul.ref(1, 1)), 68);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(6, 3)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(7, 3)), $mul.ref(0, 1)), 7);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(7, 3)), $mul.ref(1, 1)), 70);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(7, 3)), $mul.ref(2, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(8, 3)), $mul.ref(0, 1)), 8);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(8, 3)), $mul.ref(1, 1)), 90);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(8, 3)), $mul.ref(2, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(9, 3)), $mul.ref(0, 1)), 9);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(9, 3)), $mul.ref(1, 1)), 88);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(9, 3)), $mul.ref(2, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(10, 3)), $mul.ref(0, 1)), 10);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(10, 3)), $mul.ref(1, 1)), 84);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(10, 3)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(11, 3)), $mul.ref(0, 1)), 11);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(11, 3)), $mul.ref(1, 1)), 86);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(11, 3)), $mul.ref(2, 1)), 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(12, 3)), $mul.ref(0, 1)), 12);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(12, 3)), $mul.ref(1, 1)), 76);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(12, 3)), $mul.ref(2, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(13, 3)), $mul.ref(0, 1)), 13);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(13, 3)), $mul.ref(1, 1)), 78);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(13, 3)), $mul.ref(2, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(14, 3)), $mul.ref(0, 1)), 14);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(14, 3)), $mul.ref(1, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(14, 3)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(15, 3)), $mul.ref(0, 1)), 15);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(15, 3)), $mul.ref(1, 1)), 80);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(15, 3)), $mul.ref(2, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(16, 3)), $mul.ref(0, 1)), 0);
    $M.4 := $store.i8($M.4, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(16, 3)), $mul.ref(1, 1)), 0);
    $M.3 := $store.i8($M.3, $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(16, 3)), $mul.ref(2, 1)), 0);
    $M.78 := 0;
    call {:si_unique_call 786} {:cexpr "ldv_mutex_tda18271_list_mutex"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 787} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 788} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 789} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.2 := $store.i8($M.2, .str.93, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(1, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(2, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(3, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(4, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(5, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(6, 1)), 55);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(7, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(9, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(10, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(11, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(12, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(13, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(14, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(15, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(18, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(19, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(20, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(21, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(22, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(23, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(28, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, .str.94, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(2, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(3, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(4, 1)), 56);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(5, 1)), 50);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(6, 1)), 55);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(7, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(9, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(10, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(14, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(18, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.94, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.265 := $store.i8($M.265, .str.45, 116);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(1, 1)), 100);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(2, 1)), 97);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(3, 1)), 49);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(4, 1)), 56);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(5, 1)), 50);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(6, 1)), 55);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(7, 1)), 49);
    $M.265 := $store.i8($M.265, $add.ref($add.ref(.str.45, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 790} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 347602);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 348634);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 349666);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 350698);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: ref;

const $u3: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.5, $M.82, $M.35, $M.2, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.75, $M.76, $M.77, $M.1, $M.4, $M.3, $M.78, $M.80, $M.41, $M.79, $M.265, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 791} __SMACK_static_init();
    call {:si_unique_call 792} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.79, $M.41, $M.80, $M.78, $M.23, $M.26, $M.29, $M.2, $M.6, $M.9, $M.8, $M.5, $M.82, $M.35, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.75, $M.76, $M.77, $M.1, $M.4, $M.3, $M.265, $CurrAddr, $M.66, $M.67, $M.68, $M.69, $M.39, $M.45, $M.46, $M.47, $M.48, $M.49, $M.40, $M.65, $M.42, $M.70, $M.71, $M.72, $M.43, $M.44, $M.73, $M.74;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation tda18271_lookup_thermometer_loop_$bb4(in_$p8: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i64, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i14: i32, in_$i34: i32) returns (out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i64, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i14: i32, out_$i34: i32)
{

  entry:
    out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i14, out_$i34 := in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i14, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  $bb10:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i24;
    goto $bb10_dummy;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    assume true;
    goto $bb10;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i29, out_$i32);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 15);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.2, in_$p8);
    goto corral_source_split_40;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.1, out_$p27);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(out_$i25, 3)), $mul.ref(0, 1));
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_36;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i14, 1);
    call {:si_unique_call 0} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_35;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i14;
    assume true;
    goto $bb7;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_24;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.1, out_$p18);
    goto corral_source_split_22;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(tda18271_thermometer, $mul.ref(0, 51)), $mul.ref(out_$i16, 3)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_20;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i14, out_$i34 := tda18271_lookup_thermometer_loop_$bb4(in_$p8, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i14, out_$i34);
    return;

  exit:
    return;
}



procedure tda18271_lookup_thermometer_loop_$bb4(in_$p8: ref, in_$i15: i32, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i64, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i8, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i14: i32, in_$i34: i32) returns (out_$i15: i32, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i64, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i8, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i14: i32, out_$i34: i32);



implementation __tda18271_write_regs_loop_$bb42(in_$p4: ref, in_$p11: ref, in_$i55: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i59: i32, in_$i52: i32) returns (out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i59: i32)
{

  entry:
    out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59 := in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i59;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  $bb44:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := out_$i67;
    goto $bb44_dummy;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i68 := $sle.i32(out_$i67, in_$i55);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i59, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, out_$p66, out_$i64);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(out_$i65, 1));
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i59);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.2, out_$p63);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p11, $mul.ref(out_$i62, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, out_$i59);
    goto corral_source_split_2599;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(in_$i52, $sub.i32(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59 := __tda18271_write_regs_loop_$bb42(in_$p4, in_$p11, in_$i55, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59, in_$i52);
    return;

  exit:
    return;
}



procedure __tda18271_write_regs_loop_$bb42(in_$p4: ref, in_$p11: ref, in_$i55: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i59: i32, in_$i52: i32) returns (out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i59: i32);
  modifies $M.49;



implementation __tda18271_write_regs_loop_$bb34(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p11: ref, in_$i54: i1, in_$i55: i32, in_$i56: i8, in_$p57: ref, in_$i58: i1, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i59: i32, in_$i69: i16, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32) returns (out_$i54: i1, out_$i55: i32, out_$i56: i8, out_$p57: ref, out_$i58: i1, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i59: i32, out_$i69: i16, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32)
{

  entry:
    out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i85, out_$i86, out_$i87, out_$i51, out_$i52, out_$i53, out_$i88, out_$i89, out_$i90 := in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i59, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i85, in_$i86, in_$i87, in_$i51, in_$i52, in_$i53, in_$i88, in_$i89, in_$i90;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  $bb51:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$i52, out_$i53 := out_$i55, out_$i85, out_$i86;
    goto $bb51_dummy;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i88, out_$i89, out_$i90 := out_$i77, out_$i85, out_$i55;
    assume true;
    goto $bb51;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i53, out_$i55);
    call {:si_unique_call 406} {:cexpr "len"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_2628;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i52, out_$i55);
    call {:si_unique_call 405} {:cexpr "idx"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_2627;

  $bb48:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i79, out_$i80, out_$i81 := out_$i52, out_$i55, out_$i77;
    assume true;
    goto $bb48;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 1);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i77 := __i2c_transfer(out_$p76, in_$p5, 1);
    call {:si_unique_call 404} {:cexpr "ret"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.2, out_$p75);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p9, $mul.ref(0, 792)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, out_$p73, out_$i72);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 1);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i16.i32(out_$i69);
    goto corral_source_split_2612;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i32.i16(out_$i55);
    goto corral_source_split_2611;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb41;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb45:
    assume !(out_$i68 == 1);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i68 := $sle.i32(out_$i67, out_$i55);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i59, 1);
    call {:si_unique_call 402} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, out_$p66, out_$i64);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(out_$i65, 1));
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i59);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.2, out_$p63);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p11, $mul.ref(out_$i62, 1));
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, out_$i59);
    goto corral_source_split_2599;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i52, $sub.i32(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    call out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59 := __tda18271_write_regs_loop_$bb42(in_$p4, in_$p11, out_$i55, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59, out_$i52);
    goto $bb42_last;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$i59 := 1;
    goto $bb42;

  $bb44:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := out_$i67;
    assume false;
    return;

  $bb39:
    assume out_$i58 == 1;
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$i58 := $sle.i32(1, out_$i55);
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, out_$p57, out_$i56);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i32.i8(out_$i52);
    goto corral_source_split_2589;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  $bb37:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i51;
    goto $bb38;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    goto $bb38;

  $bb36:
    assume out_$i54 == 1;
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i54 := $sgt.i32(out_$i51, out_$i53);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i85, out_$i86, out_$i87, out_$i51, out_$i52, out_$i53, out_$i88, out_$i89, out_$i90 := __tda18271_write_regs_loop_$bb34(in_$p4, in_$p5, in_$p9, in_$p11, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i59, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i85, out_$i86, out_$i87, out_$i51, out_$i52, out_$i53, out_$i88, out_$i89, out_$i90);
    return;

  exit:
    return;
}



procedure __tda18271_write_regs_loop_$bb34(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p11: ref, in_$i54: i1, in_$i55: i32, in_$i56: i8, in_$p57: ref, in_$i58: i1, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i59: i32, in_$i69: i16, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32) returns (out_$i54: i1, out_$i55: i32, out_$i56: i8, out_$p57: ref, out_$i58: i1, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i59: i32, out_$i69: i16, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32);
  modifies $M.47, $M.49;



implementation __tda18271_write_regs_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} __tda18271_write_regs_loop_$bb6();
    return;

  exit:
    return;
}



procedure __tda18271_write_regs_loop_$bb6();



implementation tda18271_lookup_pll_map_loop_$bb22(in_$p2: ref, in_$p23: ref, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i39: i32, in_$i62: i32) returns (out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i39: i32, out_$i62: i32)
{

  entry:
    out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i39, out_$i62 := in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i54, in_$i55, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i39, in_$i62;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  $bb31:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i54;
    goto $bb31_dummy;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i54;
    assume true;
    goto $bb31;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i61 := $ult.i32(out_$i59, out_$i60);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.42, in_$p2);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i59 := $mul.i32(out_$i58, 1000);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.54, out_$p57);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i55, 8)), $mul.ref(0, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i54);
    goto corral_source_split_2786;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i39, 1);
    call {:si_unique_call 427} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_2785;

  $bb25:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i39;
    assume true;
    goto $bb25;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.54, out_$p43);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p23, $mul.ref(out_$i41, 8)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i40);
    goto corral_source_split_2755;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i39, out_$i62 := tda18271_lookup_pll_map_loop_$bb22(in_$p2, in_$p23, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i39, out_$i62);
    return;

  exit:
    return;
}



procedure tda18271_lookup_pll_map_loop_$bb22(in_$p2: ref, in_$p23: ref, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i39: i32, in_$i62: i32) returns (out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i39: i32, out_$i62: i32);



implementation tda18271_lookup_pll_map_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tda18271_lookup_pll_map_loop_$bb3();
    return;

  exit:
    return;
}



procedure tda18271_lookup_pll_map_loop_$bb3();



implementation tda18271_lookup_map_loop_$bb32(in_$p2: ref, in_$p27: ref, in_$i64: i32, in_$i65: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i78: i32, in_$i79: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i63: i32, in_$i86: i32) returns (out_$i64: i32, out_$i65: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i78: i32, out_$i79: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i63: i32, out_$i86: i32)
{

  entry:
    out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i63, out_$i86 := in_$i64, in_$i65, in_$p67, in_$i68, in_$i69, in_$i70, in_$i78, in_$i79, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i63, in_$i86;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  $bb41:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i78;
    goto $bb41_dummy;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i78;
    assume true;
    goto $bb41;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$i85 := $ult.i32(out_$i83, out_$i84);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.39, in_$p2);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$i83 := $mul.i32(out_$i82, 1000);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.63, out_$p81);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p27, $mul.ref(out_$i79, 8)), $mul.ref(0, 1));
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i32.i64(out_$i78);
    goto corral_source_split_2906;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i63, 1);
    call {:si_unique_call 435} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2905;

  $bb35:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i63;
    assume true;
    goto $bb35;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.63, out_$p67);
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p27, $mul.ref(out_$i65, 8)), $mul.ref(0, 1));
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_2880;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, 1);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i63, out_$i86 := tda18271_lookup_map_loop_$bb32(in_$p2, in_$p27, out_$i64, out_$i65, out_$p67, out_$i68, out_$i69, out_$i70, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i63, out_$i86);
    return;

  exit:
    return;
}



procedure tda18271_lookup_map_loop_$bb32(in_$p2: ref, in_$p27: ref, in_$i64: i32, in_$i65: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i78: i32, in_$i79: i64, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i63: i32, in_$i86: i32) returns (out_$i64: i32, out_$i65: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i78: i32, out_$i79: i64, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i63: i32, out_$i86: i32);



implementation tda18271_lookup_map_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} tda18271_lookup_map_loop_$bb3();
    return;

  exit:
    return;
}



procedure tda18271_lookup_map_loop_$bb3();



implementation tda18271_lookup_rf_band_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p65: ref, in_$i66: i32, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i74: i32, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i14: i32, in_$i82: i32, in_vslice_dummy_var_182: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p65: ref, out_$i66: i32, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i74: i32, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i14: i32, out_$i82: i32, out_vslice_dummy_var_182: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i68, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i14, out_$i82, out_vslice_dummy_var_182 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$p57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$p65, in_$i66, in_$i68, in_$p70, in_$i71, in_$i72, in_$i74, in_$i75, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i14, in_$i82, in_vslice_dummy_var_182;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  $bb16:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i74;
    goto $bb16_dummy;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i74;
    assume true;
    goto $bb16;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i81 := $ult.i32(out_$i79, out_$i80);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.39, in_$p1);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i79 := $mul.i32(out_$i78, 1000);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.2, out_$p77);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i75, 48)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_3149;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i14, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3148;

  $bb13:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.2, out_$p70);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i68, 48)), $mul.ref(0, 1));
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3138;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} out_vslice_dummy_var_182 := _tda_printk.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32.i32(in_$p5, .str, .str.5, .str.6, out_$i14, out_$i25, out_$i26, out_$i30, out_$i34, out_$i38, out_$i42, out_$i46, out_$i50, out_$i54, out_$i58, out_$i62, out_$i66);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.2, out_$p65);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i63, 48)), $mul.ref(44, 1));
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.2, out_$p61);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i59, 48)), $mul.ref(36, 1));
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.2, out_$p57);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i55, 48)), $mul.ref(40, 1));
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.2, out_$p53);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i51, 48)), $mul.ref(32, 1));
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.2, out_$p49);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i47, 48)), $mul.ref(28, 1));
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.2, out_$p45);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i43, 48)), $mul.ref(24, 1));
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.2, out_$p41);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i39, 48)), $mul.ref(20, 1));
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.2, out_$p37);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i35, 48)), $mul.ref(16, 1));
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.2, out_$p33);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i31, 48)), $mul.ref(12, 1));
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.2, out_$p29);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i27, 48)), $mul.ref(8, 1));
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.39, in_$p1);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i25 := $mul.i32(out_$i24, 1000);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.2, out_$p23);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i21, 48)), $mul.ref(0, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3090;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 2);
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i18 := $M.5;
    goto corral_source_split_3085;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 8);
    goto corral_source_split_3081;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $M.5;
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i68, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i14, out_$i82, out_vslice_dummy_var_182 := tda18271_lookup_rf_band_loop_$bb4(in_$p1, in_$p5, in_$p7, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$p65, out_$i66, out_$i68, out_$p70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i14, out_$i82, out_vslice_dummy_var_182);
    return;

  exit:
    return;
}



procedure tda18271_lookup_rf_band_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i64, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$i58: i32, in_$i59: i64, in_$p61: ref, in_$i62: i32, in_$i63: i64, in_$p65: ref, in_$i66: i32, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i74: i32, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i14: i32, in_$i82: i32, in_vslice_dummy_var_182: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i64, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$i58: i32, out_$i59: i64, out_$p61: ref, out_$i62: i32, out_$i63: i64, out_$p65: ref, out_$i66: i32, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i74: i32, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i14: i32, out_$i82: i32, out_vslice_dummy_var_182: i32);
  modifies $M.6, $CurrAddr;



implementation tda18271_calc_rf_filter_curve_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_$i38: i32, in_vslice_dummy_var_237: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_$i38: i32, out_vslice_dummy_var_237: i32)
{

  entry:
    out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i18, out_$i38, out_vslice_dummy_var_237 := in_$i19, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i33, in_$p35, in_$i36, in_$i37, in_$i18, in_$i38, in_vslice_dummy_var_237;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3877;

  $bb19:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i32;
    goto $bb19_dummy;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i25;
    assume true;
    goto $bb19;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.2, out_$p35);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i32);
    out_$p35 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 792)), $mul.ref(220, 1)), $mul.ref(out_$i33, 48)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i18, 1);
    call {:si_unique_call 557} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3895;

  $bb17:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i25;
    assume true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i27, 0);
    goto corral_source_split_3891;

  $bb14:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} out_vslice_dummy_var_237 := _tda_printk.ref.ref.ref.ref.i32.i32(in_$p3, .str.26, .str.104, .str.35, out_$i25, 702);
    goto corral_source_split_3889;

  $bb13:
    assume out_$i28 == 1;
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i32(out_$i26);
    call {:si_unique_call 555} {:cexpr "__ret___0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 0);
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} out_$i25 := tda18271_rf_tracking_filters_init(in_$p0, out_$i24);
    call {:si_unique_call 554} {:cexpr "ret"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i24 := $mul.i32(out_$i23, 1000);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.2, out_$p22);
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 792)), $mul.ref(220, 1)), $mul.ref(out_$i19, 48)), $mul.ref(0, 1));
    goto corral_source_split_3880;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i18);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i18, out_$i38, out_vslice_dummy_var_237 := tda18271_calc_rf_filter_curve_loop_$bb11(in_$p0, in_$p3, out_$i19, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i18, out_$i38, out_vslice_dummy_var_237);
    return;

  exit:
    return;
}



procedure tda18271_calc_rf_filter_curve_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i19: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i18: i32, in_$i38: i32, in_vslice_dummy_var_237: i32) returns (out_$i19: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i18: i32, out_$i38: i32, out_vslice_dummy_var_237: i32);
  modifies $M.6, $CurrAddr, $M.39, $M.65, $M.70, $M.40, $M.2, $M.71, $M.72, $M.42, $M.73, $M.74, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44, $M.66, $M.67, $M.68, $M.69;



implementation tda18271_rf_tracking_filters_init_loop_$bb37()
{

  entry:
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb37_dummy;

  $bb37_dummy:
    call {:si_unique_call 1} tda18271_rf_tracking_filters_init_loop_$bb37();
    return;

  exit:
    return;
}



procedure tda18271_rf_tracking_filters_init_loop_$bb37();



implementation tda18271_rf_tracking_filters_init_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i64, in_$p70: ref, in_$i71: i1, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i64, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i64, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i39: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32) returns (out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i64, out_$p70: ref, out_$i71: i1, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i64, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i64, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i39: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32)
{

  entry:
    out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i39, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246 := in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p89, in_$p90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$p103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$p130, in_$p131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p151, in_$p152, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$p159, in_$p160, in_$i161, in_$i162, in_$i163, in_$p165, in_$i166, in_$i167, in_$i39, in_vslice_dummy_var_244, in_vslice_dummy_var_245, in_vslice_dummy_var_246;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4129;

  $bb38:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i166;
    goto $bb38_dummy;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    out_$i167 := $sle.i32(out_$i166, 2);
    goto corral_source_split_4286;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i166 := $add.i32(out_$i39, 1);
    call {:si_unique_call 604} {:cexpr "rf"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_4285;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p103, out_$i100);
    goto corral_source_split_4283;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i101, 48)), $mul.ref(20, 1));
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$i100 := $udiv.i32(out_$i99, 1000);
    goto corral_source_split_4279;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i32($M.39, out_$p98);
    goto corral_source_split_4278;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4277;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p97, out_$i94);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i95, 48)), $mul.ref(36, 1));
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i91, out_$i93);
    goto corral_source_split_4272;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.71, out_$p92);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.72, out_$p90);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p89, 0);
    goto corral_source_split_4267;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i87, 48)), $mul.ref(32, 1));
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4264;

  $bb33:
    assume out_$i86 == 1;
    goto corral_source_split_4263;

  $bb26:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.72 := $store.i32($M.72, out_$p82, out_$i80);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $M.72 := $store.i32($M.72, out_$p77, out_$i75);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(out_$i76, 4));
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} out_$i75 := tda18271_calibrate_rf(in_$p0, out_$i74);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.39, out_$p73);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(out_$i72, 4));
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4177;

  $bb22:
    assume out_$i71 == 1;
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i55, 1);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, out_$p70, out_$i68);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(out_$i69, 4));
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.2, out_$p66);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(in_$p13, $mul.ref(29, 1));
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} out_vslice_dummy_var_246 := tda18271_calc_rf_cal(in_$p0, out_$p64);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 4));
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4165;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4164;

  $bb20:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i55;
    assume true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i57, 0);
    goto corral_source_split_4160;

  $bb17:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} out_vslice_dummy_var_245 := _tda_printk.ref.ref.ref.ref.i32.i32(in_$p9, .str.26, .str.106, .str.35, out_$i55, 641);
    goto corral_source_split_4158;

  $bb16:
    assume out_$i58 == 1;
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i1.i32(out_$i56);
    call {:si_unique_call 596} {:cexpr "__ret___0"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_$i55 := tda18271_powerscan(in_$p0, out_$p51, out_$p54);
    call {:si_unique_call 595} {:cexpr "bcal"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p52, $mul.ref(out_$i53, 4));
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(out_$i50, 4));
    goto corral_source_split_4148;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4147;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4146;

  $bb14:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} out_vslice_dummy_var_244 := _tda_printk.ref.ref.ref.ref.i32.i32(in_$p9, .str, .str.106, .str.107, out_$i47, out_$i39);
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.39, in_$p2);
    goto corral_source_split_4143;

  $bb13:
    assume out_$i46 == 1;
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_4140;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 16);
    goto corral_source_split_4139;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i44 := $M.5;
    goto corral_source_split_4138;

  $bb11:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.70, out_$p41);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 12)), $mul.ref(out_$i40, 4));
    goto corral_source_split_4132;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(out_$i81, 4));
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.71, out_$p79);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(out_$i78, 4));
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i39);
    goto corral_source_split_4186;

  $bb23:
    assume !(out_$i71 == 1);
    goto corral_source_split_4185;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p130, out_$i127);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i128, 48)), $mul.ref(24, 1));
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$i128 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$i127 := $udiv.i32(out_$i126, 1000);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.39, out_$p125);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p124, out_$i121);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i122, 48)), $mul.ref(32, 1));
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i121 := $sdiv.i32(out_$i114, out_$i120);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i120 := $sdiv.i32(out_$i119, 1000);
    call {:si_unique_call 601} {:cexpr "divisor"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i32(out_$i116, out_$i118);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.39, out_$p117);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.39, out_$p115);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i111, out_$i113);
    call {:si_unique_call 600} {:cexpr "dividend"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.71, out_$p112);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i111 := $sub.i32(out_$i108, out_$i110);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.72, out_$p109);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i108 := $sub.i32(out_$i105, out_$i107);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.71, out_$p106);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.72, out_$p104);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4193;

  $bb28:
    assume out_$i84 == 1;
    goto corral_source_split_4192;

  $bb27:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p165, out_$i162);
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i163, 48)), $mul.ref(28, 1));
    goto corral_source_split_4260;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i162 := $udiv.i32(out_$i161, 1000);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.39, out_$p160);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p159, out_$i156);
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i157, 48)), $mul.ref(44, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i157 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i156 := $sub.i32(out_$i153, out_$i155);
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.71, out_$p154);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.72, out_$p152);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p151, out_$i148);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p11, $mul.ref(out_$i149, 48)), $mul.ref(40, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.i32.i64(in_$i14);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$i148 := $sdiv.i32(out_$i141, out_$i147);
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i147 := $sdiv.i32(out_$i146, 1000);
    call {:si_unique_call 603} {:cexpr "divisor"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(out_$i143, out_$i145);
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.39, out_$p144);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.39, out_$p142);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p4, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i138, out_$i140);
    call {:si_unique_call 602} {:cexpr "dividend"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.71, out_$p139);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i138 := $sub.i32(out_$i135, out_$i137);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.72, out_$p136);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$i135 := $sub.i32(out_$i132, out_$i134);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.71, out_$p133);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p6, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.72, out_$p131);
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p5, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_4224;

  $bb30:
    assume out_$i85 == 1;
    goto corral_source_split_4223;

  $bb29:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i39, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i39, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246 := tda18271_rf_tracking_filters_init_loop_$bb8(in_$p0, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p9, in_$p11, in_$p13, in_$i14, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p151, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i39, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246);
    return;

  exit:
    return;
}



procedure tda18271_rf_tracking_filters_init_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i64, in_$p70: ref, in_$i71: i1, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i64, in_$p79: ref, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i64, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$p133: ref, in_$i134: i32, in_$i135: i32, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$p142: ref, in_$i143: i32, in_$p144: ref, in_$i145: i32, in_$i146: i32, in_$i147: i32, in_$i148: i32, in_$i149: i64, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i64, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i39: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32) returns (out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i64, out_$p70: ref, out_$i71: i1, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i64, out_$p79: ref, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i64, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$p133: ref, out_$i134: i32, out_$i135: i32, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$p142: ref, out_$i143: i32, out_$p144: ref, out_$i145: i32, out_$i146: i32, out_$i147: i32, out_$i148: i32, out_$i149: i64, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i64, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i39: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32);
  modifies $M.2, $M.72, $M.39, $M.6, $M.40, $M.42, $M.45, $M.46, $M.47, $M.48, $M.49, $M.43, $M.44, $M.66, $M.67, $M.68, $M.69, $CurrAddr, $M.71, $M.73, $M.74;



implementation tda18271_powerscan_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p45: ref, in_$i55: i32, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i63: i1, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i72: i1, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i54: i32, in_$i78: i32, in_$i79: i32, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i64: i32, in_$i57: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32) returns (out_$i55: i32, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i63: i1, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i72: i1, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i64: i32, out_$i57: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32)
{

  entry:
    out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261 := in_$i55, in_$i56, in_$i58, in_$i59, in_$i60, in_$i63, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i64, in_$i57, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4419;

  $bb32:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$i57 := out_$i79, out_$i78;
    goto $bb32_dummy;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i90, out_$i92);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.73, in_$p3);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, 63);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.2, in_$p45);
    goto corral_source_split_4390;

  $bb22:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i74, out_$i65;
    assume true;
    goto $bb22;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i77 := $sge.i32(out_$i76, out_$i74);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i16.i32(out_$i75);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i16($M.74, in_$p4);
    goto corral_source_split_4385;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i57, 200);
    call {:si_unique_call 633} {:cexpr "count"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4384;

  $bb20:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i67;
    assume true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i69, 0);
    goto corral_source_split_4380;

  $bb17:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_vslice_dummy_var_261 := _tda_printk.ref.ref.ref.ref.i32.i32(in_$p8, .str.26, .str.109, .str.35, out_$i67, 546);
    goto corral_source_split_4378;

  $bb16:
    assume out_$i70 == 1;
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i32(out_$i68);
    call {:si_unique_call 631} {:cexpr "__ret___0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 0);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} out_$i67 := tda18271_read_extended(in_$p0);
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_vslice_dummy_var_260 := tda18271_write_regs(in_$p0, 4, 1);
    goto corral_source_split_4371;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(429500);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i64;
    goto $bb15;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb15;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} msleep(5);
    goto corral_source_split_4366;

  $bb13:
    assume out_$i63 == 1;
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i64, 0);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} out_vslice_dummy_var_259 := tda18271_write_regs(in_$p0, 12, 4);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_vslice_dummy_var_258 := tda18271_calc_main_pll(in_$p0, out_$i60);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.39, in_$p5);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, in_$p5, out_$i59);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 1000000);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i55, out_$i56);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i56 := $mul.i32(in_$i54, out_$i57);
    goto corral_source_split_4356;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.70, in_$p1);
    goto corral_source_split_4355;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i63 == 1);
    goto corral_source_split_4368;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261 := tda18271_powerscan_loop_$bb31(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, in_$p8, in_$p45, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, in_$i54, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261);
    return;

  exit:
    return;
}



procedure tda18271_powerscan_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p45: ref, in_$i55: i32, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i63: i1, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i72: i1, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i54: i32, in_$i78: i32, in_$i79: i32, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i64: i32, in_$i57: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32) returns (out_$i55: i32, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i63: i1, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i72: i1, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i64: i32, out_$i57: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32);
  modifies $M.6, $CurrAddr, $M.2, $M.66, $M.67, $M.68, $M.69, $M.45, $M.46, $M.47, $M.48, $M.49, $M.42, $M.43, $M.44, $M.39;



implementation tda18271_powerscan_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p45: ref, in_$i55: i32, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i63: i1, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i72: i1, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i80: i1, in_$i81: i32, in_$i82: i8, in_$i83: i32, in_$i84: i32, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i78: i32, in_$i79: i32, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i64: i32, in_$i57: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32) returns (out_$i55: i32, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i63: i1, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i72: i1, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i80: i1, out_$i81: i32, out_$i82: i8, out_$i83: i32, out_$i84: i32, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i78: i32, out_$i79: i32, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i64: i32, out_$i57: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32)
{

  entry:
    out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i52, out_$i53, out_$i54, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261 := in_$i55, in_$i56, in_$i58, in_$i59, in_$i60, in_$i63, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i52, in_$i53, in_$i54, in_$i78, in_$i79, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i64, in_$i57, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  $bb29:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i52, out_$i53, out_$i54 := 1, 200, out_$i81;
    goto $bb29_dummy;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i84, out_$i86);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.73, in_$p3);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i83, 63);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.2, in_$p45);
    goto corral_source_split_4410;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(0, out_$i54);
    call {:si_unique_call 634} {:cexpr "sgn"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_4409;

  $bb26:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i32(out_$i54, 0);
    goto corral_source_split_4397;

  $bb23:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79 := out_$i74, out_$i65;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i77 := $sge.i32(out_$i76, out_$i74);
    goto corral_source_split_4387;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i16.i32(out_$i75);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i16($M.74, in_$p4);
    goto corral_source_split_4385;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i57, 200);
    call {:si_unique_call 633} {:cexpr "count"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4384;

  $bb20:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i67;
    assume true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i69, 0);
    goto corral_source_split_4380;

  $bb17:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} out_vslice_dummy_var_261 := _tda_printk.ref.ref.ref.ref.i32.i32(in_$p8, .str.26, .str.109, .str.35, out_$i67, 546);
    goto corral_source_split_4378;

  $bb16:
    assume out_$i70 == 1;
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i32(out_$i68);
    call {:si_unique_call 631} {:cexpr "__ret___0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 0);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} out_$i67 := tda18271_read_extended(in_$p0);
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} out_vslice_dummy_var_260 := tda18271_write_regs(in_$p0, 4, 1);
    goto corral_source_split_4371;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(429500);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i64;
    goto $bb15;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb15;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} msleep(5);
    goto corral_source_split_4366;

  $bb13:
    assume out_$i63 == 1;
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i64, 0);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} out_vslice_dummy_var_259 := tda18271_write_regs(in_$p0, 12, 4);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_vslice_dummy_var_258 := tda18271_calc_main_pll(in_$p0, out_$i60);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.39, in_$p5);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, in_$p5, out_$i59);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 1000000);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i55, out_$i56);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i56 := $mul.i32(out_$i54, out_$i57);
    goto corral_source_split_4356;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.70, in_$p1);
    goto corral_source_split_4355;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb31:
    call out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261 := tda18271_powerscan_loop_$bb31(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, in_$p8, in_$p45, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i54, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261);
    goto $bb31_last;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4419;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i64, out_$i57 := out_$i52, out_$i53;
    goto $bb31;

  $bb32:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$i57 := out_$i79, out_$i78;
    assume false;
    return;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i90, out_$i92);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i8.i32(out_$i91);
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.73, in_$p3);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, 63);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.2, in_$p45);
    goto corral_source_split_4390;

  $bb22:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  $bb14:
    assume !(out_$i63 == 1);
    goto corral_source_split_4368;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i52, out_$i53, out_$i54, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261 := tda18271_powerscan_loop_$bb11(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, in_$p8, in_$p45, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i63, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i52, out_$i53, out_$i54, out_$i78, out_$i79, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i64, out_$i57, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261);
    return;

  exit:
    return;
}



procedure tda18271_powerscan_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p45: ref, in_$i55: i32, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i63: i1, in_$i65: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i72: i1, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i80: i1, in_$i81: i32, in_$i82: i8, in_$i83: i32, in_$i84: i32, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i78: i32, in_$i79: i32, in_$i88: i8, in_$i89: i32, in_$i90: i32, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i64: i32, in_$i57: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32) returns (out_$i55: i32, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i63: i1, out_$i65: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i72: i1, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i80: i1, out_$i81: i32, out_$i82: i8, out_$i83: i32, out_$i84: i32, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i78: i32, out_$i79: i32, out_$i88: i8, out_$i89: i32, out_$i90: i32, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i64: i32, out_$i57: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32);
  modifies $M.6, $CurrAddr, $M.2, $M.66, $M.67, $M.68, $M.69, $M.45, $M.46, $M.47, $M.48, $M.49, $M.42, $M.43, $M.44, $M.39;



implementation tda18271_lookup_cid_target_loop_$bb4(in_$p1: ref, in_$i13: i32, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$i29: i32) returns (out_$i13: i32, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$i29: i32)
{

  entry:
    out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i29 := in_$i13, in_$i14, in_$p16, in_$i17, in_$i18, in_$i19, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i12, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5159;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i21;
    goto $bb10_dummy;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, out_$i27);
    goto corral_source_split_5188;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.39, in_$p1);
    goto corral_source_split_5187;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    out_$i26 := $mul.i32(out_$i25, 1000);
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.75, out_$p24);
    goto corral_source_split_5185;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(out_$i22, 8)), $mul.ref(0, 1));
    goto corral_source_split_5184;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_5183;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i12, 1);
    call {:si_unique_call 679} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5182;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i12;
    assume true;
    goto $bb7;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_5165;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.75, out_$p16);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(tda18271_cid_target, $mul.ref(0, 104)), $mul.ref(out_$i14, 8)), $mul.ref(0, 1));
    goto corral_source_split_5163;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_5162;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, 1);
    goto corral_source_split_5161;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i29 := tda18271_lookup_cid_target_loop_$bb4(in_$p1, out_$i13, out_$i14, out_$p16, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i12, out_$i29);
    return;

  exit:
    return;
}



procedure tda18271_lookup_cid_target_loop_$bb4(in_$p1: ref, in_$i13: i32, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i21: i32, in_$i22: i64, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i12: i32, in_$i29: i32) returns (out_$i13: i32, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i21: i32, out_$i22: i64, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i12: i32, out_$i29: i32);



implementation main_loop_$bb4(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i2: i32, in_vslice_dummy_var_323: i32, in_vslice_dummy_var_324: i32, in_vslice_dummy_var_325: i32, in_vslice_dummy_var_326: i32, in_vslice_dummy_var_327: i32, in_vslice_dummy_var_328: i32, in_vslice_dummy_var_329: i32, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i2: i32, out_vslice_dummy_var_323: i32, out_vslice_dummy_var_324: i32, out_vslice_dummy_var_325: i32, out_vslice_dummy_var_326: i32, out_vslice_dummy_var_327: i32, out_vslice_dummy_var_328: i32, out_vslice_dummy_var_329: i32, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i26, out_$i27, out_$i28, out_$i29, out_$i2, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i26, in_$i27, in_$i28, in_$i29, in_$i2, in_vslice_dummy_var_323, in_vslice_dummy_var_324, in_vslice_dummy_var_325, in_vslice_dummy_var_326, in_vslice_dummy_var_327, in_vslice_dummy_var_328, in_vslice_dummy_var_329, in_vslice_dummy_var_330, in_vslice_dummy_var_331;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  $bb33:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i17;
    goto $bb33_dummy;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i1(out_$i27, out_$i28);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i17, 0);
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} out_$i26 := __VERIFIER_nondet_int();
    call {:si_unique_call 774} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i26);
    call {:si_unique_call 775} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5608;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i2;
    goto $bb31;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i16;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5605;

  $bb29:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := out_$i2;
    goto $bb30;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$i16 := 0;
    goto $bb30;

  SeqInstr_105:
    goto corral_source_split_5603;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} out_vslice_dummy_var_331 := tda18271_release($u0);
    goto SeqInstr_104;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_handler_precall();
    goto corral_source_split_5602;

  $bb28:
    assume out_$i14 == 1;
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i2, 0);
    goto corral_source_split_5599;

  $bb26:
    assume out_$i13 == 1;
    goto corral_source_split_5598;

  $bb24:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb7:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb5:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_102:
    goto corral_source_split_5596;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_vslice_dummy_var_330 := tda18271_init($u0);
    goto SeqInstr_101;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_handler_precall();
    goto corral_source_split_5595;

  $bb25:
    assume !(out_$i12 == 1);
    goto corral_source_split_5594;

  SeqInstr_96:
    goto corral_source_split_5588;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_vslice_dummy_var_328 := tda18271_sleep($u0);
    goto SeqInstr_95;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_handler_precall();
    goto corral_source_split_5587;

  $bb22:
    assume out_$i11 == 1;
    goto corral_source_split_5586;

  $bb21:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  SeqInstr_99:
    goto corral_source_split_5592;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} out_vslice_dummy_var_329 := tda18271_set_params($u0);
    goto SeqInstr_98;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_handler_precall();
    goto corral_source_split_5591;

  $bb23:
    assume !(out_$i11 == 1);
    goto corral_source_split_5590;

  SeqInstr_90:
    goto corral_source_split_5580;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} out_vslice_dummy_var_326 := tda18271_set_analog_params($u0, $u1);
    goto SeqInstr_89;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_handler_precall();
    goto corral_source_split_5579;

  $bb18:
    assume out_$i9 == 1;
    goto corral_source_split_5578;

  $bb9:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb8:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  SeqInstr_93:
    goto corral_source_split_5584;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_327 := tda18271_set_config($u0, $u2);
    goto SeqInstr_92;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} ldv_handler_precall();
    goto corral_source_split_5583;

  $bb19:
    assume !(out_$i9 == 1);
    goto corral_source_split_5582;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_vslice_dummy_var_323 := tda18271_get_frequency($u0, $u3);
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} ldv_handler_precall();
    goto corral_source_split_5567;

  $bb11:
    assume out_$i6 == 1;
    goto corral_source_split_5566;

  $bb10:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_vslice_dummy_var_324 := tda18271_get_bandwidth($u0, $u3);
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_handler_precall();
    goto corral_source_split_5571;

  $bb13:
    assume out_$i7 == 1;
    goto corral_source_split_5570;

  $bb12:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_325 := tda18271_get_if_frequency($u0, $u3);
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} ldv_handler_precall();
    goto corral_source_split_5575;

  $bb15:
    assume out_$i8 == 1;
    goto corral_source_split_5574;

  $bb14:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb17;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb17;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i26, out_$i27, out_$i28, out_$i29, out_$i2, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331 := main_loop_$bb4(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i26, out_$i27, out_$i28, out_$i29, out_$i2, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331);
    return;

  exit:
    return;
}



procedure main_loop_$bb4(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i2: i32, in_vslice_dummy_var_323: i32, in_vslice_dummy_var_324: i32, in_vslice_dummy_var_325: i32, in_vslice_dummy_var_326: i32, in_vslice_dummy_var_327: i32, in_vslice_dummy_var_328: i32, in_vslice_dummy_var_329: i32, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i2: i32, out_vslice_dummy_var_323: i32, out_vslice_dummy_var_324: i32, out_vslice_dummy_var_325: i32, out_vslice_dummy_var_326: i32, out_vslice_dummy_var_327: i32, out_vslice_dummy_var_328: i32, out_vslice_dummy_var_329: i32, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i32);
  modifies $M.9, $M.8, $M.78, assertsPassed, $M.6, $M.41, $M.2, $M.66, $M.67, $M.68, $M.69, $M.45, $M.46, $M.47, $M.48, $M.49, $CurrAddr, $M.39, $M.65, $M.70, $M.40, $M.71, $M.72, $M.42, $M.73, $M.74, $M.43, $M.44, $M.23, $M.26, $M.29;


