var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i16;

var $M.8: [ref]i8;

var $M.9: i32;

var $M.10: [ref]i32;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: [ref]i8;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: [ref]i32;

var $M.23: [ref]i8;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: [ref]i8;

var $M.32: [ref]i32;

var $M.33: [ref]i8;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.89: [ref]i16;

var $M.90: [ref]i16;

var $M.91: [ref]i16;

var $M.92: [ref]i16;

var $M.93: [ref]i16;

var $M.94: [ref]i8;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $M.100: [ref]i8;

var $M.101: [ref]i64;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.252: [ref]i8;

var $M.253: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 606934);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const bcm4320a_info_group0: ref;

axiom bcm4320a_info_group0 == $sub.ref(0, 2060);

const bcm4320a_info_group2: ref;

axiom bcm4320a_info_group2 == $sub.ref(0, 3092);

const bcm4320a_info_group1: ref;

axiom bcm4320a_info_group1 == $sub.ref(0, 4124);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 5152);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 6180);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 7208);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 8236);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 9264);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 10296);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 11324);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 12356);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 13384);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 14416);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 15444);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 16476);

const bcm4320b_info_group0: ref;

axiom bcm4320b_info_group0 == $sub.ref(0, 17508);

const bcm4320b_info_group2: ref;

axiom bcm4320b_info_group2 == $sub.ref(0, 18540);

const bcm4320b_info_group1: ref;

axiom bcm4320b_info_group1 == $sub.ref(0, 19572);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 20600);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 21628);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 22656);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 23684);

const rndis_wlan_driver_group1: ref;

axiom rndis_wlan_driver_group1 == $sub.ref(0, 24716);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 25748);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 26780);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 27812);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 28844);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 29876);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 30908);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 31940);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 32972);

const rndis_wlan_info_group0: ref;

axiom rndis_wlan_info_group0 == $sub.ref(0, 34004);

const rndis_wlan_info_group2: ref;

axiom rndis_wlan_info_group2 == $sub.ref(0, 35036);

const rndis_wlan_info_group1: ref;

axiom rndis_wlan_info_group1 == $sub.ref(0, 36068);

const rndis_wlan_netdev_ops_group1: ref;

axiom rndis_wlan_netdev_ops_group1 == $sub.ref(0, 37100);

const rndis_config_ops_group0: ref;

axiom rndis_config_ops_group0 == $sub.ref(0, 38132);

const rndis_config_ops_group2: ref;

axiom rndis_config_ops_group2 == $sub.ref(0, 39164);

const rndis_config_ops_group4: ref;

axiom rndis_config_ops_group4 == $sub.ref(0, 40196);

const rndis_config_ops_group3: ref;

axiom rndis_config_ops_group3 == $sub.ref(0, 41228);

const rndis_config_ops_group1: ref;

axiom rndis_config_ops_group1 == $sub.ref(0, 42260);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 43288);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 44316);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 45344);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 46372);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 47400);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 48428);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 49456);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 50484);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 51512);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 52540);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 53568);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 54596);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 55624);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 56652);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 57680);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 58708);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 59736);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 60764);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 61792);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 62820);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 63848);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 64876);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 65904);

const {:count 15} __mod_usb__products_device_table: ref;

axiom __mod_usb__products_device_table == $sub.ref(0, 67408);

const rndis_wlan_info: ref;

axiom rndis_wlan_info == $sub.ref(0, 68576);

const bcm4320a_info: ref;

axiom bcm4320a_info == $sub.ref(0, 69744);

const bcm4320b_info: ref;

axiom bcm4320b_info == $sub.ref(0, 70912);

const {:count 15} products: ref;

axiom products == $sub.ref(0, 72416);

const rndis_wlan_driver: ref;

axiom rndis_wlan_driver == $sub.ref(0, 73744);

const {:count 4} rndis_cipher_suites: ref;

axiom rndis_cipher_suites == $sub.ref(0, 74784);

const {:count 12} rndis_rates: ref;

axiom rndis_rates == $sub.ref(0, 75952);

const {:count 14} rndis_channels: ref;

axiom rndis_channels == $sub.ref(0, 77872);

const rndis_wiphy_privid: ref;

axiom rndis_wiphy_privid == $sub.ref(0, 78904);

const rndis_wlan_netdev_ops: ref;

axiom rndis_wlan_netdev_ops == $sub.ref(0, 80456);

const rndis_config_ops: ref;

axiom rndis_config_ops == $sub.ref(0, 82208);

const modparam_workaround_interval: ref;

axiom modparam_workaround_interval == $sub.ref(0, 83236);

const modparam_roamdelta: ref;

axiom modparam_roamdelta == $sub.ref(0, 84264);

const modparam_roamtrigger: ref;

axiom modparam_roamtrigger == $sub.ref(0, 85292);

const modparam_power_output: ref;

axiom modparam_power_output == $sub.ref(0, 86320);

const modparam_power_save: ref;

axiom modparam_power_save == $sub.ref(0, 87348);

const modparam_afterburner: ref;

axiom modparam_afterburner == $sub.ref(0, 88376);

const modparam_frameburst: ref;

axiom modparam_frameburst == $sub.ref(0, 89404);

const {:count 4} modparam_country: ref;

axiom modparam_country == $sub.ref(0, 90432);

const {:count 23} .str.88: ref;

axiom .str.88 == $sub.ref(0, 91479);

const {:count 11} .str.1: ref;

axiom .str.1 == $sub.ref(0, 92514);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 93559);

const .str: ref;

axiom .str == $sub.ref(0, 94796);

const {:count 14} .str.109: ref;

axiom .str.109 == $sub.ref(0, 95834);

const {:count 8} .str.110: ref;

axiom .str.110 == $sub.ref(0, 96866);

const {:count 9} .str.111: ref;

axiom .str.111 == $sub.ref(0, 97899);

const {:count 41} .str.112: ref;

axiom .str.112 == $sub.ref(0, 98964);

const {:count 14} .str.26: ref;

axiom .str.26 == $sub.ref(0, 100002);

const {:count 43} .str.7: ref;

axiom .str.7 == $sub.ref(0, 101069);

const {:count 44} .str.27: ref;

axiom .str.27 == $sub.ref(0, 102137);

const {:count 2} .str.10: ref;

axiom .str.10 == $sub.ref(0, 103163);

const {:count 18} .str.160: ref;

axiom .str.160 == $sub.ref(0, 104205);

const {:count 6} .str.12: ref;

axiom .str.12 == $sub.ref(0, 105235);

const {:count 16} .str.128: ref;

axiom .str.128 == $sub.ref(0, 106275);

const {:count 30} .str.129: ref;

axiom .str.129 == $sub.ref(0, 107329);

const {:count 18} .str.134: ref;

axiom .str.134 == $sub.ref(0, 108371);

const {:count 44} .str.131: ref;

axiom .str.131 == $sub.ref(0, 109439);

const {:count 13} .str.132: ref;

axiom .str.132 == $sub.ref(0, 110476);

const {:count 29} .str.133: ref;

axiom .str.133 == $sub.ref(0, 111529);

const {:count 18} .str.130: ref;

axiom .str.130 == $sub.ref(0, 112571);

const {:count 16} .str.6: ref;

axiom .str.6 == $sub.ref(0, 113611);

const {:count 47} .str.8: ref;

axiom .str.8 == $sub.ref(0, 114682);

const {:count 45} .str.9: ref;

axiom .str.9 == $sub.ref(0, 115751);

const {:count 16} .str.170: ref;

axiom .str.170 == $sub.ref(0, 116791);

const {:count 13} .str.171: ref;

axiom .str.171 == $sub.ref(0, 117828);

const {:count 20} .str.172: ref;

axiom .str.172 == $sub.ref(0, 118872);

const {:count 19} .str.163: ref;

axiom .str.163 == $sub.ref(0, 119915);

const {:count 14} .str.164: ref;

axiom .str.164 == $sub.ref(0, 120953);

const {:count 19} .str.142: ref;

axiom .str.142 == $sub.ref(0, 121996);

const {:count 24} .str.143: ref;

axiom .str.143 == $sub.ref(0, 123044);

const {:count 13} .str.24: ref;

axiom .str.24 == $sub.ref(0, 124081);

const {:count 24} .str.25: ref;

axiom .str.25 == $sub.ref(0, 125129);

const {:count 28} .str.40: ref;

axiom .str.40 == $sub.ref(0, 126181);

const {:count 10} .str.41: ref;

axiom .str.41 == $sub.ref(0, 127215);

const {:count 23} .str.42: ref;

axiom .str.42 == $sub.ref(0, 128262);

const {:count 15} .str.28: ref;

axiom .str.28 == $sub.ref(0, 129301);

const {:count 23} .str.29: ref;

axiom .str.29 == $sub.ref(0, 130348);

const {:count 34} .str.30: ref;

axiom .str.30 == $sub.ref(0, 131406);

const {:count 12} .str.31: ref;

axiom .str.31 == $sub.ref(0, 132442);

const {:count 13} .str.32: ref;

axiom .str.32 == $sub.ref(0, 133479);

const {:count 12} .str.33: ref;

axiom .str.33 == $sub.ref(0, 134515);

const {:count 22} .str.34: ref;

axiom .str.34 == $sub.ref(0, 135561);

const {:count 39} .str.35: ref;

axiom .str.35 == $sub.ref(0, 136624);

const {:count 40} .str.36: ref;

axiom .str.36 == $sub.ref(0, 137688);

const {:count 14} .str.37: ref;

axiom .str.37 == $sub.ref(0, 138726);

const {:count 42} .str.38: ref;

axiom .str.38 == $sub.ref(0, 139792);

const {:count 33} .str.39: ref;

axiom .str.39 == $sub.ref(0, 140849);

const {:count 18} .str.167: ref;

axiom .str.167 == $sub.ref(0, 141891);

const {:count 10} .str.166: ref;

axiom .str.166 == $sub.ref(0, 142925);

const {:count 19} .str.165: ref;

axiom .str.165 == $sub.ref(0, 143968);

const {:count 17} .str.161: ref;

axiom .str.161 == $sub.ref(0, 145009);

const {:count 23} .str.162: ref;

axiom .str.162 == $sub.ref(0, 146056);

const {:count 16} .str.46: ref;

axiom .str.46 == $sub.ref(0, 147096);

const {:count 24} .str.47: ref;

axiom .str.47 == $sub.ref(0, 148144);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 149182);

const {:count 50} .str.44: ref;

axiom .str.44 == $sub.ref(0, 150256);

const {:count 33} .str.45: ref;

axiom .str.45 == $sub.ref(0, 151313);

const {:count 16} .str.173: ref;

axiom .str.173 == $sub.ref(0, 152353);

const {:count 41} .str.174: ref;

axiom .str.174 == $sub.ref(0, 153418);

const {:count 38} .str.175: ref;

axiom .str.175 == $sub.ref(0, 154480);

const {:count 37} .str.176: ref;

axiom .str.176 == $sub.ref(0, 155541);

const {:count 37} .str.177: ref;

axiom .str.177 == $sub.ref(0, 156602);

const {:count 35} .str.178: ref;

axiom .str.178 == $sub.ref(0, 157661);

const {:count 33} .str.179: ref;

axiom .str.179 == $sub.ref(0, 158718);

const {:count 33} .str.180: ref;

axiom .str.180 == $sub.ref(0, 159775);

const {:count 34} .str.159: ref;

axiom .str.159 == $sub.ref(0, 160833);

const {:count 12} .str.155: ref;

axiom .str.155 == $sub.ref(0, 161869);

const {:count 8} .str.156: ref;

axiom .str.156 == $sub.ref(0, 162901);

const {:count 37} .str.157: ref;

axiom .str.157 == $sub.ref(0, 163962);

const {:count 16} .str.158: ref;

axiom .str.158 == $sub.ref(0, 165002);

const {:count 17} .str.168: ref;

axiom .str.168 == $sub.ref(0, 166043);

const {:count 25} .str.169: ref;

axiom .str.169 == $sub.ref(0, 167092);

const {:count 29} .str.144: ref;

axiom .str.144 == $sub.ref(0, 168145);

const {:count 17} .str.145: ref;

axiom .str.145 == $sub.ref(0, 169186);

const {:count 14} .str.146: ref;

axiom .str.146 == $sub.ref(0, 170224);

const {:count 68} .str.147: ref;

axiom .str.147 == $sub.ref(0, 171316);

const {:count 36} .str.148: ref;

axiom .str.148 == $sub.ref(0, 172376);

const {:count 35} .str.149: ref;

axiom .str.149 == $sub.ref(0, 173435);

const {:count 35} .str.150: ref;

axiom .str.150 == $sub.ref(0, 174494);

const {:count 33} .str.151: ref;

axiom .str.151 == $sub.ref(0, 175551);

const {:count 42} .str.152: ref;

axiom .str.152 == $sub.ref(0, 176617);

const {:count 31} .str.153: ref;

axiom .str.153 == $sub.ref(0, 177672);

const {:count 31} .str.154: ref;

axiom .str.154 == $sub.ref(0, 178727);

const {:count 11} .str.126: ref;

axiom .str.126 == $sub.ref(0, 179762);

const {:count 15} .str.127: ref;

axiom .str.127 == $sub.ref(0, 180801);

const {:count 23} .str.11: ref;

axiom .str.11 == $sub.ref(0, 181848);

const {:count 18} .str.13: ref;

axiom .str.13 == $sub.ref(0, 182890);

const {:count 51} .str.14: ref;

axiom .str.14 == $sub.ref(0, 183965);

const {:count 22} .str.15: ref;

axiom .str.15 == $sub.ref(0, 185011);

const {:count 38} .str.16: ref;

axiom .str.16 == $sub.ref(0, 186073);

const {:count 22} .str.124: ref;

axiom .str.124 == $sub.ref(0, 187119);

const {:count 8} .str.125: ref;

axiom .str.125 == $sub.ref(0, 188151);

const {:count 14} .str.135: ref;

axiom .str.135 == $sub.ref(0, 189189);

const {:count 13} .str.136: ref;

axiom .str.136 == $sub.ref(0, 190226);

const {:count 11} .str.137: ref;

axiom .str.137 == $sub.ref(0, 191261);

const {:count 16} .str.138: ref;

axiom .str.138 == $sub.ref(0, 192301);

const {:count 4} .str.139: ref;

axiom .str.139 == $sub.ref(0, 193329);

const {:count 4} .str.140: ref;

axiom .str.140 == $sub.ref(0, 194357);

const {:count 42} .str.141: ref;

axiom .str.141 == $sub.ref(0, 195423);

const {:count 14} .str.113: ref;

axiom .str.113 == $sub.ref(0, 196461);

const {:count 19} .str.114: ref;

axiom .str.114 == $sub.ref(0, 197504);

const {:count 31} .str.115: ref;

axiom .str.115 == $sub.ref(0, 198559);

const {:count 12} .str.116: ref;

axiom .str.116 == $sub.ref(0, 199595);

const {:count 31} .str.117: ref;

axiom .str.117 == $sub.ref(0, 200650);

const {:count 36} .str.118: ref;

axiom .str.118 == $sub.ref(0, 201710);

const {:count 36} .str.119: ref;

axiom .str.119 == $sub.ref(0, 202770);

const {:count 31} .str.120: ref;

axiom .str.120 == $sub.ref(0, 203825);

const {:count 40} .str.121: ref;

axiom .str.121 == $sub.ref(0, 204889);

const {:count 22} .str.122: ref;

axiom .str.122 == $sub.ref(0, 205935);

const {:count 40} .str.123: ref;

axiom .str.123 == $sub.ref(0, 206999);

const {:count 38} .str.181: ref;

axiom .str.181 == $sub.ref(0, 208061);

const {:count 22} .str.56: ref;

axiom .str.56 == $sub.ref(0, 209107);

const {:count 60} .str.57: ref;

axiom .str.57 == $sub.ref(0, 210191);

const {:count 15} .str.58: ref;

axiom .str.58 == $sub.ref(0, 211230);

const {:count 18} .str.59: ref;

axiom .str.59 == $sub.ref(0, 212272);

const {:count 20} .str.60: ref;

axiom .str.60 == $sub.ref(0, 213316);

const {:count 62} .str.61: ref;

axiom .str.61 == $sub.ref(0, 214402);

const {:count 65} .str.62: ref;

axiom .str.62 == $sub.ref(0, 215491);

const {:count 28} .str.63: ref;

axiom .str.63 == $sub.ref(0, 216543);

const {:count 34} .str.64: ref;

axiom .str.64 == $sub.ref(0, 217601);

const {:count 55} .str.65: ref;

axiom .str.65 == $sub.ref(0, 218680);

const {:count 57} .str.73: ref;

axiom .str.73 == $sub.ref(0, 219761);

const {:count 68} .str.74: ref;

axiom .str.74 == $sub.ref(0, 220853);

const {:count 60} .str.75: ref;

axiom .str.75 == $sub.ref(0, 221937);

const {:count 38} .str.76: ref;

axiom .str.76 == $sub.ref(0, 222999);

const {:count 50} .str.77: ref;

axiom .str.77 == $sub.ref(0, 224073);

const {:count 51} .str.66: ref;

axiom .str.66 == $sub.ref(0, 225148);

const {:count 8} .str.67: ref;

axiom .str.67 == $sub.ref(0, 226180);

const {:count 15} .str.68: ref;

axiom .str.68 == $sub.ref(0, 227219);

const {:count 19} .str.69: ref;

axiom .str.69 == $sub.ref(0, 228262);

const {:count 15} .str.70: ref;

axiom .str.70 == $sub.ref(0, 229301);

const {:count 12} .str.71: ref;

axiom .str.71 == $sub.ref(0, 230337);

const {:count 40} .str.72: ref;

axiom .str.72 == $sub.ref(0, 231401);

const {:count 8} .str.94: ref;

axiom .str.94 == $sub.ref(0, 232433);

const {:count 2} .str.96: ref;

axiom .str.96 == $sub.ref(0, 233459);

const {:count 2} .str.97: ref;

axiom .str.97 == $sub.ref(0, 234485);

const {:count 14} .str.95: ref;

axiom .str.95 == $sub.ref(0, 235523);

const {:count 12} .str.98: ref;

axiom .str.98 == $sub.ref(0, 236559);

const {:count 3} .str.99: ref;

axiom .str.99 == $sub.ref(0, 237586);

const {:count 14} .str.100: ref;

axiom .str.100 == $sub.ref(0, 238624);

const {:count 7} .str.101: ref;

axiom .str.101 == $sub.ref(0, 239655);

const {:count 12} .str.102: ref;

axiom .str.102 == $sub.ref(0, 240691);

const {:count 10} .str.103: ref;

axiom .str.103 == $sub.ref(0, 241725);

const {:count 27} .str.104: ref;

axiom .str.104 == $sub.ref(0, 242776);

const {:count 41} .str.105: ref;

axiom .str.105 == $sub.ref(0, 243841);

const {:count 41} .str.106: ref;

axiom .str.106 == $sub.ref(0, 244906);

const {:count 43} .str.107: ref;

axiom .str.107 == $sub.ref(0, 245973);

const {:count 3} .str.78: ref;

axiom .str.78 == $sub.ref(0, 247000);

const {:count 3} .str.79: ref;

axiom .str.79 == $sub.ref(0, 248027);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 16} .str.91: ref;

axiom .str.91 == $sub.ref(0, 249067);

const {:count 23} .str.52: ref;

axiom .str.52 == $sub.ref(0, 250114);

const {:count 18} .str.53: ref;

axiom .str.53 == $sub.ref(0, 251156);

const {:count 17} .str.92: ref;

axiom .str.92 == $sub.ref(0, 252197);

const {:count 24} .str.93: ref;

axiom .str.93 == $sub.ref(0, 253245);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 254288);

const {:count 51} .str.49: ref;

axiom .str.49 == $sub.ref(0, 255363);

const {:count 34} .str.50: ref;

axiom .str.50 == $sub.ref(0, 256421);

const {:count 49} .str.51: ref;

axiom .str.51 == $sub.ref(0, 257494);

const {:count 20} .str.80: ref;

axiom .str.80 == $sub.ref(0, 258538);

const {:count 17} .str.81: ref;

axiom .str.81 == $sub.ref(0, 259579);

const {:count 3} .str.82: ref;

axiom .str.82 == $sub.ref(0, 260606);

const {:count 14} .str.83: ref;

axiom .str.83 == $sub.ref(0, 261644);

const {:count 34} .str.84: ref;

axiom .str.84 == $sub.ref(0, 262702);

const {:count 35} .str.85: ref;

axiom .str.85 == $sub.ref(0, 263761);

const {:count 28} .str.86: ref;

axiom .str.86 == $sub.ref(0, 264813);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 265866);

const {:count 20} .str.89: ref;

axiom .str.89 == $sub.ref(0, 266910);

const {:count 78} .str.90: ref;

axiom .str.90 == $sub.ref(0, 268012);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 269056);

const {:count 60} .str.55: ref;

axiom .str.55 == $sub.ref(0, 270140);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 271191);

const {:count 23} .str.3: ref;

axiom .str.3 == $sub.ref(0, 272238);

const {:count 8} .str.4: ref;

axiom .str.4 == $sub.ref(0, 273270);

const .str.5: ref;

axiom .str.5 == $sub.ref(0, 274295);

const {:count 20} .str.22: ref;

axiom .str.22 == $sub.ref(0, 275339);

const {:count 44} .str.23: ref;

axiom .str.23 == $sub.ref(0, 276407);

const {:count 31} .str.17: ref;

axiom .str.17 == $sub.ref(0, 277462);

const {:count 54} .str.18: ref;

axiom .str.18 == $sub.ref(0, 278540);

const {:count 30} .str.19: ref;

axiom .str.19 == $sub.ref(0, 279594);

const {:count 59} .str.20: ref;

axiom .str.20 == $sub.ref(0, 280677);

const {:count 112} .str.21: ref;

axiom .str.21 == $sub.ref(0, 281813);

const {:count 38} .str.182: ref;

axiom .str.182 == $sub.ref(0, 282875);

const {:count 22} .str.183: ref;

axiom .str.183 == $sub.ref(0, 283921);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 284953);

const {:count 3} .str.1.378: ref;

axiom .str.1.378 == $sub.ref(0, 285980);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 287018);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 288046);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 289078);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 290110);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 291142);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const rndis_change_virtual_intf: ref;

axiom rndis_change_virtual_intf == $sub.ref(0, 292174);

procedure rndis_change_virtual_intf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation rndis_change_virtual_intf($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $p15: ref;
  var $i16: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "rndis_change_virtual_intf:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p5 := wiphy_priv($p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i2);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i16 := set_infra_mode($p8, $i12);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb11;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb9;
}



const rndis_add_key: ref;

axiom rndis_add_key == $sub.ref(0, 293206);

procedure rndis_add_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation rndis_add_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 13} {:cexpr "rndis_add_key:arg:key_index"} boogie_si_record_i8($i2);
    call {:si_unique_call 14} {:cexpr "rndis_add_key:arg:pairwise"} boogie_si_record_i1($i3);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p8 := wiphy_priv($p0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.113);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.114);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 2409);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 1027076);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i34, 1027077);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, .str.1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p76, .str.113);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, .str.115);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.5, $p80);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 2431);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p80, $i83);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p84, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.6, $p85);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 26} {:cexpr "tmp___3"} boogie_si_record_i64($i89);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 524);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb31:
    assume $i90 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p7, $p92, .str.115, .str.113, $i94);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i2);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i47 := add_wep_key($p11, $p42, $i44, $i46);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb20;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p4);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i57;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i2);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i74 := add_wpa_key($p11, $p63, $i65, $i67, $p4, $p69, $i71, $i73, $i61);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 24} {:cexpr "tmp___2"} boogie_si_record_i32($i74);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i48 := $i74;
    goto $bb20;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i59 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i57, $sub.i32(0, 1073741824));
    call {:si_unique_call 22} {:cexpr "flags"} boogie_si_record_i32($i60);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb29;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb23;

  $bb24:
    assume $i55 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i56 := $or.i32(0, 536870912);
    call {:si_unique_call 21} {:cexpr "flags"} boogie_si_record_i32($i56);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb26;

  $bb5:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i34, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i34, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb13;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i34, 1027073);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32($p6, $p29, .str.114, .str.113, $i30, $p4, $i32);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_del_key: ref;

axiom rndis_del_key == $sub.ref(0, 294238);

procedure rndis_del_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_del_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 29} {:cexpr "rndis_del_key:arg:key_index"} boogie_si_record_i8($i2);
    call {:si_unique_call 30} {:cexpr "rndis_del_key:arg:pairwise"} boogie_si_record_i1($i3);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p6 := wiphy_priv($p0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.135);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.136);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 2442);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 33} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i31 := remove_key($p9, $i30, $p4);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 36} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p5, $p27, .str.136, .str.135, $i28, $p4);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_set_default_key: ref;

axiom rndis_set_default_key == $sub.ref(0, 295270);

procedure rndis_set_default_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_set_default_key($p0: ref, $p1: ref, $i2: i8, $i3: i1, $i4: i1) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i32: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 39} {:cexpr "rndis_set_default_key:arg:key_index"} boogie_si_record_i8($i2);
    call {:si_unique_call 40} {:cexpr "rndis_set_default_key:arg:unicast"} boogie_si_record_i1($i3);
    call {:si_unique_call 41} {:cexpr "rndis_set_default_key:arg:multicast"} boogie_si_record_i1($i4);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p7 := wiphy_priv($p0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.124);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.125);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 2454);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 44} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 3);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(2932, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i2);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i36 := is_wpa_key($p8, $i35);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 47} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i40, 48));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p5);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p42);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 48} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p43, $p44, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i2);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i51 := add_wep_key($p10, $p46, $i48, $i50);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 50} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i32 := $i51;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i2);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p6, $p28, .str.125, .str.124, $i29);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_get_station: ref;

axiom rndis_get_station == $sub.ref(0, 296302);

procedure rndis_get_station($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_get_station($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p4 := wiphy_priv($p0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i10 := ether_addr_equal($p9, $p2);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 53} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} rndis_fill_station_info($p7, $p3);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const rndis_dump_station: ref;

axiom rndis_dump_station == $sub.ref(0, 297334);

procedure rndis_dump_station($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_dump_station($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i10: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} {:cexpr "rndis_dump_station:arg:idx"} boogie_si_record_i32($i2);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p5 := wiphy_priv($p0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 57} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p3, $p12, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} rndis_fill_station_info($p8, $p4);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 2);
    goto $bb3;
}



const rndis_scan: ref;

axiom rndis_scan == $sub.ref(0, 298366);

procedure rndis_scan($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.10, $M.11, $M.12, $M.13, $M.8, $CurrAddr, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, assertsPassed;



implementation rndis_scan($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i38: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1000)), $mul.ref(32, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p7 := netdev_priv($p6);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p9 := get_rndis_wlan_priv($p8);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.126);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.127);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1957);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 63} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_132 := rndis_check_bssid_list($p8, $0.ref, $0.ref);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i40 := rndis_start_bssid_list_scan($p8);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 67} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $i40;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(2864, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := 1500;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(1248, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i45);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_133 := queue_delayed_work($p47, $p48, $i49);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i45 := 250;
    goto $bb15;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i35, $i36);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 16);
    goto $bb9;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __dynamic_netdev_dbg.ref.ref.ref($p2, $p27, .str.127);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_connect: ref;

axiom rndis_connect == $sub.ref(0, 299398);

procedure rndis_connect($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation rndis_connect($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i36: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i34: i32;
  var $i35: i32;
  var $i46: i32;
  var $i33: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i62: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i60: i32;
  var $i61: i32;
  var $i72: i32;
  var $i59: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i1;
  var $i105: i32;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i112: i8;
  var $i113: i1;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i24;
  var $i150: i24;
  var $i151: i24;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i24;
  var $i171: i24;
  var $i172: i24;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i24;
  var $i193: i24;
  var $i194: i24;
  var $p195: ref;
  var $p196: ref;
  var $i197: i8;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i8;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $p219: ref;
  var $i220: i8;
  var $i221: i32;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i24;
  var $i232: i24;
  var $i233: i24;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i64;
  var $i238: i64;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i255: i1;
  var $i256: i8;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $i262: i1;
  var $i263: i8;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i24;
  var $i278: i24;
  var $i279: i24;
  var $p280: ref;
  var $p281: ref;
  var $i282: i8;
  var $i283: i64;
  var $i284: i64;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $p292: ref;
  var $i293: i64;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i24;
  var $i313: i24;
  var $i314: i24;
  var $p315: ref;
  var $p316: ref;
  var $i317: i8;
  var $i318: i64;
  var $i319: i64;
  var $i320: i64;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $i135: i32;
  var $i54: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p3 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p12 := wiphy_priv($p0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i28 := rndis_cipher_to_alg($i27);
    call {:si_unique_call 82} {:cexpr "groupwise"} boogie_si_record_i32($i28);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i33 := 0;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i59 := 0;
    assume {:branchcond $i58} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p80, .str.1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p81, .str.146);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p82, .str);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p83, .str.147);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.5, $p85);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 2190);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p85, $i88);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p89, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.6, $p90);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 94} {:cexpr "tmp___2"} boogie_si_record_i64($i94);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i111 := is_associated($p15);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i111);
    call {:si_unique_call 97} {:cexpr "tmp___3"} boogie_si_record_i8($i112);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i115 := set_infra_mode($p15, 1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 100} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(48, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i141 := set_auth_mode($p15, $i138, $i140, $i59);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 106} {:cexpr "ret"} boogie_si_record_i32($i141);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_136 := set_priv_filter($p15);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i162 := set_encr_mode($p15, $i33, $i28);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 112} {:cexpr "ret"} boogie_si_record_i32($i162);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i162, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p17);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(136, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i252 == 1);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_137 := clear_bssid($p15);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.0, $p292);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i294 := $trunc.i64.i32($i293);
    call {:si_unique_call 138} {:cexpr "length"} boogie_si_record_i32($i294);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i295 := $sgt.i32($i294, 32);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    $i296 := $i294;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p3);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 139} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p297, 0, 36, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p298, $i296);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(32, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i303 := $sext.i32.i64($i296);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 140} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p300, $p302, $i303, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} usbnet_pause_rx($p15);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} usbnet_purge_paused_rxq($p15);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i304 := set_essid($p15, $p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 144} {:cexpr "ret"} boogie_si_record_i32($i304);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i304, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i54 := $i304;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb103:
    assume $i305 == 1;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p306, .str.1);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p307, .str.146);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p308, .str);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p309, .str.154);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p310);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i312 := $load.i24($M.5, $p311);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i313 := $and.i24($i312, $sub.i24(0, 262144));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i314 := $or.i24($i313, 2265);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p311, $i314);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p315, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.6, $p316);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i64($i317);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i319 := $and.i64($i318, 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i320 := ldv__builtin_expect($i319, 0);
    call {:si_unique_call 146} {:cexpr "tmp___14"} boogie_si_record_i64($i320);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i321 := $ne.i64($i320, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i321 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __dynamic_netdev_dbg.ref.ref.ref.i32($p11, $p323, .str.154, $i304);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i295 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i296 := 32;
    goto $bb102;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i252 == 1;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i255 := is_zero_ether_addr($p254);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i256 := $zext.i1.i8($i255);
    call {:si_unique_call 127} {:cexpr "tmp___10"} boogie_si_record_i8($i256);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i8.i1($i256);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    $i258 := 1;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i259 == 1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_138 := clear_bssid($p15);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i259 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i262 := is_broadcast_ether_addr($p261);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i263 := $zext.i1.i8($i262);
    call {:si_unique_call 130} {:cexpr "tmp___12"} boogie_si_record_i8($i263);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i8.i1($i263);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i265 := 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i266 == 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_139 := clear_bssid($p15);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i266 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i269 := set_bssid($p15, $p268);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 133} {:cexpr "ret"} boogie_si_record_i32($i269);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i270 := $slt.i32($i269, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb91:
    assume $i270 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p271, .str.1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p272, .str.146);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p273, .str);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p274, .str.153);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p276 := $bitcast.ref.ref($p275);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i277 := $load.i24($M.5, $p276);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i278 := $and.i24($i277, $sub.i24(0, 262144));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i279 := $or.i24($i278, 2243);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p276, $i279);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p280, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i282 := $load.i8($M.6, $p281);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i283 := $zext.i8.i64($i282);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i284 := $and.i64($i283, 1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i285 := ldv__builtin_expect($i284, 0);
    call {:si_unique_call 136} {:cexpr "tmp___9"} boogie_si_record_i64($i285);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i135 := $i269;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_135 := disassociate($p15, 1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i54 := $i135;
    goto $bb17;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i286 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} __dynamic_netdev_dbg.ref.ref.ref.i32($p10, $p288, .str.153, $i269);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i264 == 1;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i265 := 0;
    goto $bb88;

  $bb81:
    assume $i257 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i258 := 0;
    goto $bb83;

  $bb67:
    assume $i207 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i208 := $or.i32($i28, $i33);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i209 := $and.i32($i208, 1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb69;

  $bb70:
    assume $i210 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(145, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.0, $p211);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p13, $mul.ref(0, 4192)), $mul.ref(2932, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p213, $i212);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(136, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(144, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.0, $p216);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(145, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.0, $p219);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i222 := $trunc.i32.i8($i221);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i223 := add_wep_key($p15, $p215, $i218, $i222);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 122} {:cexpr "ret"} boogie_si_record_i32($i223);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i223, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i224 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p225, .str.1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p226, .str.146);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p227, .str);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p228, .str.152);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i231 := $load.i24($M.5, $p230);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i232 := $and.i24($i231, $sub.i24(0, 262144));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i233 := $or.i24($i232, 2233);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p230, $i233);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p234, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.6, $p235);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i64($i236);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i238 := $and.i64($i237, 1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i239 := ldv__builtin_expect($i238, 0);
    call {:si_unique_call 124} {:cexpr "tmp___8"} boogie_si_record_i64($i239);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i135 := $i223;
    goto $bb44;

  $bb74:
    assume $i240 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(144, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.0, $p243);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(145, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p9, $p242, .str.152, $i223, $i245, $i248);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i183 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i184 := set_channel($p15, $i24);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 117} {:cexpr "ret"} boogie_si_record_i32($i184);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i185 := $slt.i32($i184, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i185 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p186, .str.1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p187, .str.146);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p188, .str);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p189, .str.151);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i192 := $load.i24($M.5, $p191);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i193 := $and.i24($i192, $sub.i24(0, 262144));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i194 := $or.i24($i193, 2223);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p191, $i194);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p195, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.6, $p196);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i64($i197);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i199 := $and.i64($i198, 1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i200 := ldv__builtin_expect($i199, 0);
    call {:si_unique_call 119} {:cexpr "tmp___7"} boogie_si_record_i64($i200);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i201 := $ne.i64($i200, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i135 := $i184;
    goto $bb44;

  $bb62:
    assume $i201 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __dynamic_netdev_dbg.ref.ref.ref.i32($p8, $p203, .str.151, $i184);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i163 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p164, .str.1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p165, .str.146);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p166, .str);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p167, .str.150);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i170 := $load.i24($M.5, $p169);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i171 := $and.i24($i170, $sub.i24(0, 262144));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i172 := $or.i24($i171, 2215);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p169, $i172);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p173, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.6, $p174);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i64($i175);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 114} {:cexpr "tmp___6"} boogie_si_record_i64($i178);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i135 := $i162;
    goto $bb44;

  $bb54:
    assume $i179 == 1;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} __dynamic_netdev_dbg.ref.ref.ref.i32($p7, $p181, .str.150, $i162);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i142 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, .str.1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p144, .str.146);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p145, .str);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p146, .str.149);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i149 := $load.i24($M.5, $p148);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i150 := $and.i24($i149, $sub.i24(0, 262144));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i151 := $or.i24($i150, 2206);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p148, $i151);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p152, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.6, $p153);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i64($i154);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i156 := $and.i64($i155, 1);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i157 := ldv__builtin_expect($i156, 0);
    call {:si_unique_call 108} {:cexpr "tmp___5"} boogie_si_record_i64($i157);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i135 := $i141;
    goto $bb44;

  $bb48:
    assume $i158 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} __dynamic_netdev_dbg.ref.ref.ref.i32($p6, $p160, .str.149, $i141);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i116 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p118, .str.146);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p119, .str);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p120, .str.148);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.5, $p122);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 2198);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p122, $i125);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 102} {:cexpr "tmp___4"} boogie_si_record_i64($i131);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i135 := $i115;
    goto $bb44;

  $bb41:
    assume $i132 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __dynamic_netdev_dbg.ref.ref.ref.i32($p5, $p134, .str.148, $i115);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i113 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} vslice_dummy_var_134 := disassociate($p15, 0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i95 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(32, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(72, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i103);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(48, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p4, $p97, .str.147, $p99, $p101, $i24, $i105, $i108, $i110, $i28, $i33, $i59);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume $i76 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i59, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb29;

  $bb30:
    assume $i77 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} netdev_err.ref.ref($p79, .str.145);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 524);
    goto $bb17;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i60, $i61 := 0, 0;
    goto $bb22;

  $bb22:
    call $i62, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i60, $i61, $i72 := rndis_connect_loop_$bb22($p2, $p56, $i62, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i60, $i61, $i72);
    goto $bb22_last;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i60);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(36, 1)), $mul.ref($i62, 4));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i67 := rndis_akm_suite_to_key_mgmt($i66);
    call {:si_unique_call 89} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, $i61);
    call {:si_unique_call 90} {:cexpr "keymgmt"} boogie_si_record_i32($i68);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i60, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p56);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i71 := $sgt.i32($i70, $i69);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i72 := $i68;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i59 := $i72;
    goto $bb21;

  $bb24:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i60, $i61 := $i69, $i68;
    goto $bb24_dummy;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i33, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} netdev_err.ref.ref($p53, .str.144);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 524);
    goto $bb17;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i34, $i35 := 0, 0;
    goto $bb7;

  $bb7:
    call $i36, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i34, $i35, $i46 := rndis_connect_loop_$bb7($p2, $p30, $i36, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i34, $i35, $i46);
    goto $bb7_last;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i34);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(12, 1)), $mul.ref($i36, 4));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i41 := rndis_cipher_to_alg($i40);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $i35);
    call {:si_unique_call 85} {:cexpr "pairwise"} boogie_si_record_i32($i42);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i34, 1);
    call {:si_unique_call 86} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p30);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, $i43);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i33 := $i46;
    goto $bb6;

  $bb9:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35 := $i43, $i42;
    goto $bb9_dummy;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i23 := ieee80211_frequency_to_channel($i22);
    call {:si_unique_call 80} {:cexpr "chan"} boogie_si_record_i32($i23);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_388;
}



const rndis_disconnect: ref;

axiom rndis_disconnect == $sub.ref(0, 300430);

procedure rndis_disconnect($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_disconnect($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 149} {:cexpr "rndis_disconnect:arg:reason_code"} boogie_si_record_i16($i2);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $p4 := wiphy_priv($p0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.168);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.169);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2280);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 152} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} eth_zero_addr($p29);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i30 := deauthenticate($p7);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 156} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p25, .str.169, $i26);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_join_ibss: ref;

axiom rndis_join_ibss == $sub.ref(0, 301462);

procedure rndis_join_ibss($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation rndis_join_ibss($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i24;
  var $i69: i24;
  var $i70: i24;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i24;
  var $i90: i24;
  var $i91: i24;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i24;
  var $i111: i24;
  var $i112: i24;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i24;
  var $i133: i24;
  var $i134: i24;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i64;
  var $i139: i64;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i1;
  var $i151: i8;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i1;
  var $i158: i8;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i24;
  var $i173: i24;
  var $i174: i24;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i24;
  var $i208: i24;
  var $i209: i24;
  var $p210: ref;
  var $p211: ref;
  var $i212: i8;
  var $i213: i64;
  var $i214: i64;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i80: i32;
  var $i219: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p3 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p11 := wiphy_priv($p0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(57, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, .str.173);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.174);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.5, $p35);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 2315);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p35, $i38);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.6, $p40);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 169} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i56 := is_associated($p14);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 172} {:cexpr "tmp___1"} boogie_si_record_i8($i57);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i60 := set_infra_mode($p14, 0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 175} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i81 := set_auth_mode($p14, 0, $i28, 0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_142 := set_priv_filter($p14);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i102 := set_encr_mode($p14, $i29, 0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 187} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p17);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i147 == 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_143 := clear_bssid($p14);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p187);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    call {:si_unique_call 208} {:cexpr "length"} boogie_si_record_i32($i189);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i190 := $sgt.i32($i189, 32);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $i189;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p3);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 209} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p192, 0, 36, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $i191);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i198 := $sext.i32.i64($i191);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 210} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p195, $p197, $i198, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} usbnet_purge_paused_rxq($p14);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} usbnet_resume_rx($p14);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i199 := set_essid($p14, $p3);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 214} {:cexpr "ret"} boogie_si_record_i32($i199);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i199, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i219 := $i199;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $r := $i219;
    return;

  $bb65:
    assume $i200 == 1;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p201, .str.1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p202, .str.173);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p203, .str);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p204, .str.180);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i207 := $load.i24($M.5, $p206);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i208 := $and.i24($i207, $sub.i24(0, 262144));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i209 := $or.i24($i208, 2378);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p206, $i209);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p210, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.6, $p211);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i64($i212);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i214 := $and.i64($i213, 1);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i215 := ldv__builtin_expect($i214, 0);
    call {:si_unique_call 216} {:cexpr "tmp___11"} boogie_si_record_i64($i215);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i216 := $ne.i64($i215, 0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i216 == 1;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} __dynamic_netdev_dbg.ref.ref.ref.i32($p10, $p218, .str.180, $i199);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i190 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i191 := 32;
    goto $bb64;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i147 == 1;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i150 := is_zero_ether_addr($p149);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i8($i150);
    call {:si_unique_call 197} {:cexpr "tmp___7"} boogie_si_record_i8($i151);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i8.i1($i151);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i154 == 1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_144 := clear_bssid($p14);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i154 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i157 := is_broadcast_ether_addr($p156);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i8($i157);
    call {:si_unique_call 200} {:cexpr "tmp___9"} boogie_si_record_i8($i158);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i8.i1($i158);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i161 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_145 := clear_bssid($p14);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i161 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i164 := set_bssid($p14, $p163);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 203} {:cexpr "ret"} boogie_si_record_i32($i164);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume $i165 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p166, .str.1);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p167, .str.173);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p168, .str);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p169, .str.179);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i172 := $load.i24($M.5, $p171);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i173 := $and.i24($i172, $sub.i24(0, 262144));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i174 := $or.i24($i173, 2357);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p171, $i174);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p175, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.6, $p176);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i64($i177);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i179 := $and.i64($i178, 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i180 := ldv__builtin_expect($i179, 0);
    call {:si_unique_call 206} {:cexpr "tmp___6"} boogie_si_record_i64($i180);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i80 := $i164;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_141 := disassociate($p14, 1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i219 := $i80;
    goto $bb71;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i181 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} __dynamic_netdev_dbg.ref.ref.ref.i32($p9, $p183, .str.179, $i164);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i159 == 1;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i160 := 0;
    goto $bb50;

  $bb43:
    assume $i152 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i153 := 0;
    goto $bb45;

  $bb32:
    assume $i123 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i124 := set_channel($p14, $i24);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 192} {:cexpr "ret"} boogie_si_record_i32($i124);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i125 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p126, .str.1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p127, .str.173);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p128, .str);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p129, .str.178);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i132 := $load.i24($M.5, $p131);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i133 := $and.i24($i132, $sub.i24(0, 262144));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i134 := $or.i24($i133, 2347);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p131, $i134);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p135, 0);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.6, $p136);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i64($i137);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i139 := $and.i64($i138, 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i140 := ldv__builtin_expect($i139, 0);
    call {:si_unique_call 194} {:cexpr "tmp___5"} boogie_si_record_i64($i140);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i80 := $i124;
    goto $bb18;

  $bb36:
    assume $i141 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} __dynamic_netdev_dbg.ref.ref.ref.i32($p8, $p143, .str.178, $i124);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i103 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, .str.1);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p105, .str.173);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p106, .str);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p107, .str.177);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i110 := $load.i24($M.5, $p109);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i111 := $and.i24($i110, $sub.i24(0, 262144));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i112 := $or.i24($i111, 2339);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p109, $i112);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p113, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.6, $p114);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i117 := $and.i64($i116, 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 189} {:cexpr "tmp___4"} boogie_si_record_i64($i118);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i80 := $i102;
    goto $bb18;

  $bb28:
    assume $i119 == 1;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __dynamic_netdev_dbg.ref.ref.ref.i32($p7, $p121, .str.177, $i102);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i82 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, .str.1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, .str.173);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str.176);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i89 := $load.i24($M.5, $p88);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i90 := $and.i24($i89, $sub.i24(0, 262144));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i91 := $or.i24($i90, 2330);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p88, $i91);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p92, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.6, $p93);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 183} {:cexpr "tmp___3"} boogie_si_record_i64($i97);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i80 := $i81;
    goto $bb18;

  $bb22:
    assume $i98 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} __dynamic_netdev_dbg.ref.ref.ref.i32($p6, $p100, .str.176, $i81);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p62, .str.1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p63, .str.173);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p64, .str);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, .str.175);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i68 := $load.i24($M.5, $p67);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i69 := $and.i24($i68, $sub.i24(0, 262144));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i70 := $or.i24($i69, 2323);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p67, $i70);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p71, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.6, $p72);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 177} {:cexpr "tmp___2"} boogie_si_record_i64($i76);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i80 := $i60;
    goto $bb18;

  $bb15:
    assume $i77 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} __dynamic_netdev_dbg.ref.ref.ref.i32($p5, $p79, .str.175, $i60);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i58 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_140 := disassociate($p14, 0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p14, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(57, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p4, $p47, .str.174, $p49, $p51, $i24, $i55);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i28, $i29 := 1, 1;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.7, $p20);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i23 := ieee80211_frequency_to_channel($i22);
    call {:si_unique_call 167} {:cexpr "chan"} boogie_si_record_i32($i23);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const rndis_leave_ibss: ref;

axiom rndis_leave_ibss == $sub.ref(0, 302494);

procedure rndis_leave_ibss($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_leave_ibss($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p3 := wiphy_priv($p0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.161);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.162);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 2392);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 221} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} eth_zero_addr($p27);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i28 := deauthenticate($p6);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __dynamic_netdev_dbg.ref.ref.ref($p2, $p24, .str.162);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_set_wiphy_params: ref;

axiom rndis_set_wiphy_params == $sub.ref(0, 303526);

procedure rndis_set_wiphy_params($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_set_wiphy_params($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "rndis_set_wiphy_params:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p2 := wiphy_priv($p0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 4);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, 8);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(112, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i17 := set_rts_threshold($p5, $i16);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 231} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb5;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(108, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i10 := set_frag_threshold($p5, $i9);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 229} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb5;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const rndis_set_tx_power: ref;

axiom rndis_set_tx_power == $sub.ref(0, 304558);

procedure rndis_set_tx_power($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.0, $CurrAddr, assertsPassed;



implementation rndis_set_tx_power($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var $i30: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 233} {:cexpr "rndis_set_tx_power:arg:type"} boogie_si_record_i32($i2);
    call {:si_unique_call 234} {:cexpr "rndis_set_tx_power:arg:mbm"} boogie_si_record_i32($i3);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p5 := wiphy_priv($p0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.142);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.143);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1913);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 237} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i3, 0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i28 := $srem.i32($i3, 100);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i2, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i32 := get_bcm4320_power_dbm($p6);
    call {:si_unique_call 240} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i33 := $sdiv.i32($i3, 100);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $i32);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 524);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_146 := disassociate($p8, 1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb9;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 524);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb5;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p4, $p26, .str.143, .str.142, $i2, $i3);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_get_tx_power: ref;

axiom rndis_get_tx_power == $sub.ref(0, 305590);

procedure rndis_get_tx_power($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation rndis_get_tx_power($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p4 := wiphy_priv($p0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i8 := get_bcm4320_power_dbm($p5);
    call {:si_unique_call 245} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i8);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.163);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.164);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.5, $p14);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1942);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p14, $i17);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 247} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p2);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p3, $p26, .str.164, .str.163, $i27);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_set_pmksa: ref;

axiom rndis_set_pmksa == $sub.ref(0, 306622);

procedure rndis_set_pmksa($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.0, $M.8, $CurrAddr, $M.11, assertsPassed;



implementation rndis_set_pmksa($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p4 := wiphy_priv($p0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.170);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.129);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 2534);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 252} {:cexpr "tmp___5"} boogie_si_record_i64($i25);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p42 := get_device_pmkids($p7);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i44 := IS_ERR($p43);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 264} {:cexpr "tmp___7"} boogie_si_record_i8($i45);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(178, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p54 := update_pmkid($p7, $p42, $p2, $i53);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i56 := IS_ERR($p55);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 269} {:cexpr "tmp___9"} boogie_si_record_i8($i57);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i62 := set_device_pmkids($p7, $p54);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 273} {:cexpr "tmp___10"} boogie_si_record_i32($i62);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i50 := $i62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p54);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i60 := PTR_ERR($p59);
    call {:si_unique_call 271} {:cexpr "tmp___8"} boogie_si_record_i64($i60);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i50 := $i61;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p42);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i48 := PTR_ERR($p47);
    call {:si_unique_call 266} {:cexpr "tmp___6"} boogie_si_record_i64($i48);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb6;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p10, $mul.ref(3, 4));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i29 := __fswab32($i28);
    call {:si_unique_call 254} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p10, $mul.ref(2, 4));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i32 := __fswab32($i31);
    call {:si_unique_call 256} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p10, $mul.ref(1, 4));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i35 := __fswab32($i34);
    call {:si_unique_call 258} {:cexpr "tmp___3"} boogie_si_record_i32($i35);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p10);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i37 := __fswab32($i36);
    call {:si_unique_call 260} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p39, .str.129, .str.170, $p41, $i37, $i35, $i32, $i29);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_del_pmksa: ref;

axiom rndis_del_pmksa == $sub.ref(0, 307654);

procedure rndis_del_pmksa($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.0, $M.8, $CurrAddr, $M.11, assertsPassed;



implementation rndis_del_pmksa($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p4 := wiphy_priv($p0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.128);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.129);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 2562);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 277} {:cexpr "tmp___5"} boogie_si_record_i64($i25);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p42 := get_device_pmkids($p7);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i44 := IS_ERR($p43);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 289} {:cexpr "tmp___7"} boogie_si_record_i8($i45);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(178, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p54 := remove_pmkid($p7, $p42, $p2, $i53);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i56 := IS_ERR($p55);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 294} {:cexpr "tmp___9"} boogie_si_record_i8($i57);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i62 := set_device_pmkids($p7, $p54);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 298} {:cexpr "tmp___10"} boogie_si_record_i32($i62);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i50 := $i62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p54);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i60 := PTR_ERR($p59);
    call {:si_unique_call 296} {:cexpr "tmp___8"} boogie_si_record_i64($i60);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i50 := $i61;
    goto $bb6;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p42);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i48 := PTR_ERR($p47);
    call {:si_unique_call 291} {:cexpr "tmp___6"} boogie_si_record_i64($i48);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb6;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p10, $mul.ref(3, 4));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i29 := __fswab32($i28);
    call {:si_unique_call 279} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p10, $mul.ref(2, 4));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i32 := __fswab32($i31);
    call {:si_unique_call 281} {:cexpr "tmp___2"} boogie_si_record_i32($i32);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p10, $mul.ref(1, 4));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i35 := __fswab32($i34);
    call {:si_unique_call 283} {:cexpr "tmp___3"} boogie_si_record_i32($i35);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p10);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i37 := __fswab32($i36);
    call {:si_unique_call 285} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p39, .str.129, .str.128, $p41, $i37, $i35, $i32, $i29);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_flush_pmksa: ref;

axiom rndis_flush_pmksa == $sub.ref(0, 308686);

procedure rndis_flush_pmksa($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_flush_pmksa($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p4 := wiphy_priv($p0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.160);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.12);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2585);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 303} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 305} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p26, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 8);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i30 := rndis_set_oid($p7, 218169635, $p29, 8);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 307} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p25, .str.12, .str.160);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_set_power_mgmt: ref;

axiom rndis_set_power_mgmt == $sub.ref(0, 309718);

procedure rndis_set_power_mgmt($p0: ref, $p1: ref, $i2: i1, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_set_power_mgmt($p0: ref, $p1: ref, $i2: i1, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i2);
    call {:si_unique_call 311} {:cexpr "rndis_set_power_mgmt:arg:enabled"} boogie_si_record_i1($i2);
    call {:si_unique_call 312} {:cexpr "rndis_set_power_mgmt:arg:timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p8 := wiphy_priv($p0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(2864, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 2);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.108);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.109);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 2610);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 315} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i7);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(2912, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $i37);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 4192)), $mul.ref(2912, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i37);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i37);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p4);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i43 := rndis_set_oid($p11, 218169878, $p42, 4);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 318} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, .str.1);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p45, .str.108);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p46, .str);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p47, .str.112);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.5, $p49);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 2627);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p49, $i52);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p53, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 320} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p6, $p61, .str.112, .str.108, $i43);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i37 := 2;
    goto $bb10;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i7);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p35 := (if $i34 == 1 then .str.110 else .str.111);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32($p5, $p33, .str.109, .str.108, $p35, $i3);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 524);
    goto $bb3;
}



const rndis_set_cqm_rssi_config: ref;

axiom rndis_set_cqm_rssi_config == $sub.ref(0, 310750);

procedure rndis_set_cqm_rssi_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rndis_set_cqm_rssi_config($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "rndis_set_cqm_rssi_config:arg:rssi_thold"} boogie_si_record_i32($i2);
    call {:si_unique_call 323} {:cexpr "rndis_set_cqm_rssi_config:arg:rssi_hyst"} boogie_si_record_i32($i3);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p4 := wiphy_priv($p0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(1724, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(1728, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(1732, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const wiphy_priv: ref;

axiom wiphy_priv == $sub.ref(0, 311782);

procedure wiphy_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_priv($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(1772, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 327} devirtbounce(0, .str.88, 3259, 12);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call wiphy_priv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 312814);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 329} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 313846);

procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: ref, p.11: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: ref, p.11: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref)
{

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref, p.6: i32)
{

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref)
{

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32, p.11: i32)
{

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32)
{

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    return;
}



const rndis_set_oid: ref;

axiom rndis_set_oid == $sub.ref(0, 314878);

procedure rndis_set_oid($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_set_oid($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i19: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 333} {:cexpr "rndis_set_oid:arg:oid"} boogie_si_record_i32($i1);
    call {:si_unique_call 334} {:cexpr "rndis_set_oid:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p7 := get_rndis_wlan_priv($p0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i3, 28);
    call {:si_unique_call 336} {:cexpr "buflen"} boogie_si_record_i32($i8);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 1024);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 1053);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(3132, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p22, $p20);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} mutex_lock_nested($p23, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.8, $p24);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 339} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p26, 0, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p4);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.8, $p27);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 5);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i3, 28);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.8, $p31);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i30);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.8, $p34);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.8, $p37);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 28)), $mul.ref(16, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i3);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.8, $p40);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 28)), $mul.ref(20, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 20);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.8, $p43);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 28)), $mul.ref(24, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.8, $p46);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(28, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i3);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 340} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p48, $p2, $i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.8, $p51);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i53 := rndis_command($p0, $p52, $i10);
    call {:si_unique_call 342} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i53, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i53;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} mutex_unlock($p110);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p4);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.8, $p111);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 4192)), $mul.ref(3132, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i113, $i116);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i19 := $i109;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb26:
    assume $i117 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p4);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.8, $p118);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} kfree($p119);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i79 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p4);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.8, $p80);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i84 := rndis_error_status($i83);
    call {:si_unique_call 348} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i109 := $i84;
    goto $bb25;

  $bb19:
    assume $i85 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, .str.1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p87, .str.26);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p88, .str);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p89, .str.27);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.5, $p91);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 839);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p91, $i94);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p95, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.6, $p96);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 350} {:cexpr "tmp___3"} boogie_si_record_i64($i100);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i101 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p102 := oid_to_string($i1);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p4);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.8, $p105);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p6, $p104, .str.27, .str.26, $p102, $i108, $i84);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, .str.1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p57, .str.26);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.7);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.5, $p61);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 831);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p61, $i64);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 344} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i71 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p72 := oid_to_string($i1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.8, $p75);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p5, $p74, .str.7, .str.26, $p72, $i53, $i78);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p13 := kmalloc($i12, 208);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p4);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, $p13);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.8, $p15);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i10 := 1025;
    goto $bb3;
}



const get_rndis_wlan_priv: ref;

axiom get_rndis_wlan_priv == $sub.ref(0, 315910);

procedure get_rndis_wlan_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_rndis_wlan_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(32, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 316942);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 356} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_check_alloc_flags($i1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p2 := ldv_undef_ptr();
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 317974);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 319006);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 320038);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const rndis_command: ref;

axiom rndis_command == $sub.ref(0, 321070);

procedure rndis_command($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rndis_command($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} {:cexpr "rndis_command:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const oid_to_string: ref;

axiom oid_to_string == $sub.ref(0, 322102);

procedure oid_to_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation oid_to_string($i0: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} {:cexpr "oid_to_string:arg:oid"} boogie_si_record_i32($i0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $r := .str.10;
    return;
}



const rndis_error_status: ref;

axiom rndis_error_status == $sub.ref(0, 323134);

procedure rndis_error_status($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rndis_error_status($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    call {:si_unique_call 364} {:cexpr "rndis_error_status:arg:rndis_status___0"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 1073676270));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, $sub.i32(0, 1073676267));
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb25;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $sub.i32(0, 1073676267));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 1073676270));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb25;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, $sub.i32(0, 1073741637));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, $sub.i32(0, 1073676271));
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i8 == 1);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $sub.i32(0, 1073741637));
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb21:
    assume $i9 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 95);
    goto $bb25;

  $bb17:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, $sub.i32(0, 1073741823));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb23:
    assume $i10 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 324166);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 325198);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} free_($p0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 326230);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 366} $free($p0);
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 327262);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ldv_error();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 328294);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 369} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 370} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 329326);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 371} __VERIFIER_error();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 330358);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i1 := __arch_swab32($i0);
    call {:si_unique_call 374} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_device_pmkids: ref;

axiom get_device_pmkids == $sub.ref(0, 331390);

procedure get_device_pmkids($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $CurrAddr, assertsPassed;



implementation get_device_pmkids($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p3 := get_rndis_wlan_priv($p0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1776)), $mul.ref(178, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 378} {:cexpr "max_pmkids"} boogie_si_record_i32($i9);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 22);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 8);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p1, $i13);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.10, $p1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p16 := kmalloc($i15, 208);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.10, $p1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i9);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p17);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i27 := rndis_query_oid($p0, 218169635, $p26, $p1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 382} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i32($i53, $i9);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} debug_print_pmkids($p0, $p17, .str.130);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i9);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, .str.1);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, .str.130);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p31, .str);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str.131);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.5, $p34);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1723);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p34, $i37);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 384} {:cexpr "tmp___2"} boogie_si_record_i64($i43);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p17);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} kfree($p48);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i27);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p50 := ERR_PTR($i49);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p22 := $p50;
    goto $bb3;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.10, $p1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p2, $p46, .str.131, .str.130, $i47, $i9, $i27);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p20 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p22 := $p20;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 332422);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i1 := ldv_is_err($p0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 333454);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const remove_pmkid: ref;

axiom remove_pmkid == $sub.ref(0, 334486);

procedure remove_pmkid($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation remove_pmkid($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $i11: i32;
  var $i26: i32;
  var $i10: i32;
  var $i23: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i50: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p68: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 394} {:cexpr "remove_pmkid:arg:max_pmkids"} boogie_si_record_i32($i3);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 395} {:cexpr "count"} boogie_si_record_i32($i6);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32($i3, $i6);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, $i8);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i23, 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i48, $i8);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i8, 1);
    call {:si_unique_call 407} {:cexpr "count"} boogie_si_record_i32($i63);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i63, 22);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 8);
    call {:si_unique_call 408} {:cexpr "newlen"} boogie_si_record_i32($i65);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i63);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p68 := $p1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $r := $p68;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i50 := $i23;
    goto $bb26;

  $bb26:
    call $i51, $p53, $i54, $i55, $p57, $p58, $p59, $i60, $i61, $i62, $i50, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25 := remove_pmkid_loop_$bb26($p1, $i8, $i51, $p53, $i54, $i55, $p57, $p58, $p59, $i60, $i61, $i62, $i50, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25);
    goto $bb26_last;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i51, 22));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i50, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i55, 22));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p53);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 405} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p58, $p59, 22, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i50, 1);
    call {:si_unique_call 406} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i62 := $ult.i32($i61, $i8);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i62 == 1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i50 := $i60;
    goto $bb28_dummy;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, .str.1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, .str.132);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str.133);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.5, $p33);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1780);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p33, $i36);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.6, $p38);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} kfree($p69);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($sub.i32(0, 2));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p71 := ERR_PTR($i70);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p68 := $p71;
    goto $bb31;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p4, $p45, .str.133, .str.132, $p47);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    call $i12, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i24, $i25, $i11, $i26 := remove_pmkid_loop_$bb7($p1, $p2, $i8, $i12, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i24, $i25, $i11, $i26);
    goto $bb7_last;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i12, 22)), $mul.ref(0, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i19 := ether_addr_equal($p16, $p18);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i22 := $i11;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i11, 1);
    call {:si_unique_call 399} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i24, $i8);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i10 := $i26;
    goto $bb6;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb13_dummy;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 396} {:cexpr "remove_pmkid:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;
}



const set_device_pmkids: ref;

axiom set_device_pmkids == $sub.ref(0, 335518);

procedure set_device_pmkids($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation set_device_pmkids($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 410} {:cexpr "num_pmkids"} boogie_si_record_i32($i4);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 22);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 8);
    call {:si_unique_call 411} {:cexpr "len"} boogie_si_record_i32($i8);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} debug_print_pmkids($p0, $p1, .str.134);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i13 := rndis_set_oid($p0, 218169635, $p10, $i12);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 414} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} kfree($p33);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str.1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.134);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.131);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1752);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i30 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p2, $p32, .str.131, .str.134, $i8, $i4, $i13);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const debug_print_pmkids: ref;

axiom debug_print_pmkids == $sub.ref(0, 336550);

procedure debug_print_pmkids($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation debug_print_pmkids($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 337582);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 419} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 338614);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 339646);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 340678);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 341710);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rndis_query_oid: ref;

axiom rndis_query_oid == $sub.ref(0, 342742);

procedure rndis_query_oid($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $CurrAddr, assertsPassed;



implementation rndis_query_oid($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i97: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i21: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 427} {:cexpr "rndis_query_oid:arg:oid"} boogie_si_record_i32($i1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p8 := get_rndis_wlan_priv($p0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.10, $p3);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 28);
    call {:si_unique_call 429} {:cexpr "buflen"} boogie_si_record_i32($i10);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 1024);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 1053);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(3132, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p24, $p22);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} mutex_lock_nested($p25, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.11, $p26);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 432} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p28, 0, 28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.11, $p29);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 4);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.11, $p32);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 28);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.11, $p35);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 28)), $mul.ref(12, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.11, $p39);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i41 := rndis_command($p0, $p40, $i12);
    call {:si_unique_call 434} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i41, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i140 := $i41;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i97 := $i140;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} mutex_unlock($p141);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p4);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.11, $p142);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 4192)), $mul.ref(3132, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i144, $i147);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i21 := $i97;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb39:
    assume $i148 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p4);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.11, $p149);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} kfree($p150);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb17:
    assume $i67 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p4);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.11, $p68);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    call {:si_unique_call 439} {:cexpr "resplen"} boogie_si_record_i32($i71);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p4);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.11, $p72);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 8);
    call {:si_unique_call 440} {:cexpr "respoffs"} boogie_si_record_i32($i76);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i12);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i71, $i76);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i98, $i12);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i101 := $i71;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.10, $p3);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, $i101);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i105 := $i101;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p4);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.11, $p106);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i76);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p107, $mul.ref($i108, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i105);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 448} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p2, $p109, $i110, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, $i71);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p4);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.11, $p111);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i115 := rndis_error_status($i114);
    call {:si_unique_call 450} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i140 := $i115;
    goto $bb38;

  $bb32:
    assume $i116 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p118, .str.6);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p119, .str);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p120, .str.9);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.5, $p122);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 779);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p122, $i125);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 452} {:cexpr "tmp___5"} boogie_si_record_i64($i131);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i132 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p133 := oid_to_string($i1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p4);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.11, $p136);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p7, $p135, .str.9, .str.6, $p133, $i139, $i115);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume $i103 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.10, $p3);
    call {:si_unique_call 447} {:cexpr "copylen"} boogie_si_record_i32($i104);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb31;

  $bb26:
    assume $i99 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i12, $i76);
    call {:si_unique_call 446} {:cexpr "copylen"} boogie_si_record_i32($i100);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i101 := $i100;
    goto $bb28;

  $bb19:
    assume $i77 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, .str.1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.6);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.8);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.5, $p83);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 753);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p83, $i86);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p87, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 442} {:cexpr "tmp___3"} boogie_si_record_i64($i92);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 22);
    goto $bb24;

  $bb21:
    assume $i93 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p94 := oid_to_string($i1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p6, $p96, .str.8, .str.6, $p94, $i76, $i12);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, .str.1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p45, .str.6);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p46, .str);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p47, .str.7);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.5, $p49);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 743);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p49, $i52);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p53, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 436} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i59 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p60 := oid_to_string($i1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p4);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.11, $p63);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32.i32($p5, $p62, .str.7, .str.6, $p60, $i41, $i66);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p15 := kmalloc($i14, 208);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p16, $p15);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.11, $p17);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i12 := 1025;
    goto $bb3;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 343774);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 457} $i1 := devirtbounce.1(0, $i0);
    call {:si_unique_call 458} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const update_pmkid: ref;

axiom update_pmkid == $sub.ref(0, 344806);

procedure update_pmkid($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation update_pmkid($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $i11: i32;
  var $i35: i32;
  var $i10: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i55: i32;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $p32: ref;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 460} {:cexpr "update_pmkid:arg:max_pmkids"} boogie_si_record_i32($i3);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 461} {:cexpr "count"} boogie_si_record_i32($i6);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32($i3, $i6);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i10, $i3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i8, 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i57 := $mul.i32($i56, 22);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 8);
    call {:si_unique_call 472} {:cexpr "newlen"} boogie_si_record_i32($i58);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i58);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p61 := ldv_krealloc_42($p59, $i60, 208);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i58);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i8, 1);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i8);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i68, 22)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 474} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p72, $p74, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i8);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i75, 22)), $mul.ref(6, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 475} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p79, $p81, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p32 := $p61;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $r := $p32;
    return;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 12);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} kfree($p82);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i55);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p84 := ERR_PTR($i83);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p32 := $p84;
    goto $bb16;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.171);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.172);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1828);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 468} {:cexpr "tmp___1"} boogie_si_record_i64($i51);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 28);
    goto $bb25;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __dynamic_netdev_dbg.ref.ref.ref.ref($p4, $p54, .str.172, .str.171);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    call $i12, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i33, $i34, $i11, $i35 := update_pmkid_loop_$bb7($p1, $p2, $i8, $i12, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i33, $i34, $i11, $i35);
    goto $bb7_last;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i12, 22)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i19 := ether_addr_equal($p16, $p18);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i24 := $i11;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i25, 22)), $mul.ref(6, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 466} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p29, $p31, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p32 := $p1;
    goto $bb16;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i11, 1);
    call {:si_unique_call 465} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i33, $i8);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i10 := $i35;
    goto $bb6;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb17_dummy;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 462} {:cexpr "update_pmkid:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;
}



const ldv_krealloc_42: ref;

axiom ldv_krealloc_42 == $sub.ref(0, 345838);

procedure ldv_krealloc_42($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_krealloc_42($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "ldv_krealloc_42:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 477} {:cexpr "ldv_krealloc_42:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} ldv_check_alloc_flags($i2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p3 := ldv_undef_ptr();
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const get_bcm4320_power_dbm: ref;

axiom get_bcm4320_power_dbm == $sub.ref(0, 346870);

procedure get_bcm4320_power_dbm($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_bcm4320_power_dbm($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 13;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb7;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i8 := 12;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i6 == 1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i8 := 10;
    goto $bb15;

  $bb10:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb9;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i8 := 7;
    goto $bb15;
}



const disassociate: ref;

axiom disassociate == $sub.ref(0, 347902);

procedure disassociate($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation disassociate($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p79: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p91: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $p103: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $p115: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $p127: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i8;
  var $p139: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i8;
  var $p151: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $p163: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i173: i8;
  var $p175: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $i183: i32;
  var $i184: i32;
  var $i185: i8;
  var $p187: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $p199: ref;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $i206: i8;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $p211: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i218: i8;
  var $i219: i32;
  var $i220: i32;
  var $i221: i8;
  var $p223: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i8;
  var $i231: i32;
  var $i232: i32;
  var $i233: i8;
  var $p235: ref;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i8;
  var $i243: i32;
  var $i244: i32;
  var $i245: i8;
  var $p247: ref;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i32;
  var $i253: i32;
  var $i254: i8;
  var $i255: i32;
  var $i256: i32;
  var $i257: i8;
  var $p259: ref;
  var $p261: ref;
  var $i262: i8;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i8;
  var $i267: i32;
  var $i268: i32;
  var $i269: i8;
  var $p271: ref;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i32;
  var $i277: i32;
  var $i278: i8;
  var $i279: i32;
  var $i280: i32;
  var $i281: i8;
  var $p283: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i8;
  var $i291: i32;
  var $i292: i32;
  var $i293: i8;
  var $p295: ref;
  var $p297: ref;
  var $i298: i8;
  var $i299: i32;
  var $i300: i32;
  var $i301: i32;
  var $i302: i8;
  var $i303: i32;
  var $i304: i32;
  var $i305: i8;
  var $p307: ref;
  var $p309: ref;
  var $i310: i8;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $i314: i8;
  var $i315: i32;
  var $i316: i32;
  var $i317: i8;
  var $p319: ref;
  var $p321: ref;
  var $i322: i8;
  var $i323: i32;
  var $i324: i32;
  var $i325: i32;
  var $i326: i8;
  var $i327: i32;
  var $i328: i32;
  var $i329: i8;
  var $p331: ref;
  var $p333: ref;
  var $i334: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i8;
  var $i339: i32;
  var $i340: i32;
  var $i341: i8;
  var $p343: ref;
  var $p345: ref;
  var $i346: i8;
  var $i347: i32;
  var $i348: i32;
  var $i349: i32;
  var $i350: i8;
  var $i351: i32;
  var $i352: i32;
  var $i353: i8;
  var $p355: ref;
  var $p357: ref;
  var $i358: i8;
  var $i359: i32;
  var $i360: i32;
  var $i361: i32;
  var $i362: i8;
  var $i363: i32;
  var $i364: i32;
  var $i365: i8;
  var $p367: ref;
  var $p369: ref;
  var $i370: i8;
  var $i371: i32;
  var $i372: i32;
  var $i373: i32;
  var $i374: i8;
  var $i375: i32;
  var $i376: i32;
  var $i377: i8;
  var $p379: ref;
  var $p381: ref;
  var $i382: i8;
  var $i383: i32;
  var $i384: i32;
  var $i385: i32;
  var $i386: i8;
  var $i387: i32;
  var $i388: i32;
  var $i389: i8;
  var $p391: ref;
  var $p393: ref;
  var $i394: i8;
  var $i395: i32;
  var $i396: i32;
  var $i397: i32;
  var $i398: i8;
  var $i399: i32;
  var $i400: i32;
  var $i401: i8;
  var $p403: ref;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p2 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i1);
    call {:si_unique_call 482} {:cexpr "disassociate:arg:reset_ssid"} boogie_si_record_i1($i1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p5 := get_rndis_wlan_priv($p0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i4);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i31;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_147 := set_infra_mode($p0, 1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 32);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(2, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} get_random_bytes($p37, 30);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $sub.i8(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 254);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i47 := $sdiv.i32($i46, 255);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(2, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i51);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 254);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i61 := $sdiv.i32($i60, 255);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(3, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i65);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i71, 254);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i73 := $sdiv.i32($i72, 255);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i77);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(5, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i84 := $mul.i32($i83, 254);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i85 := $sdiv.i32($i84, 255);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(5, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $i89);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(6, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i96 := $mul.i32($i95, 254);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i97 := $sdiv.i32($i96, 255);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(6, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i101);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(7, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i108 := $mul.i32($i107, 254);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i109 := $sdiv.i32($i108, 255);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(7, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i113);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i120 := $mul.i32($i119, 254);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i121 := $sdiv.i32($i120, 255);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, 1);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, $i125);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(9, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i132 := $mul.i32($i131, 254);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i133 := $sdiv.i32($i132, 255);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, 1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(9, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, $i137);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(10, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i144 := $mul.i32($i143, 254);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i145 := $sdiv.i32($i144, 255);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i8($i145);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i147, 1);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i32.i8($i148);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(10, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, $i149);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(11, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i156 := $mul.i32($i155, 254);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i157 := $sdiv.i32($i156, 255);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i159, 1);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i8($i160);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(11, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, $i161);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i168 := $mul.i32($i167, 254);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i169 := $sdiv.i32($i168, 255);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i171, 1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i8($i172);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, $i173);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(13, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i180 := $mul.i32($i179, 254);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i181 := $sdiv.i32($i180, 255);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i184 := $add.i32($i183, 1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i184);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(13, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p187, $i185);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(14, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i192 := $mul.i32($i191, 254);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i193 := $sdiv.i32($i192, 255);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i195, 1);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i8($i196);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(14, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p199, $i197);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(15, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i204 := $mul.i32($i203, 254);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i205 := $sdiv.i32($i204, 255);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i8($i205);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i207, 1);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(15, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, $i209);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i216 := $mul.i32($i215, 254);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i217 := $sdiv.i32($i216, 255);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i8($i217);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, 1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i8($i220);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p223, $i221);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(17, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.0, $p225);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i228 := $mul.i32($i227, 254);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i229 := $sdiv.i32($i228, 255);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i32.i8($i229);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i231, 1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i8($i232);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(17, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, $i233);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(18, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i240 := $mul.i32($i239, 254);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i241 := $sdiv.i32($i240, 255);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i8($i241);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i243, 1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i8($i244);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(18, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p247, $i245);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(19, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i252 := $mul.i32($i251, 254);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i253 := $sdiv.i32($i252, 255);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i32.i8($i253);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i255, 1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i8($i256);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(19, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p259, $i257);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i262 := $load.i8($M.0, $p261);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i262);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i264 := $mul.i32($i263, 254);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i265 := $sdiv.i32($i264, 255);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i266 := $trunc.i32.i8($i265);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i268 := $add.i32($i267, 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i32.i8($i268);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p271, $i269);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(21, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.0, $p273);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i276 := $mul.i32($i275, 254);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i277 := $sdiv.i32($i276, 255);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i278 := $trunc.i32.i8($i277);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i279 := $zext.i8.i32($i278);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i280 := $add.i32($i279, 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i32.i8($i280);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(21, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p283, $i281);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(22, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.0, $p285);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i288 := $mul.i32($i287, 254);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i289 := $sdiv.i32($i288, 255);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i290 := $trunc.i32.i8($i289);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i291, 1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i8($i292);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(22, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p295, $i293);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(23, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.0, $p297);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i298);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i300 := $mul.i32($i299, 254);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i301 := $sdiv.i32($i300, 255);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i8($i301);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i304 := $add.i32($i303, 1);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i305 := $trunc.i32.i8($i304);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(23, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p307, $i305);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(24, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i310 := $load.i8($M.0, $p309);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i311 := $zext.i8.i32($i310);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i312 := $mul.i32($i311, 254);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i313 := $sdiv.i32($i312, 255);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i314 := $trunc.i32.i8($i313);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i32($i314);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i316 := $add.i32($i315, 1);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i8($i316);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(24, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p319, $i317);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(25, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i322 := $load.i8($M.0, $p321);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i323 := $zext.i8.i32($i322);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i324 := $mul.i32($i323, 254);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i325 := $sdiv.i32($i324, 255);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i326 := $trunc.i32.i8($i325);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i327, 1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i32.i8($i328);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(25, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p331, $i329);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(26, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i334 := $load.i8($M.0, $p333);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i336 := $mul.i32($i335, 254);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i337 := $sdiv.i32($i336, 255);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i337);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i339 := $zext.i8.i32($i338);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, 1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i32.i8($i340);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(26, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p343, $i341);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(27, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.0, $p345);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i32($i346);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i348 := $mul.i32($i347, 254);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i349 := $sdiv.i32($i348, 255);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i32.i8($i349);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i32($i350);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i352 := $add.i32($i351, 1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i353 := $trunc.i32.i8($i352);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(27, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p355, $i353);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(28, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.0, $p357);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i359 := $zext.i8.i32($i358);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i360 := $mul.i32($i359, 254);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i361 := $sdiv.i32($i360, 255);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i8($i361);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i363 := $zext.i8.i32($i362);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i364 := $add.i32($i363, 1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i8($i364);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(28, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p367, $i365);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(29, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.0, $p369);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i370);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i372 := $mul.i32($i371, 254);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i373 := $sdiv.i32($i372, 255);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i374 := $trunc.i32.i8($i373);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i32($i374);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, 1);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i377 := $trunc.i32.i8($i376);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(29, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p379, $i377);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(30, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i382 := $load.i8($M.0, $p381);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i382);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i384 := $mul.i32($i383, 254);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i385 := $sdiv.i32($i384, 255);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i32.i8($i385);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i387 := $zext.i8.i32($i386);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i388 := $add.i32($i387, 1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i389 := $trunc.i32.i8($i388);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(30, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p391, $i389);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(31, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i394 := $load.i8($M.0, $p393);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i395 := $zext.i8.i32($i394);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i396 := $mul.i32($i395, 254);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i397 := $sdiv.i32($i396, 255);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i398 := $trunc.i32.i8($i397);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i399 := $zext.i8.i32($i398);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i400 := $add.i32($i399, 1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i401 := $trunc.i32.i8($i400);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(31, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p403, $i401);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i54 := set_essid($p0, $p2);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 493} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb19;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i9 := rndis_set_oid($p0, 218169621, $0.ref, 0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 485} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $i9;
    goto $bb12;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.24);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str.25);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.5, $p17);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1080);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p17, $i20);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 487} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i4);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} msleep(100);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p29, .str.25, .str.24);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 348934);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    return;
}



const set_infra_mode: ref;

axiom set_infra_mode == $sub.ref(0, 349966);

procedure set_infra_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_infra_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 497} {:cexpr "set_infra_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $p4 := get_rndis_wlan_priv($p0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.28);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.29);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1212);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 500} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i26 := rndis_set_oid($p0, 218169608, $p25, 4);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 503} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} restore_keys($p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} netdev_warn.ref.ref.i32($p29, .str.30, $i26);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i30 := $i26;
    goto $bb6;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p3, $p22, .str.29, .str.28, $i24);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 350998);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    return;
}



const set_essid: ref;

axiom set_essid == $sub.ref(0, 352030);

procedure set_essid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation set_essid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p3 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i5 := rndis_set_oid($p0, 218169602, $p4, 36);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 510} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, .str.1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, .str.41);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, .str);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.42);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.5, $p16);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 1001);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p16, $i19);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 513} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __dynamic_netdev_dbg.ref.ref.ref.ref($p2, $p28, .str.42, .str.41);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} netdev_warn.ref.ref.i32($p8, .str.40, $i5);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 353062);

procedure netdev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    return;
}



const restore_keys: ref;

axiom restore_keys == $sub.ref(0, 354094);

procedure restore_keys($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation restore_keys($p0: ref)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i8;
  var $i6: i32;
  var $i7: i1;
  var $i1: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i6, $i7, $i1, vslice_dummy_var_148 := restore_keys_loop_$bb1($p0, $i2, $i3, $i4, $i6, $i7, $i1, vslice_dummy_var_148);
    goto $bb1_last;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i8($i1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_148 := restore_key($p0, $i4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i1, 1);
    call {:si_unique_call 516} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 3);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i6;
    goto $bb3_dummy;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;
}



const restore_key: ref;

axiom restore_key == $sub.ref(0, 355126);

procedure restore_key($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation restore_key($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i8;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i10: i32;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 519} {:cexpr "restore_key:arg:key_idx"} boogie_si_record_i8($i1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p4 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i7 := is_wpa_key($p4, $i6);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 522} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i12, 48));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 523} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p15, $p16, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.31);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.32);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1507);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 525} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i47 := add_wep_key($p0, $p42, $i44, $i46);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 528} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i10 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p3, $p34, .str.32, .str.31, $i35, $i37);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const is_wpa_key: ref;

axiom is_wpa_key == $sub.ref(0, 356158);

procedure is_wpa_key($p0: ref, $i1: i8) returns ($r: i1);
  free requires assertsPassed;



implementation is_wpa_key($p0: ref, $i1: i8) returns ($r: i1)
{
  var $i2: i32;
  var $i3: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "is_wpa_key:arg:idx"} boogie_si_record_i8($i1);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i3, 48)), $mul.ref(4, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 530} {:cexpr "cipher"} boogie_si_record_i32($i7);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1027076);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i9 := 1;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1027074);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const add_wep_key: ref;

axiom add_wep_key == $sub.ref(0, 357190);

procedure add_wep_key($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation add_wep_key($p0: ref, $p1: ref, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i1;
  var $i31: i1;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i64;
  var $p81: ref;
  var $p82: ref;
  var $i28: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 533} {:cexpr "add_wep_key:arg:key_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 534} {:cexpr "add_wep_key:arg:index"} boogie_si_record_i8($i3);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p6 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.33);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.34);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 1354);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 537} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i3);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, 3);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i2, 5);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i2, 13);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := 1027077;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 539} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p32, 0, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 44);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i2);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i3);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 540} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p38, $p1, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2932, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i3);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i42, $i43);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p4);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i54 := rndis_set_oid($p0, 218169619, $p53, 44);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 545} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i3);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i61, 48)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i2);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i3);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i66, 48)), $mul.ref(4, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i30);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i3);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i71, 48)), $mul.ref(8, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i2);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 547} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p75, $p1, $i76, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i3);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i78, 48)), $mul.ref(40, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} eth_broadcast_addr($p82);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i3);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} netdev_warn.ref.ref.i32.i32($p57, .str.36, $i59, $i54);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i28 := $i54;
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, $sub.i32(0, 2147483648));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i49 := set_encr_mode($p0, 1, 0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 542} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} netdev_warn.ref.ref.i32($p52, .str.35, $i49);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i30 := 1027073;
    goto $bb10;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i3);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p5, $p24, .str.34, .str.33, $i25, $i2);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_encr_mode: ref;

axiom set_encr_mode == $sub.ref(0, 358222);

procedure set_encr_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_encr_mode($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i34: i32;
  var $i31: i32;
  var $i28: i32;
  var $i25: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 551} {:cexpr "set_encr_mode:arg:pairwise"} boogie_si_record_i32($i1);
    call {:si_unique_call 552} {:cexpr "set_encr_mode:arg:groupwise"} boogie_si_record_i32($i2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.37);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.38);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1177);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 554} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 4);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i1, 2);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i1, 1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i2, 4);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i2, 2);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i28 := $i31;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i25);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i39 := rndis_set_oid($p0, 218169627, $p38, 4);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 557} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} netdev_warn.ref.ref.i32($p42, .str.39, $i39);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i43 := $i39;
    goto $bb21;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i37 := 4;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i34 := 6;
    goto $bb15;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb12;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i28 := 4;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i25 := 6;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p4, $p22, .str.38, .str.37, $i1, $i2);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eth_broadcast_addr: ref;

axiom eth_broadcast_addr == $sub.ref(0, 359254);

procedure eth_broadcast_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_broadcast_addr($p0: ref)
{
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 559} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p0, $sub.i8(0, 1), 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    return;
}



const set_frag_threshold: ref;

axiom set_frag_threshold == $sub.ref(0, 360286);

procedure set_frag_threshold($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_frag_threshold($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 562} {:cexpr "set_frag_threshold:arg:frag_threshold"} boogie_si_record_i32($i1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.165);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.166);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1252);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 564} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i1, 255);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i1, 2346);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i24);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i26 := rndis_set_oid($p0, 218169865, $p25, 4);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 567} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i24 := 2346;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p3, $p21, .str.166, .str.165, $i1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_rts_threshold: ref;

axiom set_rts_threshold == $sub.ref(0, 361318);

procedure set_rts_threshold($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_rts_threshold($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 570} {:cexpr "set_rts_threshold:arg:rts_threshold"} boogie_si_record_i32($i1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.167);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.166);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1237);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i1, 2347);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i23);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i25 := rndis_set_oid($p0, 218169866, $p24, 4);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 575} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i23 := 2347;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p3, $p21, .str.166, .str.167, $i1);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eth_zero_addr: ref;

axiom eth_zero_addr == $sub.ref(0, 362350);

procedure eth_zero_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_zero_addr($p0: ref)
{
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 576} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p0, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    return;
}



const deauthenticate: ref;

axiom deauthenticate == $sub.ref(0, 363382);

procedure deauthenticate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation deauthenticate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i1 := disassociate($p0, 1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 578} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} set_default_iw_params($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const set_default_iw_params: ref;

axiom set_default_iw_params == $sub.ref(0, 364414);

procedure set_default_iw_params($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_default_iw_params($p0: ref)
{
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_149 := set_infra_mode($p0, 1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_150 := set_auth_mode($p0, 0, 0, 0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_151 := set_priv_filter($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_152 := set_encr_mode($p0, 0, 0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const set_auth_mode: ref;

axiom set_auth_mode == $sub.ref(0, 365446);

procedure set_auth_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_auth_mode($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i35: i32;
  var $i40: i1;
  var $i42: i1;
  var $i44: i1;
  var $i43: i32;
  var $i41: i32;
  var $i39: i32;
  var $i30: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 586} {:cexpr "set_auth_mode:arg:wpa_version"} boogie_si_record_i32($i1);
    call {:si_unique_call 587} {:cexpr "set_auth_mode:arg:auth_type"} boogie_si_record_i32($i2);
    call {:si_unique_call 588} {:cexpr "set_auth_mode:arg:keymgmt"} boogie_si_record_i32($i3);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p6 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.1);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.43);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.44);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 1114);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 591} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i1, 2);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i1, 1);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i2, 1);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i2, 5);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i44 == 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 524);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i43 := 2;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i41 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i39;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i30);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i47 := rndis_set_oid($p0, 218169624, $p46, 4);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 594} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(3128, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i1);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb28;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} netdev_warn.ref.ref.i32($p50, .str.45, $i47);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i45 := $i47;
    goto $bb28;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb24;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb21;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i3, 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i3, 2);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := 5;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i35 := $i38;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i39 := $i35;
    goto $bb18;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i38 := 4;
    goto $bb17;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i35 := 3;
    goto $bb14;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i3, 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb9;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i29 := 6;
    goto $bb8;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p5, $p24, .str.44, .str.43, $i1, $i2, $i3);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_priv_filter: ref;

axiom set_priv_filter == $sub.ref(0, 366478);

procedure set_priv_filter($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_priv_filter($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p3 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.46);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.47);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1158);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 600} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(3128, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(3128, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i33 := rndis_set_oid($p0, 218169625, $p32, 4);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 603} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(3128, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.47, .str.46, $i23);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_frequency_to_channel: ref;

axiom ieee80211_frequency_to_channel == $sub.ref(0, 367510);

procedure ieee80211_frequency_to_channel($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_frequency_to_channel($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} {:cexpr "ieee80211_frequency_to_channel:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const is_associated: ref;

axiom is_associated == $sub.ref(0, 368542);

procedure is_associated($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation is_associated($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i8 := get_bssid($p0, $p7);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 610} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i11 := is_zero_ether_addr($p10);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 612} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const set_channel: ref;

axiom set_channel == $sub.ref(0, 369574);

procedure set_channel($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation set_channel($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 618} {:cexpr "set_channel:arg:channel"} boogie_si_record_i32($i1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.1);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.155);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.156);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 1287);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i25 := is_associated($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i8($i26);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i29 := ieee80211_channel_to_frequency($i1, 0);
    call {:si_unique_call 625} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 1000);
    call {:si_unique_call 626} {:cexpr "dsconfig"} boogie_si_record_i32($i30);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, 32);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i32 := rndis_query_oid($p0, 218169873, $p31, $p3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 628} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i30);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i54 := rndis_set_oid($p0, 218169873, $p53, 32);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 633} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, .str.1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, .str.155);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p57, .str);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, .str.158);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.5, $p60);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 1311);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p60, $i63);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p64, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.6, $p65);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 635} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := $i54;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p6, $p72, .str.158, .str.155, $i1, $i54);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.155);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.157);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1302);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 630} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i28 := $i32;
    goto $bb6;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __dynamic_netdev_dbg.ref.ref.ref.ref($p5, $p51, .str.157, .str.155);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p4, $p24, .str.156, .str.155, $i1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 370606);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const is_broadcast_ether_addr: ref;

axiom is_broadcast_ether_addr == $sub.ref(0, 371638);

procedure is_broadcast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_broadcast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(2, 2));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i3, $i7);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 2));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i8, $i12);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 65535);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const set_bssid: ref;

axiom set_bssid == $sub.ref(0, 372670);

procedure set_bssid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation set_bssid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i2 := rndis_set_oid($p0, 218169601, $p1, 6);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 638} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} netdev_warn.ref.ref.ref.i32($p5, .str.159, $p1, $i2);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const clear_bssid: ref;

axiom clear_bssid == $sub.ref(0, 373702);

procedure clear_bssid($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation clear_bssid($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $sub.i8(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $sub.i8(0, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $sub.i8(0, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $sub.i8(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i9 := set_bssid($p0, $p8);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 642} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const usbnet_purge_paused_rxq: ref;

axiom usbnet_purge_paused_rxq == $sub.ref(0, 374734);

procedure usbnet_purge_paused_rxq($p0: ref);
  free requires assertsPassed;



implementation usbnet_purge_paused_rxq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_resume_rx: ref;

axiom usbnet_resume_rx == $sub.ref(0, 375766);

procedure usbnet_resume_rx($p0: ref);
  free requires assertsPassed;



implementation usbnet_resume_rx($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_channel_to_frequency: ref;

axiom ieee80211_channel_to_frequency == $sub.ref(0, 376798);

procedure ieee80211_channel_to_frequency($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_channel_to_frequency($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} {:cexpr "ieee80211_channel_to_frequency:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 644} {:cexpr "ieee80211_channel_to_frequency:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 646} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_bssid: ref;

axiom get_bssid == $sub.ref(0, 377830);

procedure get_bssid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation get_bssid($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p2, 6);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i3 := rndis_query_oid($p0, 218169601, $p1, $p2);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 649} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} eth_zero_addr($p1);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const rndis_cipher_to_alg: ref;

axiom rndis_cipher_to_alg == $sub.ref(0, 378862);

procedure rndis_cipher_to_alg($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rndis_cipher_to_alg($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 651} {:cexpr "rndis_cipher_to_alg:arg:cipher"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1027076);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb17;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i7 := 4;
    goto $bb17;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb12:
    assume $i5 == 1;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb17;

  $bb10:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1027073);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 379894);

procedure netdev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    return;
}



const rndis_akm_suite_to_key_mgmt: ref;

axiom rndis_akm_suite_to_key_mgmt == $sub.ref(0, 380926);

procedure rndis_akm_suite_to_key_mgmt($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation rndis_akm_suite_to_key_mgmt($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    call {:si_unique_call 652} {:cexpr "rndis_akm_suite_to_key_mgmt:arg:akm_suite"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1027073);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb10;
}



const usbnet_pause_rx: ref;

axiom usbnet_pause_rx == $sub.ref(0, 381958);

procedure usbnet_pause_rx($p0: ref);
  free requires assertsPassed;



implementation usbnet_pause_rx($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 382990);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rndis_check_bssid_list: ref;

axiom rndis_check_bssid_list == $sub.ref(0, 384022);

procedure rndis_check_bssid_list($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation rndis_check_bssid_list($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p32: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i35: i32;
  var $i36: i1;
  var $i39: i32;
  var $i40: i1;
  var $p37: ref;
  var $i38: i32;
  var $i41: i32;
  var $i42: i1;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p43: ref;
  var $i44: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i8;
  var $i99: i1;
  var $i80: i32;
  var $p81: ref;
  var $i100: i32;
  var $i79: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i24;
  var $i108: i24;
  var $i109: i24;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p33: ref;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.11);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.12);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2075);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 659} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p26 := kmalloc(1025, 208);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p29 := $p26;
    assume {:branchcond $i28} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i28 == 1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p30, $i31 := $p26, 1025;
    goto $bb7;

  $bb7:
    call $p32, $p30, $i31, $i35, $i36, $i39, $i40, $p37, $i38, $i41, $i42, $i45, $i46, $p47, $i48, $i49, $p43, $i44 := rndis_check_bssid_list_loop_$bb7($p0, $p4, $p32, $p30, $i31, $i35, $i36, $i39, $i40, $p37, $i38, $i41, $i42, $i45, $i46, $p47, $i48, $i49, $p43, $i44);
    goto $bb7_last;

  $bb10:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p4, $i31);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i35 := rndis_query_oid($p0, 218169879, $p30, $p4);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 664} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p30, $i35;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i36 == 1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.10, $p4);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 3);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p30, $i35;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.10, $p4);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i31);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p30, $i35;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.10, $p4);
    call {:si_unique_call 668} {:cexpr "len"} boogie_si_record_i32($i50);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p43);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    call {:si_unique_call 669} {:cexpr "count"} boogie_si_record_i32($i53);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, .str.1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, .str.11);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.13);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.5, $p59);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 2105);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p59, $i62);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p63, 0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.6, $p64);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, 0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p51, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p74 := next_bssid_list_item($p73, $p3, $p43, $i50);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.12, $p3);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i76 := check_bssid_list_item($p74, $i75, $p43, $i50);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    call {:si_unique_call 675} {:cexpr "tmp___3"} boogie_si_record_i8($i77);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i79 := 0;
    assume {:branchcond $i78} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, .str.1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p102, .str.11);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p103, .str);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p104, .str.14);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i107 := $load.i24($M.5, $p106);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i108 := $and.i24($i107, $sub.i24(0, 262144));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i109 := $or.i24($i108, 2125);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p106, $i109);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p110, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.6, $p111);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i64($i112);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i114 := $and.i64($i113, 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 685} {:cexpr "tmp___4"} boogie_si_record_i64($i115);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p43, $i44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} kfree($p33);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb43:
    assume $i116 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32($p7, $p118, .str.14, .str.11, $i53, $i79);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume $i78 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i80, $p81 := 0, $p74;
    goto $bb27;

  $bb27:
    call $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i80, $p81, $i100 := rndis_check_bssid_list_loop_$bb27($p0, $p1, $p2, $p3, $p43, $i50, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i80, $p81, $i100);
    goto $bb27_last;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i82 := rndis_bss_info_update($p0, $p81);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i8($i82);
    call {:si_unique_call 677} {:cexpr "tmp___2"} boogie_si_record_i8($i83);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i80, 1);
    call {:si_unique_call 680} {:cexpr "real_count"} boogie_si_record_i32($i94);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p95 := next_bssid_list_item($p81, $p3, $p43, $i50);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.12, $p3);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i97 := check_bssid_list_item($p95, $i96, $p43, $i50);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i8($i97);
    call {:si_unique_call 683} {:cexpr "tmp___3"} boogie_si_record_i8($i98);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i100 := $i94;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i79 := $i100;
    goto $bb26;

  $bb40:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i80, $p81 := $i94, $p95;
    goto $bb40_dummy;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p1);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb31;

  $bb32:
    assume $i86 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p2);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb31;

  $bb34:
    assume $i88 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p81, $mul.ref(0, 116)), $mul.ref(4, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i91 := ether_addr_equal($p90, $p1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i8($i91);
    call {:si_unique_call 679} {:cexpr "tmp___1"} boogie_si_record_i8($i92);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i93 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p2, 1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p6, $p71, .str.13, .str.11, $i50);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.10, $p4);
    call {:si_unique_call 665} {:cexpr "len"} boogie_si_record_i32($i45);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} kfree($p30);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p47 := kmalloc($i46, 208);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p32 := $p47;
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $p30, $i31 := $p47, $i45;
    goto $bb19_dummy;

  $bb8:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p29 := $p32;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p29, $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p33, $i34 := $p37, $i38;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb12;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb5;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} __dynamic_netdev_dbg.ref.ref.ref.ref($p5, $p25, .str.12, .str.11);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;
}



const rndis_start_bssid_list_scan: ref;

axiom rndis_start_bssid_list_scan == $sub.ref(0, 385054);

procedure rndis_start_bssid_list_scan($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_start_bssid_list_scan($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i3 := rndis_set_oid($p0, 218169626, $p2, 4);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 689} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 386086);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i3 := ldv_queue_delayed_work_on_16(8192, $p0, $p1, $i2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_16: ref;

axiom ldv_queue_delayed_work_on_16 == $sub.ref(0, 387118);

procedure ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation ldv_queue_delayed_work_on_16($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 694} {:cexpr "ldv_queue_delayed_work_on_16:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 696} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 697} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} activate_work_3($p8, 2);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 388150);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 699} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 700} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_3: ref;

axiom activate_work_3 == $sub.ref(0, 389182);

procedure activate_work_3($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation activate_work_3($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "activate_work_3:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i2 := $M.14;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.18;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.20;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.20 := $i1;
    call {:si_unique_call 707} {:cexpr "ldv_work_3_3"} boogie_si_record_i32($i1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 706} {:cexpr "ldv_work_3_2"} boogie_si_record_i32($i1);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 705} {:cexpr "ldv_work_3_1"} boogie_si_record_i32($i1);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.14 := $i1;
    call {:si_unique_call 704} {:cexpr "ldv_work_3_0"} boogie_si_record_i32($i1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const next_bssid_list_item: ref;

axiom next_bssid_list_item == $sub.ref(0, 390214);

procedure next_bssid_list_item($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation next_bssid_list_item($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} {:cexpr "next_bssid_list_item:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p2, $mul.ref($i4, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.12, $p1);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p5);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p9);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i11, $i13);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 3);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.12, $p1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref($i18, 116));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref($i18, 116)), $mul.ref(0, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p1, $i21);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p16 := $p19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p1, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;
}



const rndis_bss_info_update: ref;

axiom rndis_bss_info_update == $sub.ref(0, 391246);

procedure rndis_bss_info_update($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation rndis_bss_info_update($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i16;
  var $p63: ref;
  var $i64: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i64;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p3 := get_rndis_wlan_priv($p0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.15);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.16);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1996);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 712} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(0, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 714} {:cexpr "bssid_len"} boogie_si_record_i32($i30);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i31 := $ule.i32($i30, 127);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(116, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(116, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(12, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i30, $sub.i32(0, 116));
    call {:si_unique_call 715} {:cexpr "_min1"} boogie_si_record_i32($i38);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(112, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    call {:si_unique_call 716} {:cexpr "_min2"} boogie_si_record_i32($i40);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, $i40);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i42, 12);
    call {:si_unique_call 717} {:cexpr "ie_len"} boogie_si_record_i32($i43);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(60, 1)), $mul.ref(12, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i32($i50, 1000);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p52 := ieee80211_get_channel($p47, $i51);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(52, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i57 := level_to_qual($i56);
    call {:si_unique_call 720} {:cexpr "signal"} boogie_si_record_i32($i57);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    call {:si_unique_call 721} {:cexpr "timestamp"} boogie_si_record_i64($i60);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    call {:si_unique_call 722} {:cexpr "capability"} boogie_si_record_i16($i62);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    call {:si_unique_call 723} {:cexpr "beacon_interval"} boogie_si_record_i16($i64);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(4, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i62);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i64);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i43);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p75 := cfg80211_inform_bss($p67, $p52, 0, $p69, $i60, $i71, $i73, $p37, $i74, $i57, 208);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} cfg80211_put_bss($p78, $p75);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p75);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i32 := $i80;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i42 := $i38;
    goto $bb10;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(4, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 116)), $mul.ref(0, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __dynamic_netdev_dbg.ref.ref.ref.ref.ref.i32($p2, $p21, .str.16, $p24, $p26, $i28);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const check_bssid_list_item: ref;

axiom check_bssid_list_item == $sub.ref(0, 392278);

procedure check_bssid_list_item($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i1);
  free requires assertsPassed;



implementation check_bssid_list_item($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i1)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i64;
  var $i22: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i20: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} {:cexpr "check_bssid_list_item:arg:bssid_len"} boogie_si_record_i32($i1);
    call {:si_unique_call 727} {:cexpr "check_bssid_list_item:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i1, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i1, $i3);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i3);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p10);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i15, $i17);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i20 := 0;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i8 := $i20;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p13);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i22, $i24);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const ieee80211_get_channel: ref;

axiom ieee80211_get_channel == $sub.ref(0, 393310);

procedure ieee80211_get_channel($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_channel($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} {:cexpr "ieee80211_get_channel:arg:freq"} boogie_si_record_i32($i1);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p2 := __ieee80211_get_channel($p0, $i1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const level_to_qual: ref;

axiom level_to_qual == $sub.ref(0, 394342);

procedure level_to_qual($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation level_to_qual($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "level_to_qual:arg:level"} boogie_si_record_i32($i0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i1 := $mul.i32($i0, 100);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 9600);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i32($i2, 64);
    call {:si_unique_call 731} {:cexpr "qual"} boogie_si_record_i32($i3);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(100, $i3);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i6 := 100;
    goto $bb5;
}



const cfg80211_inform_bss: ref;

axiom cfg80211_inform_bss == $sub.ref(0, 395374);

procedure cfg80211_inform_bss($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i64, $i5: i16, $i6: i16, $p7: ref, $i8: i64, $i9: i32, $i10: i32) returns ($r: ref);
  free requires assertsPassed;



implementation cfg80211_inform_bss($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i64, $i5: i16, $i6: i16, $p7: ref, $i8: i64, $i9: i32, $i10: i32) returns ($r: ref)
{
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "cfg80211_inform_bss:arg:ftype"} boogie_si_record_i32($i2);
    call {:si_unique_call 733} {:cexpr "cfg80211_inform_bss:arg:tsf"} boogie_si_record_i64($i4);
    call {:si_unique_call 734} {:cexpr "cfg80211_inform_bss:arg:capability"} boogie_si_record_i16($i5);
    call {:si_unique_call 735} {:cexpr "cfg80211_inform_bss:arg:beacon_interval"} boogie_si_record_i16($i6);
    call {:si_unique_call 736} {:cexpr "cfg80211_inform_bss:arg:ielen"} boogie_si_record_i64($i8);
    call {:si_unique_call 737} {:cexpr "cfg80211_inform_bss:arg:signal"} boogie_si_record_i32($i9);
    call {:si_unique_call 738} {:cexpr "cfg80211_inform_bss:arg:gfp"} boogie_si_record_i32($i10);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i5);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i6);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p15 := cfg80211_inform_bss_width($p0, $p1, 0, $i2, $p3, $i4, $i12, $i14, $p7, $i8, $i9, $i10);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;
}



const cfg80211_put_bss: ref;

axiom cfg80211_put_bss == $sub.ref(0, 396406);

procedure cfg80211_put_bss($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfg80211_put_bss($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    return;
}



const cfg80211_inform_bss_width: ref;

axiom cfg80211_inform_bss_width == $sub.ref(0, 397438);

procedure cfg80211_inform_bss_width($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i64, $i6: i16, $i7: i16, $p8: ref, $i9: i64, $i10: i32, $i11: i32) returns ($r: ref);
  free requires assertsPassed;



implementation cfg80211_inform_bss_width($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i64, $i6: i16, $i7: i16, $p8: ref, $i9: i64, $i10: i32, $i11: i32) returns ($r: ref)
{
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "cfg80211_inform_bss_width:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 741} {:cexpr "cfg80211_inform_bss_width:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 742} {:cexpr "cfg80211_inform_bss_width:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 743} {:cexpr "cfg80211_inform_bss_width:arg:arg6"} boogie_si_record_i16($i6);
    call {:si_unique_call 744} {:cexpr "cfg80211_inform_bss_width:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 745} {:cexpr "cfg80211_inform_bss_width:arg:arg9"} boogie_si_record_i64($i9);
    call {:si_unique_call 746} {:cexpr "cfg80211_inform_bss_width:arg:arg10"} boogie_si_record_i32($i10);
    call {:si_unique_call 747} {:cexpr "cfg80211_inform_bss_width:arg:arg11"} boogie_si_record_i32($i11);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p12 := external_alloc();
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 398470);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __ieee80211_get_channel: ref;

axiom __ieee80211_get_channel == $sub.ref(0, 399502);

procedure __ieee80211_get_channel($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __ieee80211_get_channel($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} {:cexpr "__ieee80211_get_channel:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p2 := external_alloc();
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const rndis_fill_station_info: ref;

axiom rndis_fill_station_info == $sub.ref(0, 400534);

procedure rndis_fill_station_info($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.11, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_fill_station_info($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 756} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p5, 0, 840, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p4, 4);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i7 := rndis_query_oid($p0, 65799, $p6, $p4);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 758} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p4, 4);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i19 := rndis_query_oid($p0, 218169862, $p18, $p4);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 760} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p3);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i22 := level_to_qual($i21);
    call {:si_unique_call 762} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(37, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i23);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(0, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 128);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p2);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i32($i9, 1000);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i11);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 256);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 840)), $mul.ref(0, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const remove_key: ref;

axiom remove_key == $sub.ref(0, 401566);

procedure remove_key($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation remove_key($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $i19: i1;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i9: i32;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 766} {:cexpr "remove_key:arg:index"} boogie_si_record_i8($i1);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p6 := get_rndis_wlan_priv($p0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 3);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i11, 48)), $mul.ref(0, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i19 := is_wpa_key($p6, $i18);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 769} {:cexpr "is_wpa"} boogie_si_record_i8($i20);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str.1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, .str.137);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.138);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.5, $p26);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 1547);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p26, $i29);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 771} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i1);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} clear_key($p6, $i49);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i20);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i72);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p4);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i74 := rndis_set_oid($p0, 218169620, $p73, 4);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 775} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2932, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i81, $i82);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb29:
    assume $i83 == 1;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_153 := set_encr_mode($p0, 0, 0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} netdev_warn.ref.ref.i32.i32($p77, .str.141, $i78, $i74);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i9 := $i74;
    goto $bb3;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 16);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p2);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 778} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p68, $sub.i8(0, 1), 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p3);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i70 := rndis_set_oid($p0, 218169630, $p69, 16);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 781} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i9 := $i70;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $i56 := is_broadcast_ether_addr($p2);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 777} {:cexpr "tmp___1"} boogie_si_record_i8($i57);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 779} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p66, $p2, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 1073741824);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i58 == 1;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb17;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i20);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p41 := (if $i40 == 1 then .str.139 else .str.140);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i43, 48)), $mul.ref(0, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32($p5, $p38, .str.138, .str.137, $i39, $p41, $i47);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb3;
}



const clear_key: ref;

axiom clear_key == $sub.ref(0, 402598);

procedure clear_key($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_key($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "clear_key:arg:idx"} boogie_si_record_i8($i1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4192)), $mul.ref(2936, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i64($i1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 785} cmdloc_dummy_var_63 := $memset.i8(cmdloc_dummy_var_62, $p5, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    return;
}



const add_wpa_key: ref;

axiom add_wpa_key == $sub.ref(0, 403630);

procedure add_wpa_key($p0: ref, $p1: ref, $i2: i32, $i3: i8, $p4: ref, $p5: ref, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation add_wpa_key($p0: ref, $p1: ref, $i2: i32, $i3: i8, $p4: ref, $p5: ref, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i1;
  var $i107: i8;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i8;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i24;
  var $i149: i24;
  var $i150: i24;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $p175: ref;
  var $i176: i1;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i24;
  var $i219: i24;
  var $i220: i24;
  var $p221: ref;
  var $p222: ref;
  var $i223: i8;
  var $i224: i64;
  var $i225: i64;
  var $i226: i64;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $i235: i32;
  var $i236: i64;
  var $p239: ref;
  var $i240: i32;
  var $i241: i64;
  var $p244: ref;
  var $i245: i32;
  var $i246: i64;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i64;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $i263: i64;
  var $p266: ref;
  var $p267: ref;
  var $i268: i1;
  var $p269: ref;
  var $i39: i32;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p9 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 794} {:cexpr "add_wpa_key:arg:key_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 795} {:cexpr "add_wpa_key:arg:index"} boogie_si_record_i8($i3);
    call {:si_unique_call 796} {:cexpr "add_wpa_key:arg:seq_len"} boogie_si_record_i32($i6);
    call {:si_unique_call 797} {:cexpr "add_wpa_key:arg:cipher"} boogie_si_record_i32($i7);
    call {:si_unique_call 798} {:cexpr "add_wpa_key:arg:flags"} boogie_si_record_i32($i8);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p17 := get_rndis_wlan_priv($p0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i3);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 3);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i2, 32);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i2, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i8, 536870912);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p4);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i8($i119);
    call {:si_unique_call 816} {:cexpr "is_addr_ok"} boogie_si_record_i8($i120);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i8, 1073741824);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p142, .str.1);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p143, .str.116);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p144, .str);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p145, .str.122);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i148 := $load.i24($M.5, $p147);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i149 := $and.i24($i148, $sub.i24(0, 262144));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i150 := $or.i24($i149, 1442);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p147, $i150);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p151, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.6, $p152);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i64($i153);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i155 := $and.i64($i154, 1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i156 := ldv__builtin_expect($i155, 0);
    call {:si_unique_call 821} {:cexpr "tmp___10"} boogie_si_record_i64($i156);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p9);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 823} cmdloc_dummy_var_65 := $memset.i8(cmdloc_dummy_var_64, $p169, 0, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i2, 32);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i170);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $i2);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i3);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, $i8);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, $i174);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i7, 1027074);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 824} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p189, $p1, $i190, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i8, 536870912);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i8, 1073741824);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i197 == 1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i202 == 1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_154 := get_bssid($p0, $p206);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p9);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i211 := rndis_set_oid($p0, 218169629, $p208, $i210);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 831} {:cexpr "ret"} boogie_si_record_i32($i211);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p212, .str.1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p213, .str.116);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p214, .str);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p215, .str.123);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p216);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i218 := $load.i24($M.5, $p217);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i219 := $and.i24($i218, $sub.i24(0, 262144));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i220 := $or.i24($i219, 1478);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p217, $i220);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p221, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.6, $p222);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i64($i223);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i225 := $and.i64($i224, 1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i226 := ldv__builtin_expect($i225, 0);
    call {:si_unique_call 833} {:cexpr "tmp___11"} boogie_si_record_i64($i226);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i211, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p231);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i233 := $zext.i8.i64($i3);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($p232, $mul.ref($i233, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 837} cmdloc_dummy_var_85 := $memset.i8(cmdloc_dummy_var_84, $p234, 0, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i3);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i235);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i236, 48)), $mul.ref(0, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p239, $i2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i3);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i240);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i241, 48)), $mul.ref(4, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, $i7);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i3);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i246 := $sext.i32.i64($i245);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i246, 48)), $mul.ref(8, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p250 := $bitcast.ref.ref($p249);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i2);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 838} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p250, $p1, $i251, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i8, 1073741824);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i253 == 1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i3);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i263 := $sext.i32.i64($i262);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i263, 48)), $mul.ref(40, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} eth_broadcast_addr($p267);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i8, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb89:
    assume $i268 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2932, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p269, $i3);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i253 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i3);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i255 := $sext.i32.i64($i254);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 4192)), $mul.ref(2936, 1)), $mul.ref($i255, 48)), $mul.ref(40, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p261 := $bitcast.ref.ref($p260);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 839} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p259, $p261, 6, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i230 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i39 := $i211;
    goto $bb6;

  $bb80:
    assume $i227 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p16, $p229, .str.123, .str.116, $i211);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i202 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} eth_broadcast_addr($p204);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i197 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    cmdloc_dummy_var_82 := $M.0;
    call {:si_unique_call 829} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p199, $p4, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_83;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i192 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i6);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 828} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p194, $p5, $i195, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb65:
    assume $i176 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i2, 32);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb67;

  $bb68:
    assume $i177 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 825} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p179, $p1, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(16, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p1, $mul.ref(24, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 826} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p182, $p183, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(24, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($p1, $mul.ref(16, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 827} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p186, $p187, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i157 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i3);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i8, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i32($i161);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i8, 1073741824);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i165 := $zext.i1.i32($i164);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i8, 536870912);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i32($i167);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p15, $p159, .str.122, .str.116, $i160, $i162, $i165, $i168);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i122 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i120);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i123 == 1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p124, .str.1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p125, .str.116);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p126, .str);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p127, .str.121);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.5, $p129);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 1434);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p129, $i132);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p133, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.6, $p134);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 818} {:cexpr "tmp___9"} boogie_si_record_i64($i138);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb58:
    assume $i139 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p14, $p141, .str.121, .str.116, $p4);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb55;

  $bb38:
    assume $i105 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i106 := is_zero_ether_addr($p4);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i8($i106);
    call {:si_unique_call 813} {:cexpr "tmp___4"} boogie_si_record_i8($i107);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i107);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb52;

  $bb43:
    assume $i110 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i111 := is_broadcast_ether_addr($p4);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i111);
    call {:si_unique_call 815} {:cexpr "tmp___6"} boogie_si_record_i8($i112);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb51;

  $bb48:
    assume $i115 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i116 := 1;
    goto $bb50;

  $bb45:
    assume $i113 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb47;

  $bb40:
    assume $i108 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i109 := 0;
    goto $bb42;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p5);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i63 == 1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i6, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p5);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i85 := $ugt.i32($i6, 8);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb30;

  $bb31:
    assume $i85 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, .str.1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p87, .str.116);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p88, .str);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p89, .str.120);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.5, $p91);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 1425);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p91, $i94);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p95, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.6, $p96);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 810} {:cexpr "tmp___3"} boogie_si_record_i64($i100);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb33:
    assume $i101 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __dynamic_netdev_dbg.ref.ref.ref.ref($p13, $p103, .str.120, .str.116);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, .str.1);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.116);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.119);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.5, $p70);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1421);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p70, $i73);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.6, $p75);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 807} {:cexpr "tmp___2"} boogie_si_record_i64($i79);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb24:
    assume $i80 == 1;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __dynamic_netdev_dbg.ref.ref.ref.ref($p12, $p82, .str.119, .str.116);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, .str.1);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.116);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.118);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.5, $p47);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1415);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p47, $i50);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 804} {:cexpr "tmp___1"} boogie_si_record_i64($i56);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb13:
    assume $i57 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p11, $p59, .str.118, .str.116, $i2);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb9;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str.1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, .str.116);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p22, .str);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.117);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.5, $p25);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 1410);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p25, $i28);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 801} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb6;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i3);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p10, $p37, .str.117, .str.116, $i38);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usbnet_open: ref;

axiom usbnet_open == $sub.ref(0, 404662);

procedure usbnet_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbnet_stop: ref;

axiom usbnet_stop == $sub.ref(0, 405694);

procedure usbnet_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbnet_start_xmit: ref;

axiom usbnet_start_xmit == $sub.ref(0, 406726);

procedure usbnet_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 845} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rndis_wlan_set_multicast_list: ref;

axiom rndis_wlan_set_multicast_list == $sub.ref(0, 407758);

procedure rndis_wlan_set_multicast_list($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation rndis_wlan_set_multicast_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_155: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p1 := netdev_priv($p0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p3 := get_rndis_wlan_priv($p2);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i5 := constant_test_bit(2, $p4);
    call {:si_unique_call 850} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} set_bit(2, $p7);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_155 := queue_work($p9, $p10);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 408790);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 409822);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 855} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 856} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbnet_tx_timeout: ref;

axiom usbnet_tx_timeout == $sub.ref(0, 410854);

procedure usbnet_tx_timeout($p0: ref);
  free requires assertsPassed;



implementation usbnet_tx_timeout($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 411886);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 412918);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 859} devirtbounce.2(0, $p1, $i0, $p1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 413950);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i2 := ldv_queue_work_on_15(8192, $p0, $p1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 861} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 414982);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20;



implementation ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} {:cexpr "ldv_queue_work_on_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 865} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} activate_work_3($p2, 2);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 416014);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 868} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 869} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usbnet_probe: ref;

axiom usbnet_probe == $sub.ref(0, 417046);

procedure usbnet_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 870} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 871} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usbnet_disconnect: ref;

axiom usbnet_disconnect == $sub.ref(0, 418078);

procedure usbnet_disconnect($p0: ref);
  free requires assertsPassed;



implementation usbnet_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_suspend: ref;

axiom usbnet_suspend == $sub.ref(0, 419110);

procedure usbnet_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $CurrAddr;



implementation usbnet_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p3, $i1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 874} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usbnet_resume: ref;

axiom usbnet_resume == $sub.ref(0, 420142);

procedure usbnet_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 875} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 876} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rndis_wlan_bind: ref;

axiom rndis_wlan_bind == $sub.ref(0, 421174);

procedure rndis_wlan_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.14, $M.16, $M.18, $M.20, $CurrAddr, $M.12, $M.13, assertsPassed;



implementation rndis_wlan_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p86: ref;
  var $p89: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i102: i32;
  var $p184: ref;
  var $p186: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i17: i32;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var vslice_dummy_var_156: i1;
  var vslice_dummy_var_157: i1;
  var vslice_dummy_var_158: i1;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p14 := wiphy_new(rndis_config_ops, 4168);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p18 := wiphy_priv($p14);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(8, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2968)), $mul.ref(848, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p20);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p14);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 2);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(32, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p18);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(0, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p0);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __mutex_init($p31, .str.80, $p4);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $p32 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.82, 131082, 1, $p5, .str.81, .str.1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} __init_work($p34, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 137438953408);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p7);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    cmdloc_dummy_var_93 := $M.0;
    call {:si_unique_call 894} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p38, $p39, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_94;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1)), $mul.ref(32, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} lockdep_init_map($p41, .str.83, $p6, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1)), $mul.ref(8, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} INIT_LIST_HEAD($p43);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1)), $mul.ref(24, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, rndis_wlan_worker);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(0, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __init_work($p47, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 137438953408);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p9);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.0;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 898} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p52, $p53, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} lockdep_init_map($p56, .str.84, $p8, 0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} INIT_LIST_HEAD($p59);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, rndis_device_poller);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(80, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} init_timer_key($p64, 2097152, .str.85, $p10);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, delayed_work_timer_fn);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i69);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(0, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} __init_work($p74, 0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, 137438953408);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p12);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 903} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p79, $p80, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} lockdep_init_map($p83, .str.86, $p11, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} INIT_LIST_HEAD($p86);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, rndis_get_scan_results);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(80, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} init_timer_key($p91, 2097152, .str.87, $p13);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, delayed_work_timer_fn);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i96);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i100 := generic_rndis_bind($p0, $p1, 2);
    call {:si_unique_call 908} {:cexpr "retval"} boogie_si_record_i32($i100);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, rndis_wlan_netdev_ops);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 9);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p3);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i107 := rndis_set_oid($p0, 65806, $p106, 4);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 916} {:cexpr "retval"} boogie_si_record_i32($i107);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p2, 4);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p3);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i109 := rndis_query_oid($p0, 16843012, $p108, $p2);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 918} {:cexpr "retval"} boogie_si_record_i32($i109);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p3);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i109, 0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i112 == 1);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i119 := $sgt.i32($i118, 0);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i119 == 1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, $sub.i32(0, 4097));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i132);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(0, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 919} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p137, $p141, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, rndis_wiphy_privid);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(216, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, $p142);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(48, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, 6);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(80, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_159 := rndis_wlan_get_caps($p0, $p14);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1808, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 921} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p148, rndis_channels, 896, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2704, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 922} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p150, rndis_rates, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1808, 1));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1736, 1)), $mul.ref(0, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p154, $p151);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1736, 1)), $mul.ref(20, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, 14);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2704, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1736, 1)), $mul.ref(8, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p160, $p157);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1736, 1)), $mul.ref(24, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 12);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1736, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref(0, 8));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $p163);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(72, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 2);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2848, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 923} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p168, rndis_cipher_suites, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2848, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(96, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p171, $p169);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p14, $mul.ref(0, 1776)), $mul.ref(88, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 4);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} set_wiphy_dev($p14, $p175);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i176 := wiphy_register($p14);
    call {:si_unique_call 926} {:cexpr "tmp___2"} boogie_si_record_i32($i176);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} set_default_iw_params($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2912, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $sub.i32(0, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_160 := rndis_set_wiphy_params($p14, 12);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2908, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p180, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_161 := disassociate($p0, 0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} netif_carrier_off($p183);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i177 == 1;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 19);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1024, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_156 := ldv_cancel_delayed_work_sync_43($p184);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1248, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} vslice_dummy_var_157 := ldv_cancel_delayed_work_sync_44($p186);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_158 := ldv_cancel_work_sync_45($p188);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_flush_workqueue_46($p191);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_destroy_workqueue_47($p193);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} wiphy_free($p14);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i17 := $i102;
    goto $bb3;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i119 == 1;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i124 := $or.i32($i123, 4096);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i124);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p19, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb10;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i101 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i102 := $i100;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;
}



const rndis_wlan_unbind: ref;

axiom rndis_wlan_unbind == $sub.ref(0, 422206);

procedure rndis_wlan_unbind($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $M.16, $M.18, $M.20, $CurrAddr, $M.10, $M.11, $M.12, $M.13, assertsPassed;



implementation rndis_wlan_unbind($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i1;
  var vslice_dummy_var_164: i1;
  var vslice_dummy_var_165: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_162 := disassociate($p0, 0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1024, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_163 := ldv_cancel_delayed_work_sync_48($p4);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1248, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_164 := ldv_cancel_delayed_work_sync_49($p6);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_165 := ldv_cancel_work_sync_50($p8);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_flush_workqueue_51($p11);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_destroy_workqueue_52($p13);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} rndis_unbind($p0, $p1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} wiphy_unregister($p16);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} wiphy_free($p19);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const rndis_wlan_reset: ref;

axiom rndis_wlan_reset == $sub.ref(0, 423238);

procedure rndis_wlan_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.0, $CurrAddr, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.9, assertsPassed;



implementation rndis_wlan_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i30: i32;
  var vslice_dummy_var_166: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.1);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.92);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.12);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 3544);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 944} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i21 := rndis_reset($p0);
    call {:si_unique_call 947} {:cexpr "retval"} boogie_si_record_i32($i21);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} set_multicast_list($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i25 := round_jiffies_relative(250);
    call {:si_unique_call 951} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1024, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_166 := queue_delayed_work($p27, $p28, $i25);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i30 := deauthenticate($p0);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 954} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} netdev_warn.ref.ref.i32($p24, .str.93, $i21);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} __dynamic_netdev_dbg.ref.ref.ref.ref($p1, $p20, .str.12, .str.92);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_wlan_stop: ref;

axiom rndis_wlan_stop == $sub.ref(0, 424270);

procedure rndis_wlan_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $M.0, $CurrAddr, $M.14, $M.16, $M.18, $M.20, assertsPassed, $M.10, $M.11, $M.12, $M.13;



implementation rndis_wlan_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var vslice_dummy_var_167: i1;
  var vslice_dummy_var_168: i1;
  var vslice_dummy_var_169: i1;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p3 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.91);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.12);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 3566);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 959} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i22 := disassociate($p0, 0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 962} {:cexpr "retval"} boogie_si_record_i32($i22);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1024, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_167 := ldv_cancel_delayed_work_sync_53($p24);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1248, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_168 := ldv_cancel_delayed_work_sync_54($p26);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_169 := ldv_cancel_work_sync_55($p28);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_flush_workqueue_56($p31);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_170 := rndis_set_oid($p0, 65806, $p39, 4);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} cfg80211_scan_done($p37, 1);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 4192)), $mul.ref(1008, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} __dynamic_netdev_dbg.ref.ref.ref.ref($p2, $p21, .str.12, .str.91);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_status: ref;

axiom rndis_status == $sub.ref(0, 425302);

procedure rndis_status($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rndis_status($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    return;
}



const rndis_rx_fixup: ref;

axiom rndis_rx_fixup == $sub.ref(0, 426334);

procedure rndis_rx_fixup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rndis_rx_fixup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 969} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 970} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rndis_tx_fixup: ref;

axiom rndis_tx_fixup == $sub.ref(0, 427366);

procedure rndis_tx_fixup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation rndis_tx_fixup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} {:cexpr "rndis_tx_fixup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p3 := external_alloc();
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const bcm4320b_early_init: ref;

axiom bcm4320b_early_init == $sub.ref(0, 428398);

procedure bcm4320b_early_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, assertsPassed;



implementation bcm4320b_early_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} rndis_copy_module_params($p0, 2);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_171 := rndis_set_config_parameter_str($p0, .str.94, $p4);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2880, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p9 := (if $i8 == 1 then .str.96 else .str.97);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_172 := rndis_set_config_parameter_str($p0, .str.95, $p9);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2884, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p14 := (if $i13 == 1 then .str.96 else .str.97);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_173 := rndis_set_config_parameter_str($p0, .str.98, $p14);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_174 := sprintf.ref.ref.i32($p16, .str.99, $i18);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_175 := rndis_set_config_parameter_str($p0, .str.100, $p20);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_176 := sprintf.ref.ref.i32($p22, .str.99, $i24);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_177 := rndis_set_config_parameter_str($p0, .str.101, $p26);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_178 := sprintf.ref.ref.i32($p28, .str.99, $i30);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_179 := rndis_set_config_parameter_str($p0, .str.102, $p32);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_180 := sprintf.ref.ref.i32($p34, .str.99, $i36);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_181 := rndis_set_config_parameter_str($p0, .str.103, $p38);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const rndis_wlan_indication: ref;

axiom rndis_wlan_indication == $sub.ref(0, 429430);

procedure rndis_wlan_indication($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $CurrAddr;



implementation rndis_wlan_indication($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var vslice_dummy_var_182: i1;
  var vslice_dummy_var_183: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 988} {:cexpr "rndis_wlan_indication:arg:buflen"} boogie_si_record_i32($i2);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p4 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1073807372);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 1073807378);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 1073807378);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} netdev_info.ref.ref.i32($p49, .str.60, $i51);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} rndis_wlan_media_specific_indication($p0, $p5, $i2);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 1073807372);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} netdev_info.ref.ref($p42, .str.59);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} set_bit(1, $p43);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_182 := queue_work($p45, $p46);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i7, 1073807371);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 218169629);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} usbnet_pause_rx($p0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} netdev_info.ref.ref($p35, .str.58);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} set_bit(0, $p36);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_183 := queue_work($p38, $p39);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.56);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.57);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 3077);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 995} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __dynamic_netdev_dbg.ref.ref.ref($p3, $p33, .str.57);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 430462);

procedure netdev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    return;
}



const rndis_wlan_media_specific_indication: ref;

axiom rndis_wlan_media_specific_indication == $sub.ref(0, 431494);

procedure rndis_wlan_media_specific_indication($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation rndis_wlan_media_specific_indication($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} {:cexpr "rndis_wlan_media_specific_indication:arg:buflen"} boogie_si_record_i32($i2);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 8);
    call {:si_unique_call 1003} {:cexpr "offset"} boogie_si_record_i32($i5);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 1004} {:cexpr "len"} boogie_si_record_i32($i7);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, 7);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32($i2, $i7);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i2, $i5);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i5, $i7);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, $i2);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i5);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 12));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 12)), $mul.ref(0, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p18, $mul.ref($i19, 12)), $mul.ref(0, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} netdev_info.ref.ref.i32($p39, .str.65, $i41);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i25 == 1;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i19, 12)), $mul.ref(4, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} netdev_info.ref.ref.i32($p29, .str.63, $i32);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} rndis_wlan_pmkid_cand_list_indication($p0, $p20, $i7);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref($i19, 12)), $mul.ref(4, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} netdev_info.ref.ref.i32($p34, .str.64, $i37);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb20;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} rndis_wlan_auth_indication($p0, $p20, $i7);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, $i7);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} netdev_info.ref.ref.i32.i32($p16, .str.62, $i17, $i2);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} netdev_info.ref.ref.i32($p10, .str.61, $i7);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_wlan_auth_indication: ref;

axiom rndis_wlan_auth_indication == $sub.ref(0, 432526);

procedure rndis_wlan_auth_indication($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation rndis_wlan_auth_indication($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i1;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} {:cexpr "rndis_wlan_auth_indication:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 19);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i2, 4);
    call {:si_unique_call 1014} {:cexpr "buflen"} boogie_si_record_i32($i9);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 15);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p11, $i12 := $p6, $i9;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $p11, $i12 := rndis_wlan_auth_indication_loop_$bb8($p0, $p13, $p14, $i15, $i16, $i17, $p18, $i19, $i20, $p21, $i22, $i23, $p24, $i25, $i26, $i27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $i51, $p11, $i12);
    goto $bb8_last;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1015} {:cexpr "flags"} boogie_si_record_i32($i15);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p18 := .str.67;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i15, 2);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $p21 := $p18;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i15, 6);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $p24, $i25 := $p21, 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i15, 14);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p28, $i29 := $p24, 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} netdev_info.ref.ref.ref.i32($p31, .str.72, $p28, $i33);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i25);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i29);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i12, $i45);
    call {:si_unique_call 1019} {:cexpr "buflen"} boogie_si_record_i32($i46);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p11, $mul.ref($i49, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i46, 15);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i51 == 1);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb28:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p11, $i12 := $p50, $i46;
    goto $bb28_dummy;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} cfg80211_michael_mic_failure($p41, $p43, 0, $sub.i32(0, 1), $0.ref, 208);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} cfg80211_michael_mic_failure($p36, $p38, 1, $sub.i32(0, 1), $0.ref, 208);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p28, $i29 := .str.71, 1;
    goto $bb21;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p24, $i25 := .str.70, 1;
    goto $bb18;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p21 := .str.69;
    goto $bb15;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p18 := .str.68;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} netdev_info.ref.ref.i32($p5, .str.66, $i2);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5406;
}



const rndis_wlan_pmkid_cand_list_indication: ref;

axiom rndis_wlan_pmkid_cand_list_indication == $sub.ref(0, 433558);

procedure rndis_wlan_pmkid_cand_list_indication($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation rndis_wlan_pmkid_cand_list_indication($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1021} {:cexpr "rndis_wlan_pmkid_cand_list_indication:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i4 := $ule.i32($i2, 11);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 12);
    call {:si_unique_call 1023} {:cexpr "list_len"} boogie_si_record_i32($i11);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 12);
    call {:si_unique_call 1024} {:cexpr "expected_len"} boogie_si_record_i32($i12);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, $i12);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} netdev_info.ref.ref.i32.i32($p19, .str.75, $i21, $i23);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 1);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i28);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb14;

  $bb14:
    call $p31, $p32, $i33, $p35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $i70, $i71, $i30 := rndis_wlan_pmkid_cand_list_indication_loop_$bb14($p0, $p3, $p17, $p27, $p31, $p32, $i33, $p35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $i53, $i54, $i55, $p56, $p57, $p58, $i59, $i60, $i61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $i70, $i71, $i30);
    goto $bb14_last;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref($i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1027} {:cexpr "preauth"} boogie_si_record_i8($i39);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, .str.1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, .str.76);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p42, .str);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.77);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.5, $p45);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 3008);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p45, $i48);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1029} {:cexpr "tmp"} boogie_si_record_i64($i54);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p32, $mul.ref($i33, 12)), $mul.ref(0, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i39);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} cfg80211_pmksa_candidate_notify($p65, $i30, $p67, $i68, 32);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i30, 1);
    call {:si_unique_call 1032} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p27);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i69, $i70);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i71 == 1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i69;
    goto $bb19_dummy;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p32, $mul.ref($i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i39);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p32, $mul.ref($i33, 12)), $mul.ref(0, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p3, $p57, .str.77, $i30, $i59, $i61, $p63);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} netdev_info.ref.ref.i32.i32($p15, .str.74, $i2, $i12);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} netdev_info.ref.ref.i32($p6, .str.73, $i2);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5511;
}



const cfg80211_pmksa_candidate_notify: ref;

axiom cfg80211_pmksa_candidate_notify == $sub.ref(0, 434590);

procedure cfg80211_pmksa_candidate_notify($p0: ref, $i1: i32, $p2: ref, $i3: i1, $i4: i32);
  free requires assertsPassed;



implementation cfg80211_pmksa_candidate_notify($p0: ref, $i1: i32, $p2: ref, $i3: i1, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} {:cexpr "cfg80211_pmksa_candidate_notify:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1034} {:cexpr "cfg80211_pmksa_candidate_notify:arg:arg3"} boogie_si_record_i1($i3);
    call {:si_unique_call 1035} {:cexpr "cfg80211_pmksa_candidate_notify:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    return;
}



const cfg80211_michael_mic_failure: ref;

axiom cfg80211_michael_mic_failure == $sub.ref(0, 435622);

procedure cfg80211_michael_mic_failure($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32);
  free requires assertsPassed;



implementation cfg80211_michael_mic_failure($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} {:cexpr "cfg80211_michael_mic_failure:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1037} {:cexpr "cfg80211_michael_mic_failure:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1038} {:cexpr "cfg80211_michael_mic_failure:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    return;
}



const rndis_copy_module_params: ref;

axiom rndis_copy_module_params == $sub.ref(0, 436654);

procedure rndis_copy_module_params($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rndis_copy_module_params($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p6: ref;
  var $i7: i8;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $i29: i8;
  var $p31: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var vslice_dummy_var_184: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} {:cexpr "rndis_copy_module_params:arg:device_type"} boogie_si_record_i32($i1);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2864, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.23, modparam_country);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i4);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.23, $add.ref($add.ref(modparam_country, $mul.ref(0, 4)), $mul.ref(1, 1)));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(1, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i7);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(2, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i12 := $M.24;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2880, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i14 := $M.25;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2884, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i16 := $M.26;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i18 := $M.27;
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i20 := $M.28;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i22 := $M.29;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i29 := __toupper($i28);
    call {:si_unique_call 1042} {:cexpr "tmp___0"} boogie_si_record_i8($i29);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i29);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(1, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i37 := __toupper($i36);
    call {:si_unique_call 1044} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1)), $mul.ref(1, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i37);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i42 := strcmp($p41, .str.78);
    call {:si_unique_call 1046} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i49 == 1);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, 2);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i57 == 1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, 3);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, $sub.i32(0, 80));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i69 := $sge.i32($i68, $sub.i32(0, 59));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, 2);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i79 := $M.30;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i82 := $M.30;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2904, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2904, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 500);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i77 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 2);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2900, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $sub.i32(0, 60));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2896, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $sub.i32(0, 80));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i61 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 3);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i57 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2892, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 2);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i49 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2888, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i43 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2876, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_184 := strcpy($p45, .str.79);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rndis_set_config_parameter_str: ref;

axiom rndis_set_config_parameter_str == $sub.ref(0, 437686);

procedure rndis_set_config_parameter_str($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_set_config_parameter_str($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i3 := rndis_set_config_parameter($p0, $p1, 2, $p2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 1049} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 438718);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const rndis_set_config_parameter: ref;

axiom rndis_set_config_parameter == $sub.ref(0, 439750);

procedure rndis_set_config_parameter($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $CurrAddr, assertsPassed;



implementation rndis_set_config_parameter($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i8: i32;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i75: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i16;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i1;
  var $i74: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i94: i64;
  var $p95: ref;
  var $i96: i8;
  var $i97: i16;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i1;
  var $i93: i32;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i24;
  var $i120: i24;
  var $i121: i24;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1053} {:cexpr "rndis_set_config_parameter:arg:value_type"} boogie_si_record_i32($i2);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 2);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i10 := strlen($p3);
    call {:si_unique_call 1060} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 2);
    call {:si_unique_call 1061} {:cexpr "value_len"} boogie_si_record_i32($i12);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i14 := strlen($p1);
    call {:si_unique_call 1055} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    call {:si_unique_call 1056} {:cexpr "param_len"} boogie_si_record_i32($i16);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i8);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 20);
    call {:si_unique_call 1057} {:cexpr "info_len"} boogie_si_record_i32($i18);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p20 := kmalloc($i19, 208);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i2, 2);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, .str.1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, .str.104);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.106);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.5, $p48);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 912);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p48, $i51);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p52, 0);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1065} {:cexpr "tmp___3"} boogie_si_record_i64($i57);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 20);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i16);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i2);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i16, 20);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i8);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p21);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i16);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i72 := $udiv.i64($i71, 2);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i73 := $ult.i64(0, $i72);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i2, 2);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i85 == 1);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p21);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i105 := $sext.i32.i64($i16);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i105, 20);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p104, $mul.ref($i106, 4));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p3);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i109);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p21);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i111 := rndis_set_oid($p0, 66075, $p110, $i18);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 1071} {:cexpr "ret"} boogie_si_record_i32($i111);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p21);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} kfree($p131);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i13 := $i111;
    goto $bb7;

  $bb39:
    assume $i112 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p113, .str.1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p114, .str.104);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p115, .str);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p116, .str.107);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i119 := $load.i24($M.5, $p118);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i120 := $and.i24($i119, $sub.i24(0, 262144));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i121 := $or.i24($i120, 949);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p118, $i121);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p122, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.6, $p123);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 1073} {:cexpr "tmp___4"} boogie_si_record_i64($i127);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i128 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} __dynamic_netdev_dbg.ref.ref.ref.i32($p6, $p130, .str.107, $i111);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i85 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p21);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i16);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i87, 20);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i8);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i91 := $udiv.i64($i90, 2);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i92 := $ult.i64(0, $i91);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i92 == 1;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb33;

  $bb33:
    call $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i93 := rndis_set_config_parameter_loop_$bb33($p3, $p86, $i88, $i91, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i93);
    goto $bb33_last;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i93);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p3, $mul.ref($i94, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i16($i96);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i93);
    $i99 := $add.i64($i88, $i98);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p86, $mul.ref($i99, 2));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p100, $i97);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i93, 1);
    call {:si_unique_call 1069} {:cexpr "i"} boogie_si_record_i32($i101);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i103 := $ult.i64($i102, $i91);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i103 == 1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i93 := $i101;
    goto $bb35_dummy;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb23;

  $bb23:
    call $i75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i74 := rndis_set_config_parameter_loop_$bb23($p1, $p69, $i72, $i75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i74);
    goto $bb23_last;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p1, $mul.ref($i75, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i16($i77);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i74);
    $i80 := $add.i64(20, $i79);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p69, $mul.ref($i80, 2));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i78);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i74, 1);
    call {:si_unique_call 1068} {:cexpr "i"} boogie_si_record_i32($i82);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i84 := $ult.i64($i83, $i72);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i84 == 1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i74 := $i82;
    goto $bb25_dummy;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p3);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p5, $p60, .str.106, $p1, $i62);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str.1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.104);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.105);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.5, $p30);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 909);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p30, $i33);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1063} {:cexpr "tmp___2"} boogie_si_record_i64($i39);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p4, $p42, .str.105, $p1, $p3);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i8 := 4;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5820;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 440782);

procedure strlen($p0: ref) returns ($r: i64);



const __toupper: ref;

axiom __toupper == $sub.ref(0, 441814);

procedure __toupper($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __toupper($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i8;
  var $i11: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "__toupper:arg:c"} boogie_si_record_i8($i0);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i2, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 224);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    call {:si_unique_call 1077} {:cexpr "c"} boogie_si_record_i8($i10);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 442846);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const strcpy: ref;

axiom strcpy == $sub.ref(0, 443878);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const ldv_cancel_delayed_work_sync_53: ref;

axiom ldv_cancel_delayed_work_sync_53 == $sub.ref(0, 444910);

procedure ldv_cancel_delayed_work_sync_53($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_53($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1080} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} disable_work_3($p5);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_delayed_work_sync_54: ref;

axiom ldv_cancel_delayed_work_sync_54 == $sub.ref(0, 445942);

procedure ldv_cancel_delayed_work_sync_54($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_54($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1083} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1084} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} disable_work_3($p5);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_work_sync_55: ref;

axiom ldv_cancel_work_sync_55 == $sub.ref(0, 446974);

procedure ldv_cancel_work_sync_55($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_work_sync_55($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i1 := cancel_work_sync($p0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1087} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1088} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} disable_work_3($p0);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_flush_workqueue_56: ref;

axiom ldv_flush_workqueue_56 == $sub.ref(0, 448006);

procedure ldv_flush_workqueue_56($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation ldv_flush_workqueue_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} flush_workqueue($p0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} call_and_disable_all_3(2);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const cfg80211_scan_done: ref;

axiom cfg80211_scan_done == $sub.ref(0, 449038);

procedure cfg80211_scan_done($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation cfg80211_scan_done($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} {:cexpr "cfg80211_scan_done:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 450070);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_3: ref;

axiom call_and_disable_all_3 == $sub.ref(0, 451102);

procedure call_and_disable_all_3($i0: i32);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation call_and_disable_all_3($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} {:cexpr "call_and_disable_all_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.18;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.20;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p12 := $M.21;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} call_and_disable_work_3($p12);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p9 := $M.19;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} call_and_disable_work_3($p9);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p6 := $M.17;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} call_and_disable_work_3($p6);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p3 := $M.15;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} call_and_disable_work_3($p3);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_3: ref;

axiom call_and_disable_work_3 == $sub.ref(0, 452134);

procedure call_and_disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation call_and_disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i3 := $M.14;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.16;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i11 := $M.16;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.18;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i19 := $M.18;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.20;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i27 := $M.20;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p30 := $M.21;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} rndis_get_scan_results($p0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1105} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p22 := $M.19;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} rndis_get_scan_results($p0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1103} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p14 := $M.17;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} rndis_get_scan_results($p0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1101} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p6 := $M.15;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} rndis_get_scan_results($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1099} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const rndis_get_scan_results: ref;

axiom rndis_get_scan_results == $sub.ref(0, 453166);

procedure rndis_get_scan_results($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation rndis_get_scan_results($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1224), 4192)), $mul.ref(0, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.1);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.52);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.53);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2139);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1108} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1224), 4192)), $mul.ref(1008, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i28 := rndis_check_bssid_list($p5, $0.ref, $0.ref);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1111} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1224), 4192)), $mul.ref(1008, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} cfg80211_scan_done($p30, $i31);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1224), 4192)), $mul.ref(1008, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __dynamic_netdev_dbg.ref.ref.ref($p1, $p23, .str.53);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 454198);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1114} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_3: ref;

axiom disable_work_3 == $sub.ref(0, 455230);

procedure disable_work_3($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation disable_work_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i3 := $M.14;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.16;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i11 := $M.16;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.18;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i19 := $M.18;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.20;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i27 := $M.20;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.21;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1118} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.19;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1117} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.17;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1116} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.15;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1115} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 456262);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rndis_reset: ref;

axiom rndis_reset == $sub.ref(0, 457294);

procedure rndis_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rndis_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p1 := get_rndis_wlan_priv($p0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} mutex_lock_nested($p2, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(3132, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    call {:si_unique_call 1123} cmdloc_dummy_var_114 := $memset.i8(cmdloc_dummy_var_113, $p5, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_114;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 6);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 12);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(2928, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i10 := rndis_command($p0, $p9, 1025);
    call {:si_unique_call 1125} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(1552, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} mutex_unlock($p11);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb3;
}



const set_multicast_list: ref;

axiom set_multicast_list == $sub.ref(0, 458326);

procedure set_multicast_list($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.9, assertsPassed;



implementation set_multicast_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i37: i1;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i59: i32;
  var $p60: ref;
  var $p78: ref;
  var $p36: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i24;
  var $i98: i24;
  var $i99: i24;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $p4 := get_rndis_wlan_priv($p0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 9);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p1);
    call {:si_unique_call 1131} {:cexpr "basefilter"} boogie_si_record_i32($i5);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 256);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 512);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, $i5);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} netif_addr_lock_bh($p25);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(16, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 1135} {:cexpr "mc_count"} boogie_si_record_i32($i30);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i30);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i30, 0);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p78 := $0.ref;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p36 := $p78;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} netif_addr_unlock_bh($p80);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, $i5);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i30, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p1);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i112 := rndis_set_oid($p0, 65806, $p111, 4);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1133} {:cexpr "ret"} boogie_si_record_i32($i112);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, .str.1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p118, .str.48);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p119, .str);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p120, .str.51);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.5, $p122);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 1661);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p122, $i125);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 0);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 1149} {:cexpr "tmp___3"} boogie_si_record_i64($i131);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume $i132 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p3, $p134, .str.51, $i135, $i112);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i113 == 1;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} netdev_warn.ref.ref.i32($p115, .str.50, $i116);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i84 := $mul.i32($i30, 6);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i85 := rndis_set_oid($p0, 16843011, $p36, $i84);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1142} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} kfree($p36);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i86 == 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 4);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i90);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p91, .str.1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p92, .str.48);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p93, .str);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p94, .str.49);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i97 := $load.i24($M.5, $p96);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i98 := $and.i24($i97, $sub.i24(0, 262144));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i99 := $or.i24($i98, 1649);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p96, $i99);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p100, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.6, $p101);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i64($i102);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i104 := $and.i64($i103, 1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 1145} {:cexpr "tmp___2"} boogie_si_record_i64($i105);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i106 == 1;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2872, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p2, $p108, .str.49, $i30, $i110, $i85);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i86 == 1;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p1);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 2);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i88);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i30);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p39 := kmalloc_array($i38, 6, 32);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p45, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i52, $i57);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p78 := $p39;
    goto $bb28;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i59, $p60 := 0, $p49;
    goto $bb23;

  $bb23:
    call $i61, $i62, $i63, $p64, $p65, $p66, $p68, $p69, $p70, $p71, $i72, $p73, $p75, $i76, $i77, $i59, $p60, cmdloc_dummy_var_115, cmdloc_dummy_var_116, cmdloc_dummy_var_117 := set_multicast_list_loop_$bb23($p39, $p53, $i61, $i62, $i63, $p64, $p65, $p66, $p68, $p69, $p70, $p71, $i72, $p73, $p75, $i76, $i77, $i59, $p60, cmdloc_dummy_var_115, cmdloc_dummy_var_116, cmdloc_dummy_var_117);
    goto $bb23_last;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i59, 1);
    call {:si_unique_call 1139} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i62 := $mul.i32($i59, 6);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p39, $mul.ref($i63, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p60, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 1140} cmdloc_dummy_var_117 := $memcpy.i8(cmdloc_dummy_var_115, cmdloc_dummy_var_116, $p64, $p66, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_117;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p53);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i72, $i76);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i59, $p60 := $i61, $p69;
    goto $bb25_dummy;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} netif_addr_unlock_bh($p43);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p1);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 4);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i35);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb13;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p1);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i20, 4);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i21);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 160);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i13);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6280;
}



const round_jiffies_relative: ref;

axiom round_jiffies_relative == $sub.ref(0, 459358);

procedure round_jiffies_relative($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies_relative($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} {:cexpr "round_jiffies_relative:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1153} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_addr_lock_bh: ref;

axiom netif_addr_lock_bh == $sub.ref(0, 460390);

procedure netif_addr_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation netif_addr_lock_bh($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(616, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} spin_lock_bh($p1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 461422);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1156} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1157} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const netif_addr_unlock_bh: ref;

axiom netif_addr_unlock_bh == $sub.ref(0, 462454);

procedure netif_addr_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation netif_addr_unlock_bh($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(616, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} spin_unlock_bh($p1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 463486);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_spin_unlock();
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_spin_unlock_bh_10($p0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 464518);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1162} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_10: ref;

axiom ldv_spin_unlock_bh_10 == $sub.ref(0, 465550);

procedure ldv_spin_unlock_bh_10($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_10($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} _raw_spin_unlock_bh($p2);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 466582);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 467614);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1165} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p2 := ldv_malloc($i0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 468646);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} ldv_spin_lock();
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_spin_lock_bh_6($p0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 469678);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_6: ref;

axiom ldv_spin_lock_bh_6 == $sub.ref(0, 470710);

procedure ldv_spin_lock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} _raw_spin_lock_bh($p2);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 471742);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_sync_48: ref;

axiom ldv_cancel_delayed_work_sync_48 == $sub.ref(0, 472774);

procedure ldv_cancel_delayed_work_sync_48($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_48($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1172} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1173} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} disable_work_3($p5);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_delayed_work_sync_49: ref;

axiom ldv_cancel_delayed_work_sync_49 == $sub.ref(0, 473806);

procedure ldv_cancel_delayed_work_sync_49($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_49($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1177} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} disable_work_3($p5);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_work_sync_50: ref;

axiom ldv_cancel_work_sync_50 == $sub.ref(0, 474838);

procedure ldv_cancel_work_sync_50($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_work_sync_50($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i1 := cancel_work_sync($p0);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1181} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} disable_work_3($p0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_flush_workqueue_51: ref;

axiom ldv_flush_workqueue_51 == $sub.ref(0, 475870);

procedure ldv_flush_workqueue_51($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation ldv_flush_workqueue_51($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} flush_workqueue($p0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} call_and_disable_all_3(2);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_52: ref;

axiom ldv_destroy_workqueue_52 == $sub.ref(0, 476902);

procedure ldv_destroy_workqueue_52($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation ldv_destroy_workqueue_52($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} destroy_workqueue($p0);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} call_and_disable_all_3(2);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const rndis_unbind: ref;

axiom rndis_unbind == $sub.ref(0, 477934);

procedure rndis_unbind($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation rndis_unbind($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_unregister: ref;

axiom wiphy_unregister == $sub.ref(0, 478966);

procedure wiphy_unregister($p0: ref);
  free requires assertsPassed;



implementation wiphy_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_free: ref;

axiom wiphy_free == $sub.ref(0, 479998);

procedure wiphy_free($p0: ref);
  free requires assertsPassed;



implementation wiphy_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 481030);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_new: ref;

axiom wiphy_new == $sub.ref(0, 482062);

procedure wiphy_new($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_new($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} {:cexpr "wiphy_new:arg:sizeof_priv"} boogie_si_record_i32($i1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p2 := wiphy_new_nm($p0, $i1, $0.ref);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 483094);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 484126);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1190} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p5 := external_alloc();
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 485158);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 486190);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 487222);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    return;
}



const rndis_wlan_worker: ref;

axiom rndis_wlan_worker == $sub.ref(0, 488254);

procedure rndis_wlan_worker($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.32, $CurrAddr, $M.9, assertsPassed;



implementation rndis_wlan_worker($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1448), 4192)), $mul.ref(0, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1448), 4192)), $mul.ref(1712, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i6 := test_and_clear_bit(0, $p5);
    call {:si_unique_call 1195} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1448), 4192)), $mul.ref(1712, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i9 := test_and_clear_bit(1, $p8);
    call {:si_unique_call 1198} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1448), 4192)), $mul.ref(1712, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i12 := test_and_clear_bit(2, $p11);
    call {:si_unique_call 1201} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} set_multicast_list($p4);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} rndis_wlan_do_link_down_work($p4);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} rndis_wlan_do_link_up_work($p4);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const rndis_device_poller: ref;

axiom rndis_device_poller == $sub.ref(0, 489286);

procedure rndis_device_poller($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $M.8, $CurrAddr, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, assertsPassed;



implementation rndis_device_poller($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $i64: i32;
  var $i65: i1;
  var $i67: i1;
  var $i68: i32;
  var $i66: i32;
  var $p69: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i77: i32;
  var $i26: i32;
  var $i78: i1;
  var $i79: i64;
  var $i80: i64;
  var $i81: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i64;
  var $i91: i1;
  var $i92: i32;
  var $i82: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(0, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i9 := is_associated($p8);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1208} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, 4);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $i28 := rndis_query_oid($p8, 218169862, $p27, $p3);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 1212} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.54);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.55);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.5, $p39);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 3232);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p39, $i42);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p43, 0);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 1216} {:cexpr "tmp___3"} boogie_si_record_i64($i48);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(2904, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i77 := 250;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i26 := $i77;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i26, 249);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i78 == 1);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i26);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i84 := round_jiffies_relative($i83);
    call {:si_unique_call 1231} {:cexpr "tmp___6"} boogie_si_record_i64($i84);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 1232} {:cexpr "j"} boogie_si_record_i32($i85);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, $i26);
    call {:si_unique_call 1233} {:cexpr "__x___0"} boogie_si_record_i32($i86);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i87 == 1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i89 := $i86;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    call {:si_unique_call 1235} {:cexpr "ret___0"} boogie_si_record_i64($i90);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i91 := $sle.i64($i90, 10);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i26;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i82 := $i92;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(1016, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(1024, 1));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i82);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_189 := queue_delayed_work($p94, $p95, $i96);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    return;

  $bb43:
    assume $i91 == 1;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i92 := $i85;
    goto $bb45;

  $bb40:
    assume $i87 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, $i86);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb42;

  $bb37:
    assume $i78 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i26);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i80 := round_jiffies_relative($i79);
    call {:si_unique_call 1228} {:cexpr "tmp___5"} boogie_si_record_i64($i80);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    call {:si_unique_call 1229} {:cexpr "update_jiffies"} boogie_si_record_i32($i81);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb39;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(1720, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i60 := $sle.i32($i59, 25);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb24;

  $bb25:
    assume $i60 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(2904, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i63 := msecs_to_jiffies($i62);
    call {:si_unique_call 1221} {:cexpr "tmp___4"} boogie_si_record_i64($i63);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    call {:si_unique_call 1222} {:cexpr "j"} boogie_si_record_i32($i64);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 250);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i67 := $sle.i32($i64, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i64;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i66 := $i68;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vslice_dummy_var_187 := rndis_set_oid($p8, 218169626, $p69, 4);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, 1025);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.10, $p3);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $p73 := kmalloc($i72, 208);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_188 := rndis_query_oid($p8, 218169879, $p73, $p3);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} kfree($p73);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i77 := $i66;
    goto $bb36;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i75 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i26 := $i66;
    goto $bb14;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i67 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i68 := 1;
    goto $bb32;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i66 := 250;
    goto $bb29;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i51 := level_to_qual($i50);
    call {:si_unique_call 1218} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32($p4, $p53, .str.55, $i28, $i54, $i51);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p1);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i31 := level_to_qual($i30);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(1720, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p1);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} rndis_do_cqm($p8, $i33);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(2864, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := 250;
    goto $bb14;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(2908, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 1000), 4192)), $mul.ref(1008, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_185 := rndis_check_bssid_list($p8, $0.ref, $0.ref);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vslice_dummy_var_186 := rndis_start_bssid_list_scan($p8);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 490318);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 491350);

procedure delayed_work_timer_fn($i0: i64);



const generic_rndis_bind: ref;

axiom generic_rndis_bind == $sub.ref(0, 492382);

procedure generic_rndis_bind($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation generic_rndis_bind($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1237} {:cexpr "generic_rndis_bind:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1238} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1239} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rndis_wlan_get_caps: ref;

axiom rndis_wlan_get_caps == $sub.ref(0, 493414);

procedure rndis_wlan_get_caps($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_wlan_get_caps($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i15: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p2 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p6 := get_rndis_wlan_priv($p0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p4, 36);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i8 := rndis_query_oid($p0, 218169859, $p7, $p4);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1246} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p4, 16);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i41 := rndis_query_oid($p0, 218169634, $p40, $p4);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 1250} {:cexpr "retval"} boogie_si_record_i32($i41);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i42 := $sge.i32($i41, 0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 1776)), $mul.ref(178, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb30:
    assume $i42 == 1;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, .str.1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, .str.89);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.90);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.5, $p48);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 3157);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p48, $i51);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p52, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1252} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 1776)), $mul.ref(178, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $i71);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i58 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.i32($p5, $p60, .str.90, $i62, $i64, $i66, $i68);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 1247} {:cexpr "n"} boogie_si_record_i32($i11);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 8);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i13);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb9;

  $bb9:
    call $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $i15 := rndis_wlan_get_caps_loop_$bb9($p2, $p6, $i13, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $p33, $i34, $i35, $p36, $i37, $i38, $i15);
    goto $bb9_last;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref($i16, 4));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i15, 1);
    call {:si_unique_call 1248} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, $i13);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb26:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb26_dummy;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 4);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 2);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i13 := 8;
    goto $bb5;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb26_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 494446);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_register: ref;

axiom wiphy_register == $sub.ref(0, 495478);

procedure wiphy_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wiphy_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1254} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 496510);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_sync_43: ref;

axiom ldv_cancel_delayed_work_sync_43 == $sub.ref(0, 497542);

procedure ldv_cancel_delayed_work_sync_43($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_43($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1257} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1258} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} disable_work_3($p5);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_delayed_work_sync_44: ref;

axiom ldv_cancel_delayed_work_sync_44 == $sub.ref(0, 498574);

procedure ldv_cancel_delayed_work_sync_44($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_delayed_work_sync_44($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1261} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1262} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} disable_work_3($p5);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_cancel_work_sync_45: ref;

axiom ldv_cancel_work_sync_45 == $sub.ref(0, 499606);

procedure ldv_cancel_work_sync_45($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation ldv_cancel_work_sync_45($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i1 := cancel_work_sync($p0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1265} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1266} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} disable_work_3($p0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_flush_workqueue_46: ref;

axiom ldv_flush_workqueue_46 == $sub.ref(0, 500638);

procedure ldv_flush_workqueue_46($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation ldv_flush_workqueue_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} flush_workqueue($p0);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} call_and_disable_all_3(2);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_47: ref;

axiom ldv_destroy_workqueue_47 == $sub.ref(0, 501670);

procedure ldv_destroy_workqueue_47($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $CurrAddr, assertsPassed;



implementation ldv_destroy_workqueue_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} destroy_workqueue($p0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} call_and_disable_all_3(2);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const rndis_do_cqm: ref;

axiom rndis_do_cqm == $sub.ref(0, 502702);

procedure rndis_do_cqm($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation rndis_do_cqm($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i20: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} {:cexpr "rndis_do_cqm:arg:rssi"} boogie_si_record_i32($i1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p2 := get_rndis_wlan_priv($p0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1724, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i6 := $sge.i32($i1, 0);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1732, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 1274} {:cexpr "last_event"} boogie_si_record_i32($i11);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1724, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1275} {:cexpr "thold"} boogie_si_record_i32($i13);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1728, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1276} {:cexpr "hyst"} boogie_si_record_i32($i15);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, $i13);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i1, $i13);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i11, 0);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i22 == 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i11, $i15);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, $i1);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 4192)), $mul.ref(1732, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i1);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} cfg80211_cqm_rssi_notify($p27, $i20, 208);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb24;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 0);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i17 == 1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i11, $i15);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 503734);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 1280} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 504766);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1281} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1282} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1283} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cfg80211_cqm_rssi_notify: ref;

axiom cfg80211_cqm_rssi_notify == $sub.ref(0, 505798);

procedure cfg80211_cqm_rssi_notify($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation cfg80211_cqm_rssi_notify($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} {:cexpr "cfg80211_cqm_rssi_notify:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1285} {:cexpr "cfg80211_cqm_rssi_notify:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    return;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 506830);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1287} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1288} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.31, $p2);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const rndis_wlan_do_link_up_work: ref;

axiom rndis_wlan_do_link_up_work == $sub.ref(0, 507862);

procedure rndis_wlan_do_link_up_work($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.32, $CurrAddr, assertsPassed;



implementation rndis_wlan_do_link_up_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p67: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $i82: i1;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i24;
  var $i98: i24;
  var $i99: i24;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $i115: i1;
  var $i116: i8;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i8;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var vslice_dummy_var_190: i1;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p4 := get_rndis_wlan_priv($p0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    call {:si_unique_call 1294} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i76);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1296} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i76, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 1312} {:cexpr "tmp___2"} boogie_si_record_i64($i85);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p68, $p69, $i70, $i71, $p72 := $0.ref, $0.ref, 0, 0, $0.ref;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i88 := get_bssid($p0, $p87);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 1309} {:cexpr "ret"} boogie_si_record_i32($i88);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p91, .str.1);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p92, .str.2);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p93, .str);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p94, .str.3);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i97 := $load.i24($M.5, $p96);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i98 := $and.i24($i97, $sub.i24(0, 262144));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i99 := $or.i24($i98, 2807);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p96, $i99);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p100, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.6, $p101);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i64($i102);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i104 := $and.i64($i103, 1);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i105 := ldv__builtin_expect($i104, 0);
    call {:si_unique_call 1315} {:cexpr "tmp___3"} boogie_si_record_i64($i105);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p2, 0);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_191 := rndis_check_bssid_list($p0, $p112, $p2);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i115 := is_zero_ether_addr($p114);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i8($i115);
    call {:si_unique_call 1319} {:cexpr "tmp___4"} boogie_si_record_i8($i116);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i8.i1($i116);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i125 == 1);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p72);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} kfree($p145);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p146, 1);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p1);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_120 := $M.0;
    cmdloc_dummy_var_121 := $M.0;
    call {:si_unique_call 1325} cmdloc_dummy_var_122 := $memcpy.i8(cmdloc_dummy_var_120, cmdloc_dummy_var_121, $p148, $p149, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_122;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} usbnet_resume_rx($p0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} netif_carrier_on($p151);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb68:
    assume $i140 == 1;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p141 := get_current_channel($p0, $0.ref);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} cfg80211_ibss_joined($p143, $p144, $p141, 208);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i125 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i8.i1($i11);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i126 == 1);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i70);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i71);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} cfg80211_connect_result($p128, $p129, $p69, $i130, $p68, $i131, 0, 208);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i126 == 1;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p132 := get_current_channel($p0, $0.ref);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p1);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i70);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i137 := $zext.i32.i64($i71);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} cfg80211_roamed($p134, $p132, $p135, $p69, $i136, $p68, $i137, 208);
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i119 == 1;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.13, $p2);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i120);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i121 == 1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p1);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} rndis_wlan_craft_connected_bss($p0, $p122, $p72);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb58;

  $bb53:
    assume $i117 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb55;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i106 == 1;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i11);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $p111 := (if $i110 == 1 then .str.4 else .str.5);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} __dynamic_netdev_dbg.ref.ref.ref.ref.ref($p3, $p108, .str.3, $p109, $p111);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i89 == 1;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p1);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 1313} cmdloc_dummy_var_119 := $memset.i8(cmdloc_dummy_var_118, $p90, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i86 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb41:
    assume $i81 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} warn_slowpath_null(.str, 2799);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p15 := kmalloc(1025, 208);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i24 := get_association_info($p0, $p16, 1025);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 1300} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p16);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} kfree($p67);
    assume {:verifier.code 0} true;
    $p62, $p63, $i64, $i65, $p66 := $0.ref, $0.ref, 0, 0, $0.ref;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p68, $p69, $i70, $i71, $p72 := $p62, $p63, $i64, $i65, $p66;
    goto $bb40;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 1301} {:cexpr "req_ie_len"} boogie_si_record_i32($i27);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, 1025);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p42, $i43 := $0.ref, $i29;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 1305} {:cexpr "resp_ie_len"} boogie_si_record_i32($i45);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 1025);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p60, $i61 := $0.ref, $i47;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p62, $p63, $i64, $i65, $p66 := $p60, $p42, $i43, $i61, $p15;
    goto $bb39;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    call {:si_unique_call 1306} {:cexpr "offset"} boogie_si_record_i32($i50);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, 1025);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i50;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p16);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i52);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p53, $mul.ref($i54, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i52, $i47);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i57 := $ugt.i32($i56, 1025);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i47;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p60, $i61 := $p55, $i59;
    goto $bb38;

  $bb35:
    assume $i57 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(1025, $i52);
    call {:si_unique_call 1307} {:cexpr "resp_ie_len"} boogie_si_record_i32($i58);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb37;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i52 := 1025;
    goto $bb34;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i47 := 1025;
    goto $bb29;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    call {:si_unique_call 1303} {:cexpr "offset"} boogie_si_record_i32($i32);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i32($i32, 1025);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p16);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i34);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i34, $i29);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 1025);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i29;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p42, $i43 := $p37, $i41;
    goto $bb26;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(1025, $i34);
    call {:si_unique_call 1304} {:cexpr "req_ie_len"} boogie_si_record_i32($i40);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb25;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i34 := 1025;
    goto $bb22;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i29 := 1025;
    goto $bb17;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1712, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} set_bit(0, $p19);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1016, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(1472, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} vslice_dummy_var_190 := queue_work($p21, $p22);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;
}



const rndis_wlan_do_link_down_work: ref;

axiom rndis_wlan_do_link_down_work == $sub.ref(0, 508894);

procedure rndis_wlan_do_link_down_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_wlan_do_link_down_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p1 := get_rndis_wlan_priv($p0);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} netif_carrier_off($p12);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(2920, 1));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4192)), $mul.ref(2921, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} eth_zero_addr($p7);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_192 := deauthenticate($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} cfg80211_disconnected($p10, 0, $0.ref, 0, 1, 208);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const cfg80211_disconnected: ref;

axiom cfg80211_disconnected == $sub.ref(0, 509926);

procedure cfg80211_disconnected($p0: ref, $i1: i16, $p2: ref, $i3: i64, $i4: i1, $i5: i32);
  free requires assertsPassed;



implementation cfg80211_disconnected($p0: ref, $i1: i16, $p2: ref, $i3: i64, $i4: i1, $i5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "cfg80211_disconnected:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1336} {:cexpr "cfg80211_disconnected:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1337} {:cexpr "cfg80211_disconnected:arg:arg4"} boogie_si_record_i1($i4);
    call {:si_unique_call 1338} {:cexpr "cfg80211_disconnected:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    return;
}



const get_association_info: ref;

axiom get_association_info == $sub.ref(0, 510958);

procedure get_association_info($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation get_association_info($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, $i2);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i5 := rndis_query_oid($p0, 218169631, $p4, $p3);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 1341} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 511990);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    return;
}



const rndis_wlan_craft_connected_bss: ref;

axiom rndis_wlan_craft_connected_bss == $sub.ref(0, 513022);

procedure rndis_wlan_craft_connected_bss($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.32, $M.10, $M.0, $M.11, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation rndis_wlan_craft_connected_bss($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $p40: ref;
  var $i41: i16;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i16;
  var $i42: i16;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i16;
  var $i131: i32;
  var $i132: i16;
  var $i133: i32;
  var $i134: i16;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p3 := $alloc($mul.ref(36, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $p6 := $alloc($mul.ref(34, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p11 := get_rndis_wlan_priv($p0);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p4, 0);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p7, 4);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p5);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i13 := rndis_query_oid($p0, 218169862, $p12, $p7);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 1353} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p5);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i15 := level_to_qual($i14);
    call {:si_unique_call 1355} {:cexpr "signal"} boogie_si_record_i32($i15);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, .str.17);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.18);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.5, $p21);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 2669);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p21, $i24);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1357} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 4192)), $mul.ref(2916, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i46 := (if $i45 == 1 then 1 else 2);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    call {:si_unique_call 1362} {:cexpr "capability"} boogie_si_record_i16($i47);
    assume {:verifier.code 0} true;
    $i42 := $i47;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p48 := get_current_channel($p0, $p4);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p7, 36);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p3);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.0;
    call {:si_unique_call 1365} cmdloc_dummy_var_124 := $memset.i8(cmdloc_dummy_var_123, $p53, 0, 36, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_124;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $i55 := rndis_query_oid($p0, 218169602, $p54, $p7);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 1367} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, .str.1);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p57, .str.17);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p58, .str);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p59, .str.20);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.5, $p61);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 2695);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p61, $i64);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 1369} {:cexpr "tmp___2"} boogie_si_record_i64($i70);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i32($i79, 32);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 34)), $mul.ref(0, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 34)), $mul.ref(1, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, $i85);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p6);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(2, 1));
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.0;
    cmdloc_dummy_var_126 := $M.0;
    call {:si_unique_call 1371} cmdloc_dummy_var_127 := $memcpy.i8(cmdloc_dummy_var_125, cmdloc_dummy_var_126, $p88, $p90, $i93, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_127;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 2);
    call {:si_unique_call 1372} {:cexpr "ie_len"} boogie_si_record_i32($i96);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, .str.1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p98, .str.17);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.21);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.5, $p102);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 2713);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p102, $i105);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p106, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.6, $p107);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1374} {:cexpr "tmp___3"} boogie_si_record_i64($i111);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i42);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.32, $p4);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i16($i131);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p6);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i96);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p137 := cfg80211_inform_bss($p128, $p48, 0, $p1, 0, $i130, $i134, $p135, $i136, $i15, 208);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} cfg80211_put_bss($p140, $p137);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i112 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p48);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i116 == 1);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(0, 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i64.i32(0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i32($i42);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.32, $p4);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.ref.i32.i32.i32.i32.ref.i32($p10, $p114, .str.21, .str.17, $i120, $p1, $i121, $i122, $i123, $i96, $p125, $i15);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i116 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p48, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.0, $p117);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb21;

  $bb14:
    assume $i80 == 1;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 32);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i71 == 1;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(0, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.ref($p9, $p73, .str.20, .str.17, $i55, $i75, $p77);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} netdev_warn.ref.ref.ref($p52, .str.19, .str.17);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(26, 1)), $mul.ref(0, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    call {:si_unique_call 1361} {:cexpr "capability"} boogie_si_record_i16($i41);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb6;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p5);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i33 := level_to_qual($i32);
    call {:si_unique_call 1359} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p5);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} __dynamic_netdev_dbg.ref.ref.ref.ref.i32.i32.i32($p8, $p35, .str.18, .str.17, $i13, $i36, $i33);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const cfg80211_connect_result: ref;

axiom cfg80211_connect_result == $sub.ref(0, 514054);

procedure cfg80211_connect_result($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $i5: i64, $i6: i16, $i7: i32);
  free requires assertsPassed;



implementation cfg80211_connect_result($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $i5: i64, $i6: i16, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} {:cexpr "cfg80211_connect_result:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1379} {:cexpr "cfg80211_connect_result:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1380} {:cexpr "cfg80211_connect_result:arg:arg6"} boogie_si_record_i16($i6);
    call {:si_unique_call 1381} {:cexpr "cfg80211_connect_result:arg:arg7"} boogie_si_record_i32($i7);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    return;
}



const get_current_channel: ref;

axiom get_current_channel == $sub.ref(0, 515086);

procedure get_current_channel($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.32, $CurrAddr, assertsPassed;



implementation get_current_channel($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p5 := get_rndis_wlan_priv($p0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p3, 32);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i7 := rndis_query_oid($p0, 218169873, $p6, $p3);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 1387} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.22);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.23);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 1330);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1389} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i7, 0);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4192)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i32($i32, 1000);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p34 := ieee80211_get_channel($p30, $i33);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $p34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p1, $i40);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} __dynamic_netdev_dbg.ref.ref.ref.ref.i32($p4, $p25, .str.23, .str.22, $i7);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const cfg80211_roamed: ref;

axiom cfg80211_roamed == $sub.ref(0, 516118);

procedure cfg80211_roamed($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $i6: i64, $i7: i32);
  free requires assertsPassed;



implementation cfg80211_roamed($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $i6: i64, $i7: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} {:cexpr "cfg80211_roamed:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 1393} {:cexpr "cfg80211_roamed:arg:arg6"} boogie_si_record_i64($i6);
    call {:si_unique_call 1394} {:cexpr "cfg80211_roamed:arg:arg7"} boogie_si_record_i32($i7);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    return;
}



const cfg80211_ibss_joined: ref;

axiom cfg80211_ibss_joined == $sub.ref(0, 517150);

procedure cfg80211_ibss_joined($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation cfg80211_ibss_joined($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "cfg80211_ibss_joined:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 518182);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    return;
}



const wiphy_new_nm: ref;

axiom wiphy_new_nm == $sub.ref(0, 519214);

procedure wiphy_new_nm($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation wiphy_new_nm($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} {:cexpr "wiphy_new_nm:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p3 := external_alloc();
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const bcm4320a_early_init: ref;

axiom bcm4320a_early_init == $sub.ref(0, 520246);

procedure bcm4320a_early_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bcm4320a_early_init($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} rndis_copy_module_params($p0, 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const unknown_early_init: ref;

axiom unknown_early_init == $sub.ref(0, 521278);

procedure unknown_early_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unknown_early_init($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} rndis_copy_module_params($p0, 0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 522310);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p1 := calloc(1, $i0);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1402} __VERIFIER_assume($i4);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 523342);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1404} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_128 := $M.33;
    call {:si_unique_call 1405} cmdloc_dummy_var_129 := $memset.i8(cmdloc_dummy_var_128, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.33 := cmdloc_dummy_var_129;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_driver_info_6: ref;

axiom ldv_initialize_driver_info_6 == $sub.ref(0, 524374);

procedure ldv_initialize_driver_info_6();
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p0 := ldv_init_zalloc(232);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p2 := ldv_init_zalloc(1456);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.35 := $p2;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p4 := ldv_init_zalloc(1560);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $M.36 := $p4;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 525406);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.18, $M.20;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1409} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1410} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1411} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 1412} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_driver_info_7: ref;

axiom ldv_initialize_driver_info_7 == $sub.ref(0, 526438);

procedure ldv_initialize_driver_info_7();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.39, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_7()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p0 := ldv_init_zalloc(232);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p2 := ldv_init_zalloc(1456);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.38 := $p2;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p4 := ldv_init_zalloc(1560);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $M.39 := $p4;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 527470);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1416} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1417} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1418} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1419} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_4: ref;

axiom ldv_usb_driver_4 == $sub.ref(0, 528502);

procedure ldv_usb_driver_4();
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation ldv_usb_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_driver_info_5: ref;

axiom ldv_initialize_driver_info_5 == $sub.ref(0, 529534);

procedure ldv_initialize_driver_info_5();
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p0 := ldv_init_zalloc(232);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p2 := ldv_init_zalloc(1456);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $M.46 := $p2;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p4 := ldv_init_zalloc(1560);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.47 := $p4;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_3: ref;

axiom invoke_work_3 == $sub.ref(0, 530566);

procedure invoke_work_3();
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $M.16, $M.18, $M.20, $CurrAddr, assertsPassed;



implementation invoke_work_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1424} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1425} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1426} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_stop();
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i21 := $M.20;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i23 := $M.20;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.20 := 4;
    call {:si_unique_call 1436} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(4);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p25 := $M.15;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} rndis_get_scan_results($p25);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1438} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i16 := $M.18;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i18 := $M.18;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 1433} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(4);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p20 := $M.15;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} rndis_get_scan_results($p20);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i11 := $M.16;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i13 := $M.16;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 1430} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(4);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p15 := $M.15;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} rndis_get_scan_results($p15);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1432} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i6 := $M.14;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 1427} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(4);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p10 := $M.15;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} rndis_get_scan_results($p10);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1429} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 531598);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 532630);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.48, $M.49, $M.50, $M.51;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1440} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1441} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1442} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1443} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 533662);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.48, $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.49, $M.50, $M.51, $M.10, $M.11, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.32, $CurrAddr, $M.9, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1444} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1445} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1446} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_stop();
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i21 := $M.51;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i23 := $M.51;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.51 := 4;
    call {:si_unique_call 1456} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p25 := $M.52;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} rndis_wlan_worker($p25);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i16 := $M.50;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i18 := $M.50;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1453} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p20 := $M.52;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} rndis_wlan_worker($p20);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1455} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i11 := $M.49;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i13 := $M.49;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1450} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p15 := $M.52;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} rndis_wlan_worker($p15);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1452} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i6 := $M.48;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i8 := $M.48;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.48 := 4;
    call {:si_unique_call 1447} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p10 := $M.52;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} rndis_wlan_worker($p10);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1449} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_net_device_ops_8: ref;

axiom ldv_net_device_ops_8 == $sub.ref(0, 534694);

procedure ldv_net_device_ops_8();
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr;



implementation ldv_net_device_ops_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.53 := $p0;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_cfg80211_ops_9: ref;

axiom ldv_initialize_cfg80211_ops_9 == $sub.ref(0, 535726);

procedure ldv_initialize_cfg80211_ops_9();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $CurrAddr;



implementation ldv_initialize_cfg80211_ops_9()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p0 := ldv_init_zalloc(976);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p2 := ldv_init_zalloc(16);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p4 := ldv_init_zalloc(3008);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.56 := $p4;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p6 := ldv_init_zalloc(1792);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $M.57 := $p6;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p8 := ldv_init_zalloc(840);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $M.58 := $p8;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 536758);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.40, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $M.11, $M.0, $M.12, $M.13, $M.8, $M.41, $M.42, $M.43, $CurrAddr, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, assertsPassed;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1468} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_stop();
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i21 := $M.43;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i23 := $M.43;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.43 := 4;
    call {:si_unique_call 1478} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p25 := $M.59;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} rndis_device_poller($p25);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1480} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i16 := $M.42;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i18 := $M.42;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.42 := 4;
    call {:si_unique_call 1475} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p20 := $M.59;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} rndis_device_poller($p20);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1477} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i11 := $M.41;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i13 := $M.41;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 1472} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p15 := $M.59;
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} rndis_device_poller($p15);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1474} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i6 := $M.40;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i8 := $M.40;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 1469} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p10 := $M.59;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} rndis_device_poller($p10);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1471} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 537790);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.60, $M.14, $M.16, $M.18, $M.20, $M.61, $M.62, $M.63, $M.40, $M.41, $M.42, $M.43, $M.64, $M.65, $M.48, $M.49, $M.50, $M.51, $M.66, $M.67, $M.68, $M.69, $M.70, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $M.71, $M.12, $M.13, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.22, $M.78, $M.79, $M.80, $M.45, $M.46, $M.47, $M.54, $M.55, $M.56, $M.57, $M.58, $M.37, $M.38, $M.39, $M.34, $M.35, $M.36, $M.53, $M.81, $M.52, $M.44, $M.59, $M.15, $M.17, $M.19, $M.21, $M.9, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.159, $M.160, $M.30, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.252, $M.253, $CurrAddr, $M.32, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p67: ref;
  var $p69: ref;
  var $p74: ref;
  var $p76: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i248: i1;
  var $i250: i32;
  var $i251: i1;
  var $i253: i32;
  var $i254: i1;
  var $i256: i32;
  var $i257: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i303: i32;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $p308: ref;
  var $i309: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $p314: ref;
  var $i315: i32;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $p342: ref;
  var $i343: i32;
  var $i344: i32;
  var $i345: i1;
  var $i346: i32;
  var $i347: i32;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $p371: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $p376: ref;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $p386: ref;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i394: i32;
  var $i395: i1;
  var $p396: ref;
  var $i397: i32;
  var $i398: i1;
  var $p399: ref;
  var $i400: i32;
  var $i401: i1;
  var $i403: i32;
  var $i404: i1;
  var $i406: i32;
  var $i407: i1;
  var $i409: i32;
  var $i410: i1;
  var $i412: i32;
  var $i413: i1;
  var $i414: i32;
  var $i415: i1;
  var $i416: i1;
  var $i417: i1;
  var $i418: i1;
  var $i419: i1;
  var $i420: i1;
  var $i421: i1;
  var $i422: i1;
  var $i423: i1;
  var $i424: i1;
  var $i425: i1;
  var $i426: i1;
  var $i427: i1;
  var $i428: i1;
  var $i429: i1;
  var $i430: i1;
  var $i431: i1;
  var $i432: i1;
  var $i433: i1;
  var $i434: i1;
  var $i435: i1;
  var $i436: i1;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $p440: ref;
  var $i441: i8;
  var $i442: i1;
  var $i443: i32;
  var $i445: i32;
  var $i446: i1;
  var $p447: ref;
  var $p448: ref;
  var $i449: i8;
  var $i450: i1;
  var $i451: i32;
  var $i453: i32;
  var $i454: i1;
  var $p455: ref;
  var $p456: ref;
  var $i457: i8;
  var $i458: i1;
  var $i459: i32;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $p464: ref;
  var $i465: i8;
  var $i466: i32;
  var $i467: i8;
  var $i468: i8;
  var $i469: i1;
  var $i471: i32;
  var $i472: i1;
  var $p473: ref;
  var $p474: ref;
  var $i475: i8;
  var $i476: i32;
  var $i477: i8;
  var $i478: i8;
  var $i479: i1;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $p484: ref;
  var $i485: i8;
  var $i486: i32;
  var $i487: i8;
  var $i488: i8;
  var $i489: i1;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $p494: ref;
  var $i495: i32;
  var $i497: i32;
  var $i498: i1;
  var $p499: ref;
  var $p500: ref;
  var $i501: i32;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $i507: i32;
  var $i509: i32;
  var $i510: i1;
  var $p511: ref;
  var $p512: ref;
  var $i513: i8;
  var $i514: i32;
  var $i515: i8;
  var $i516: i8;
  var $i517: i1;
  var $i518: i8;
  var $i519: i1;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $p524: ref;
  var $i525: i8;
  var $i526: i32;
  var $i527: i8;
  var $i528: i8;
  var $i529: i1;
  var $i530: i8;
  var $i531: i1;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $p536: ref;
  var $i537: i8;
  var $i538: i32;
  var $i539: i8;
  var $i540: i8;
  var $i541: i1;
  var $i542: i8;
  var $i543: i1;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $i549: i32;
  var $i550: i1;
  var $p551: ref;
  var $i553: i32;
  var $i554: i1;
  var $p555: ref;
  var $i557: i32;
  var $i558: i1;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $i569: i32;
  var $i570: i1;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $i575: i32;
  var $i576: i1;
  var $p577: ref;
  var $p578: ref;
  var $i579: i8;
  var $i580: i32;
  var $i581: i8;
  var $i582: i8;
  var $i583: i1;
  var $i585: i32;
  var $i586: i1;
  var $p587: ref;
  var $p588: ref;
  var $i589: i8;
  var $i590: i32;
  var $i591: i8;
  var $i592: i8;
  var $i593: i1;
  var $i595: i32;
  var $i596: i1;
  var $p597: ref;
  var $p598: ref;
  var $i599: i8;
  var $i600: i32;
  var $i601: i8;
  var $i602: i8;
  var $i603: i1;
  var $i605: i32;
  var $i606: i1;
  var $p607: ref;
  var $p608: ref;
  var $i609: i32;
  var $p610: ref;
  var $i612: i32;
  var $i613: i1;
  var $p614: ref;
  var $p615: ref;
  var $i616: i32;
  var $p617: ref;
  var $i619: i32;
  var $i620: i1;
  var $p621: ref;
  var $p622: ref;
  var $i623: i32;
  var $p624: ref;
  var $i626: i32;
  var $i627: i1;
  var $p628: ref;
  var $p629: ref;
  var $i630: i32;
  var $i631: i32;
  var $i633: i32;
  var $i634: i1;
  var $p635: ref;
  var $p636: ref;
  var $i637: i32;
  var $i638: i32;
  var $i640: i32;
  var $i641: i1;
  var $p642: ref;
  var $p643: ref;
  var $i644: i32;
  var $i645: i32;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $p650: ref;
  var $i651: i32;
  var $i652: i32;
  var $i654: i32;
  var $i655: i1;
  var $p656: ref;
  var $p657: ref;
  var $i658: i32;
  var $i659: i32;
  var $i661: i32;
  var $i662: i1;
  var $p663: ref;
  var $p664: ref;
  var $i665: i32;
  var $i666: i32;
  var $i668: i32;
  var $i669: i1;
  var $p670: ref;
  var $p671: ref;
  var $i672: i32;
  var $i673: i32;
  var $i674: i1;
  var $i675: i32;
  var $i676: i1;
  var $p677: ref;
  var $p678: ref;
  var $i680: i32;
  var $i681: i1;
  var $p682: ref;
  var $p683: ref;
  var $i685: i32;
  var $i686: i1;
  var $p687: ref;
  var $p688: ref;
  var $i690: i32;
  var $i691: i1;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $i696: i32;
  var $i697: i1;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $i702: i32;
  var $i703: i1;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i708: i32;
  var $i709: i1;
  var $p710: ref;
  var $p711: ref;
  var $i713: i32;
  var $i714: i1;
  var $p715: ref;
  var $p716: ref;
  var $i718: i32;
  var $i719: i1;
  var $p720: ref;
  var $p721: ref;
  var $i723: i32;
  var $i724: i1;
  var $p725: ref;
  var $p726: ref;
  var $i728: i32;
  var $i729: i1;
  var $p730: ref;
  var $p731: ref;
  var $i733: i32;
  var $i734: i1;
  var $p735: ref;
  var $p736: ref;
  var $i738: i32;
  var $i739: i1;
  var $p740: ref;
  var $i741: i32;
  var $i743: i32;
  var $i744: i1;
  var $p745: ref;
  var $i746: i32;
  var $i748: i32;
  var $i749: i1;
  var $p750: ref;
  var $i751: i32;
  var $i753: i32;
  var $i754: i1;
  var $p755: ref;
  var $p756: ref;
  var $i757: i16;
  var $i758: i32;
  var $i759: i16;
  var $i761: i32;
  var $i762: i1;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $i767: i32;
  var $i768: i1;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $i773: i32;
  var $i774: i1;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $i779: i32;
  var $i780: i1;
  var $p781: ref;
  var $p782: ref;
  var $i784: i32;
  var $i785: i1;
  var $p786: ref;
  var $p787: ref;
  var $i789: i32;
  var $i790: i1;
  var $p791: ref;
  var $p792: ref;
  var $i794: i32;
  var $i795: i1;
  var $i797: i32;
  var $i798: i32;
  var $i799: i32;
  var $i800: i1;
  var $i802: i32;
  var $i803: i32;
  var $i804: i32;
  var $i805: i1;
  var $i806: i32;
  var $i807: i1;
  var $i808: i32;
  var $i809: i1;
  var $i810: i1;
  var $i811: i1;
  var $i812: i1;
  var $i813: i1;
  var $i814: i1;
  var $i815: i1;
  var $i816: i1;
  var $i817: i1;
  var $i818: i1;
  var $i819: i32;
  var $i820: i1;
  var $p821: ref;
  var $i822: i32;
  var $i823: i32;
  var $i824: i1;
  var $i825: i32;
  var $i826: i1;
  var $p827: ref;
  var $i829: i32;
  var $i830: i1;
  var $p831: ref;
  var $i833: i32;
  var $i834: i1;
  var $p835: ref;
  var $i837: i32;
  var $i838: i1;
  var $p839: ref;
  var $i841: i32;
  var $i842: i1;
  var $p843: ref;
  var $i844: i32;
  var $i845: i1;
  var $p846: ref;
  var $i847: i32;
  var $i848: i1;
  var $p849: ref;
  var $i850: i32;
  var $i851: i1;
  var $p852: ref;
  var $i854: i32;
  var $i855: i1;
  var $p856: ref;
  var $i858: i32;
  var $i859: i1;
  var $p860: ref;
  var $i862: i32;
  var $i863: i1;
  var $p864: ref;
  var $i866: i32;
  var $i867: i1;
  var $p868: ref;
  var $i869: i32;
  var $i870: i1;
  var $p871: ref;
  var $i872: i32;
  var $i873: i1;
  var $p874: ref;
  var $i875: i32;
  var $i876: i1;
  var $i877: i32;
  var $i878: i32;
  var $i879: i1;
  var $i880: i32;
  var $i881: i32;
  var $i882: i32;
  var $i883: i32;
  var $i884: i32;
  var $i885: i1;
  var $i887: i32;
  var $i888: i32;
  var $i889: i32;
  var $i890: i32;
  var $i891: i32;
  var $i892: i1;
  var $i893: i32;
  var $i894: i1;
  var $i895: i32;
  var $i896: i1;
  var $i897: i1;
  var $i898: i1;
  var $i899: i1;
  var $i900: i1;
  var $i901: i1;
  var $i902: i32;
  var $i903: i1;
  var $p904: ref;
  var $i905: i32;
  var $i906: i32;
  var $i907: i1;
  var $i908: i32;
  var $i909: i32;
  var $i910: i32;
  var $i911: i1;
  var $p912: ref;
  var $p913: ref;
  var $i914: i32;
  var $i916: i32;
  var $i917: i1;
  var $p918: ref;
  var $i919: i32;
  var $i920: i32;
  var $i921: i1;
  var $i922: i32;
  var $i923: i1;
  var $i924: i32;
  var $i925: i1;
  var $p926: ref;
  var $i927: i32;
  var $i928: i32;
  var $i929: i32;
  var $i930: i1;
  var $i931: i32;
  var $i932: i1;
  var $p933: ref;
  var $i934: i32;
  var $i935: i32;
  var $i936: i32;
  var $i937: i1;
  var $i938: i32;
  var $i939: i32;
  var $i940: i1;
  var $i941: i32;
  var $i942: i1;
  var $i943: i32;
  var $i944: i1;
  var $i945: i1;
  var $i946: i1;
  var $i947: i32;
  var $i948: i1;
  var $i949: i32;
  var $i950: i1;
  var $i951: i32;
  var $i952: i1;
  var $i953: i32;
  var $i954: i32;
  var $i955: i1;
  var $i956: i32;
  var $i957: i1;
  var $i958: i32;
  var $i959: i1;
  var $i960: i32;
  var $i961: i1;
  var $i962: i1;
  var $i963: i1;
  var $i964: i1;
  var $i965: i1;
  var $i966: i1;
  var $i967: i1;
  var $i968: i1;
  var $i969: i1;
  var $i970: i1;
  var $i971: i1;
  var $i972: i1;
  var $i973: i1;
  var $i974: i32;
  var $i975: i1;
  var $p976: ref;
  var $i977: i32;
  var $i978: i32;
  var $i979: i1;
  var $p980: ref;
  var $i981: i32;
  var $i982: i32;
  var $i983: i1;
  var $p984: ref;
  var $i985: i32;
  var $i986: i32;
  var $i987: i1;
  var $p988: ref;
  var $i989: i32;
  var $i990: i32;
  var $i991: i1;
  var $p992: ref;
  var $p993: ref;
  var $i994: i32;
  var $i996: i32;
  var $i997: i1;
  var $p998: ref;
  var $p999: ref;
  var $i1000: i32;
  var $i1002: i32;
  var $i1003: i1;
  var $p1004: ref;
  var $p1005: ref;
  var $i1006: i32;
  var $i1008: i32;
  var $i1009: i1;
  var $p1010: ref;
  var $p1011: ref;
  var $i1012: i32;
  var $i1014: i32;
  var $i1015: i1;
  var $p1016: ref;
  var $i1018: i32;
  var $i1019: i1;
  var $p1020: ref;
  var $i1022: i32;
  var $i1023: i1;
  var $p1024: ref;
  var $i1026: i32;
  var $i1027: i1;
  var $p1028: ref;
  var $i1030: i32;
  var $i1031: i1;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i32;
  var $i1035: i32;
  var $i1036: i32;
  var $i1037: i1;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i32;
  var $i1041: i32;
  var $i1042: i1;
  var $i1043: i32;
  var $i1044: i32;
  var $i1045: i32;
  var $i1046: i1;
  var $p1047: ref;
  var $i1049: i32;
  var $i1050: i1;
  var $p1051: ref;
  var $i1053: i32;
  var $i1054: i1;
  var $p1055: ref;
  var $i1057: i32;
  var $i1058: i1;
  var $p1059: ref;
  var $i1061: i32;
  var $i1062: i1;
  var $p1063: ref;
  var $i1065: i32;
  var $i1066: i1;
  var $p1067: ref;
  var $p1068: ref;
  var $i1070: i32;
  var $i1071: i1;
  var $p1072: ref;
  var $p1073: ref;
  var $i1075: i32;
  var $i1076: i1;
  var $p1077: ref;
  var $p1078: ref;
  var $i1080: i32;
  var $i1081: i1;
  var $p1082: ref;
  var $p1083: ref;
  var $i1085: i32;
  var $i1086: i1;
  var $p1087: ref;
  var $i1088: i32;
  var $i1089: i1;
  var $p1090: ref;
  var $i1091: i32;
  var $i1092: i1;
  var $p1093: ref;
  var $i1094: i32;
  var $i1095: i1;
  var $p1096: ref;
  var $i1097: i32;
  var $i1098: i1;
  var $i1100: i32;
  var $i1101: i1;
  var $i1103: i32;
  var $i1104: i1;
  var $i1106: i32;
  var $i1107: i1;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: ref;
  var vslice_dummy_var_198: ref;
  var vslice_dummy_var_199: ref;
  var vslice_dummy_var_200: ref;
  var vslice_dummy_var_201: ref;
  var vslice_dummy_var_202: ref;
  var vslice_dummy_var_203: ref;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: ref;
  var vslice_dummy_var_206: ref;
  var vslice_dummy_var_207: ref;
  var vslice_dummy_var_208: ref;
  var vslice_dummy_var_209: ref;
  var vslice_dummy_var_210: ref;
  var vslice_dummy_var_211: ref;
  var vslice_dummy_var_212: ref;
  var vslice_dummy_var_213: ref;
  var vslice_dummy_var_214: ref;
  var vslice_dummy_var_215: ref;
  var vslice_dummy_var_216: ref;
  var vslice_dummy_var_217: ref;
  var vslice_dummy_var_218: ref;
  var vslice_dummy_var_219: ref;
  var vslice_dummy_var_220: ref;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: ref;
  var vslice_dummy_var_239: ref;
  var vslice_dummy_var_240: ref;
  var vslice_dummy_var_241: ref;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: ref;
  var vslice_dummy_var_324: ref;
  var vslice_dummy_var_325: ref;
  var vslice_dummy_var_326: ref;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;

  $bb0:
    call {:si_unique_call 1482} $initialize();
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p8 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p9 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p10 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p11 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p14 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p15 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p16 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p17 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p19 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p20 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p21 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p22 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p23 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p25 := ldv_init_zalloc(192);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p28 := ldv_init_zalloc(192);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p31 := ldv_init_zalloc(4);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p33 := ldv_init_zalloc(104);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p36 := ldv_init_zalloc(128);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p38 := ldv_init_zalloc(232);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p40 := ldv_init_zalloc(12);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p42 := ldv_init_zalloc(4);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $p44 := ldv_init_zalloc(1);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p45 := ldv_init_zalloc(32);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p47 := ldv_init_zalloc(1);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p48 := ldv_init_zalloc(232);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p50 := ldv_init_zalloc(1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p51 := ldv_init_zalloc(32);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $p53 := ldv_init_zalloc(1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $p54 := ldv_init_zalloc(192);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_initialize();
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_193 := ldv_memset($p56, 0, 4);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_194 := ldv_memset($p58, 0, 4);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_195 := ldv_memset($p60, 0, 4);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p3);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_196 := ldv_memset($p62, 0, 4);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_197 := ldv_memset($p4, 0, 1);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_198 := ldv_memset($p5, 0, 1);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_199 := ldv_memset($p6, 0, 1);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p7);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_200 := ldv_memset($p67, 0, 4);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p8);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_201 := ldv_memset($p69, 0, 2);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_202 := ldv_memset($p9, 0, 1);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_203 := ldv_memset($p10, 0, 1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_204 := ldv_memset($p11, 0, 1);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p12);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_205 := ldv_memset($p74, 0, 4);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p13);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_206 := ldv_memset($p76, 0, 4);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_207 := ldv_memset($p14, 0, 1);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_208 := ldv_memset($p15, 0, 1);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p16);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_209 := ldv_memset($p80, 0, 4);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p17);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} vslice_dummy_var_210 := ldv_memset($p82, 0, 4);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p18);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_211 := ldv_memset($p84, 0, 4);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p19);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} vslice_dummy_var_212 := ldv_memset($p86, 0, 4);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p20);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_213 := ldv_memset($p88, 0, 4);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p21);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} vslice_dummy_var_214 := ldv_memset($p90, 0, 4);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p22);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_215 := ldv_memset($p92, 0, 4);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p23);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_216 := ldv_memset($p94, 0, 4);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} work_init_3();
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} work_init_2();
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} work_init_1();
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 1564} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $i141, $p142, $p143, $i144, $i146, $i147, $p148, $p149, $i150, $i152, $i153, $p154, $p155, $i156, $i158, $i159, $p160, $p161, $i162, $i164, $i165, $p166, $i168, $i169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i180, $i181, $p182, $p183, $i184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i211, $i212, $p213, $i215, $i216, $p217, $p218, $i220, $i221, $p222, $p223, $i225, $i226, $p227, $p228, $i230, $i231, $p232, $p233, $i235, $i236, $p237, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $i250, $i251, $i253, $i254, $i256, $i257, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $i280, $i281, $i282, $p283, $i284, $i285, $i286, $p287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $p295, $p296, $i297, $i299, $i300, $p301, $p302, $i303, $i305, $i306, $p307, $p308, $i309, $i311, $i312, $p313, $p314, $i315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $p336, $i337, $i338, $i339, $i340, $p341, $p342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $p371, $i373, $i374, $p375, $p376, $i378, $i379, $p380, $p381, $i383, $i384, $p385, $p386, $i388, $i389, $p390, $i391, $i392, $p393, $i394, $i395, $p396, $i397, $i398, $p399, $i400, $i401, $i403, $i404, $i406, $i407, $i409, $i410, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $p439, $p440, $i441, $i442, $i443, $i445, $i446, $p447, $p448, $i449, $i450, $i451, $i453, $i454, $p455, $p456, $i457, $i458, $i459, $i461, $i462, $p463, $p464, $i465, $i466, $i467, $i468, $i469, $i471, $i472, $p473, $p474, $i475, $i476, $i477, $i478, $i479, $i481, $i482, $p483, $p484, $i485, $i486, $i487, $i488, $i489, $i491, $i492, $p493, $p494, $i495, $i497, $i498, $p499, $p500, $i501, $i503, $i504, $p505, $p506, $i507, $i509, $i510, $p511, $p512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i521, $i522, $p523, $p524, $i525, $i526, $i527, $i528, $i529, $i530, $i531, $i533, $i534, $p535, $p536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $p560, $p561, $i563, $i564, $p565, $p566, $p567, $i569, $i570, $p571, $p572, $p573, $i575, $i576, $p577, $p578, $i579, $i580, $i581, $i582, $i583, $i585, $i586, $p587, $p588, $i589, $i590, $i591, $i592, $i593, $i595, $i596, $p597, $p598, $i599, $i600, $i601, $i602, $i603, $i605, $i606, $p607, $p608, $i609, $p610, $i612, $i613, $p614, $p615, $i616, $p617, $i619, $i620, $p621, $p622, $i623, $p624, $i626, $i627, $p628, $p629, $i630, $i631, $i633, $i634, $p635, $p636, $i637, $i638, $i640, $i641, $p642, $p643, $i644, $i645, $i647, $i648, $p649, $p650, $i651, $i652, $i654, $i655, $p656, $p657, $i658, $i659, $i661, $i662, $p663, $p664, $i665, $i666, $i668, $i669, $p670, $p671, $i672, $i673, $i674, $i675, $i676, $p677, $p678, $i680, $i681, $p682, $p683, $i685, $i686, $p687, $p688, $i690, $i691, $p692, $p693, $p694, $i696, $i697, $p698, $p699, $p700, $i702, $i703, $p704, $p705, $p706, $i708, $i709, $p710, $p711, $i713, $i714, $p715, $p716, $i718, $i719, $p720, $p721, $i723, $i724, $p725, $p726, $i728, $i729, $p730, $p731, $i733, $i734, $p735, $p736, $i738, $i739, $p740, $i741, $i743, $i744, $p745, $i746, $i748, $i749, $p750, $i751, $i753, $i754, $p755, $p756, $i757, $i758, $i759, $i761, $i762, $p763, $p764, $p765, $i767, $i768, $p769, $p770, $p771, $i773, $i774, $p775, $p776, $p777, $i779, $i780, $p781, $p782, $i784, $i785, $p786, $p787, $i789, $i790, $p791, $p792, $i794, $i795, $i797, $i798, $i799, $i800, $i802, $i803, $i804, $i805, $i806, $i807, $i808, $i809, $i810, $i811, $i812, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $p821, $i822, $i823, $i824, $i825, $i826, $p827, $i829, $i830, $p831, $i833, $i834, $p835, $i837, $i838, $p839, $i841, $i842, $p843, $i844, $i845, $p846, $i847, $i848, $p849, $i850, $i851, $p852, $i854, $i855, $p856, $i858, $i859, $p860, $i862, $i863, $p864, $i866, $i867, $p868, $i869, $i870, $p871, $i872, $i873, $p874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i887, $i888, $i889, $i890, $i891, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $p904, $i905, $i906, $i907, $i908, $i909, $i910, $i911, $p912, $p913, $i914, $i916, $i917, $p918, $i919, $i920, $i921, $i922, $i923, $i924, $i925, $p926, $i927, $i928, $i929, $i930, $i931, $i932, $p933, $i934, $i935, $i936, $i937, $i938, $i939, $i940, $i941, $i942, $i943, $i944, $i945, $i946, $i947, $i948, $i949, $i950, $i951, $i952, $i953, $i954, $i955, $i956, $i957, $i958, $i959, $i960, $i961, $i962, $i963, $i964, $i965, $i966, $i967, $i968, $i969, $i970, $i971, $i972, $i973, $i974, $i975, $p976, $i977, $i978, $i979, $p980, $i981, $i982, $i983, $p984, $i985, $i986, $i987, $p988, $i989, $i990, $i991, $p992, $p993, $i994, $i996, $i997, $p998, $p999, $i1000, $i1002, $i1003, $p1004, $p1005, $i1006, $i1008, $i1009, $p1010, $p1011, $i1012, $i1014, $i1015, $p1016, $i1018, $i1019, $p1020, $i1022, $i1023, $p1024, $i1026, $i1027, $p1028, $i1030, $i1031, $p1032, $p1033, $i1034, $i1035, $i1036, $i1037, $p1038, $p1039, $i1040, $i1041, $i1042, $i1043, $i1044, $i1045, $i1046, $p1047, $i1049, $i1050, $p1051, $i1053, $i1054, $p1055, $i1057, $i1058, $p1059, $i1061, $i1062, $p1063, $i1065, $i1066, $p1067, $p1068, $i1070, $i1071, $p1072, $p1073, $i1075, $i1076, $p1077, $p1078, $i1080, $i1081, $p1082, $p1083, $i1085, $i1086, $p1087, $i1088, $i1089, $p1090, $i1091, $i1092, $p1093, $i1094, $i1095, $p1096, $i1097, $i1098, $i1100, $i1101, $i1103, $i1104, $i1106, $i1107, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302, vslice_dummy_var_303, vslice_dummy_var_304, vslice_dummy_var_305, vslice_dummy_var_306, vslice_dummy_var_307, vslice_dummy_var_308, vslice_dummy_var_309, vslice_dummy_var_310, vslice_dummy_var_311, vslice_dummy_var_312, vslice_dummy_var_313, vslice_dummy_var_314, vslice_dummy_var_315, vslice_dummy_var_316, vslice_dummy_var_317, vslice_dummy_var_318, vslice_dummy_var_319, vslice_dummy_var_320, vslice_dummy_var_321, vslice_dummy_var_322, vslice_dummy_var_323, vslice_dummy_var_324, vslice_dummy_var_325, vslice_dummy_var_326, vslice_dummy_var_327, vslice_dummy_var_328, vslice_dummy_var_329, vslice_dummy_var_330, vslice_dummy_var_331, vslice_dummy_var_332, vslice_dummy_var_333, vslice_dummy_var_334, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342, vslice_dummy_var_343 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p26, $p27, $p29, $p30, $p32, $p34, $p35, $p37, $p39, $p41, $p43, $p44, $p46, $p47, $p49, $p50, $p52, $p53, $p55, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $i141, $p142, $p143, $i144, $i146, $i147, $p148, $p149, $i150, $i152, $i153, $p154, $p155, $i156, $i158, $i159, $p160, $p161, $i162, $i164, $i165, $p166, $i168, $i169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i180, $i181, $p182, $p183, $i184, $i185, $i186, $i187, $p188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $p197, $i199, $i200, $p201, $i203, $i204, $p205, $i207, $i208, $p209, $i211, $i212, $p213, $i215, $i216, $p217, $p218, $i220, $i221, $p222, $p223, $i225, $i226, $p227, $p228, $i230, $i231, $p232, $p233, $i235, $i236, $p237, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $i250, $i251, $i253, $i254, $i256, $i257, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $i280, $i281, $i282, $p283, $i284, $i285, $i286, $p287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $p295, $p296, $i297, $i299, $i300, $p301, $p302, $i303, $i305, $i306, $p307, $p308, $i309, $i311, $i312, $p313, $p314, $i315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $p336, $i337, $i338, $i339, $i340, $p341, $p342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $p350, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $p371, $i373, $i374, $p375, $p376, $i378, $i379, $p380, $p381, $i383, $i384, $p385, $p386, $i388, $i389, $p390, $i391, $i392, $p393, $i394, $i395, $p396, $i397, $i398, $p399, $i400, $i401, $i403, $i404, $i406, $i407, $i409, $i410, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $p439, $p440, $i441, $i442, $i443, $i445, $i446, $p447, $p448, $i449, $i450, $i451, $i453, $i454, $p455, $p456, $i457, $i458, $i459, $i461, $i462, $p463, $p464, $i465, $i466, $i467, $i468, $i469, $i471, $i472, $p473, $p474, $i475, $i476, $i477, $i478, $i479, $i481, $i482, $p483, $p484, $i485, $i486, $i487, $i488, $i489, $i491, $i492, $p493, $p494, $i495, $i497, $i498, $p499, $p500, $i501, $i503, $i504, $p505, $p506, $i507, $i509, $i510, $p511, $p512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i521, $i522, $p523, $p524, $i525, $i526, $i527, $i528, $i529, $i530, $i531, $i533, $i534, $p535, $p536, $i537, $i538, $i539, $i540, $i541, $i542, $i543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $p560, $p561, $i563, $i564, $p565, $p566, $p567, $i569, $i570, $p571, $p572, $p573, $i575, $i576, $p577, $p578, $i579, $i580, $i581, $i582, $i583, $i585, $i586, $p587, $p588, $i589, $i590, $i591, $i592, $i593, $i595, $i596, $p597, $p598, $i599, $i600, $i601, $i602, $i603, $i605, $i606, $p607, $p608, $i609, $p610, $i612, $i613, $p614, $p615, $i616, $p617, $i619, $i620, $p621, $p622, $i623, $p624, $i626, $i627, $p628, $p629, $i630, $i631, $i633, $i634, $p635, $p636, $i637, $i638, $i640, $i641, $p642, $p643, $i644, $i645, $i647, $i648, $p649, $p650, $i651, $i652, $i654, $i655, $p656, $p657, $i658, $i659, $i661, $i662, $p663, $p664, $i665, $i666, $i668, $i669, $p670, $p671, $i672, $i673, $i674, $i675, $i676, $p677, $p678, $i680, $i681, $p682, $p683, $i685, $i686, $p687, $p688, $i690, $i691, $p692, $p693, $p694, $i696, $i697, $p698, $p699, $p700, $i702, $i703, $p704, $p705, $p706, $i708, $i709, $p710, $p711, $i713, $i714, $p715, $p716, $i718, $i719, $p720, $p721, $i723, $i724, $p725, $p726, $i728, $i729, $p730, $p731, $i733, $i734, $p735, $p736, $i738, $i739, $p740, $i741, $i743, $i744, $p745, $i746, $i748, $i749, $p750, $i751, $i753, $i754, $p755, $p756, $i757, $i758, $i759, $i761, $i762, $p763, $p764, $p765, $i767, $i768, $p769, $p770, $p771, $i773, $i774, $p775, $p776, $p777, $i779, $i780, $p781, $p782, $i784, $i785, $p786, $p787, $i789, $i790, $p791, $p792, $i794, $i795, $i797, $i798, $i799, $i800, $i802, $i803, $i804, $i805, $i806, $i807, $i808, $i809, $i810, $i811, $i812, $i813, $i814, $i815, $i816, $i817, $i818, $i819, $i820, $p821, $i822, $i823, $i824, $i825, $i826, $p827, $i829, $i830, $p831, $i833, $i834, $p835, $i837, $i838, $p839, $i841, $i842, $p843, $i844, $i845, $p846, $i847, $i848, $p849, $i850, $i851, $p852, $i854, $i855, $p856, $i858, $i859, $p860, $i862, $i863, $p864, $i866, $i867, $p868, $i869, $i870, $p871, $i872, $i873, $p874, $i875, $i876, $i877, $i878, $i879, $i880, $i881, $i882, $i883, $i884, $i885, $i887, $i888, $i889, $i890, $i891, $i892, $i893, $i894, $i895, $i896, $i897, $i898, $i899, $i900, $i901, $i902, $i903, $p904, $i905, $i906, $i907, $i908, $i909, $i910, $i911, $p912, $p913, $i914, $i916, $i917, $p918, $i919, $i920, $i921, $i922, $i923, $i924, $i925, $p926, $i927, $i928, $i929, $i930, $i931, $i932, $p933, $i934, $i935, $i936, $i937, $i938, $i939, $i940, $i941, $i942, $i943, $i944, $i945, $i946, $i947, $i948, $i949, $i950, $i951, $i952, $i953, $i954, $i955, $i956, $i957, $i958, $i959, $i960, $i961, $i962, $i963, $i964, $i965, $i966, $i967, $i968, $i969, $i970, $i971, $i972, $i973, $i974, $i975, $p976, $i977, $i978, $i979, $p980, $i981, $i982, $i983, $p984, $i985, $i986, $i987, $p988, $i989, $i990, $i991, $p992, $p993, $i994, $i996, $i997, $p998, $p999, $i1000, $i1002, $i1003, $p1004, $p1005, $i1006, $i1008, $i1009, $p1010, $p1011, $i1012, $i1014, $i1015, $p1016, $i1018, $i1019, $p1020, $i1022, $i1023, $p1024, $i1026, $i1027, $p1028, $i1030, $i1031, $p1032, $p1033, $i1034, $i1035, $i1036, $i1037, $p1038, $p1039, $i1040, $i1041, $i1042, $i1043, $i1044, $i1045, $i1046, $p1047, $i1049, $i1050, $p1051, $i1053, $i1054, $p1055, $i1057, $i1058, $p1059, $i1061, $i1062, $p1063, $i1065, $i1066, $p1067, $p1068, $i1070, $i1071, $p1072, $p1073, $i1075, $i1076, $p1077, $p1078, $i1080, $i1081, $p1082, $p1083, $i1085, $i1086, $p1087, $i1088, $i1089, $p1090, $i1091, $i1092, $p1093, $i1094, $i1095, $p1096, $i1097, $i1098, $i1100, $i1101, $i1103, $i1104, $i1106, $i1107, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250, vslice_dummy_var_251, vslice_dummy_var_252, vslice_dummy_var_253, vslice_dummy_var_254, vslice_dummy_var_255, vslice_dummy_var_256, vslice_dummy_var_257, vslice_dummy_var_258, vslice_dummy_var_259, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263, vslice_dummy_var_264, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302, vslice_dummy_var_303, vslice_dummy_var_304, vslice_dummy_var_305, vslice_dummy_var_306, vslice_dummy_var_307, vslice_dummy_var_308, vslice_dummy_var_309, vslice_dummy_var_310, vslice_dummy_var_311, vslice_dummy_var_312, vslice_dummy_var_313, vslice_dummy_var_314, vslice_dummy_var_315, vslice_dummy_var_316, vslice_dummy_var_317, vslice_dummy_var_318, vslice_dummy_var_319, vslice_dummy_var_320, vslice_dummy_var_321, vslice_dummy_var_322, vslice_dummy_var_323, vslice_dummy_var_324, vslice_dummy_var_325, vslice_dummy_var_326, vslice_dummy_var_327, vslice_dummy_var_328, vslice_dummy_var_329, vslice_dummy_var_330, vslice_dummy_var_331, vslice_dummy_var_332, vslice_dummy_var_333, vslice_dummy_var_334, vslice_dummy_var_335, vslice_dummy_var_336, vslice_dummy_var_337, vslice_dummy_var_338, vslice_dummy_var_339, vslice_dummy_var_340, vslice_dummy_var_341, vslice_dummy_var_342, vslice_dummy_var_343);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i96, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i96, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i96, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i96, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} ldv_stop();
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb156_dummy;

  $bb11:
    assume $i101 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i958 := $M.70;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i959 := $ne.i32($i958, 0);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb684:
    assume $i959 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1915} $i960 := __VERIFIER_nondet_int();
    call {:si_unique_call 1916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i960);
    call {:si_unique_call 1917} {:cexpr "tmp___26"} boogie_si_record_i32($i960);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $i961 := $slt.i32($i960, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    $i962 := $slt.i32($i960, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i962 == 1);
    assume {:verifier.code 0} true;
    $i963 := $slt.i32($i960, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb691, $bb692;

  $bb692:
    assume !($i963 == 1);
    assume {:verifier.code 0} true;
    $i964 := $slt.i32($i960, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  $bb694:
    assume !($i964 == 1);
    assume {:verifier.code 0} true;
    $i965 := $eq.i32($i960, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb695, $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    assume !($i965 == 1);
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} ldv_stop();
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb695:
    assume $i965 == 1;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i1106 := $M.70;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i1107 := $eq.i32($i1106, 3);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb808, $bb809;

  $bb809:
    assume !($i1107 == 1);
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb808:
    assume $i1107 == 1;
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} vslice_dummy_var_343 := ldv_start_5();
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb693:
    assume $i964 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i1103 := $M.70;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i1104 := $eq.i32($i1103, 2);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb805, $bb806;

  $bb806:
    assume !($i1104 == 1);
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb805:
    assume $i1104 == 1;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_342 := ldv_init_5();
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb691:
    assume $i963 == 1;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i1097 := $M.70;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i1098 := $eq.i32($i1097, 4);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb799, $bb800;

  $bb800:
    assume !($i1098 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    $i1100 := $M.70;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i1101 := $eq.i32($i1100, 3);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb802, $bb803;

  $bb803:
    assume !($i1101 == 1);
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb802:
    assume $i1101 == 1;
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vslice_dummy_var_341 := ldv_disconnect_5();
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb799:
    assume $i1098 == 1;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} vslice_dummy_var_340 := ldv_disconnect_5();
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb689:
    assume $i962 == 1;
    assume {:verifier.code 0} true;
    $i966 := $slt.i32($i960, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  $bb699:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    $i967 := $slt.i32($i960, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i967 == 1);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i1085 := $M.70;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i1086 := $eq.i32($i1085, 4);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb787, $bb788;

  $bb788:
    assume !($i1086 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    $i1088 := $M.70;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i1089 := $eq.i32($i1088, 1);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb790, $bb791;

  $bb791:
    assume !($i1089 == 1);
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    $i1091 := $M.70;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i1092 := $eq.i32($i1091, 3);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb793, $bb794;

  $bb794:
    assume !($i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $i1094 := $M.70;
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i1095 := $eq.i32($i1094, 2);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb796, $bb797;

  $bb797:
    assume !($i1095 == 1);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb796:
    assume $i1095 == 1;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p1096 := $M.46;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} rndis_status($p1096, $p55);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb793:
    assume $i1092 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p1093 := $M.46;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} rndis_status($p1093, $p55);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb790:
    assume $i1089 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p1090 := $M.46;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} rndis_status($p1090, $p55);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb787:
    assume $i1086 == 1;
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p1087 := $M.46;
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} rndis_status($p1087, $p55);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb700:
    assume $i967 == 1;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i1065 := $M.70;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i1066 := $eq.i32($i1065, 4);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  $bb776:
    assume !($i1066 == 1);
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    $i1070 := $M.70;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i1071 := $eq.i32($i1070, 1);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb778, $bb779;

  $bb779:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    $i1075 := $M.70;
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i1076 := $eq.i32($i1075, 3);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb781, $bb782;

  $bb782:
    assume !($i1076 == 1);
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    $i1080 := $M.70;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i1081 := $eq.i32($i1080, 2);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i1081 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb784:
    assume $i1081 == 1;
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p1082 := $M.46;
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p1083 := $M.45;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} vslice_dummy_var_339 := rndis_rx_fixup($p1082, $p1083);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb781:
    assume $i1076 == 1;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p1077 := $M.46;
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p1078 := $M.45;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} vslice_dummy_var_338 := rndis_rx_fixup($p1077, $p1078);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb778:
    assume $i1071 == 1;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p1072 := $M.46;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p1073 := $M.45;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} vslice_dummy_var_337 := rndis_rx_fixup($p1072, $p1073);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb775:
    assume $i1066 == 1;
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p1067 := $M.46;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p1068 := $M.45;
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} vslice_dummy_var_336 := rndis_rx_fixup($p1067, $p1068);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb698:
    assume $i966 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i1049 := $M.70;
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i1050 := $eq.i32($i1049, 4);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb763, $bb764;

  $bb764:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    $i1053 := $M.70;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i1054 := $eq.i32($i1053, 1);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb766, $bb767;

  $bb767:
    assume !($i1054 == 1);
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    $i1057 := $M.70;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i1058 := $eq.i32($i1057, 3);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb769, $bb770;

  $bb770:
    assume !($i1058 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $i1061 := $M.70;
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i1062 := $eq.i32($i1061, 2);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i1062 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb772:
    assume $i1062 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p1063 := $M.46;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} vslice_dummy_var_335 := rndis_wlan_reset($p1063);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    goto $bb774;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb769:
    assume $i1058 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p1059 := $M.46;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} vslice_dummy_var_334 := rndis_wlan_reset($p1059);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb771;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb766:
    assume $i1054 == 1;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p1055 := $M.46;
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} vslice_dummy_var_333 := rndis_wlan_reset($p1055);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1954} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb768;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb763:
    assume $i1050 == 1;
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p1051 := $M.46;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} vslice_dummy_var_332 := rndis_wlan_reset($p1051);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1952} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb765;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb687:
    assume $i961 == 1;
    assume {:verifier.code 0} true;
    $i968 := $slt.i32($i960, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb702, $bb703;

  $bb703:
    assume !($i968 == 1);
    assume {:verifier.code 0} true;
    $i969 := $slt.i32($i960, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i969 == 1);
    assume {:verifier.code 0} true;
    $i970 := $slt.i32($i960, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb706, $bb707;

  $bb707:
    assume !($i970 == 1);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i1045 := $M.70;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i1046 := $eq.i32($i1045, 4);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb760, $bb761;

  $bb761:
    assume !($i1046 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb760:
    assume $i1046 == 1;
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p1047 := $M.46;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} vslice_dummy_var_331 := rndis_wlan_stop($p1047);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb762;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb706:
    assume $i970 == 1;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i1036 := $M.70;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i1037 := $eq.i32($i1036, 1);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb754, $bb755;

  $bb755:
    assume !($i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb754:
    assume $i1037 == 1;
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p1038 := $M.46;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p1039 := $M.47;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i1040 := rndis_wlan_bind($p1038, $p1039);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.81 := $i1040;
    call {:si_unique_call 1946} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i1040);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i1041 := $M.81;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i1042 := $eq.i32($i1041, 0);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i1042 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb756:
    assume $i1042 == 1;
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i1043 := $M.68;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i1044 := $add.i32($i1043, 1);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $M.68 := $i1044;
    call {:si_unique_call 1948} {:cexpr "ref_cnt"} boogie_si_record_i32($i1044);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto $bb758;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb704:
    assume $i969 == 1;
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i1030 := $M.70;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i1031 := $eq.i32($i1030, 2);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb751, $bb752;

  $bb752:
    assume !($i1031 == 1);
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb751:
    assume $i1031 == 1;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p1032 := $M.46;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p1033 := $M.47;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} rndis_wlan_unbind($p1032, $p1033);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1943} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i1034 := $M.68;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i1035 := $sub.i32($i1034, 1);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $M.68 := $i1035;
    call {:si_unique_call 1944} {:cexpr "ref_cnt"} boogie_si_record_i32($i1035);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb753;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb702:
    assume $i968 == 1;
    assume {:verifier.code 0} true;
    $i971 := $slt.i32($i960, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i971 == 1);
    assume {:verifier.code 0} true;
    $i972 := $slt.i32($i960, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  $bb711:
    assume !($i972 == 1);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i1014 := $M.70;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i1015 := $eq.i32($i1014, 4);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb739, $bb740;

  $bb740:
    assume !($i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    $i1018 := $M.70;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i1019 := $eq.i32($i1018, 1);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb742, $bb743;

  $bb743:
    assume !($i1019 == 1);
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    $i1022 := $M.70;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i1023 := $eq.i32($i1022, 3);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb745, $bb746;

  $bb746:
    assume !($i1023 == 1);
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $i1026 := $M.70;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i1027 := $eq.i32($i1026, 2);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i1027 == 1);
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb748:
    assume $i1027 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p1028 := $M.46;
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} vslice_dummy_var_330 := unknown_early_init($p1028);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1941} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb745:
    assume $i1023 == 1;
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p1024 := $M.46;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} vslice_dummy_var_329 := unknown_early_init($p1024);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1939} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb742:
    assume $i1019 == 1;
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p1020 := $M.46;
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} vslice_dummy_var_328 := unknown_early_init($p1020);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb739:
    assume $i1015 == 1;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p1016 := $M.46;
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} vslice_dummy_var_327 := unknown_early_init($p1016);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb710:
    assume $i972 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i990 := $M.70;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i991 := $eq.i32($i990, 4);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i991 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    $i996 := $M.70;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i997 := $eq.i32($i996, 1);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb730, $bb731;

  $bb731:
    assume !($i997 == 1);
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    $i1002 := $M.70;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i1003 := $eq.i32($i1002, 3);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  $bb734:
    assume !($i1003 == 1);
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $i1008 := $M.70;
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i1009 := $eq.i32($i1008, 2);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb736, $bb737;

  $bb737:
    assume !($i1009 == 1);
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb736:
    assume $i1009 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p1010 := $M.46;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p1011 := $M.45;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i1012 := $load.i32($M.33, $p22);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} vslice_dummy_var_326 := rndis_tx_fixup($p1010, $p1011, $i1012);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb733:
    assume $i1003 == 1;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p1004 := $M.46;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p1005 := $M.45;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i1006 := $load.i32($M.33, $p22);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} vslice_dummy_var_325 := rndis_tx_fixup($p1004, $p1005, $i1006);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1931} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb730:
    assume $i997 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p998 := $M.46;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p999 := $M.45;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i1000 := $load.i32($M.33, $p22);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} vslice_dummy_var_324 := rndis_tx_fixup($p998, $p999, $i1000);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1929} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb727:
    assume $i991 == 1;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p992 := $M.46;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p993 := $M.45;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i994 := $load.i32($M.33, $p22);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} vslice_dummy_var_323 := rndis_tx_fixup($p992, $p993, $i994);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1927} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb708:
    assume $i971 == 1;
    assume {:verifier.code 0} true;
    $i973 := $eq.i32($i960, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb712, $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    assume !($i973 == 1);
    goto $bb697;

  $bb712:
    assume $i973 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i974 := $M.70;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i975 := $eq.i32($i974, 4);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb714, $bb715;

  $bb715:
    assume !($i975 == 1);
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    $i978 := $M.70;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i979 := $eq.i32($i978, 1);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  $bb718:
    assume !($i979 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $i982 := $M.70;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i983 := $eq.i32($i982, 3);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $i986 := $M.70;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i987 := $eq.i32($i986, 2);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb723:
    assume $i987 == 1;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p988 := $M.46;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i989 := $load.i32($M.33, $p23);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} rndis_wlan_indication($p988, $p53, $i989);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1925} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb720:
    assume $i983 == 1;
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p984 := $M.46;
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i985 := $load.i32($M.33, $p23);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} rndis_wlan_indication($p984, $p53, $i985);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb717:
    assume $i979 == 1;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p980 := $M.46;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $i981 := $load.i32($M.33, $p23);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} rndis_wlan_indication($p980, $p53, $i981);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1921} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb714:
    assume $i975 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p976 := $M.46;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i977 := $load.i32($M.33, $p23);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} rndis_wlan_indication($p976, $p53, $i977);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1919} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb9:
    assume $i100 == 1;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i941 := $M.69;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i942 := $ne.i32($i941, 0);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  $bb655:
    assume !($i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb654:
    assume $i942 == 1;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1894} $i943 := __VERIFIER_nondet_int();
    call {:si_unique_call 1895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i943);
    call {:si_unique_call 1896} {:cexpr "tmp___25"} boogie_si_record_i32($i943);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    $i944 := $slt.i32($i943, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb657, $bb658;

  $bb658:
    assume !($i944 == 1);
    assume {:verifier.code 0} true;
    $i945 := $eq.i32($i943, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb659, $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    assume !($i945 == 1);
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb659:
    assume $i945 == 1;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i951 := $M.69;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i952 := $eq.i32($i951, 1);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb672:
    assume $i952 == 1;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i953 := rndis_wlan_driver_init();
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $M.80 := $i953;
    call {:si_unique_call 1901} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i953);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i954 := $M.80;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i955 := $ne.i32($i954, 0);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb674, $bb675;

  $bb675:
    assume !($i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    $i956 := $M.80;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i957 := $eq.i32($i956, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb677, $bb678;

  $bb678:
    assume !($i957 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb677:
    assume $i957 == 1;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_initialize_driver_info_5();
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_initialize_cfg80211_ops_9();
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1908} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_initialize_driver_info_7();
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1910} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_initialize_driver_info_6();
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_net_device_ops_8();
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb674:
    assume $i955 == 1;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} ldv_check_final_state();
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb657:
    assume $i944 == 1;
    assume {:verifier.code 0} true;
    $i946 := $eq.i32($i943, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb662, $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    assume !($i946 == 1);
    goto $bb661;

  $bb662:
    assume $i946 == 1;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i947 := $M.69;
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i948 := $eq.i32($i947, 2);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb664, $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    assume !($i948 == 1);
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb664:
    assume $i948 == 1;
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i949 := $M.68;
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i949, 0);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb667, $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    assume !($i950 == 1);
    goto $bb666;

  $bb667:
    assume $i950 == 1;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} rndis_wlan_driver_exit();
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1898} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb7:
    assume $i99 == 1;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i893 := $M.67;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i894 := $ne.i32($i893, 0);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb601:
    assume $i894 == 1;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1872} $i895 := __VERIFIER_nondet_int();
    call {:si_unique_call 1873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i895);
    call {:si_unique_call 1874} {:cexpr "tmp___24"} boogie_si_record_i32($i895);
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $i896 := $slt.i32($i895, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    $i897 := $slt.i32($i895, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb607:
    assume !($i897 == 1);
    assume {:verifier.code 0} true;
    $i898 := $slt.i32($i895, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i898 == 1);
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i895, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume !($i899 == 1);
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} ldv_stop();
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb610:
    assume $i899 == 1;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i936 := $M.67;
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i937 := $eq.i32($i936, 3);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  $bb646:
    assume !($i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb645:
    assume $i937 == 1;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} $i938 := ldv_reset_resume_4();
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $M.79 := $i938;
    call {:si_unique_call 1891} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i938);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i939 := $M.79;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i940 := $eq.i32($i939, 0);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i940 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb647:
    assume $i940 == 1;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb608:
    assume $i898 == 1;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i922 := $M.67;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i922, 3);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    assume !($i923 == 1);
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $i929 := $M.67;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i930 := $eq.i32($i929, 2);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb639, $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    assume !($i930 == 1);
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb639:
    assume $i930 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i931 := $M.76;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i932 := $eq.i32($i931, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    assume !($i932 == 1);
    goto $bb641;

  $bb642:
    assume $i932 == 1;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p933 := $M.44;
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} usbnet_disconnect($p933);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i934 := $M.68;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i935 := $sub.i32($i934, 1);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.68 := $i935;
    call {:si_unique_call 1889} {:cexpr "ref_cnt"} boogie_si_record_i32($i935);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb633:
    assume $i923 == 1;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i924 := $M.76;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i925 := $eq.i32($i924, 0);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    assume !($i925 == 1);
    goto $bb635;

  $bb636:
    assume $i925 == 1;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p926 := $M.44;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} usbnet_disconnect($p926);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1885} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i927 := $M.68;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i928 := $sub.i32($i927, 1);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $M.68 := $i928;
    call {:si_unique_call 1886} {:cexpr "ref_cnt"} boogie_si_record_i32($i928);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb606:
    assume $i897 == 1;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i916 := $M.67;
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i917 := $eq.i32($i916, 3);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb627:
    assume $i917 == 1;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p918 := $M.44;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $i919 := usbnet_resume($p918);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.78 := $i919;
    call {:si_unique_call 1882} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i919);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i920 := $M.78;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i921 := $eq.i32($i920, 0);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i921 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb629:
    assume $i921 == 1;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb604:
    assume $i896 == 1;
    assume {:verifier.code 0} true;
    $i900 := $slt.i32($i895, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i900 == 1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i910 := $M.67;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i910, 2);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb624:
    assume $i911 == 1;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p912 := $M.44;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p21, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i914 := $load.i32($M.33, $p913);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} vslice_dummy_var_322 := usbnet_suspend($p912, $i914);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb613:
    assume $i900 == 1;
    assume {:verifier.code 0} true;
    $i901 := $eq.i32($i895, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    assume !($i901 == 1);
    goto $bb612;

  $bb615:
    assume $i901 == 1;
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i902 := $M.67;
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i903 := $eq.i32($i902, 1);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb617:
    assume $i903 == 1;
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p904 := $M.44;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i905 := usbnet_probe($p904, $p52);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.77 := $i905;
    call {:si_unique_call 1876} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i905);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i906 := $M.77;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i907 := $eq.i32($i906, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb619:
    assume $i907 == 1;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1877} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i908 := $M.68;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i909 := $add.i32($i908, 1);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.68 := $i909;
    call {:si_unique_call 1878} {:cexpr "ref_cnt"} boogie_si_record_i32($i909);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb5:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i96, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i102 == 1);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i891 := $M.66;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i892 := $ne.i32($i891, 0);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  $bb599:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb598:
    assume $i892 == 1;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} invoke_work_1();
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb600;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i102 == 1;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i806 := $M.65;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i807 := $ne.i32($i806, 0);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb513:
    assume $i807 == 1;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1827} $i808 := __VERIFIER_nondet_int();
    call {:si_unique_call 1828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i808);
    call {:si_unique_call 1829} {:cexpr "tmp___23"} boogie_si_record_i32($i808);
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $i809 := $slt.i32($i808, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i809 == 1);
    assume {:verifier.code 0} true;
    $i810 := $slt.i32($i808, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    $i811 := $slt.i32($i808, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i811 == 1);
    assume {:verifier.code 0} true;
    $i812 := $slt.i32($i808, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    $i813 := $eq.i32($i808, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    assume !($i813 == 1);
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb524:
    assume $i813 == 1;
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i884 := $M.65;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i885 := $eq.i32($i884, 2);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i885 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb592:
    assume $i885 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} vslice_dummy_var_321 := ldv_ndo_uninit_8();
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i887 := $M.76;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i888 := $sub.i32($i887, 1);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $M.76 := $i888;
    call {:si_unique_call 1868} {:cexpr "usb_counter"} boogie_si_record_i32($i888);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i889 := $M.68;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i890 := $sub.i32($i889, 1);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $M.68 := $i890;
    call {:si_unique_call 1869} {:cexpr "ref_cnt"} boogie_si_record_i32($i890);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb522:
    assume $i812 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i875 := $M.65;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i876 := $eq.i32($i875, 1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb586, $bb587;

  $bb587:
    assume !($i876 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb586:
    assume $i876 == 1;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i877 := ldv_ndo_init_8();
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $M.75 := $i877;
    call {:si_unique_call 1862} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i877);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i878 := $M.75;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i879 := $eq.i32($i878, 0);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i879 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb588:
    assume $i879 == 1;
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i880 := $M.76;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i881 := $add.i32($i880, 1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $M.76 := $i881;
    call {:si_unique_call 1864} {:cexpr "usb_counter"} boogie_si_record_i32($i881);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i882 := $M.68;
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i883 := $add.i32($i882, 1);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.68 := $i883;
    call {:si_unique_call 1865} {:cexpr "ref_cnt"} boogie_si_record_i32($i883);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb520:
    assume $i811 == 1;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i866 := $M.65;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i867 := $eq.i32($i866, 1);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i867 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $i869 := $M.65;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i869, 3);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    $i872 := $M.65;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i873 := $eq.i32($i872, 2);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb583:
    assume $i873 == 1;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p874 := $M.53;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} usbnet_tx_timeout($p874);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb580:
    assume $i870 == 1;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p871 := $M.53;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} usbnet_tx_timeout($p871);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1858} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb577:
    assume $i867 == 1;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p868 := $M.53;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} usbnet_tx_timeout($p868);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1856} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb518:
    assume $i810 == 1;
    assume {:verifier.code 0} true;
    $i814 := $slt.i32($i808, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i814 == 1);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i854 := $M.65;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i854, 1);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    $i858 := $M.65;
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i859 := $eq.i32($i858, 3);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    $i862 := $M.65;
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i862, 2);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb574, $bb575;

  $bb575:
    assume !($i863 == 1);
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb574:
    assume $i863 == 1;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p864 := $M.53;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} vslice_dummy_var_320 := eth_mac_addr($p864, $p50);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1854} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb571:
    assume $i859 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p860 := $M.53;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} vslice_dummy_var_319 := eth_mac_addr($p860, $p50);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb568:
    assume $i855 == 1;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p856 := $M.53;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} vslice_dummy_var_318 := eth_mac_addr($p856, $p50);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1850} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb527:
    assume $i814 == 1;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i850 := $M.65;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i850, 3);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb565:
    assume $i851 == 1;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p852 := $M.53;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} vslice_dummy_var_317 := usbnet_stop($p852);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb516:
    assume $i809 == 1;
    assume {:verifier.code 0} true;
    $i815 := $slt.i32($i808, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i815 == 1);
    assume {:verifier.code 0} true;
    $i816 := $slt.i32($i808, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i816 == 1);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i841 := $M.65;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i841, 1);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $i844 := $M.65;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i844, 3);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i845 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    $i847 := $M.65;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i847, 2);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb562:
    assume $i848 == 1;
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p849 := $M.53;
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} rndis_wlan_set_multicast_list($p849);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb559:
    assume $i845 == 1;
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p846 := $M.53;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} rndis_wlan_set_multicast_list($p846);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb556:
    assume $i842 == 1;
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p843 := $M.53;
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} rndis_wlan_set_multicast_list($p843);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb531:
    assume $i816 == 1;
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i829 := $M.65;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i829, 1);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    $i833 := $M.65;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i834 := $eq.i32($i833, 3);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb550, $bb551;

  $bb551:
    assume !($i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    $i837 := $M.65;
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i838 := $eq.i32($i837, 2);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb553:
    assume $i838 == 1;
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p839 := $M.53;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} vslice_dummy_var_316 := eth_validate_addr($p839);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb550:
    assume $i834 == 1;
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p835 := $M.53;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_315 := eth_validate_addr($p835);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb547:
    assume $i830 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p831 := $M.53;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} vslice_dummy_var_314 := eth_validate_addr($p831);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb529:
    assume $i815 == 1;
    assume {:verifier.code 0} true;
    $i817 := $slt.i32($i808, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i817 == 1);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i825 := $M.65;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i826 := $eq.i32($i825, 3);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb544:
    assume $i826 == 1;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p827 := $M.53;
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} vslice_dummy_var_313 := usbnet_start_xmit($p49, $p827);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb533:
    assume $i817 == 1;
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i808, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    assume !($i818 == 1);
    goto $bb526;

  $bb535:
    assume $i818 == 1;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i819 := $M.65;
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i819, 2);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb537:
    assume $i820 == 1;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p821 := $M.53;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i822 := usbnet_open($p821);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.74 := $i822;
    call {:si_unique_call 1831} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i822);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i823 := $M.74;
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i823, 0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i824 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb539:
    assume $i824 == 1;
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb3:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i96, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i96, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i105 == 1);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i804 := $M.64;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i805 := $ne.i32($i804, 0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb510:
    assume $i805 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} invoke_work_2();
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb512;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i105 == 1;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i412 := $M.63;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb290:
    assume $i413 == 1;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1709} $i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 1710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i414);
    call {:si_unique_call 1711} {:cexpr "tmp___22"} boogie_si_record_i32($i414);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i415 := $slt.i32($i414, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    $i416 := $slt.i32($i414, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    $i417 := $slt.i32($i414, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    $i418 := $slt.i32($i414, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_stop();
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb303:
    assume $i420 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i799 := $M.63;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i800 := $eq.i32($i799, 1);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i800 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb504:
    assume $i800 == 1;
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} vslice_dummy_var_312 := ldv_bind_9();
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i802 := $M.68;
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i803 := $add.i32($i802, 1);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $M.68 := $i803;
    call {:si_unique_call 1824} {:cexpr "ref_cnt"} boogie_si_record_i32($i803);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb301:
    assume $i419 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i794 := $M.63;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i795 := $eq.i32($i794, 2);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb501:
    assume $i795 == 1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_311 := ldv_release_9();
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i797 := $M.68;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i798 := $sub.i32($i797, 1);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.68 := $i798;
    call {:si_unique_call 1821} {:cexpr "ref_cnt"} boogie_si_record_i32($i798);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb299:
    assume $i418 == 1;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i779 := $M.63;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i780 := $eq.i32($i779, 1);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i780 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $i784 := $M.63;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i784, 3);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $i789 := $M.63;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i790 := $eq.i32($i789, 2);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i790 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb498:
    assume $i790 == 1;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p791 := $M.57;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p792 := $M.56;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} vslice_dummy_var_310 := rndis_join_ibss($p791, $p792, $p37);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb500;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb495:
    assume $i785 == 1;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p786 := $M.57;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p787 := $M.56;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} vslice_dummy_var_309 := rndis_join_ibss($p786, $p787, $p37);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb497;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb492:
    assume $i780 == 1;
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p781 := $M.57;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p782 := $M.56;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_308 := rndis_join_ibss($p781, $p782, $p37);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb494;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb297:
    assume $i417 == 1;
    assume {:verifier.code 0} true;
    $i421 := $slt.i32($i414, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    $i422 := $slt.i32($i414, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i422 == 1);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i761 := $M.63;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i761, 1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $i767 := $M.63;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i768 := $eq.i32($i767, 3);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $i773 := $M.63;
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i774 := $eq.i32($i773, 2);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i774 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb489:
    assume $i774 == 1;
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p775 := $M.57;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p776 := $M.56;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p777 := $M.55;
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_307 := rndis_set_pmksa($p775, $p776, $p777);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb491;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb486:
    assume $i768 == 1;
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p769 := $M.57;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p770 := $M.56;
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p771 := $M.55;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_306 := rndis_set_pmksa($p769, $p770, $p771);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb488;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb483:
    assume $i762 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p763 := $M.57;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p764 := $M.56;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p765 := $M.55;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_305 := rndis_set_pmksa($p763, $p764, $p765);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    goto $bb485;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i422 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i753 := $M.63;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i754 := $eq.i32($i753, 3);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb480:
    assume $i754 == 1;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p755 := $M.57;
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $p756 := $M.56;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i757 := $load.i16($M.33, $p8);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i758 := $zext.i16.i32($i757);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i759 := $trunc.i32.i16($i758);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_304 := rndis_disconnect($p755, $p756, $i759);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb482;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb306:
    assume $i421 == 1;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i738 := $M.63;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i739 := $eq.i32($i738, 1);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    $i743 := $M.63;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i744 := $eq.i32($i743, 3);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume !($i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $i748 := $M.63;
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 2);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb477:
    assume $i749 == 1;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p750 := $M.57;
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i751 := $load.i32($M.33, $p7);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_303 := rndis_set_wiphy_params($p750, $i751);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb479;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb474:
    assume $i744 == 1;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p745 := $M.57;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i746 := $load.i32($M.33, $p7);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} vslice_dummy_var_302 := rndis_set_wiphy_params($p745, $i746);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb476;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb471:
    assume $i739 == 1;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p740 := $M.57;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i741 := $load.i32($M.33, $p7);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} vslice_dummy_var_301 := rndis_set_wiphy_params($p740, $i741);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    goto $bb473;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb295:
    assume $i416 == 1;
    assume {:verifier.code 0} true;
    $i423 := $slt.i32($i414, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    $i424 := $slt.i32($i414, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    $i425 := $slt.i32($i414, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i425 == 1);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i723 := $M.63;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i723, 1);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $i728 := $M.63;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i729 := $eq.i32($i728, 3);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $i733 := $M.63;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i733, 2);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb468:
    assume $i734 == 1;
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p735 := $M.57;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p736 := $M.54;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} vslice_dummy_var_300 := rndis_get_tx_power($p735, $p736, $p32);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb465:
    assume $i729 == 1;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p730 := $M.57;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p731 := $M.54;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} vslice_dummy_var_299 := rndis_get_tx_power($p730, $p731, $p32);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb462:
    assume $i724 == 1;
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p725 := $M.57;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $p726 := $M.54;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} vslice_dummy_var_298 := rndis_get_tx_power($p725, $p726, $p32);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb314:
    assume $i425 == 1;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i708 := $M.63;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i709 := $eq.i32($i708, 1);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $i713 := $M.63;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i714 := $eq.i32($i713, 3);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $i718 := $M.63;
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i718, 2);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb459:
    assume $i719 == 1;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p720 := $M.57;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p721 := $M.56;
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} vslice_dummy_var_297 := rndis_leave_ibss($p720, $p721);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    goto $bb461;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb456:
    assume $i714 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p715 := $M.57;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p716 := $M.56;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} vslice_dummy_var_296 := rndis_leave_ibss($p715, $p716);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb458;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb453:
    assume $i709 == 1;
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p710 := $M.57;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p711 := $M.56;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} vslice_dummy_var_295 := rndis_leave_ibss($p710, $p711);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb455;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb312:
    assume $i424 == 1;
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i690 := $M.63;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i691 := $eq.i32($i690, 1);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $i696 := $M.63;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i697 := $eq.i32($i696, 3);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $i702 := $M.63;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i703 := $eq.i32($i702, 2);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb450:
    assume $i703 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p704 := $M.57;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p705 := $M.56;
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p706 := $M.58;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} vslice_dummy_var_294 := rndis_get_station($p704, $p705, $p35, $p706);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    goto $bb452;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb447:
    assume $i697 == 1;
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p698 := $M.57;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p699 := $M.56;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p700 := $M.58;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} vslice_dummy_var_293 := rndis_get_station($p698, $p699, $p35, $p700);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    goto $bb449;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb444:
    assume $i691 == 1;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p692 := $M.57;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p693 := $M.56;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p694 := $M.58;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} vslice_dummy_var_292 := rndis_get_station($p692, $p693, $p35, $p694);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb446;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb310:
    assume $i423 == 1;
    assume {:verifier.code 0} true;
    $i426 := $slt.i32($i414, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i426 == 1);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i675 := $M.63;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 1);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $i680 := $M.63;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i680, 3);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $i685 := $M.63;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i685, 2);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb441:
    assume $i686 == 1;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p687 := $M.57;
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p688 := $M.56;
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_291 := rndis_flush_pmksa($p687, $p688);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb443;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb438:
    assume $i681 == 1;
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p682 := $M.57;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p683 := $M.56;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} vslice_dummy_var_290 := rndis_flush_pmksa($p682, $p683);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto $bb440;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb435:
    assume $i676 == 1;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p677 := $M.57;
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p678 := $M.56;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} vslice_dummy_var_289 := rndis_flush_pmksa($p677, $p678);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb437;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb316:
    assume $i426 == 1;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i668 := $M.63;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i669 := $eq.i32($i668, 2);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i669 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb429:
    assume $i669 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p670 := $M.57;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p671 := $M.56;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i672 := rndis_connect($p670, $p671, $p39);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.73 := $i672;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i672);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i673 := $M.73;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i673, 0);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb431:
    assume $i674 == 1;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    goto $bb433;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb293:
    assume $i415 == 1;
    assume {:verifier.code 0} true;
    $i427 := $slt.i32($i414, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    $i428 := $slt.i32($i414, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    $i429 := $slt.i32($i414, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    $i430 := $slt.i32($i414, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i430 == 1);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i647 := $M.63;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i648 := $eq.i32($i647, 1);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $i654 := $M.63;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i655 := $eq.i32($i654, 3);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $i661 := $M.63;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i661, 2);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb426:
    assume $i662 == 1;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p663 := $M.57;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p664 := $M.54;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i665 := $load.i32($M.33, $p12);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i666 := $load.i32($M.33, $p16);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_288 := rndis_set_tx_power($p663, $p664, $i665, $i666);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    goto $bb428;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb423:
    assume $i655 == 1;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p656 := $M.57;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p657 := $M.54;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i658 := $load.i32($M.33, $p12);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i659 := $load.i32($M.33, $p16);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} vslice_dummy_var_287 := rndis_set_tx_power($p656, $p657, $i658, $i659);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    goto $bb425;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb420:
    assume $i648 == 1;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p649 := $M.57;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p650 := $M.54;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $i651 := $load.i32($M.33, $p12);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i652 := $load.i32($M.33, $p16);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} vslice_dummy_var_286 := rndis_set_tx_power($p649, $p650, $i651, $i652);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    goto $bb422;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb324:
    assume $i430 == 1;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i626 := $M.63;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i626, 1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $i633 := $M.63;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i633, 3);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $i640 := $M.63;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i640, 2);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb417:
    assume $i641 == 1;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p642 := $M.57;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p643 := $M.56;
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i644 := $load.i32($M.33, $p17);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i645 := $load.i32($M.33, $p13);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_285 := rndis_set_cqm_rssi_config($p642, $p643, $i644, $i645);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb414:
    assume $i634 == 1;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p635 := $M.57;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p636 := $M.56;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i637 := $load.i32($M.33, $p17);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i638 := $load.i32($M.33, $p13);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_284 := rndis_set_cqm_rssi_config($p635, $p636, $i637, $i638);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb411:
    assume $i627 == 1;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p628 := $M.57;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p629 := $M.56;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i630 := $load.i32($M.33, $p17);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i631 := $load.i32($M.33, $p13);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_283 := rndis_set_cqm_rssi_config($p628, $p629, $i630, $i631);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb322:
    assume $i429 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i605 := $M.63;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i605, 1);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $i612 := $M.63;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i613 := $eq.i32($i612, 3);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $i619 := $M.63;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i619, 2);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb408:
    assume $i620 == 1;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p621 := $M.57;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p622 := $M.56;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i623 := $load.i32($M.33, $p18);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p624 := $M.58;
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_282 := rndis_dump_station($p621, $p622, $i623, $p30, $p624);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    goto $bb410;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb405:
    assume $i613 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p614 := $M.57;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p615 := $M.56;
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i616 := $load.i32($M.33, $p18);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p617 := $M.58;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_281 := rndis_dump_station($p614, $p615, $i616, $p30, $p617);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb407;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb402:
    assume $i606 == 1;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p607 := $M.57;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p608 := $M.56;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i609 := $load.i32($M.33, $p18);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p610 := $M.58;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_280 := rndis_dump_station($p607, $p608, $i609, $p30, $p610);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    goto $bb404;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb320:
    assume $i428 == 1;
    assume {:verifier.code 0} true;
    $i431 := $slt.i32($i414, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i431 == 1);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i575 := $M.63;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i576 := $eq.i32($i575, 1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i585 := $M.63;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i586 := $eq.i32($i585, 3);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $i595 := $M.63;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i595, 2);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb399:
    assume $i596 == 1;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p597 := $M.57;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p598 := $M.56;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.33, $p14);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i600 := $zext.i8.i32($i599);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i32.i8($i600);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i602 := $load.i8($M.33, $p6);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i603 := $trunc.i8.i1($i602);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_279 := rndis_del_key($p597, $p598, $i601, $i603, $p47);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb401;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb396:
    assume $i586 == 1;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p587 := $M.57;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p588 := $M.56;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.33, $p14);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i590 := $zext.i8.i32($i589);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i591 := $trunc.i32.i8($i590);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.33, $p6);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i593 := $trunc.i8.i1($i592);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} vslice_dummy_var_278 := rndis_del_key($p587, $p588, $i591, $i593, $p47);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb398;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb393:
    assume $i576 == 1;
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p577 := $M.57;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p578 := $M.56;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i579 := $load.i8($M.33, $p14);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i580 := $zext.i8.i32($i579);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i581 := $trunc.i32.i8($i580);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i582 := $load.i8($M.33, $p6);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i583 := $trunc.i8.i1($i582);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_277 := rndis_del_key($p577, $p578, $i581, $i583, $p47);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb395;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb326:
    assume $i431 == 1;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i557 := $M.63;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 1);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $i563 := $M.63;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i563, 3);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i569 := $M.63;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i569, 2);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb390:
    assume $i570 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p571 := $M.57;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p572 := $M.56;
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p573 := $M.55;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_276 := rndis_del_pmksa($p571, $p572, $p573);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb392;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb387:
    assume $i564 == 1;
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p565 := $M.57;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p566 := $M.56;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p567 := $M.55;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} vslice_dummy_var_275 := rndis_del_pmksa($p565, $p566, $p567);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    goto $bb389;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb384:
    assume $i558 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p559 := $M.57;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p560 := $M.56;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p561 := $M.55;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} vslice_dummy_var_274 := rndis_del_pmksa($p559, $p560, $p561);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    goto $bb386;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb318:
    assume $i427 == 1;
    assume {:verifier.code 0} true;
    $i432 := $slt.i32($i414, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i433 := $slt.i32($i414, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    $i434 := $slt.i32($i414, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i434 == 1);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i545 := $M.63;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 1);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $i549 := $M.63;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, 3);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $i553 := $M.63;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, 2);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb381:
    assume $i554 == 1;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p555 := $M.57;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} vslice_dummy_var_273 := rndis_scan($p555, $p34);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb383;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb378:
    assume $i550 == 1;
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p551 := $M.57;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_272 := rndis_scan($p551, $p34);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb380;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb375:
    assume $i546 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p547 := $M.57;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} vslice_dummy_var_271 := rndis_scan($p547, $p34);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto $bb377;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i434 == 1;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i509 := $M.63;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i509, 1);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $i521 := $M.63;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 3);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $i533 := $M.63;
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 2);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb372:
    assume $i534 == 1;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p535 := $M.57;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p536 := $M.56;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.33, $p15);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i539 := $trunc.i32.i8($i538);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i540 := $load.i8($M.33, $p9);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i541 := $trunc.i8.i1($i540);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i542 := $load.i8($M.33, $p10);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i543 := $trunc.i8.i1($i542);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} vslice_dummy_var_270 := rndis_set_default_key($p535, $p536, $i539, $i541, $i543);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    goto $bb374;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb369:
    assume $i522 == 1;
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p523 := $M.57;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p524 := $M.56;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.33, $p15);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i527 := $trunc.i32.i8($i526);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i528 := $load.i8($M.33, $p9);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i529 := $trunc.i8.i1($i528);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i530 := $load.i8($M.33, $p10);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i531 := $trunc.i8.i1($i530);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_269 := rndis_set_default_key($p523, $p524, $i527, $i529, $i531);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    goto $bb371;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb366:
    assume $i510 == 1;
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $p511 := $M.57;
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $p512 := $M.56;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i513 := $load.i8($M.33, $p15);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i514 := $zext.i8.i32($i513);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i515 := $trunc.i32.i8($i514);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i516 := $load.i8($M.33, $p9);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i8.i1($i516);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i518 := $load.i8($M.33, $p10);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i519 := $trunc.i8.i1($i518);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_268 := rndis_set_default_key($p511, $p512, $i515, $i517, $i519);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb368;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb330:
    assume $i433 == 1;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i491 := $M.63;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 1);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $i497 := $M.63;
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i497, 3);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $i503 := $M.63;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 2);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb363:
    assume $i504 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p505 := $M.57;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p506 := $M.56;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i507 := $load.i32($M.33, $p20);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_267 := rndis_change_virtual_intf($p505, $p506, $i507, $p43, $p41);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    goto $bb365;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb360:
    assume $i498 == 1;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p499 := $M.57;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p500 := $M.56;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i501 := $load.i32($M.33, $p20);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} vslice_dummy_var_266 := rndis_change_virtual_intf($p499, $p500, $i501, $p43, $p41);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb362;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb357:
    assume $i492 == 1;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p493 := $M.57;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p494 := $M.56;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i495 := $load.i32($M.33, $p20);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_265 := rndis_change_virtual_intf($p493, $p494, $i495, $p43, $p41);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb359;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb328:
    assume $i432 == 1;
    assume {:verifier.code 0} true;
    $i435 := $slt.i32($i414, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i435 == 1);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i461 := $M.63;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, 1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $i471 := $M.63;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i471, 3);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i481 := $M.63;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, 2);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb354:
    assume $i482 == 1;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p483 := $M.57;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p484 := $M.56;
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.33, $p4);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i486 := $zext.i8.i32($i485);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i487 := $trunc.i32.i8($i486);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i488 := $load.i8($M.33, $p5);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i489 := $trunc.i8.i1($i488);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} vslice_dummy_var_264 := rndis_add_key($p483, $p484, $i487, $i489, $p44, $p46);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb356;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb351:
    assume $i472 == 1;
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p473 := $M.57;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p474 := $M.56;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i475 := $load.i8($M.33, $p4);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i476 := $zext.i8.i32($i475);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i477 := $trunc.i32.i8($i476);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i478 := $load.i8($M.33, $p5);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i479 := $trunc.i8.i1($i478);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} vslice_dummy_var_263 := rndis_add_key($p473, $p474, $i477, $i479, $p44, $p46);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb353;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb348:
    assume $i462 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p463 := $M.57;
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p464 := $M.56;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i465 := $load.i8($M.33, $p4);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i466 := $zext.i8.i32($i465);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i467 := $trunc.i32.i8($i466);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.33, $p5);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i8.i1($i468);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} vslice_dummy_var_262 := rndis_add_key($p463, $p464, $i467, $i469, $p44, $p46);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    goto $bb350;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb334:
    assume $i435 == 1;
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i436 == 1);
    goto $bb305;

  $bb336:
    assume $i436 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i437 := $M.63;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 1);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i445 := $M.63;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, 3);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i453 := $M.63;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, 2);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb344:
    assume $i454 == 1;
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p455 := $M.57;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p456 := $M.56;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i457 := $load.i8($M.33, $p11);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i458 := $trunc.i8.i1($i457);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i459 := $load.i32($M.33, $p19);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} vslice_dummy_var_261 := rndis_set_power_mgmt($p455, $p456, $i458, $i459);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb346;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb341:
    assume $i446 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p447 := $M.57;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p448 := $M.56;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.33, $p11);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i450 := $trunc.i8.i1($i449);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i451 := $load.i32($M.33, $p19);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_260 := rndis_set_power_mgmt($p447, $p448, $i450, $i451);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    goto $bb343;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb338:
    assume $i438 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p439 := $M.57;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p440 := $M.56;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i441 := $load.i8($M.33, $p11);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i8.i1($i441);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i443 := $load.i32($M.33, $p19);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_259 := rndis_set_power_mgmt($p439, $p440, $i442, $i443);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    goto $bb340;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i104 == 1;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i261 := $M.62;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i262 := $ne.i32($i261, 0);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb160:
    assume $i262 == 1;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} $i263 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i263);
    call {:si_unique_call 1642} {:cexpr "tmp___21"} boogie_si_record_i32($i263);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i264 := $slt.i32($i263, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i263, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i263, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i263, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i263, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} ldv_stop();
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb171:
    assume $i268 == 1;
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i409 := $M.62;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 3);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb284:
    assume $i410 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_258 := ldv_start_7();
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb169:
    assume $i267 == 1;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i406 := $M.62;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 2);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb281:
    assume $i407 == 1;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_257 := ldv_init_7();
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb167:
    assume $i266 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i400 := $M.62;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 4);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i403 := $M.62;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 3);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb278:
    assume $i404 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_256 := ldv_disconnect_7();
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i401 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_255 := ldv_disconnect_7();
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb165:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i263, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $slt.i32($i263, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i270 == 1);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i388 := $M.62;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 4);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i391 := $M.62;
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 1);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i394 := $M.62;
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 3);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i397 := $M.62;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 2);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb272:
    assume $i398 == 1;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p399 := $M.38;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} rndis_status($p399, $p29);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb269:
    assume $i395 == 1;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p396 := $M.38;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} rndis_status($p396, $p29);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb266:
    assume $i392 == 1;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p393 := $M.38;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} rndis_status($p393, $p29);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb263:
    assume $i389 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p390 := $M.38;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} rndis_status($p390, $p29);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb176:
    assume $i270 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i368 := $M.62;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 4);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i373 := $M.62;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i378 := $M.62;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 3);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i383 := $M.62;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 2);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb260:
    assume $i384 == 1;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p385 := $M.38;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p386 := $M.37;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_254 := rndis_rx_fixup($p385, $p386);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume $i379 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p380 := $M.38;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p381 := $M.37;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} vslice_dummy_var_253 := rndis_rx_fixup($p380, $p381);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb254:
    assume $i374 == 1;
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p375 := $M.38;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p376 := $M.37;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} vslice_dummy_var_252 := rndis_rx_fixup($p375, $p376);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i369 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p370 := $M.38;
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p371 := $M.37;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} vslice_dummy_var_251 := rndis_rx_fixup($p370, $p371);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb174:
    assume $i269 == 1;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i352 := $M.62;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 4);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i356 := $M.62;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i360 := $M.62;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 3);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i364 := $M.62;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 2);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb248:
    assume $i365 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p366 := $M.38;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_250 := rndis_wlan_reset($p366);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb250;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb245:
    assume $i361 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p362 := $M.38;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} vslice_dummy_var_249 := rndis_wlan_reset($p362);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb247;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i357 == 1;
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p358 := $M.38;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} vslice_dummy_var_248 := rndis_wlan_reset($p358);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb244;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb239:
    assume $i353 == 1;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p354 := $M.38;
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_247 := rndis_wlan_reset($p354);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    goto $bb241;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i264 == 1;
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i263, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i263, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i263, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i273 == 1);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i348 := $M.62;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 4);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb236:
    assume $i349 == 1;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p350 := $M.38;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_246 := rndis_wlan_stop($p350);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto $bb238;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i273 == 1;
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i339 := $M.62;
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb230:
    assume $i340 == 1;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $p341 := $M.38;
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p342 := $M.39;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $i343 := rndis_wlan_bind($p341, $p342);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.72 := $i343;
    call {:si_unique_call 1671} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i343);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i344 := $M.72;
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i344, 0);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i345 == 1;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i346 := $M.68;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i346, 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $M.68 := $i347;
    call {:si_unique_call 1673} {:cexpr "ref_cnt"} boogie_si_record_i32($i347);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb234;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb180:
    assume $i272 == 1;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i333 := $M.62;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 2);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb227:
    assume $i334 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p335 := $M.38;
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p336 := $M.39;
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} rndis_wlan_unbind($p335, $p336);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i337 := $M.68;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i338 := $sub.i32($i337, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.68 := $i338;
    call {:si_unique_call 1669} {:cexpr "ref_cnt"} boogie_si_record_i32($i338);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb229;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i271 == 1;
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i263, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i263, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i275 == 1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i317 := $M.62;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 4);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i321 := $M.62;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i325 := $M.62;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 3);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i329 := $M.62;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 2);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb224:
    assume $i330 == 1;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p331 := $M.38;
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} vslice_dummy_var_245 := bcm4320b_early_init($p331);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb221:
    assume $i326 == 1;
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p327 := $M.38;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} vslice_dummy_var_244 := bcm4320b_early_init($p327);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    goto $bb223;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb218:
    assume $i322 == 1;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p323 := $M.38;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} vslice_dummy_var_243 := bcm4320b_early_init($p323);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb220;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb215:
    assume $i318 == 1;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p319 := $M.38;
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} vslice_dummy_var_242 := bcm4320b_early_init($p319);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    goto $bb217;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb186:
    assume $i275 == 1;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i293 := $M.62;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 4);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i299 := $M.62;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $i305 := $M.62;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 3);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i311 := $M.62;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 2);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb212:
    assume $i312 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p313 := $M.38;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p314 := $M.37;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.33, $p2);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} vslice_dummy_var_241 := rndis_tx_fixup($p313, $p314, $i315);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume $i306 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p307 := $M.38;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p308 := $M.37;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.33, $p2);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} vslice_dummy_var_240 := rndis_tx_fixup($p307, $p308, $i309);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume $i300 == 1;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p301 := $M.38;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p302 := $M.37;
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.33, $p2);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_239 := rndis_tx_fixup($p301, $p302, $i303);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i294 == 1;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p295 := $M.38;
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p296 := $M.37;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.33, $p2);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} vslice_dummy_var_238 := rndis_tx_fixup($p295, $p296, $i297);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb184:
    assume $i274 == 1;
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i263, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb173;

  $bb188:
    assume $i276 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i277 := $M.62;
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 4);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i281 := $M.62;
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i285 := $M.62;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 3);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i289 := $M.62;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 2);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb199:
    assume $i290 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p291 := $M.38;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.33, $p3);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} rndis_wlan_indication($p291, $p27, $i292);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb196:
    assume $i286 == 1;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p287 := $M.38;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.33, $p3);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} rndis_wlan_indication($p287, $p27, $i288);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i282 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p283 := $M.38;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.33, $p3);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} rndis_wlan_indication($p283, $p27, $i284);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb190:
    assume $i278 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p279 := $M.38;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.33, $p3);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} rndis_wlan_indication($p279, $p27, $i280);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb16:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i96, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i106 == 1);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i259 := $M.61;
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb157:
    assume $i260 == 1;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} invoke_work_3();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i96, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb13;

  $bb24:
    assume $i107 == 1;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i108 := $M.60;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb26:
    assume $i109 == 1;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} $i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 1571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i110);
    call {:si_unique_call 1572} {:cexpr "tmp___20"} boogie_si_record_i32($i110);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i110, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i110, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i110, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i110, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_stop();
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb37:
    assume $i115 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i256 := $M.60;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 3);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb150:
    assume $i257 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_237 := ldv_start_6();
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb35:
    assume $i114 == 1;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i253 := $M.60;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 2);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb147:
    assume $i254 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_236 := ldv_init_6();
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb33:
    assume $i113 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i247 := $M.60;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 4);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i250 := $M.60;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 3);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb144:
    assume $i251 == 1;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_235 := ldv_disconnect_6();
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb141:
    assume $i248 == 1;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_234 := ldv_disconnect_6();
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb31:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i110, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i110, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i117 == 1);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i235 := $M.60;
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 4);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i238 := $M.60;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i241 := $M.60;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 3);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i244 := $M.60;
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 2);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb138:
    assume $i245 == 1;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p246 := $M.35;
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} rndis_status($p246, $p26);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb135:
    assume $i242 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p243 := $M.35;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} rndis_status($p243, $p26);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume $i239 == 1;
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p240 := $M.35;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} rndis_status($p240, $p26);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb129:
    assume $i236 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p237 := $M.35;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} rndis_status($p237, $p26);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb42:
    assume $i117 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i215 := $M.60;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 4);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i220 := $M.60;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i225 := $M.60;
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i230 := $M.60;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb126:
    assume $i231 == 1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p232 := $M.35;
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p233 := $M.34;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} vslice_dummy_var_233 := rndis_rx_fixup($p232, $p233);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i226 == 1;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p227 := $M.35;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p228 := $M.34;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} vslice_dummy_var_232 := rndis_rx_fixup($p227, $p228);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i221 == 1;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p222 := $M.35;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p223 := $M.34;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_231 := rndis_rx_fixup($p222, $p223);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume $i216 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p217 := $M.35;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p218 := $M.34;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_230 := rndis_rx_fixup($p217, $p218);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb40:
    assume $i116 == 1;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i199 := $M.60;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 4);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i203 := $M.60;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i207 := $M.60;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 3);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i211 := $M.60;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 2);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb114:
    assume $i212 == 1;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p213 := $M.35;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_229 := rndis_wlan_reset($p213);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb116;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i208 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p209 := $M.35;
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_228 := rndis_wlan_reset($p209);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i204 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p205 := $M.35;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_227 := rndis_wlan_reset($p205);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i200 == 1;
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p201 := $M.35;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_226 := rndis_wlan_reset($p201);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i110, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i110, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i110, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i120 == 1);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i195 := $M.60;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 4);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb102:
    assume $i196 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p197 := $M.35;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_225 := rndis_wlan_stop($p197);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb104;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i120 == 1;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i186 := $M.60;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 1);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb96:
    assume $i187 == 1;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p188 := $M.35;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p189 := $M.36;
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $i190 := rndis_wlan_bind($p188, $p189);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $M.71 := $i190;
    call {:si_unique_call 1601} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i190);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i191 := $M.71;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb98:
    assume $i192 == 1;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i193 := $M.68;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i194 := $add.i32($i193, 1);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $M.68 := $i194;
    call {:si_unique_call 1603} {:cexpr "ref_cnt"} boogie_si_record_i32($i194);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i119 == 1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i180 := $M.60;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb93:
    assume $i181 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p182 := $M.35;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p183 := $M.36;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} rndis_wlan_unbind($p182, $p183);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i184 := $M.68;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i185 := $sub.i32($i184, 1);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $M.68 := $i185;
    call {:si_unique_call 1599} {:cexpr "ref_cnt"} boogie_si_record_i32($i185);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i110, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i110, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i122 == 1);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i164 := $M.60;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 4);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i168 := $M.60;
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i172 := $M.60;
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 3);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i176 := $M.60;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb90:
    assume $i177 == 1;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p178 := $M.35;
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_224 := bcm4320a_early_init($p178);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i173 == 1;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p174 := $M.35;
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_223 := bcm4320a_early_init($p174);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i169 == 1;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p170 := $M.35;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_222 := bcm4320a_early_init($p170);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i165 == 1;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p166 := $M.35;
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_221 := bcm4320a_early_init($p166);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb52:
    assume $i122 == 1;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i140 := $M.60;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 4);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i146 := $M.60;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i152 := $M.60;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 3);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i158 := $M.60;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb78:
    assume $i159 == 1;
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p160 := $M.35;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p161 := $M.34;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.33, $p0);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_220 := rndis_tx_fixup($p160, $p161, $i162);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i153 == 1;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p154 := $M.35;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p155 := $M.34;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.33, $p0);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_219 := rndis_tx_fixup($p154, $p155, $i156);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i147 == 1;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p148 := $M.35;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p149 := $M.34;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.33, $p0);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_218 := rndis_tx_fixup($p148, $p149, $i150);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i141 == 1;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p142 := $M.35;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p143 := $M.34;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.33, $p0);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_217 := rndis_tx_fixup($p142, $p143, $i144);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb50:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb39;

  $bb54:
    assume $i123 == 1;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i124 := $M.60;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 4);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i128 := $M.60;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i132 := $M.60;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 3);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i136 := $M.60;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 2);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i137 == 1;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p138 := $M.35;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.33, $p1);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} rndis_wlan_indication($p138, $p24, $i139);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i133 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p134 := $M.35;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.33, $p1);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} rndis_wlan_indication($p134, $p24, $i135);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i129 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p130 := $M.35;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.33, $p1);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} rndis_wlan_indication($p130, $p24, $i131);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i125 == 1;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p126 := $M.35;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.33, $p1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} rndis_wlan_indication($p126, $p24, $i127);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb156_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} $i96 := __VERIFIER_nondet_int();
    call {:si_unique_call 1568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i96);
    call {:si_unique_call 1569} {:cexpr "tmp___19"} boogie_si_record_i32($i96);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 538822);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    return;
}



const ldv_disconnect_6: ref;

axiom ldv_disconnect_6 == $sub.ref(0, 539854);

procedure ldv_disconnect_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1985} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1986} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_6: ref;

axiom ldv_init_6 == $sub.ref(0, 540886);

procedure ldv_init_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1987} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_6: ref;

axiom ldv_start_6 == $sub.ref(0, 541918);

procedure ldv_start_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1989} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1990} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_7: ref;

axiom ldv_disconnect_7 == $sub.ref(0, 542950);

procedure ldv_disconnect_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1991} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1992} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_7: ref;

axiom ldv_init_7 == $sub.ref(0, 543982);

procedure ldv_init_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1993} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1994} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_7: ref;

axiom ldv_start_7 == $sub.ref(0, 545014);

procedure ldv_start_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1995} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1996} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_9: ref;

axiom ldv_release_9 == $sub.ref(0, 546046);

procedure ldv_release_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1997} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1998} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_bind_9: ref;

axiom ldv_bind_9 == $sub.ref(0, 547078);

procedure ldv_bind_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_bind_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1999} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2000} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_8: ref;

axiom ldv_ndo_init_8 == $sub.ref(0, 548110);

procedure ldv_ndo_init_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2001} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_8: ref;

axiom ldv_ndo_uninit_8 == $sub.ref(0, 549142);

procedure ldv_ndo_uninit_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2003} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2004} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_reset_resume_4: ref;

axiom ldv_reset_resume_4 == $sub.ref(0, 550174);

procedure ldv_reset_resume_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2005} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2006} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rndis_wlan_driver_exit: ref;

axiom rndis_wlan_driver_exit == $sub.ref(0, 551206);

procedure rndis_wlan_driver_exit();
  free requires assertsPassed;
  modifies $M.67;



implementation rndis_wlan_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} ldv_usb_deregister_58(rndis_wlan_driver);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    return;
}



const rndis_wlan_driver_init: ref;

axiom rndis_wlan_driver_init == $sub.ref(0, 552238);

procedure rndis_wlan_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.76, $M.44, $M.0, $CurrAddr;



implementation rndis_wlan_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $i0 := ldv_usb_register_driver_57(rndis_wlan_driver, __this_module, .str.1);
    call {:si_unique_call 2009} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_disconnect_5: ref;

axiom ldv_disconnect_5 == $sub.ref(0, 553270);

procedure ldv_disconnect_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_disconnect_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2010} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_5: ref;

axiom ldv_init_5 == $sub.ref(0, 554302);

procedure ldv_init_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2012} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2013} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_start_5: ref;

axiom ldv_start_5 == $sub.ref(0, 555334);

procedure ldv_start_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_start_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2014} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2015} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 556366);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_57: ref;

axiom ldv_usb_register_driver_57 == $sub.ref(0, 557398);

procedure ldv_usb_register_driver_57($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.76, $M.44, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_57($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2017} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 2018} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 2019} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} ldv_usb_driver_4();
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 558430);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2021} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2022} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_58: ref;

axiom ldv_usb_deregister_58 == $sub.ref(0, 559462);

procedure ldv_usb_deregister_58($p0: ref);
  free requires assertsPassed;
  modifies $M.67;



implementation ldv_usb_deregister_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} usb_deregister($p0);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 2024} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 560494);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 561526);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2025} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 1} true;
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 562558);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 563590);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 564622);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 565654);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 566686);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 567718);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 568750);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 569782);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 570814);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 571846);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 572878);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 573910);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 574942);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2026} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2027} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2028} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2029} __VERIFIER_assume($i4);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 575974);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 577006);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 578038);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 579070);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 580102);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 581134);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 582166);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 583198);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 584230);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2030} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2031} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2032} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2033} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2034} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2035} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2036} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2037} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2038} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2039} __VERIFIER_assume($i7);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2040} __VERIFIER_assume($i11);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 585262);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 586294);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 587326);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 588358);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 589390);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 590422);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 591454);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 592486);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 593518);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2041} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2042} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2043} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2044} __VERIFIER_assume($i10);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 594550);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2045} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2046} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2047} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 595582);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2048} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2049} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 596614);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 597646);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2050} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2051} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 598678);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 599710);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 600742);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2052} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2053} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2054} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $p6 := malloc($i5);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.0;
    call {:si_unique_call 2057} cmdloc_dummy_var_131 := $memset.i8(cmdloc_dummy_var_130, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_131;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 601774);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 602806);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.14, $M.16, $M.18, $M.20, $M.48, $M.52, $M.49, $M.50, $M.51, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.59, $M.15, $M.17, $M.19, $M.21, $M.45, $M.46, $M.47, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.9, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.159, $M.160, $M.0, $M.30, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.252, $M.253;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2058} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 2059} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 2060} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 2061} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 2062} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2063} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.52 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 2064} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 2065} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 2066} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 2067} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 2068} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 2069} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 2070} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.59 := $0.ref;
    $M.15 := $0.ref;
    $M.17 := $0.ref;
    $M.19 := $0.ref;
    $M.21 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := $0.ref;
    $M.58 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 2071} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2072} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 2073} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 2074} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 2075} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2076} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 2077} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 2078} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 2079} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 2080} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 2081} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 2082} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 2083} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 2084} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 2085} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 2086} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 2087} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 2088} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 2089} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 2090} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 2091} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 2092} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 2093} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.89 := $store.i16($M.89, __mod_usb__products_device_table, 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.89 := $store.i16($M.89, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i16($M.90, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i16($M.91, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.92 := $store.i16($M.92, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.93 := $store.i16($M.93, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.101 := $store.i64($M.101, $add.ref($add.ref($add.ref(__mod_usb__products_device_table, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.159 := $store.i16($M.159, products, 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(4, 1)), 188);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(2, 1)), 2991);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(4, 1)), 283);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1293);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(4, 1)), 283);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(2, 1)), 6041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(4, 1)), 283);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(4, 1)), 20);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(2, 1)), 5041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(4, 1)), 38);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(2, 1)), 2821);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(4, 1)), 5911);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(6, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2652);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 12005));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(7, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(2, 1)), 5776);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(4, 1)), 1813);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(8, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320b_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(2, 1)), 5041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(4, 1)), 14);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(9, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320a_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2991);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(4, 1)), 273);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(10, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320a_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(0, 1)), 899);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1041);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(4, 1)), 75);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(11, 32)), $mul.ref(24, 1)), $p2i.ref.i64(bcm4320a_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(0, 1)), 896);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(13, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(14, 1)), 2);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(12, 32)), $mul.ref(24, 1)), $p2i.ref.i64(rndis_wlan_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(0, 1)), 896);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(13, 1)), $sub.i8(0, 17));
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(14, 1)), 1);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(15, 1)), 1);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(13, 32)), $mul.ref(24, 1)), $p2i.ref.i64(rndis_wlan_info));
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.159 := $store.i16($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.159 := $store.i8($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.159 := $store.i64($M.159, $add.ref($add.ref($add.ref(products, $mul.ref(0, 480)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.160 := $store.ref($M.160, rndis_wlan_driver, .str.1);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usbnet_probe);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usbnet_disconnect);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), usbnet_suspend);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), usbnet_resume);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), products);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.160 := $store.i64($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(rndis_wlan_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.0 := $store.i32($M.0, rndis_cipher_suites, 1027073);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rndis_cipher_suites, $mul.ref(0, 16)), $mul.ref(1, 4)), 1027077);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rndis_cipher_suites, $mul.ref(0, 16)), $mul.ref(2, 4)), 1027074);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(rndis_cipher_suites, $mul.ref(0, 16)), $mul.ref(3, 4)), 1027076);
    $M.0 := $store.i32($M.0, rndis_rates, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_rates, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, rndis_channels, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(rndis_channels, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.ref($M.0, rndis_wiphy_privid, rndis_wiphy_privid);
    $M.0 := $store.ref($M.0, rndis_wlan_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), usbnet_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), usbnet_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), usbnet_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), rndis_wlan_set_multicast_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), usbnet_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(rndis_wlan_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.30 := 0;
    call {:si_unique_call 2094} {:cexpr "modparam_workaround_interval"} boogie_si_record_i32(0);
    $M.29 := 1;
    call {:si_unique_call 2095} {:cexpr "modparam_roamdelta"} boogie_si_record_i32(1);
    $M.28 := $sub.i32(0, 70);
    call {:si_unique_call 2096} {:cexpr "modparam_roamtrigger"} boogie_si_record_i32($sub.i32(0, 70));
    $M.27 := 3;
    call {:si_unique_call 2097} {:cexpr "modparam_power_output"} boogie_si_record_i32(3);
    $M.26 := 0;
    call {:si_unique_call 2098} {:cexpr "modparam_power_save"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 2099} {:cexpr "modparam_afterburner"} boogie_si_record_i32(0);
    $M.24 := 1;
    call {:si_unique_call 2100} {:cexpr "modparam_frameburst"} boogie_si_record_i32(1);
    $M.23 := $store.i8($M.23, modparam_country, 69);
    $M.23 := $store.i8($M.23, $add.ref($add.ref(modparam_country, $mul.ref(0, 4)), $mul.ref(1, 1)), 85);
    $M.23 := $store.i8($M.23, $add.ref($add.ref(modparam_country, $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.23 := $store.i8($M.23, $add.ref($add.ref(modparam_country, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(17, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(18, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.26, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.160, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.160, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.128, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.128, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.134, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.134, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.132, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.132, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.130, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.130, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(6, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.170, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.170, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.171, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.171, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.163, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(15, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.142, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(15, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.142, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.24, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(6, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.33, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.167, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(9, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.165, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(10, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.165, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.161, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.161, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.173, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(6, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.173, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.155, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.155, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.168, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.168, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.146, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.146, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.126, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.124, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(18, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(20, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.135, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.135, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.137, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.139, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 4)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 4)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.139, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.140, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 4)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 4)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.140, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(10, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(10, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(28, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(32, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(34, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(36, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(2, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(6, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.97, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.97, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(5, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.252 := $store.i8($M.252, .str.99, 37);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.99, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.99, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.100, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(5, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(9, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.100, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(4, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(7, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(8, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(4, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.253 := $store.i8($M.253, .str.78, 69);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.78, $mul.ref(0, 3)), $mul.ref(1, 1)), 85);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.78, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 3)), $mul.ref(1, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(18, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.2, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(14, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(15, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(20, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(22, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 0);
    $M.0 := $store.i8($M.0, .str.22, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(20, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(26, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(27, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(28, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(29, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    call {:si_unique_call 2101} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 603838);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 604870);

procedure devirtbounce.1(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 605902);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 606934);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.14, $M.16, $M.18, $M.20, $M.48, $M.52, $M.49, $M.50, $M.51, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.59, $M.15, $M.17, $M.19, $M.21, $M.45, $M.46, $M.47, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.9, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.159, $M.160, $M.0, $M.30, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.252, $M.253, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2102} __SMACK_static_init();
    call {:si_unique_call 2103} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.60, $M.14, $M.16, $M.18, $M.20, $M.61, $M.62, $M.63, $M.40, $M.41, $M.42, $M.43, $M.64, $M.65, $M.48, $M.49, $M.50, $M.51, $M.66, $M.67, $M.68, $M.69, $M.70, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.8, $M.10, $M.11, $M.71, $M.12, $M.13, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.22, $M.78, $M.79, $M.80, $M.45, $M.46, $M.47, $M.54, $M.55, $M.56, $M.57, $M.58, $M.37, $M.38, $M.39, $M.34, $M.35, $M.36, $M.53, $M.81, $M.52, $M.44, $M.59, $M.15, $M.17, $M.19, $M.21, $M.9, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.159, $M.160, $M.30, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24, $M.23, $M.252, $M.253, $CurrAddr, $M.32;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation rndis_connect_loop_$bb22(in_$p2: ref, in_$p56: ref, in_$i62: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i60: i32, in_$i61: i32, in_$i72: i32) returns (out_$i62: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i60: i32, out_$i61: i32, out_$i72: i32)
{

  entry:
    out_$i62, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i60, out_$i61, out_$i72 := in_$i62, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i60, in_$i61, in_$i72;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  $bb24:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i60, out_$i61 := out_$i69, out_$i68;
    goto $bb24_dummy;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i68;
    assume true;
    goto $bb24;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i71 := $sgt.i32(out_$i70, out_$i69);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p56);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i60, 1);
    call {:si_unique_call 91} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$i68 := $or.i32(out_$i67, out_$i61);
    call {:si_unique_call 90} {:cexpr "keymgmt"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} out_$i67 := rndis_akm_suite_to_key_mgmt(out_$i66);
    call {:si_unique_call 89} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(36, 1)), $mul.ref(out_$i62, 4));
    goto corral_source_split_424;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i60);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i62, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i60, out_$i61, out_$i72 := rndis_connect_loop_$bb22(in_$p2, in_$p56, out_$i62, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i60, out_$i61, out_$i72);
    return;

  exit:
    return;
}



procedure rndis_connect_loop_$bb22(in_$p2: ref, in_$p56: ref, in_$i62: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i60: i32, in_$i61: i32, in_$i72: i32) returns (out_$i62: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i60: i32, out_$i61: i32, out_$i72: i32);



implementation rndis_connect_loop_$bb7(in_$p2: ref, in_$p30: ref, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i34: i32, in_$i35: i32, in_$i46: i32) returns (out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i34: i32, out_$i35: i32, out_$i46: i32)
{

  entry:
    out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i34, out_$i35, out_$i46 := in_$i36, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i34, in_$i35, in_$i46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  $bb9:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i43, out_$i42;
    goto $bb9_dummy;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i42;
    assume true;
    goto $bb9;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$i45 := $sgt.i32(out_$i44, out_$i43);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p30);
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i34, 1);
    call {:si_unique_call 86} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$i42 := $or.i32(out_$i41, out_$i35);
    call {:si_unique_call 85} {:cexpr "pairwise"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} out_$i41 := rndis_cipher_to_alg(out_$i40);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(12, 1)), $mul.ref(out_$i36, 4));
    goto corral_source_split_391;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i34);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i34, out_$i35, out_$i46 := rndis_connect_loop_$bb7(in_$p2, in_$p30, out_$i36, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i34, out_$i35, out_$i46);
    return;

  exit:
    return;
}



procedure rndis_connect_loop_$bb7(in_$p2: ref, in_$p30: ref, in_$i36: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i34: i32, in_$i35: i32, in_$i46: i32) returns (out_$i36: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i34: i32, out_$i35: i32, out_$i46: i32);



implementation wiphy_priv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} wiphy_priv_loop_$bb3();
    return;

  exit:
    return;
}



procedure wiphy_priv_loop_$bb3();



implementation remove_pmkid_loop_$bb26(in_$p1: ref, in_$i8: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i50: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i50: i32, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8)
{

  entry:
    out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i50, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := in_$i51, in_$p53, in_$i54, in_$i55, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i50, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  $bb28:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := out_$i60;
    goto $bb28_dummy;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i62 := $ult.i32(out_$i61, in_$i8);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i50, 1);
    call {:si_unique_call 406} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_23 := $M.0;
    out_cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 405} out_cmdloc_dummy_var_25 := $memcpy.i8(out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_$p58, out_$p59, 22, $zext.i32.i64(2), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_25;
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i55, 22));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i50, 1);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i51, 22));
    goto corral_source_split_2085;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i50, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25 := remove_pmkid_loop_$bb26(in_$p1, in_$i8, out_$i51, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i50, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25);
    return;

  exit:
    return;
}



procedure remove_pmkid_loop_$bb26(in_$p1: ref, in_$i8: i32, in_$i51: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i50: i32, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8) returns (out_$i51: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i50: i32, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8);
  modifies $M.0;



implementation remove_pmkid_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i8: i32, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i11: i32, in_$i26: i32) returns (out_$i12: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i11: i32, out_$i26: i32)
{

  entry:
    out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i11, out_$i26 := in_$i12, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i11, in_$i26;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;

  $bb13:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i24;
    goto $bb13_dummy;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb13;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i24, in_$i8);
    goto corral_source_split_2036;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i11, 1);
    call {:si_unique_call 399} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2035;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i11;
    assume true;
    goto $bb10;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i8(out_$i19);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} out_$i19 := ether_addr_equal(out_$p16, out_$p18);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i12, 22)), $mul.ref(0, 1));
    goto corral_source_split_2022;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i11, out_$i26 := remove_pmkid_loop_$bb7(in_$p1, in_$p2, in_$i8, out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i11, out_$i26);
    return;

  exit:
    return;
}



procedure remove_pmkid_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i8: i32, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$i22: i32, in_$i24: i32, in_$i25: i1, in_$i11: i32, in_$i26: i32) returns (out_$i12: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$i22: i32, out_$i24: i32, out_$i25: i1, out_$i11: i32, out_$i26: i32);



implementation update_pmkid_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i8: i32, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i33: i32, in_$i34: i1, in_$i11: i32, in_$i35: i32) returns (out_$i12: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i33: i32, out_$i34: i1, out_$i11: i32, out_$i35: i32)
{

  entry:
    out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i33, out_$i34, out_$i11, out_$i35 := in_$i12, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i33, in_$i34, in_$i11, in_$i35;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i33;
    goto $bb17_dummy;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb17;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(out_$i33, in_$i8);
    goto corral_source_split_2439;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i11, 1);
    call {:si_unique_call 465} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i11;
    assume true;
    goto $bb12;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_2434;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := 1;
    goto $bb11;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i22 := 0;
    goto $bb11;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i8(out_$i19);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} out_$i19 := ether_addr_equal(out_$p16, out_$p18);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i12, 22)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i33, out_$i34, out_$i11, out_$i35 := update_pmkid_loop_$bb7(in_$p1, in_$p2, in_$i8, out_$i12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i33, out_$i34, out_$i11, out_$i35);
    return;

  exit:
    return;
}



procedure update_pmkid_loop_$bb7(in_$p1: ref, in_$p2: ref, in_$i8: i32, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i33: i32, in_$i34: i1, in_$i11: i32, in_$i35: i32) returns (out_$i12: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i33: i32, out_$i34: i1, out_$i11: i32, out_$i35: i32);



implementation {:SIextraRecBound 4} restore_keys_loop_$bb1(in_$p0: ref, in_$i2: i8, in_$i3: i32, in_$i4: i8, in_$i6: i32, in_$i7: i1, in_$i1: i32, in_vslice_dummy_var_148: i32) returns (out_$i2: i8, out_$i3: i32, out_$i4: i8, out_$i6: i32, out_$i7: i1, out_$i1: i32, out_vslice_dummy_var_148: i32)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i6, out_$i7, out_$i1, out_vslice_dummy_var_148 := in_$i2, in_$i3, in_$i4, in_$i6, in_$i7, in_$i1, in_vslice_dummy_var_148;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  $bb3:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i6;
    goto $bb3_dummy;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i7 := $sle.i32(out_$i6, 3);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i1, 1);
    call {:si_unique_call 516} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_3072;

  SeqInstr_195:
    goto corral_source_split_3071;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_vslice_dummy_var_148 := restore_key(in_$p0, out_$i4);
    goto SeqInstr_194;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$i4 := $trunc.i32.i8(out_$i3);
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i3 := $zext.i8.i32(out_$i2);
    goto corral_source_split_3069;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $trunc.i32.i8(out_$i1);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i6, out_$i7, out_$i1, out_vslice_dummy_var_148 := restore_keys_loop_$bb1(in_$p0, out_$i2, out_$i3, out_$i4, out_$i6, out_$i7, out_$i1, out_vslice_dummy_var_148);
    return;

  exit:
    return;
}



procedure restore_keys_loop_$bb1(in_$p0: ref, in_$i2: i8, in_$i3: i32, in_$i4: i8, in_$i6: i32, in_$i7: i1, in_$i1: i32, in_vslice_dummy_var_148: i32) returns (out_$i2: i8, out_$i3: i32, out_$i4: i8, out_$i6: i32, out_$i7: i1, out_$i1: i32, out_vslice_dummy_var_148: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, assertsPassed;



implementation rndis_check_bssid_list_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p43: ref, in_$i50: i32, in_$i82: i1, in_$i83: i8, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i1, in_$i92: i8, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i8, in_$i99: i1, in_$i80: i32, in_$p81: ref, in_$i100: i32) returns (out_$i82: i1, out_$i83: i8, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i1, out_$i92: i8, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i8, out_$i99: i1, out_$i80: i32, out_$p81: ref, out_$i100: i32)
{

  entry:
    out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i80, out_$p81, out_$i100 := in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i80, in_$p81, in_$i100;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  $bb40:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i80, out_$p81 := out_$i94, out_$p95;
    goto $bb40_dummy;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i94;
    assume true;
    goto $bb40;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i8.i1(out_$i98);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i1.i8(out_$i97);
    call {:si_unique_call 683} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$i97 := check_bssid_list_item(out_$p95, out_$i96, in_$p43, in_$i50);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.12, in_$p3);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$p95 := next_bssid_list_item(out_$p81, in_$p3, in_$p43, in_$i50);
    goto corral_source_split_3929;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i80, 1);
    call {:si_unique_call 680} {:cexpr "real_count"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_3928;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, in_$p2, 1);
    goto corral_source_split_3926;

  $bb36:
    assume out_$i93 == 1;
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i93 := $trunc.i8.i1(out_$i92);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i1.i8(out_$i91);
    call {:si_unique_call 679} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i92);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$i91 := ether_addr_equal(out_$p90, in_$p1);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(out_$p89);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p81, $mul.ref(0, 116)), $mul.ref(4, 1));
    goto corral_source_split_3919;

  $bb34:
    assume out_$i88 == 1;
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i87 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_3915;

  $bb32:
    assume out_$i86 == 1;
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3911;

  $bb29:
    assume out_$i84 == 1;
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i8.i1(out_$i83);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i1.i8(out_$i82);
    call {:si_unique_call 677} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i83);
    goto corral_source_split_3907;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} out_$i82 := rndis_bss_info_update(in_$p0, out_$p81);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb31;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb31;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i80, out_$p81, out_$i100 := rndis_check_bssid_list_loop_$bb27(in_$p0, in_$p1, in_$p2, in_$p3, in_$p43, in_$i50, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i80, out_$p81, out_$i100);
    return;

  exit:
    return;
}



procedure rndis_check_bssid_list_loop_$bb27(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p43: ref, in_$i50: i32, in_$i82: i1, in_$i83: i8, in_$i84: i1, in_$i85: i64, in_$i86: i1, in_$i87: i64, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i1, in_$i92: i8, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i8, in_$i99: i1, in_$i80: i32, in_$p81: ref, in_$i100: i32) returns (out_$i82: i1, out_$i83: i8, out_$i84: i1, out_$i85: i64, out_$i86: i1, out_$i87: i64, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i1, out_$i92: i8, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i8, out_$i99: i1, out_$i80: i32, out_$p81: ref, out_$i100: i32);
  modifies $M.12, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation rndis_check_bssid_list_loop_$bb7(in_$p0: ref, in_$p4: ref, in_$p32: ref, in_$p30: ref, in_$i31: i32, in_$i35: i32, in_$i36: i1, in_$i39: i32, in_$i40: i1, in_$p37: ref, in_$i38: i32, in_$i41: i32, in_$i42: i1, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p43: ref, in_$i44: i32) returns (out_$p32: ref, out_$p30: ref, out_$i31: i32, out_$i35: i32, out_$i36: i1, out_$i39: i32, out_$i40: i1, out_$p37: ref, out_$i38: i32, out_$i41: i32, out_$i42: i1, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p43: ref, out_$i44: i32)
{

  entry:
    out_$p32, out_$p30, out_$i31, out_$i35, out_$i36, out_$i39, out_$i40, out_$p37, out_$i38, out_$i41, out_$i42, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p43, out_$i44 := in_$p32, in_$p30, in_$i31, in_$i35, in_$i36, in_$i39, in_$i40, in_$p37, in_$i38, in_$i41, in_$i42, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p43, in_$i44;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$p30, out_$i31 := out_$p47, out_$i45;
    goto $bb19_dummy;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p47;
    assume true;
    goto $bb19;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_3858;

  SeqInstr_267:
    goto corral_source_split_3857;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} out_$p47 := kmalloc(out_$i46, 208);
    goto SeqInstr_266;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} kfree(out_$p30);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.10, in_$p4);
    call {:si_unique_call 665} {:cexpr "len"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3854;

  $bb17:
    assume out_$i42 == 1;
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$p43, out_$i44 := out_$p30, out_$i35;
    assume true;
    goto $bb17;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, out_$i31);
    goto corral_source_split_3851;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.10, in_$p4);
    goto corral_source_split_3850;

  $bb15:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$p37, out_$i38 := out_$p30, out_$i35;
    assume true;
    goto $bb15;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i40 := $ule.i32(out_$i39, 3);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.10, in_$p4);
    goto corral_source_split_3847;

  $bb13:
    assume !(out_$i36 == 1);
    goto corral_source_split_3846;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p37, out_$i38 := out_$p30, out_$i35;
    assume true;
    goto $bb13;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3842;

  SeqInstr_264:
    call {:si_unique_call 664} {:cexpr "ret"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3841;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} out_$i35 := rndis_query_oid(in_$p0, 218169879, out_$p30, in_$p4);
    goto SeqInstr_263;

  $bb10:
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, in_$p4, out_$i31);
    goto corral_source_split_3840;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p32, out_$p30, out_$i31, out_$i35, out_$i36, out_$i39, out_$i40, out_$p37, out_$i38, out_$i41, out_$i42, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p43, out_$i44 := rndis_check_bssid_list_loop_$bb7(in_$p0, in_$p4, out_$p32, out_$p30, out_$i31, out_$i35, out_$i36, out_$i39, out_$i40, out_$p37, out_$i38, out_$i41, out_$i42, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p43, out_$i44);
    return;

  exit:
    return;
}



procedure rndis_check_bssid_list_loop_$bb7(in_$p0: ref, in_$p4: ref, in_$p32: ref, in_$p30: ref, in_$i31: i32, in_$i35: i32, in_$i36: i1, in_$i39: i32, in_$i40: i1, in_$p37: ref, in_$i38: i32, in_$i41: i32, in_$i42: i1, in_$i45: i32, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p43: ref, in_$i44: i32) returns (out_$p32: ref, out_$p30: ref, out_$i31: i32, out_$i35: i32, out_$i36: i1, out_$i39: i32, out_$i40: i1, out_$p37: ref, out_$i38: i32, out_$i41: i32, out_$i42: i1, out_$i45: i32, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p43: ref, out_$i44: i32);
  modifies assertsPassed, $M.11, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.10, $CurrAddr;



implementation rndis_wlan_auth_indication_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i1, in_$p11: ref, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i1, out_$p11: ref, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p11, out_$i12 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$p11, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5406;

  $bb28:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$i12 := out_$p50, out_$i46;
    goto $bb28_dummy;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$i51 := $ugt.i32(out_$i46, 15);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p11, $mul.ref(out_$i49, 1));
    goto corral_source_split_5464;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i48);
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i12, out_$i45);
    call {:si_unique_call 1019} {:cexpr "buflen"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_5459;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5458;

  $bb26:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} cfg80211_michael_mic_failure(out_$p41, out_$p43, 0, $sub.i32(0, 1), $0.ref, 208);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5454;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5452;

  $bb25:
    assume out_$i39 == 1;
    goto corral_source_split_5451;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i29);
    goto corral_source_split_5449;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} cfg80211_michael_mic_failure(out_$p36, out_$p38, 1, $sub.i32(0, 1), $0.ref, 208);
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_5446;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5445;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_5444;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5443;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i25);
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} netdev_info.ref.ref.ref.i32(out_$p31, .str.72, out_$p28, out_$i33);
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5435;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  $bb20:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$p28, out_$i29 := out_$p24, 0;
    goto $bb21;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p28, out_$i29 := .str.71, 1;
    goto $bb21;

  $bb19:
    assume out_$i27 == 1;
    goto corral_source_split_5432;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i15, 14);
    goto corral_source_split_5429;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5428;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$p24, out_$i25 := out_$p21, 0;
    goto $bb18;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$p24, out_$i25 := .str.70, 1;
    goto $bb18;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_5426;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i15, 6);
    goto corral_source_split_5423;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  $bb14:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$p21 := out_$p18;
    goto $bb15;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$p21 := .str.69;
    goto $bb15;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i15, 2);
    goto corral_source_split_5417;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5416;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$p18 := .str.67;
    goto $bb12;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$p18 := .str.68;
    goto $bb12;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 1);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    call {:si_unique_call 1015} {:cexpr "flags"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5409;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p11, out_$i12 := rndis_wlan_auth_indication_loop_$bb8(in_$p0, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$p11, out_$i12);
    return;

  exit:
    return;
}



procedure rndis_wlan_auth_indication_loop_$bb8(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$p50: ref, in_$i51: i1, in_$p11: ref, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$p50: ref, out_$i51: i1, out_$p11: ref, out_$i12: i32);



implementation rndis_wlan_pmkid_cand_list_indication_loop_$bb14(in_$p0: ref, in_$p3: ref, in_$p17: ref, in_$p27: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i24, in_$i47: i24, in_$i48: i24, in_$p49: ref, in_$p50: ref, in_$i51: i8, in_$i52: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i24, out_$i47: i24, out_$i48: i24, out_$p49: ref, out_$p50: ref, out_$i51: i8, out_$i52: i64, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i30 := in_$p31, in_$p32, in_$i33, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i30;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5511;

  $bb19:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i69;
    goto $bb19_dummy;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i69, out_$i70);
    goto corral_source_split_5564;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, in_$p27);
    goto corral_source_split_5563;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i30, 1);
    call {:si_unique_call 1032} {:cexpr "i"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_5562;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} cfg80211_pmksa_candidate_notify(out_$p65, out_$i30, out_$p67, out_$i68, 32);
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$i68 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 12)), $mul.ref(0, 1));
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_5557;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5556;

  $bb17:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref(in_$p3, out_$p57, .str.77, out_$i30, out_$i59, out_$i61, out_$p63);
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 12)), $mul.ref(0, 1));
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i1.i32(out_$i60);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1456)), $mul.ref(464, 1));
    goto corral_source_split_5546;

  $bb16:
    assume out_$i55 == 1;
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} out_$i54 := ldv__builtin_expect(out_$i53, 0);
    call {:si_unique_call 1029} {:cexpr "tmp"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i64(out_$i52, 1);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i64(out_$i51);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.6, out_$p50);
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p49, 0);
    goto corral_source_split_5537;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5536;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p45, out_$i48);
    goto corral_source_split_5535;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    out_$i48 := $or.i24(out_$i47, 3008);
    goto corral_source_split_5534;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i24(out_$i46, $sub.i24(0, 262144));
    goto corral_source_split_5533;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i24($M.5, out_$p45);
    goto corral_source_split_5532;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p43, .str.77);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p42, .str);
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p41, .str.76);
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p40, .str.1);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i8(out_$i38);
    call {:si_unique_call 1027} {:cexpr "preauth"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i37 := $and.i32(out_$i36, 1);
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i30);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_5514;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p17, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i30 := rndis_wlan_pmkid_cand_list_indication_loop_$bb14(in_$p0, in_$p3, in_$p17, in_$p27, out_$p31, out_$p32, out_$i33, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i30);
    return;

  exit:
    return;
}



procedure rndis_wlan_pmkid_cand_list_indication_loop_$bb14(in_$p0: ref, in_$p3: ref, in_$p17: ref, in_$p27: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i24, in_$i47: i24, in_$i48: i24, in_$p49: ref, in_$p50: ref, in_$i51: i8, in_$i52: i64, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i24, out_$i47: i24, out_$i48: i24, out_$p49: ref, out_$p50: ref, out_$i51: i8, out_$i52: i64, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i30: i32);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation rndis_set_config_parameter_loop_$bb33(in_$p3: ref, in_$p86: ref, in_$i88: i64, in_$i91: i64, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i16, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i1, in_$i93: i32) returns (out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i16, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i1, out_$i93: i32)
{

  entry:
    out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93 := in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i93;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  $bb35:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := out_$i101;
    goto $bb35_dummy;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i103 := $ult.i64(out_$i102, in_$i91);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i93, 1);
    call {:si_unique_call 1069} {:cexpr "i"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p100, out_$i97);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(in_$p86, $mul.ref(out_$i99, 2));
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i93);
    out_$i99 := $add.i64(in_$i88, out_$i98);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i16(out_$i96);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i8($M.0, out_$p95);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(in_$p3, $mul.ref(out_$i94, 1));
    goto corral_source_split_5859;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i93);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93 := rndis_set_config_parameter_loop_$bb33(in_$p3, in_$p86, in_$i88, in_$i91, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93);
    return;

  exit:
    return;
}



procedure rndis_set_config_parameter_loop_$bb33(in_$p3: ref, in_$p86: ref, in_$i88: i64, in_$i91: i64, in_$i94: i64, in_$p95: ref, in_$i96: i8, in_$i97: i16, in_$i98: i64, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i1, in_$i93: i32) returns (out_$i94: i64, out_$p95: ref, out_$i96: i8, out_$i97: i16, out_$i98: i64, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i1, out_$i93: i32);
  modifies $M.0;



implementation rndis_set_config_parameter_loop_$bb23(in_$p1: ref, in_$p69: ref, in_$i72: i64, in_$i75: i64, in_$p76: ref, in_$i77: i8, in_$i78: i16, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i64, in_$i84: i1, in_$i74: i32) returns (out_$i75: i64, out_$p76: ref, out_$i77: i8, out_$i78: i16, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i64, out_$i84: i1, out_$i74: i32)
{

  entry:
    out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i74 := in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i74;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5820;

  $bb25:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := out_$i82;
    goto $bb25_dummy;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$i84 := $ult.i64(out_$i83, in_$i72);
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$i82 := $add.i32(out_$i74, 1);
    call {:si_unique_call 1068} {:cexpr "i"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p81, out_$i78);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(in_$p69, $mul.ref(out_$i80, 2));
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i74);
    out_$i80 := $add.i64(20, out_$i79);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i8.i16(out_$i77);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(in_$p1, $mul.ref(out_$i75, 1));
    goto corral_source_split_5823;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i74 := rndis_set_config_parameter_loop_$bb23(in_$p1, in_$p69, in_$i72, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i74);
    return;

  exit:
    return;
}



procedure rndis_set_config_parameter_loop_$bb23(in_$p1: ref, in_$p69: ref, in_$i72: i64, in_$i75: i64, in_$p76: ref, in_$i77: i8, in_$i78: i16, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i64, in_$i84: i1, in_$i74: i32) returns (out_$i75: i64, out_$p76: ref, out_$i77: i8, out_$i78: i16, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i64, out_$i84: i1, out_$i74: i32);
  modifies $M.0;



implementation set_multicast_list_loop_$bb23(in_$p39: ref, in_$p53: ref, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i59: i32, in_$p60: ref, in_cmdloc_dummy_var_115: [ref]i8, in_cmdloc_dummy_var_116: [ref]i8, in_cmdloc_dummy_var_117: [ref]i8) returns (out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i59: i32, out_$p60: ref, out_cmdloc_dummy_var_115: [ref]i8, out_cmdloc_dummy_var_116: [ref]i8, out_cmdloc_dummy_var_117: [ref]i8)
{

  entry:
    out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p75, out_$i76, out_$i77, out_$i59, out_$p60, out_cmdloc_dummy_var_115, out_cmdloc_dummy_var_116, out_cmdloc_dummy_var_117 := in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p73, in_$p75, in_$i76, in_$i77, in_$i59, in_$p60, in_cmdloc_dummy_var_115, in_cmdloc_dummy_var_116, in_cmdloc_dummy_var_117;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6280;

  $bb25:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i61, out_$p69;
    goto $bb25_dummy;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i72, out_$i76);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(0, 2968)), $mul.ref(720, 1)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, in_$p53);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_115 := $M.0;
    out_cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 1140} out_cmdloc_dummy_var_117 := $memcpy.i8(out_cmdloc_dummy_var_115, out_cmdloc_dummy_var_116, out_$p64, out_$p66, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_117;
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p60, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(in_$p39, $mul.ref(out_$i63, 1));
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i62 := $mul.i32(out_$i59, 6);
    goto corral_source_split_6283;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i59, 1);
    call {:si_unique_call 1139} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p75, out_$i76, out_$i77, out_$i59, out_$p60, out_cmdloc_dummy_var_115, out_cmdloc_dummy_var_116, out_cmdloc_dummy_var_117 := set_multicast_list_loop_$bb23(in_$p39, in_$p53, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p75, out_$i76, out_$i77, out_$i59, out_$p60, out_cmdloc_dummy_var_115, out_cmdloc_dummy_var_116, out_cmdloc_dummy_var_117);
    return;

  exit:
    return;
}



procedure set_multicast_list_loop_$bb23(in_$p39: ref, in_$p53: ref, in_$i61: i32, in_$i62: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i59: i32, in_$p60: ref, in_cmdloc_dummy_var_115: [ref]i8, in_cmdloc_dummy_var_116: [ref]i8, in_cmdloc_dummy_var_117: [ref]i8) returns (out_$i61: i32, out_$i62: i32, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i59: i32, out_$p60: ref, out_cmdloc_dummy_var_115: [ref]i8, out_cmdloc_dummy_var_116: [ref]i8, out_cmdloc_dummy_var_117: [ref]i8);
  modifies $M.0;



implementation rndis_wlan_get_caps_loop_$bb9(in_$p2: ref, in_$p6: ref, in_$i13: i32, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i15: i32) returns (out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i15: i32)
{

  entry:
    out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i15 := in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i15;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6704;

  $bb26:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i37;
    goto $bb26_dummy;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, in_$i13);
    goto corral_source_split_6732;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1248} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_6731;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, out_$i27);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i27 := $or.i32(out_$i26, 2);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_6724;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6723;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb21;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22:
    assume out_$i24 == 1;
    goto corral_source_split_6729;

  $bb19:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 36)), $mul.ref(4, 1)), $mul.ref(out_$i16, 4));
    goto corral_source_split_6707;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_6706;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i31);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i31 := $or.i32(out_$i30, 1);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6710;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_6709;

  $bb13:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i35);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6720;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i34, 4);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4192)), $mul.ref(2868, 1));
    goto corral_source_split_6717;

  $bb16:
    assume out_$i22 == 1;
    goto corral_source_split_6716;

  $bb15:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb18;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb18;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i15 := rndis_wlan_get_caps_loop_$bb9(in_$p2, in_$p6, in_$i13, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i15);
    return;

  exit:
    return;
}



procedure rndis_wlan_get_caps_loop_$bb9(in_$p2: ref, in_$p6: ref, in_$i13: i32, in_$i16: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i15: i32) returns (out_$i16: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i15: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i1, in_$i250: i32, in_$i251: i1, in_$i253: i32, in_$i254: i1, in_$i256: i32, in_$i257: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i297: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p308: ref, in_$i309: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$p314: ref, in_$i315: i32, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i32, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$p342: ref, in_$i343: i32, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$p376: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$i400: i32, in_$i401: i1, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i1, in_$i409: i32, in_$i410: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i1, in_$i417: i1, in_$i418: i1, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i1, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$i441: i8, in_$i442: i1, in_$i443: i32, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$p448: ref, in_$i449: i8, in_$i450: i1, in_$i451: i32, in_$i453: i32, in_$i454: i1, in_$p455: ref, in_$p456: ref, in_$i457: i8, in_$i458: i1, in_$i459: i32, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$p464: ref, in_$i465: i8, in_$i466: i32, in_$i467: i8, in_$i468: i8, in_$i469: i1, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$p474: ref, in_$i475: i8, in_$i476: i32, in_$i477: i8, in_$i478: i8, in_$i479: i1, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$p484: ref, in_$i485: i8, in_$i486: i32, in_$i487: i8, in_$i488: i8, in_$i489: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$p494: ref, in_$i495: i32, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$p500: ref, in_$i501: i32, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$p512: ref, in_$i513: i8, in_$i514: i32, in_$i515: i8, in_$i516: i8, in_$i517: i1, in_$i518: i8, in_$i519: i1, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$p524: ref, in_$i525: i8, in_$i526: i32, in_$i527: i8, in_$i528: i8, in_$i529: i1, in_$i530: i8, in_$i531: i1, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$i537: i8, in_$i538: i32, in_$i539: i8, in_$i540: i8, in_$i541: i1, in_$i542: i8, in_$i543: i1, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$p560: ref, in_$p561: ref, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$p566: ref, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$i575: i32, in_$i576: i1, in_$p577: ref, in_$p578: ref, in_$i579: i8, in_$i580: i32, in_$i581: i8, in_$i582: i8, in_$i583: i1, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$p588: ref, in_$i589: i8, in_$i590: i32, in_$i591: i8, in_$i592: i8, in_$i593: i1, in_$i595: i32, in_$i596: i1, in_$p597: ref, in_$p598: ref, in_$i599: i8, in_$i600: i32, in_$i601: i8, in_$i602: i8, in_$i603: i1, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$p608: ref, in_$i609: i32, in_$p610: ref, in_$i612: i32, in_$i613: i1, in_$p614: ref, in_$p615: ref, in_$i616: i32, in_$p617: ref, in_$i619: i32, in_$i620: i1, in_$p621: ref, in_$p622: ref, in_$i623: i32, in_$p624: ref, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$p629: ref, in_$i630: i32, in_$i631: i32, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i640: i32, in_$i641: i1, in_$p642: ref, in_$p643: ref, in_$i644: i32, in_$i645: i32, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$p650: ref, in_$i651: i32, in_$i652: i32, in_$i654: i32, in_$i655: i1, in_$p656: ref, in_$p657: ref, in_$i658: i32, in_$i659: i32, in_$i661: i32, in_$i662: i1, in_$p663: ref, in_$p664: ref, in_$i665: i32, in_$i666: i32, in_$i668: i32, in_$i669: i1, in_$p670: ref, in_$p671: ref, in_$i672: i32, in_$i673: i32, in_$i674: i1, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$p678: ref, in_$i680: i32, in_$i681: i1, in_$p682: ref, in_$p683: ref, in_$i685: i32, in_$i686: i1, in_$p687: ref, in_$p688: ref, in_$i690: i32, in_$i691: i1, in_$p692: ref, in_$p693: ref, in_$p694: ref, in_$i696: i32, in_$i697: i1, in_$p698: ref, in_$p699: ref, in_$p700: ref, in_$i702: i32, in_$i703: i1, in_$p704: ref, in_$p705: ref, in_$p706: ref, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$p711: ref, in_$i713: i32, in_$i714: i1, in_$p715: ref, in_$p716: ref, in_$i718: i32, in_$i719: i1, in_$p720: ref, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$p726: ref, in_$i728: i32, in_$i729: i1, in_$p730: ref, in_$p731: ref, in_$i733: i32, in_$i734: i1, in_$p735: ref, in_$p736: ref, in_$i738: i32, in_$i739: i1, in_$p740: ref, in_$i741: i32, in_$i743: i32, in_$i744: i1, in_$p745: ref, in_$i746: i32, in_$i748: i32, in_$i749: i1, in_$p750: ref, in_$i751: i32, in_$i753: i32, in_$i754: i1, in_$p755: ref, in_$p756: ref, in_$i757: i16, in_$i758: i32, in_$i759: i16, in_$i761: i32, in_$i762: i1, in_$p763: ref, in_$p764: ref, in_$p765: ref, in_$i767: i32, in_$i768: i1, in_$p769: ref, in_$p770: ref, in_$p771: ref, in_$i773: i32, in_$i774: i1, in_$p775: ref, in_$p776: ref, in_$p777: ref, in_$i779: i32, in_$i780: i1, in_$p781: ref, in_$p782: ref, in_$i784: i32, in_$i785: i1, in_$p786: ref, in_$p787: ref, in_$i789: i32, in_$i790: i1, in_$p791: ref, in_$p792: ref, in_$i794: i32, in_$i795: i1, in_$i797: i32, in_$i798: i32, in_$i799: i32, in_$i800: i1, in_$i802: i32, in_$i803: i32, in_$i804: i32, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i1, in_$i812: i1, in_$i813: i1, in_$i814: i1, in_$i815: i1, in_$i816: i1, in_$i817: i1, in_$i818: i1, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i822: i32, in_$i823: i32, in_$i824: i1, in_$i825: i32, in_$i826: i1, in_$p827: ref, in_$i829: i32, in_$i830: i1, in_$p831: ref, in_$i833: i32, in_$i834: i1, in_$p835: ref, in_$i837: i32, in_$i838: i1, in_$p839: ref, in_$i841: i32, in_$i842: i1, in_$p843: ref, in_$i844: i32, in_$i845: i1, in_$p846: ref, in_$i847: i32, in_$i848: i1, in_$p849: ref, in_$i850: i32, in_$i851: i1, in_$p852: ref, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i858: i32, in_$i859: i1, in_$p860: ref, in_$i862: i32, in_$i863: i1, in_$p864: ref, in_$i866: i32, in_$i867: i1, in_$p868: ref, in_$i869: i32, in_$i870: i1, in_$p871: ref, in_$i872: i32, in_$i873: i1, in_$p874: ref, in_$i875: i32, in_$i876: i1, in_$i877: i32, in_$i878: i32, in_$i879: i1, in_$i880: i32, in_$i881: i32, in_$i882: i32, in_$i883: i32, in_$i884: i32, in_$i885: i1, in_$i887: i32, in_$i888: i32, in_$i889: i32, in_$i890: i32, in_$i891: i32, in_$i892: i1, in_$i893: i32, in_$i894: i1, in_$i895: i32, in_$i896: i1, in_$i897: i1, in_$i898: i1, in_$i899: i1, in_$i900: i1, in_$i901: i1, in_$i902: i32, in_$i903: i1, in_$p904: ref, in_$i905: i32, in_$i906: i32, in_$i907: i1, in_$i908: i32, in_$i909: i32, in_$i910: i32, in_$i911: i1, in_$p912: ref, in_$p913: ref, in_$i914: i32, in_$i916: i32, in_$i917: i1, in_$p918: ref, in_$i919: i32, in_$i920: i32, in_$i921: i1, in_$i922: i32, in_$i923: i1, in_$i924: i32, in_$i925: i1, in_$p926: ref, in_$i927: i32, in_$i928: i32, in_$i929: i32, in_$i930: i1, in_$i931: i32, in_$i932: i1, in_$p933: ref, in_$i934: i32, in_$i935: i32, in_$i936: i32, in_$i937: i1, in_$i938: i32, in_$i939: i32, in_$i940: i1, in_$i941: i32, in_$i942: i1, in_$i943: i32, in_$i944: i1, in_$i945: i1, in_$i946: i1, in_$i947: i32, in_$i948: i1, in_$i949: i32, in_$i950: i1, in_$i951: i32, in_$i952: i1, in_$i953: i32, in_$i954: i32, in_$i955: i1, in_$i956: i32, in_$i957: i1, in_$i958: i32, in_$i959: i1, in_$i960: i32, in_$i961: i1, in_$i962: i1, in_$i963: i1, in_$i964: i1, in_$i965: i1, in_$i966: i1, in_$i967: i1, in_$i968: i1, in_$i969: i1, in_$i970: i1, in_$i971: i1, in_$i972: i1, in_$i973: i1, in_$i974: i32, in_$i975: i1, in_$p976: ref, in_$i977: i32, in_$i978: i32, in_$i979: i1, in_$p980: ref, in_$i981: i32, in_$i982: i32, in_$i983: i1, in_$p984: ref, in_$i985: i32, in_$i986: i32, in_$i987: i1, in_$p988: ref, in_$i989: i32, in_$i990: i32, in_$i991: i1, in_$p992: ref, in_$p993: ref, in_$i994: i32, in_$i996: i32, in_$i997: i1, in_$p998: ref, in_$p999: ref, in_$i1000: i32, in_$i1002: i32, in_$i1003: i1, in_$p1004: ref, in_$p1005: ref, in_$i1006: i32, in_$i1008: i32, in_$i1009: i1, in_$p1010: ref, in_$p1011: ref, in_$i1012: i32, in_$i1014: i32, in_$i1015: i1, in_$p1016: ref, in_$i1018: i32, in_$i1019: i1, in_$p1020: ref, in_$i1022: i32, in_$i1023: i1, in_$p1024: ref, in_$i1026: i32, in_$i1027: i1, in_$p1028: ref, in_$i1030: i32, in_$i1031: i1, in_$p1032: ref, in_$p1033: ref, in_$i1034: i32, in_$i1035: i32, in_$i1036: i32, in_$i1037: i1, in_$p1038: ref, in_$p1039: ref, in_$i1040: i32, in_$i1041: i32, in_$i1042: i1, in_$i1043: i32, in_$i1044: i32, in_$i1045: i32, in_$i1046: i1, in_$p1047: ref, in_$i1049: i32, in_$i1050: i1, in_$p1051: ref, in_$i1053: i32, in_$i1054: i1, in_$p1055: ref, in_$i1057: i32, in_$i1058: i1, in_$p1059: ref, in_$i1061: i32, in_$i1062: i1, in_$p1063: ref, in_$i1065: i32, in_$i1066: i1, in_$p1067: ref, in_$p1068: ref, in_$i1070: i32, in_$i1071: i1, in_$p1072: ref, in_$p1073: ref, in_$i1075: i32, in_$i1076: i1, in_$p1077: ref, in_$p1078: ref, in_$i1080: i32, in_$i1081: i1, in_$p1082: ref, in_$p1083: ref, in_$i1085: i32, in_$i1086: i1, in_$p1087: ref, in_$i1088: i32, in_$i1089: i1, in_$p1090: ref, in_$i1091: i32, in_$i1092: i1, in_$p1093: ref, in_$i1094: i32, in_$i1095: i1, in_$p1096: ref, in_$i1097: i32, in_$i1098: i1, in_$i1100: i32, in_$i1101: i1, in_$i1103: i32, in_$i1104: i1, in_$i1106: i32, in_$i1107: i1, in_vslice_dummy_var_217: ref, in_vslice_dummy_var_218: ref, in_vslice_dummy_var_219: ref, in_vslice_dummy_var_220: ref, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: ref, in_vslice_dummy_var_239: ref, in_vslice_dummy_var_240: ref, in_vslice_dummy_var_241: ref, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i32, in_vslice_dummy_var_249: i32, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: i32, in_vslice_dummy_var_253: i32, in_vslice_dummy_var_254: i32, in_vslice_dummy_var_255: i32, in_vslice_dummy_var_256: i32, in_vslice_dummy_var_257: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: i32, in_vslice_dummy_var_303: i32, in_vslice_dummy_var_304: i32, in_vslice_dummy_var_305: i32, in_vslice_dummy_var_306: i32, in_vslice_dummy_var_307: i32, in_vslice_dummy_var_308: i32, in_vslice_dummy_var_309: i32, in_vslice_dummy_var_310: i32, in_vslice_dummy_var_311: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_313: i32, in_vslice_dummy_var_314: i32, in_vslice_dummy_var_315: i32, in_vslice_dummy_var_316: i32, in_vslice_dummy_var_317: i32, in_vslice_dummy_var_318: i32, in_vslice_dummy_var_319: i32, in_vslice_dummy_var_320: i32, in_vslice_dummy_var_321: i32, in_vslice_dummy_var_322: i32, in_vslice_dummy_var_323: ref, in_vslice_dummy_var_324: ref, in_vslice_dummy_var_325: ref, in_vslice_dummy_var_326: ref, in_vslice_dummy_var_327: i32, in_vslice_dummy_var_328: i32, in_vslice_dummy_var_329: i32, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i32, in_vslice_dummy_var_332: i32, in_vslice_dummy_var_333: i32, in_vslice_dummy_var_334: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32, in_vslice_dummy_var_343: i32) returns (out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i1, out_$i250: i32, out_$i251: i1, out_$i253: i32, out_$i254: i1, out_$i256: i32, out_$i257: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i297: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p308: ref, out_$i309: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$p314: ref, out_$i315: i32, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i32, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$p342: ref, out_$i343: i32, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$p376: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$i400: i32, out_$i401: i1, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i1, out_$i409: i32, out_$i410: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i1, out_$i417: i1, out_$i418: i1, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i1, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$i441: i8, out_$i442: i1, out_$i443: i32, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$p448: ref, out_$i449: i8, out_$i450: i1, out_$i451: i32, out_$i453: i32, out_$i454: i1, out_$p455: ref, out_$p456: ref, out_$i457: i8, out_$i458: i1, out_$i459: i32, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$p464: ref, out_$i465: i8, out_$i466: i32, out_$i467: i8, out_$i468: i8, out_$i469: i1, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$p474: ref, out_$i475: i8, out_$i476: i32, out_$i477: i8, out_$i478: i8, out_$i479: i1, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$p484: ref, out_$i485: i8, out_$i486: i32, out_$i487: i8, out_$i488: i8, out_$i489: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$p494: ref, out_$i495: i32, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$p500: ref, out_$i501: i32, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$p512: ref, out_$i513: i8, out_$i514: i32, out_$i515: i8, out_$i516: i8, out_$i517: i1, out_$i518: i8, out_$i519: i1, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$p524: ref, out_$i525: i8, out_$i526: i32, out_$i527: i8, out_$i528: i8, out_$i529: i1, out_$i530: i8, out_$i531: i1, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$i537: i8, out_$i538: i32, out_$i539: i8, out_$i540: i8, out_$i541: i1, out_$i542: i8, out_$i543: i1, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$p560: ref, out_$p561: ref, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$p566: ref, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$i575: i32, out_$i576: i1, out_$p577: ref, out_$p578: ref, out_$i579: i8, out_$i580: i32, out_$i581: i8, out_$i582: i8, out_$i583: i1, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$p588: ref, out_$i589: i8, out_$i590: i32, out_$i591: i8, out_$i592: i8, out_$i593: i1, out_$i595: i32, out_$i596: i1, out_$p597: ref, out_$p598: ref, out_$i599: i8, out_$i600: i32, out_$i601: i8, out_$i602: i8, out_$i603: i1, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$p608: ref, out_$i609: i32, out_$p610: ref, out_$i612: i32, out_$i613: i1, out_$p614: ref, out_$p615: ref, out_$i616: i32, out_$p617: ref, out_$i619: i32, out_$i620: i1, out_$p621: ref, out_$p622: ref, out_$i623: i32, out_$p624: ref, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$p629: ref, out_$i630: i32, out_$i631: i32, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i640: i32, out_$i641: i1, out_$p642: ref, out_$p643: ref, out_$i644: i32, out_$i645: i32, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$p650: ref, out_$i651: i32, out_$i652: i32, out_$i654: i32, out_$i655: i1, out_$p656: ref, out_$p657: ref, out_$i658: i32, out_$i659: i32, out_$i661: i32, out_$i662: i1, out_$p663: ref, out_$p664: ref, out_$i665: i32, out_$i666: i32, out_$i668: i32, out_$i669: i1, out_$p670: ref, out_$p671: ref, out_$i672: i32, out_$i673: i32, out_$i674: i1, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$p678: ref, out_$i680: i32, out_$i681: i1, out_$p682: ref, out_$p683: ref, out_$i685: i32, out_$i686: i1, out_$p687: ref, out_$p688: ref, out_$i690: i32, out_$i691: i1, out_$p692: ref, out_$p693: ref, out_$p694: ref, out_$i696: i32, out_$i697: i1, out_$p698: ref, out_$p699: ref, out_$p700: ref, out_$i702: i32, out_$i703: i1, out_$p704: ref, out_$p705: ref, out_$p706: ref, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$p711: ref, out_$i713: i32, out_$i714: i1, out_$p715: ref, out_$p716: ref, out_$i718: i32, out_$i719: i1, out_$p720: ref, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$p726: ref, out_$i728: i32, out_$i729: i1, out_$p730: ref, out_$p731: ref, out_$i733: i32, out_$i734: i1, out_$p735: ref, out_$p736: ref, out_$i738: i32, out_$i739: i1, out_$p740: ref, out_$i741: i32, out_$i743: i32, out_$i744: i1, out_$p745: ref, out_$i746: i32, out_$i748: i32, out_$i749: i1, out_$p750: ref, out_$i751: i32, out_$i753: i32, out_$i754: i1, out_$p755: ref, out_$p756: ref, out_$i757: i16, out_$i758: i32, out_$i759: i16, out_$i761: i32, out_$i762: i1, out_$p763: ref, out_$p764: ref, out_$p765: ref, out_$i767: i32, out_$i768: i1, out_$p769: ref, out_$p770: ref, out_$p771: ref, out_$i773: i32, out_$i774: i1, out_$p775: ref, out_$p776: ref, out_$p777: ref, out_$i779: i32, out_$i780: i1, out_$p781: ref, out_$p782: ref, out_$i784: i32, out_$i785: i1, out_$p786: ref, out_$p787: ref, out_$i789: i32, out_$i790: i1, out_$p791: ref, out_$p792: ref, out_$i794: i32, out_$i795: i1, out_$i797: i32, out_$i798: i32, out_$i799: i32, out_$i800: i1, out_$i802: i32, out_$i803: i32, out_$i804: i32, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i1, out_$i812: i1, out_$i813: i1, out_$i814: i1, out_$i815: i1, out_$i816: i1, out_$i817: i1, out_$i818: i1, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i822: i32, out_$i823: i32, out_$i824: i1, out_$i825: i32, out_$i826: i1, out_$p827: ref, out_$i829: i32, out_$i830: i1, out_$p831: ref, out_$i833: i32, out_$i834: i1, out_$p835: ref, out_$i837: i32, out_$i838: i1, out_$p839: ref, out_$i841: i32, out_$i842: i1, out_$p843: ref, out_$i844: i32, out_$i845: i1, out_$p846: ref, out_$i847: i32, out_$i848: i1, out_$p849: ref, out_$i850: i32, out_$i851: i1, out_$p852: ref, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i858: i32, out_$i859: i1, out_$p860: ref, out_$i862: i32, out_$i863: i1, out_$p864: ref, out_$i866: i32, out_$i867: i1, out_$p868: ref, out_$i869: i32, out_$i870: i1, out_$p871: ref, out_$i872: i32, out_$i873: i1, out_$p874: ref, out_$i875: i32, out_$i876: i1, out_$i877: i32, out_$i878: i32, out_$i879: i1, out_$i880: i32, out_$i881: i32, out_$i882: i32, out_$i883: i32, out_$i884: i32, out_$i885: i1, out_$i887: i32, out_$i888: i32, out_$i889: i32, out_$i890: i32, out_$i891: i32, out_$i892: i1, out_$i893: i32, out_$i894: i1, out_$i895: i32, out_$i896: i1, out_$i897: i1, out_$i898: i1, out_$i899: i1, out_$i900: i1, out_$i901: i1, out_$i902: i32, out_$i903: i1, out_$p904: ref, out_$i905: i32, out_$i906: i32, out_$i907: i1, out_$i908: i32, out_$i909: i32, out_$i910: i32, out_$i911: i1, out_$p912: ref, out_$p913: ref, out_$i914: i32, out_$i916: i32, out_$i917: i1, out_$p918: ref, out_$i919: i32, out_$i920: i32, out_$i921: i1, out_$i922: i32, out_$i923: i1, out_$i924: i32, out_$i925: i1, out_$p926: ref, out_$i927: i32, out_$i928: i32, out_$i929: i32, out_$i930: i1, out_$i931: i32, out_$i932: i1, out_$p933: ref, out_$i934: i32, out_$i935: i32, out_$i936: i32, out_$i937: i1, out_$i938: i32, out_$i939: i32, out_$i940: i1, out_$i941: i32, out_$i942: i1, out_$i943: i32, out_$i944: i1, out_$i945: i1, out_$i946: i1, out_$i947: i32, out_$i948: i1, out_$i949: i32, out_$i950: i1, out_$i951: i32, out_$i952: i1, out_$i953: i32, out_$i954: i32, out_$i955: i1, out_$i956: i32, out_$i957: i1, out_$i958: i32, out_$i959: i1, out_$i960: i32, out_$i961: i1, out_$i962: i1, out_$i963: i1, out_$i964: i1, out_$i965: i1, out_$i966: i1, out_$i967: i1, out_$i968: i1, out_$i969: i1, out_$i970: i1, out_$i971: i1, out_$i972: i1, out_$i973: i1, out_$i974: i32, out_$i975: i1, out_$p976: ref, out_$i977: i32, out_$i978: i32, out_$i979: i1, out_$p980: ref, out_$i981: i32, out_$i982: i32, out_$i983: i1, out_$p984: ref, out_$i985: i32, out_$i986: i32, out_$i987: i1, out_$p988: ref, out_$i989: i32, out_$i990: i32, out_$i991: i1, out_$p992: ref, out_$p993: ref, out_$i994: i32, out_$i996: i32, out_$i997: i1, out_$p998: ref, out_$p999: ref, out_$i1000: i32, out_$i1002: i32, out_$i1003: i1, out_$p1004: ref, out_$p1005: ref, out_$i1006: i32, out_$i1008: i32, out_$i1009: i1, out_$p1010: ref, out_$p1011: ref, out_$i1012: i32, out_$i1014: i32, out_$i1015: i1, out_$p1016: ref, out_$i1018: i32, out_$i1019: i1, out_$p1020: ref, out_$i1022: i32, out_$i1023: i1, out_$p1024: ref, out_$i1026: i32, out_$i1027: i1, out_$p1028: ref, out_$i1030: i32, out_$i1031: i1, out_$p1032: ref, out_$p1033: ref, out_$i1034: i32, out_$i1035: i32, out_$i1036: i32, out_$i1037: i1, out_$p1038: ref, out_$p1039: ref, out_$i1040: i32, out_$i1041: i32, out_$i1042: i1, out_$i1043: i32, out_$i1044: i32, out_$i1045: i32, out_$i1046: i1, out_$p1047: ref, out_$i1049: i32, out_$i1050: i1, out_$p1051: ref, out_$i1053: i32, out_$i1054: i1, out_$p1055: ref, out_$i1057: i32, out_$i1058: i1, out_$p1059: ref, out_$i1061: i32, out_$i1062: i1, out_$p1063: ref, out_$i1065: i32, out_$i1066: i1, out_$p1067: ref, out_$p1068: ref, out_$i1070: i32, out_$i1071: i1, out_$p1072: ref, out_$p1073: ref, out_$i1075: i32, out_$i1076: i1, out_$p1077: ref, out_$p1078: ref, out_$i1080: i32, out_$i1081: i1, out_$p1082: ref, out_$p1083: ref, out_$i1085: i32, out_$i1086: i1, out_$p1087: ref, out_$i1088: i32, out_$i1089: i1, out_$p1090: ref, out_$i1091: i32, out_$i1092: i1, out_$p1093: ref, out_$i1094: i32, out_$i1095: i1, out_$p1096: ref, out_$i1097: i32, out_$i1098: i1, out_$i1100: i32, out_$i1101: i1, out_$i1103: i32, out_$i1104: i1, out_$i1106: i32, out_$i1107: i1, out_vslice_dummy_var_217: ref, out_vslice_dummy_var_218: ref, out_vslice_dummy_var_219: ref, out_vslice_dummy_var_220: ref, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: ref, out_vslice_dummy_var_239: ref, out_vslice_dummy_var_240: ref, out_vslice_dummy_var_241: ref, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i32, out_vslice_dummy_var_249: i32, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: i32, out_vslice_dummy_var_253: i32, out_vslice_dummy_var_254: i32, out_vslice_dummy_var_255: i32, out_vslice_dummy_var_256: i32, out_vslice_dummy_var_257: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: i32, out_vslice_dummy_var_303: i32, out_vslice_dummy_var_304: i32, out_vslice_dummy_var_305: i32, out_vslice_dummy_var_306: i32, out_vslice_dummy_var_307: i32, out_vslice_dummy_var_308: i32, out_vslice_dummy_var_309: i32, out_vslice_dummy_var_310: i32, out_vslice_dummy_var_311: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_313: i32, out_vslice_dummy_var_314: i32, out_vslice_dummy_var_315: i32, out_vslice_dummy_var_316: i32, out_vslice_dummy_var_317: i32, out_vslice_dummy_var_318: i32, out_vslice_dummy_var_319: i32, out_vslice_dummy_var_320: i32, out_vslice_dummy_var_321: i32, out_vslice_dummy_var_322: i32, out_vslice_dummy_var_323: ref, out_vslice_dummy_var_324: ref, out_vslice_dummy_var_325: ref, out_vslice_dummy_var_326: ref, out_vslice_dummy_var_327: i32, out_vslice_dummy_var_328: i32, out_vslice_dummy_var_329: i32, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i32, out_vslice_dummy_var_332: i32, out_vslice_dummy_var_333: i32, out_vslice_dummy_var_334: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32, out_vslice_dummy_var_343: i32)
{

  entry:
    out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i220, out_$i221, out_$p222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i253, out_$i254, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i305, out_$i306, out_$p307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$p314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$p342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$p375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i445, out_$i446, out_$p447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i453, out_$i454, out_$p455, out_$p456, out_$i457, out_$i458, out_$i459, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i495, out_$i497, out_$i498, out_$p499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i521, out_$i522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i533, out_$i534, out_$p535, out_$p536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$p560, out_$p561, out_$i563, out_$i564, out_$p565, out_$p566, out_$p567, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$i575, out_$i576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$p588, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i595, out_$i596, out_$p597, out_$p598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i605, out_$i606, out_$p607, out_$p608, out_$i609, out_$p610, out_$i612, out_$i613, out_$p614, out_$p615, out_$i616, out_$p617, out_$i619, out_$i620, out_$p621, out_$p622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$i631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i640, out_$i641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$i652, out_$i654, out_$i655, out_$p656, out_$p657, out_$i658, out_$i659, out_$i661, out_$i662, out_$p663, out_$p664, out_$i665, out_$i666, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$i676, out_$p677, out_$p678, out_$i680, out_$i681, out_$p682, out_$p683, out_$i685, out_$i686, out_$p687, out_$p688, out_$i690, out_$i691, out_$p692, out_$p693, out_$p694, out_$i696, out_$i697, out_$p698, out_$p699, out_$p700, out_$i702, out_$i703, out_$p704, out_$p705, out_$p706, out_$i708, out_$i709, out_$p710, out_$p711, out_$i713, out_$i714, out_$p715, out_$p716, out_$i718, out_$i719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$i728, out_$i729, out_$p730, out_$p731, out_$i733, out_$i734, out_$p735, out_$p736, out_$i738, out_$i739, out_$p740, out_$i741, out_$i743, out_$i744, out_$p745, out_$i746, out_$i748, out_$i749, out_$p750, out_$i751, out_$i753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$i759, out_$i761, out_$i762, out_$p763, out_$p764, out_$p765, out_$i767, out_$i768, out_$p769, out_$p770, out_$p771, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$i779, out_$i780, out_$p781, out_$p782, out_$i784, out_$i785, out_$p786, out_$p787, out_$i789, out_$i790, out_$p791, out_$p792, out_$i794, out_$i795, out_$i797, out_$i798, out_$i799, out_$i800, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$i844, out_$i845, out_$p846, out_$i847, out_$i848, out_$p849, out_$i850, out_$i851, out_$p852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$p860, out_$i862, out_$i863, out_$p864, out_$i866, out_$i867, out_$p868, out_$i869, out_$i870, out_$p871, out_$i872, out_$i873, out_$p874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$p904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$p913, out_$i914, out_$i916, out_$i917, out_$p918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i939, out_$i940, out_$i941, out_$i942, out_$i943, out_$i944, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$i953, out_$i954, out_$i955, out_$i956, out_$i957, out_$i958, out_$i959, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$i970, out_$i971, out_$i972, out_$i973, out_$i974, out_$i975, out_$p976, out_$i977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$p984, out_$i985, out_$i986, out_$i987, out_$p988, out_$i989, out_$i990, out_$i991, out_$p992, out_$p993, out_$i994, out_$i996, out_$i997, out_$p998, out_$p999, out_$i1000, out_$i1002, out_$i1003, out_$p1004, out_$p1005, out_$i1006, out_$i1008, out_$i1009, out_$p1010, out_$p1011, out_$i1012, out_$i1014, out_$i1015, out_$p1016, out_$i1018, out_$i1019, out_$p1020, out_$i1022, out_$i1023, out_$p1024, out_$i1026, out_$i1027, out_$p1028, out_$i1030, out_$i1031, out_$p1032, out_$p1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$p1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$i1049, out_$i1050, out_$p1051, out_$i1053, out_$i1054, out_$p1055, out_$i1057, out_$i1058, out_$p1059, out_$i1061, out_$i1062, out_$p1063, out_$i1065, out_$i1066, out_$p1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$p1073, out_$i1075, out_$i1076, out_$p1077, out_$p1078, out_$i1080, out_$i1081, out_$p1082, out_$p1083, out_$i1085, out_$i1086, out_$p1087, out_$i1088, out_$i1089, out_$p1090, out_$i1091, out_$i1092, out_$p1093, out_$i1094, out_$i1095, out_$p1096, out_$i1097, out_$i1098, out_$i1100, out_$i1101, out_$i1103, out_$i1104, out_$i1106, out_$i1107, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315, out_vslice_dummy_var_316, out_vslice_dummy_var_317, out_vslice_dummy_var_318, out_vslice_dummy_var_319, out_vslice_dummy_var_320, out_vslice_dummy_var_321, out_vslice_dummy_var_322, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343 := in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$i141, in_$p142, in_$p143, in_$i144, in_$i146, in_$i147, in_$p148, in_$p149, in_$i150, in_$i152, in_$i153, in_$p154, in_$p155, in_$i156, in_$i158, in_$i159, in_$p160, in_$p161, in_$i162, in_$i164, in_$i165, in_$p166, in_$i168, in_$i169, in_$p170, in_$i172, in_$i173, in_$p174, in_$i176, in_$i177, in_$p178, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$i185, in_$i186, in_$i187, in_$p188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$p197, in_$i199, in_$i200, in_$p201, in_$i203, in_$i204, in_$p205, in_$i207, in_$i208, in_$p209, in_$i211, in_$i212, in_$p213, in_$i215, in_$i216, in_$p217, in_$p218, in_$i220, in_$i221, in_$p222, in_$p223, in_$i225, in_$i226, in_$p227, in_$p228, in_$i230, in_$i231, in_$p232, in_$p233, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i250, in_$i251, in_$i253, in_$i254, in_$i256, in_$i257, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$p279, in_$i280, in_$i281, in_$i282, in_$p283, in_$i284, in_$i285, in_$i286, in_$p287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i294, in_$p295, in_$p296, in_$i297, in_$i299, in_$i300, in_$p301, in_$p302, in_$i303, in_$i305, in_$i306, in_$p307, in_$p308, in_$i309, in_$i311, in_$i312, in_$p313, in_$p314, in_$i315, in_$i317, in_$i318, in_$p319, in_$i321, in_$i322, in_$p323, in_$i325, in_$i326, in_$p327, in_$i329, in_$i330, in_$p331, in_$i333, in_$i334, in_$p335, in_$p336, in_$i337, in_$i338, in_$i339, in_$i340, in_$p341, in_$p342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$p350, in_$i352, in_$i353, in_$p354, in_$i356, in_$i357, in_$p358, in_$i360, in_$i361, in_$p362, in_$i364, in_$i365, in_$p366, in_$i368, in_$i369, in_$p370, in_$p371, in_$i373, in_$i374, in_$p375, in_$p376, in_$i378, in_$i379, in_$p380, in_$p381, in_$i383, in_$i384, in_$p385, in_$p386, in_$i388, in_$i389, in_$p390, in_$i391, in_$i392, in_$p393, in_$i394, in_$i395, in_$p396, in_$i397, in_$i398, in_$p399, in_$i400, in_$i401, in_$i403, in_$i404, in_$i406, in_$i407, in_$i409, in_$i410, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$p439, in_$p440, in_$i441, in_$i442, in_$i443, in_$i445, in_$i446, in_$p447, in_$p448, in_$i449, in_$i450, in_$i451, in_$i453, in_$i454, in_$p455, in_$p456, in_$i457, in_$i458, in_$i459, in_$i461, in_$i462, in_$p463, in_$p464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i471, in_$i472, in_$p473, in_$p474, in_$i475, in_$i476, in_$i477, in_$i478, in_$i479, in_$i481, in_$i482, in_$p483, in_$p484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i489, in_$i491, in_$i492, in_$p493, in_$p494, in_$i495, in_$i497, in_$i498, in_$p499, in_$p500, in_$i501, in_$i503, in_$i504, in_$p505, in_$p506, in_$i507, in_$i509, in_$i510, in_$p511, in_$p512, in_$i513, in_$i514, in_$i515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i521, in_$i522, in_$p523, in_$p524, in_$i525, in_$i526, in_$i527, in_$i528, in_$i529, in_$i530, in_$i531, in_$i533, in_$i534, in_$p535, in_$p536, in_$i537, in_$i538, in_$i539, in_$i540, in_$i541, in_$i542, in_$i543, in_$i545, in_$i546, in_$p547, in_$i549, in_$i550, in_$p551, in_$i553, in_$i554, in_$p555, in_$i557, in_$i558, in_$p559, in_$p560, in_$p561, in_$i563, in_$i564, in_$p565, in_$p566, in_$p567, in_$i569, in_$i570, in_$p571, in_$p572, in_$p573, in_$i575, in_$i576, in_$p577, in_$p578, in_$i579, in_$i580, in_$i581, in_$i582, in_$i583, in_$i585, in_$i586, in_$p587, in_$p588, in_$i589, in_$i590, in_$i591, in_$i592, in_$i593, in_$i595, in_$i596, in_$p597, in_$p598, in_$i599, in_$i600, in_$i601, in_$i602, in_$i603, in_$i605, in_$i606, in_$p607, in_$p608, in_$i609, in_$p610, in_$i612, in_$i613, in_$p614, in_$p615, in_$i616, in_$p617, in_$i619, in_$i620, in_$p621, in_$p622, in_$i623, in_$p624, in_$i626, in_$i627, in_$p628, in_$p629, in_$i630, in_$i631, in_$i633, in_$i634, in_$p635, in_$p636, in_$i637, in_$i638, in_$i640, in_$i641, in_$p642, in_$p643, in_$i644, in_$i645, in_$i647, in_$i648, in_$p649, in_$p650, in_$i651, in_$i652, in_$i654, in_$i655, in_$p656, in_$p657, in_$i658, in_$i659, in_$i661, in_$i662, in_$p663, in_$p664, in_$i665, in_$i666, in_$i668, in_$i669, in_$p670, in_$p671, in_$i672, in_$i673, in_$i674, in_$i675, in_$i676, in_$p677, in_$p678, in_$i680, in_$i681, in_$p682, in_$p683, in_$i685, in_$i686, in_$p687, in_$p688, in_$i690, in_$i691, in_$p692, in_$p693, in_$p694, in_$i696, in_$i697, in_$p698, in_$p699, in_$p700, in_$i702, in_$i703, in_$p704, in_$p705, in_$p706, in_$i708, in_$i709, in_$p710, in_$p711, in_$i713, in_$i714, in_$p715, in_$p716, in_$i718, in_$i719, in_$p720, in_$p721, in_$i723, in_$i724, in_$p725, in_$p726, in_$i728, in_$i729, in_$p730, in_$p731, in_$i733, in_$i734, in_$p735, in_$p736, in_$i738, in_$i739, in_$p740, in_$i741, in_$i743, in_$i744, in_$p745, in_$i746, in_$i748, in_$i749, in_$p750, in_$i751, in_$i753, in_$i754, in_$p755, in_$p756, in_$i757, in_$i758, in_$i759, in_$i761, in_$i762, in_$p763, in_$p764, in_$p765, in_$i767, in_$i768, in_$p769, in_$p770, in_$p771, in_$i773, in_$i774, in_$p775, in_$p776, in_$p777, in_$i779, in_$i780, in_$p781, in_$p782, in_$i784, in_$i785, in_$p786, in_$p787, in_$i789, in_$i790, in_$p791, in_$p792, in_$i794, in_$i795, in_$i797, in_$i798, in_$i799, in_$i800, in_$i802, in_$i803, in_$i804, in_$i805, in_$i806, in_$i807, in_$i808, in_$i809, in_$i810, in_$i811, in_$i812, in_$i813, in_$i814, in_$i815, in_$i816, in_$i817, in_$i818, in_$i819, in_$i820, in_$p821, in_$i822, in_$i823, in_$i824, in_$i825, in_$i826, in_$p827, in_$i829, in_$i830, in_$p831, in_$i833, in_$i834, in_$p835, in_$i837, in_$i838, in_$p839, in_$i841, in_$i842, in_$p843, in_$i844, in_$i845, in_$p846, in_$i847, in_$i848, in_$p849, in_$i850, in_$i851, in_$p852, in_$i854, in_$i855, in_$p856, in_$i858, in_$i859, in_$p860, in_$i862, in_$i863, in_$p864, in_$i866, in_$i867, in_$p868, in_$i869, in_$i870, in_$p871, in_$i872, in_$i873, in_$p874, in_$i875, in_$i876, in_$i877, in_$i878, in_$i879, in_$i880, in_$i881, in_$i882, in_$i883, in_$i884, in_$i885, in_$i887, in_$i888, in_$i889, in_$i890, in_$i891, in_$i892, in_$i893, in_$i894, in_$i895, in_$i896, in_$i897, in_$i898, in_$i899, in_$i900, in_$i901, in_$i902, in_$i903, in_$p904, in_$i905, in_$i906, in_$i907, in_$i908, in_$i909, in_$i910, in_$i911, in_$p912, in_$p913, in_$i914, in_$i916, in_$i917, in_$p918, in_$i919, in_$i920, in_$i921, in_$i922, in_$i923, in_$i924, in_$i925, in_$p926, in_$i927, in_$i928, in_$i929, in_$i930, in_$i931, in_$i932, in_$p933, in_$i934, in_$i935, in_$i936, in_$i937, in_$i938, in_$i939, in_$i940, in_$i941, in_$i942, in_$i943, in_$i944, in_$i945, in_$i946, in_$i947, in_$i948, in_$i949, in_$i950, in_$i951, in_$i952, in_$i953, in_$i954, in_$i955, in_$i956, in_$i957, in_$i958, in_$i959, in_$i960, in_$i961, in_$i962, in_$i963, in_$i964, in_$i965, in_$i966, in_$i967, in_$i968, in_$i969, in_$i970, in_$i971, in_$i972, in_$i973, in_$i974, in_$i975, in_$p976, in_$i977, in_$i978, in_$i979, in_$p980, in_$i981, in_$i982, in_$i983, in_$p984, in_$i985, in_$i986, in_$i987, in_$p988, in_$i989, in_$i990, in_$i991, in_$p992, in_$p993, in_$i994, in_$i996, in_$i997, in_$p998, in_$p999, in_$i1000, in_$i1002, in_$i1003, in_$p1004, in_$p1005, in_$i1006, in_$i1008, in_$i1009, in_$p1010, in_$p1011, in_$i1012, in_$i1014, in_$i1015, in_$p1016, in_$i1018, in_$i1019, in_$p1020, in_$i1022, in_$i1023, in_$p1024, in_$i1026, in_$i1027, in_$p1028, in_$i1030, in_$i1031, in_$p1032, in_$p1033, in_$i1034, in_$i1035, in_$i1036, in_$i1037, in_$p1038, in_$p1039, in_$i1040, in_$i1041, in_$i1042, in_$i1043, in_$i1044, in_$i1045, in_$i1046, in_$p1047, in_$i1049, in_$i1050, in_$p1051, in_$i1053, in_$i1054, in_$p1055, in_$i1057, in_$i1058, in_$p1059, in_$i1061, in_$i1062, in_$p1063, in_$i1065, in_$i1066, in_$p1067, in_$p1068, in_$i1070, in_$i1071, in_$p1072, in_$p1073, in_$i1075, in_$i1076, in_$p1077, in_$p1078, in_$i1080, in_$i1081, in_$p1082, in_$p1083, in_$i1085, in_$i1086, in_$p1087, in_$i1088, in_$i1089, in_$p1090, in_$i1091, in_$i1092, in_$p1093, in_$i1094, in_$i1095, in_$p1096, in_$i1097, in_$i1098, in_$i1100, in_$i1101, in_$i1103, in_$i1104, in_$i1106, in_$i1107, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233, in_vslice_dummy_var_234, in_vslice_dummy_var_235, in_vslice_dummy_var_236, in_vslice_dummy_var_237, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240, in_vslice_dummy_var_241, in_vslice_dummy_var_242, in_vslice_dummy_var_243, in_vslice_dummy_var_244, in_vslice_dummy_var_245, in_vslice_dummy_var_246, in_vslice_dummy_var_247, in_vslice_dummy_var_248, in_vslice_dummy_var_249, in_vslice_dummy_var_250, in_vslice_dummy_var_251, in_vslice_dummy_var_252, in_vslice_dummy_var_253, in_vslice_dummy_var_254, in_vslice_dummy_var_255, in_vslice_dummy_var_256, in_vslice_dummy_var_257, in_vslice_dummy_var_258, in_vslice_dummy_var_259, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263, in_vslice_dummy_var_264, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286, in_vslice_dummy_var_287, in_vslice_dummy_var_288, in_vslice_dummy_var_289, in_vslice_dummy_var_290, in_vslice_dummy_var_291, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295, in_vslice_dummy_var_296, in_vslice_dummy_var_297, in_vslice_dummy_var_298, in_vslice_dummy_var_299, in_vslice_dummy_var_300, in_vslice_dummy_var_301, in_vslice_dummy_var_302, in_vslice_dummy_var_303, in_vslice_dummy_var_304, in_vslice_dummy_var_305, in_vslice_dummy_var_306, in_vslice_dummy_var_307, in_vslice_dummy_var_308, in_vslice_dummy_var_309, in_vslice_dummy_var_310, in_vslice_dummy_var_311, in_vslice_dummy_var_312, in_vslice_dummy_var_313, in_vslice_dummy_var_314, in_vslice_dummy_var_315, in_vslice_dummy_var_316, in_vslice_dummy_var_317, in_vslice_dummy_var_318, in_vslice_dummy_var_319, in_vslice_dummy_var_320, in_vslice_dummy_var_321, in_vslice_dummy_var_322, in_vslice_dummy_var_323, in_vslice_dummy_var_324, in_vslice_dummy_var_325, in_vslice_dummy_var_326, in_vslice_dummy_var_327, in_vslice_dummy_var_328, in_vslice_dummy_var_329, in_vslice_dummy_var_330, in_vslice_dummy_var_331, in_vslice_dummy_var_332, in_vslice_dummy_var_333, in_vslice_dummy_var_334, in_vslice_dummy_var_335, in_vslice_dummy_var_336, in_vslice_dummy_var_337, in_vslice_dummy_var_338, in_vslice_dummy_var_339, in_vslice_dummy_var_340, in_vslice_dummy_var_341, in_vslice_dummy_var_342, in_vslice_dummy_var_343;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1567} out_$i96 := __VERIFIER_nondet_int();
    call {:si_unique_call 1568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i96);
    call {:si_unique_call 1569} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i96);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb156_dummy;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb813:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb27:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7882;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} rndis_wlan_indication(out_$p138, in_$p24, out_$i139);
    goto corral_source_split_7881;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.33, in_$p1);
    goto corral_source_split_7880;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    out_$p138 := $M.35;
    goto corral_source_split_7879;

  $bb65:
    assume out_$i137 == 1;
    goto corral_source_split_7878;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 2);
    goto corral_source_split_7876;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i136 := $M.60;
    goto corral_source_split_7875;

  $bb63:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7873;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} rndis_wlan_indication(out_$p134, in_$p24, out_$i135);
    goto corral_source_split_7872;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.33, in_$p1);
    goto corral_source_split_7871;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    out_$p134 := $M.35;
    goto corral_source_split_7870;

  $bb62:
    assume out_$i133 == 1;
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 3);
    goto corral_source_split_7867;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i132 := $M.60;
    goto corral_source_split_7866;

  $bb60:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7864;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} rndis_wlan_indication(out_$p130, in_$p24, out_$i131);
    goto corral_source_split_7863;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    out_$i131 := $load.i32($M.33, in_$p1);
    goto corral_source_split_7862;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    out_$p130 := $M.35;
    goto corral_source_split_7861;

  $bb59:
    assume out_$i129 == 1;
    goto corral_source_split_7860;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_7858;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i128 := $M.60;
    goto corral_source_split_7857;

  $bb57:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7855;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} rndis_wlan_indication(out_$p126, in_$p24, out_$i127);
    goto corral_source_split_7854;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.33, in_$p1);
    goto corral_source_split_7853;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    out_$p126 := $M.35;
    goto corral_source_split_7852;

  $bb56:
    assume out_$i125 == 1;
    goto corral_source_split_7851;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 4);
    goto corral_source_split_7849;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    out_$i124 := $M.60;
    goto corral_source_split_7848;

  $bb54:
    assume out_$i123 == 1;
    goto corral_source_split_7847;

  $bb50:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb44:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i110, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb29:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i110, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1570} out_$i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 1571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i110);
    call {:si_unique_call 1572} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i110);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i109 == 1;
    goto corral_source_split_7801;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_7799;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    out_$i108 := $M.60;
    goto corral_source_split_7798;

  $bb24:
    assume out_$i107 == 1;
    goto corral_source_split_7797;

  $bb22:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i96, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb16:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i96, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb3:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i96, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i96, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb79:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7919;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_vslice_dummy_var_220 := rndis_tx_fixup(out_$p160, out_$p161, out_$i162);
    goto corral_source_split_7918;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i32($M.33, in_$p0);
    goto corral_source_split_7917;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    out_$p161 := $M.34;
    goto corral_source_split_7916;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    out_$p160 := $M.35;
    goto corral_source_split_7915;

  $bb78:
    assume out_$i159 == 1;
    goto corral_source_split_7914;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_7912;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i158 := $M.60;
    goto corral_source_split_7911;

  $bb76:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7909;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_vslice_dummy_var_219 := rndis_tx_fixup(out_$p154, out_$p155, out_$i156);
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i32($M.33, in_$p0);
    goto corral_source_split_7907;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    out_$p155 := $M.34;
    goto corral_source_split_7906;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    out_$p154 := $M.35;
    goto corral_source_split_7905;

  $bb75:
    assume out_$i153 == 1;
    goto corral_source_split_7904;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 3);
    goto corral_source_split_7902;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i152 := $M.60;
    goto corral_source_split_7901;

  $bb73:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} out_vslice_dummy_var_218 := rndis_tx_fixup(out_$p148, out_$p149, out_$i150);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.33, in_$p0);
    goto corral_source_split_7897;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    out_$p149 := $M.34;
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$p148 := $M.35;
    goto corral_source_split_7895;

  $bb72:
    assume out_$i147 == 1;
    goto corral_source_split_7894;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_7892;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i146 := $M.60;
    goto corral_source_split_7891;

  $bb70:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7889;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_vslice_dummy_var_217 := rndis_tx_fixup(out_$p142, out_$p143, out_$i144);
    goto corral_source_split_7888;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.33, in_$p0);
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$p143 := $M.34;
    goto corral_source_split_7886;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    out_$p142 := $M.35;
    goto corral_source_split_7885;

  $bb69:
    assume out_$i141 == 1;
    goto corral_source_split_7884;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 4);
    goto corral_source_split_7841;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    out_$i140 := $M.60;
    goto corral_source_split_7840;

  $bb52:
    assume out_$i122 == 1;
    goto corral_source_split_7839;

  $bb51:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i110, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb91:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7948;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_vslice_dummy_var_224 := bcm4320a_early_init(out_$p178);
    goto corral_source_split_7947;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    out_$p178 := $M.35;
    goto corral_source_split_7946;

  $bb90:
    assume out_$i177 == 1;
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 2);
    goto corral_source_split_7943;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i176 := $M.60;
    goto corral_source_split_7942;

  $bb88:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7940;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_vslice_dummy_var_223 := bcm4320a_early_init(out_$p174);
    goto corral_source_split_7939;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    out_$p174 := $M.35;
    goto corral_source_split_7938;

  $bb87:
    assume out_$i173 == 1;
    goto corral_source_split_7937;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 3);
    goto corral_source_split_7935;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i172 := $M.60;
    goto corral_source_split_7934;

  $bb85:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7932;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} out_vslice_dummy_var_222 := bcm4320a_early_init(out_$p170);
    goto corral_source_split_7931;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    out_$p170 := $M.35;
    goto corral_source_split_7930;

  $bb84:
    assume out_$i169 == 1;
    goto corral_source_split_7929;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 1);
    goto corral_source_split_7927;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i168 := $M.60;
    goto corral_source_split_7926;

  $bb82:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7924;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} out_vslice_dummy_var_221 := bcm4320a_early_init(out_$p166);
    goto corral_source_split_7923;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    out_$p166 := $M.35;
    goto corral_source_split_7922;

  $bb81:
    assume out_$i165 == 1;
    goto corral_source_split_7921;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 4);
    goto corral_source_split_7845;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    out_$i164 := $M.60;
    goto corral_source_split_7844;

  $bb53:
    assume !(out_$i122 == 1);
    goto corral_source_split_7843;

  $bb94:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $M.68 := out_$i185;
    call {:si_unique_call 1599} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_7957;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i185 := $sub.i32(out_$i184, 1);
    goto corral_source_split_7956;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    out_$i184 := $M.68;
    goto corral_source_split_7955;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7954;

  SeqInstr_531:
    goto corral_source_split_7953;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} rndis_wlan_unbind(out_$p182, out_$p183);
    goto SeqInstr_530;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    out_$p183 := $M.36;
    goto corral_source_split_7952;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    out_$p182 := $M.35;
    goto corral_source_split_7951;

  $bb93:
    assume out_$i181 == 1;
    goto corral_source_split_7950;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 2);
    goto corral_source_split_7829;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    out_$i180 := $M.60;
    goto corral_source_split_7828;

  $bb46:
    assume out_$i119 == 1;
    goto corral_source_split_7827;

  $bb45:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i110, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb97:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb99:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $M.68 := out_$i194;
    call {:si_unique_call 1603} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i194);
    goto corral_source_split_7971;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    out_$i194 := $add.i32(out_$i193, 1);
    goto corral_source_split_7970;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$i193 := $M.68;
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7968;

  $bb98:
    assume out_$i192 == 1;
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    out_$i191 := $M.71;
    goto corral_source_split_7964;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $M.71 := out_$i190;
    call {:si_unique_call 1601} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_7963;

  SeqInstr_534:
    goto corral_source_split_7962;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_$i190 := rndis_wlan_bind(out_$p188, out_$p189);
    goto SeqInstr_533;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    out_$p189 := $M.36;
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    out_$p188 := $M.35;
    goto corral_source_split_7960;

  $bb96:
    assume out_$i187 == 1;
    goto corral_source_split_7959;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 1);
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    out_$i186 := $M.60;
    goto corral_source_split_7832;

  $bb48:
    assume out_$i120 == 1;
    goto corral_source_split_7831;

  $bb47:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i110, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb103:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7976;

  SeqInstr_537:
    goto corral_source_split_7975;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} out_vslice_dummy_var_225 := rndis_wlan_stop(out_$p197);
    goto SeqInstr_536;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$p197 := $M.35;
    goto corral_source_split_7974;

  $bb102:
    assume out_$i196 == 1;
    goto corral_source_split_7973;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 4);
    goto corral_source_split_7837;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    out_$i195 := $M.60;
    goto corral_source_split_7836;

  $bb49:
    assume !(out_$i120 == 1);
    goto corral_source_split_7835;

  $bb115:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8005;

  SeqInstr_549:
    goto corral_source_split_8004;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_vslice_dummy_var_229 := rndis_wlan_reset(out_$p213);
    goto SeqInstr_548;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$p213 := $M.35;
    goto corral_source_split_8003;

  $bb114:
    assume out_$i212 == 1;
    goto corral_source_split_8002;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 2);
    goto corral_source_split_8000;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i211 := $M.60;
    goto corral_source_split_7999;

  $bb112:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7997;

  SeqInstr_546:
    goto corral_source_split_7996;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_vslice_dummy_var_228 := rndis_wlan_reset(out_$p209);
    goto SeqInstr_545;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    out_$p209 := $M.35;
    goto corral_source_split_7995;

  $bb111:
    assume out_$i208 == 1;
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 3);
    goto corral_source_split_7992;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i207 := $M.60;
    goto corral_source_split_7991;

  $bb109:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7989;

  SeqInstr_543:
    goto corral_source_split_7988;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_vslice_dummy_var_227 := rndis_wlan_reset(out_$p205);
    goto SeqInstr_542;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$p205 := $M.35;
    goto corral_source_split_7987;

  $bb108:
    assume out_$i204 == 1;
    goto corral_source_split_7986;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_7984;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i203 := $M.60;
    goto corral_source_split_7983;

  $bb106:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_7981;

  SeqInstr_540:
    goto corral_source_split_7980;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} out_vslice_dummy_var_226 := rndis_wlan_reset(out_$p201);
    goto SeqInstr_539;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    out_$p201 := $M.35;
    goto corral_source_split_7979;

  $bb105:
    assume out_$i200 == 1;
    goto corral_source_split_7978;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 4);
    goto corral_source_split_7817;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    out_$i199 := $M.60;
    goto corral_source_split_7816;

  $bb40:
    assume out_$i116 == 1;
    goto corral_source_split_7815;

  $bb31:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i110, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb30:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i110, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb127:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_vslice_dummy_var_233 := rndis_rx_fixup(out_$p232, out_$p233);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$p233 := $M.34;
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$p232 := $M.35;
    goto corral_source_split_8035;

  $bb126:
    assume out_$i231 == 1;
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_8032;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i230 := $M.60;
    goto corral_source_split_8031;

  $bb124:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} out_vslice_dummy_var_232 := rndis_rx_fixup(out_$p227, out_$p228);
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    out_$p228 := $M.34;
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$p227 := $M.35;
    goto corral_source_split_8026;

  $bb123:
    assume out_$i226 == 1;
    goto corral_source_split_8025;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_8023;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i225 := $M.60;
    goto corral_source_split_8022;

  $bb121:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_vslice_dummy_var_231 := rndis_rx_fixup(out_$p222, out_$p223);
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$p223 := $M.34;
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$p222 := $M.35;
    goto corral_source_split_8017;

  $bb120:
    assume out_$i221 == 1;
    goto corral_source_split_8016;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_8014;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i220 := $M.60;
    goto corral_source_split_8013;

  $bb118:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8011;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} out_vslice_dummy_var_230 := rndis_rx_fixup(out_$p217, out_$p218);
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    out_$p218 := $M.34;
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$p217 := $M.35;
    goto corral_source_split_8008;

  $bb117:
    assume out_$i216 == 1;
    goto corral_source_split_8007;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 4);
    goto corral_source_split_7821;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    out_$i215 := $M.60;
    goto corral_source_split_7820;

  $bb42:
    assume out_$i117 == 1;
    goto corral_source_split_7819;

  $bb41:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i110, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb139:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} rndis_status(out_$p246, in_$p26);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$p246 := $M.35;
    goto corral_source_split_8065;

  $bb138:
    assume out_$i245 == 1;
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 2);
    goto corral_source_split_8062;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i244 := $M.60;
    goto corral_source_split_8061;

  $bb136:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8059;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} rndis_status(out_$p243, in_$p26);
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    out_$p243 := $M.35;
    goto corral_source_split_8057;

  $bb135:
    assume out_$i242 == 1;
    goto corral_source_split_8056;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 3);
    goto corral_source_split_8054;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i241 := $M.60;
    goto corral_source_split_8053;

  $bb133:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8051;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} rndis_status(out_$p240, in_$p26);
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    out_$p240 := $M.35;
    goto corral_source_split_8049;

  $bb132:
    assume out_$i239 == 1;
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 1);
    goto corral_source_split_8046;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i238 := $M.60;
    goto corral_source_split_8045;

  $bb130:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} rndis_status(out_$p237, in_$p26);
    goto corral_source_split_8042;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$p237 := $M.35;
    goto corral_source_split_8041;

  $bb129:
    assume out_$i236 == 1;
    goto corral_source_split_8040;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 4);
    goto corral_source_split_7825;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    out_$i235 := $M.60;
    goto corral_source_split_7824;

  $bb43:
    assume !(out_$i117 == 1);
    goto corral_source_split_7823;

  $bb145:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_235 := ldv_disconnect_6();
    goto corral_source_split_8077;

  $bb144:
    assume out_$i251 == 1;
    goto corral_source_split_8076;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 3);
    goto corral_source_split_8074;

  $bb143:
    assume {:verifier.code 0} true;
    out_$i250 := $M.60;
    goto corral_source_split_8073;

  $bb142:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_vslice_dummy_var_234 := ldv_disconnect_6();
    goto corral_source_split_8070;

  $bb141:
    assume out_$i248 == 1;
    goto corral_source_split_8069;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 4);
    goto corral_source_split_7805;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    out_$i247 := $M.60;
    goto corral_source_split_7804;

  $bb33:
    assume out_$i113 == 1;
    goto corral_source_split_7803;

  $bb32:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i110, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb148:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $M.60 := 3;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_vslice_dummy_var_236 := ldv_init_6();
    goto corral_source_split_8081;

  $bb147:
    assume out_$i254 == 1;
    goto corral_source_split_8080;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 2);
    goto corral_source_split_7809;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    out_$i253 := $M.60;
    goto corral_source_split_7808;

  $bb35:
    assume out_$i114 == 1;
    goto corral_source_split_7807;

  $bb34:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i110, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb151:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $M.60 := 4;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(4);
    goto corral_source_split_8086;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_vslice_dummy_var_237 := ldv_start_6();
    goto corral_source_split_8085;

  $bb150:
    assume out_$i257 == 1;
    goto corral_source_split_8084;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 3);
    goto corral_source_split_7813;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    out_$i256 := $M.60;
    goto corral_source_split_7812;

  $bb37:
    assume out_$i115 == 1;
    goto corral_source_split_7811;

  $bb36:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i110, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_stop();
    goto corral_source_split_8088;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb39;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb39;

  $bb158:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_552:
    goto corral_source_split_8091;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} invoke_work_3();
    goto SeqInstr_551;

  $bb157:
    assume out_$i260 == 1;
    goto corral_source_split_8090;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    out_$i260 := $ne.i32(out_$i259, 0);
    goto corral_source_split_7795;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    out_$i259 := $M.61;
    goto corral_source_split_7794;

  $bb23:
    assume !(out_$i106 == 1);
    goto corral_source_split_7793;

  $bb161:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb200:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} rndis_wlan_indication(out_$p291, in_$p27, out_$i292);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i32($M.33, in_$p3);
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$p291 := $M.38;
    goto corral_source_split_8171;

  $bb199:
    assume out_$i290 == 1;
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 2);
    goto corral_source_split_8168;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i289 := $M.62;
    goto corral_source_split_8167;

  $bb197:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} rndis_wlan_indication(out_$p287, in_$p27, out_$i288);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i288 := $load.i32($M.33, in_$p3);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$p287 := $M.38;
    goto corral_source_split_8162;

  $bb196:
    assume out_$i286 == 1;
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 3);
    goto corral_source_split_8159;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i285 := $M.62;
    goto corral_source_split_8158;

  $bb194:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8156;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} rndis_wlan_indication(out_$p283, in_$p27, out_$i284);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.33, in_$p3);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    out_$p283 := $M.38;
    goto corral_source_split_8153;

  $bb193:
    assume out_$i282 == 1;
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 1);
    goto corral_source_split_8150;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i281 := $M.62;
    goto corral_source_split_8149;

  $bb191:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} rndis_wlan_indication(out_$p279, in_$p27, out_$i280);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.33, in_$p3);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$p279 := $M.38;
    goto corral_source_split_8144;

  $bb190:
    assume out_$i278 == 1;
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 4);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i277 := $M.62;
    goto corral_source_split_8140;

  $bb188:
    assume out_$i276 == 1;
    goto corral_source_split_8139;

  $bb184:
    assume out_$i274 == 1;
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i263, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb178:
    assume out_$i271 == 1;
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i263, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb163:
    assume out_$i264 == 1;
    assume {:verifier.code 0} true;
    out_$i271 := $slt.i32(out_$i263, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i264 := $slt.i32(out_$i263, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_8093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} out_$i263 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i263);
    call {:si_unique_call 1642} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i263);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb160:
    assume out_$i262 == 1;
    goto corral_source_split_8093;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    out_$i262 := $ne.i32(out_$i261, 0);
    goto corral_source_split_7783;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    out_$i261 := $M.62;
    goto corral_source_split_7782;

  $bb18:
    assume out_$i104 == 1;
    goto corral_source_split_7781;

  $bb17:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i96, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb213:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_vslice_dummy_var_241 := rndis_tx_fixup(out_$p313, out_$p314, out_$i315);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.33, in_$p2);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p314 := $M.37;
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p313 := $M.38;
    goto corral_source_split_8207;

  $bb212:
    assume out_$i312 == 1;
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 2);
    goto corral_source_split_8204;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i311 := $M.62;
    goto corral_source_split_8203;

  $bb210:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} out_vslice_dummy_var_240 := rndis_tx_fixup(out_$p307, out_$p308, out_$i309);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i32($M.33, in_$p2);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$p308 := $M.37;
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$p307 := $M.38;
    goto corral_source_split_8197;

  $bb209:
    assume out_$i306 == 1;
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 3);
    goto corral_source_split_8194;

  $bb208:
    assume {:verifier.code 0} true;
    out_$i305 := $M.62;
    goto corral_source_split_8193;

  $bb207:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} out_vslice_dummy_var_239 := rndis_tx_fixup(out_$p301, out_$p302, out_$i303);
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i32($M.33, in_$p2);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$p302 := $M.37;
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$p301 := $M.38;
    goto corral_source_split_8187;

  $bb206:
    assume out_$i300 == 1;
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 1);
    goto corral_source_split_8184;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i299 := $M.62;
    goto corral_source_split_8183;

  $bb204:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} out_vslice_dummy_var_238 := rndis_tx_fixup(out_$p295, out_$p296, out_$i297);
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i32($M.33, in_$p2);
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    out_$p296 := $M.37;
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    out_$p295 := $M.38;
    goto corral_source_split_8177;

  $bb203:
    assume out_$i294 == 1;
    goto corral_source_split_8176;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 4);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$i293 := $M.62;
    goto corral_source_split_8132;

  $bb186:
    assume out_$i275 == 1;
    goto corral_source_split_8131;

  $bb185:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i263, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb225:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8240;

  SeqInstr_564:
    goto corral_source_split_8239;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} out_vslice_dummy_var_245 := bcm4320b_early_init(out_$p331);
    goto SeqInstr_563;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$p331 := $M.38;
    goto corral_source_split_8238;

  $bb224:
    assume out_$i330 == 1;
    goto corral_source_split_8237;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 2);
    goto corral_source_split_8235;

  $bb223:
    assume {:verifier.code 0} true;
    out_$i329 := $M.62;
    goto corral_source_split_8234;

  $bb222:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8232;

  SeqInstr_561:
    goto corral_source_split_8231;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} out_vslice_dummy_var_244 := bcm4320b_early_init(out_$p327);
    goto SeqInstr_560;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$p327 := $M.38;
    goto corral_source_split_8230;

  $bb221:
    assume out_$i326 == 1;
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 3);
    goto corral_source_split_8227;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i325 := $M.62;
    goto corral_source_split_8226;

  $bb219:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8224;

  SeqInstr_558:
    goto corral_source_split_8223;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} out_vslice_dummy_var_243 := bcm4320b_early_init(out_$p323);
    goto SeqInstr_557;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$p323 := $M.38;
    goto corral_source_split_8222;

  $bb218:
    assume out_$i322 == 1;
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_8219;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i321 := $M.62;
    goto corral_source_split_8218;

  $bb216:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8216;

  SeqInstr_555:
    goto corral_source_split_8215;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} out_vslice_dummy_var_242 := bcm4320b_early_init(out_$p319);
    goto SeqInstr_554;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$p319 := $M.38;
    goto corral_source_split_8214;

  $bb215:
    assume out_$i318 == 1;
    goto corral_source_split_8213;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 4);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i317 := $M.62;
    goto corral_source_split_8136;

  $bb187:
    assume !(out_$i275 == 1);
    goto corral_source_split_8135;

  $bb228:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $M.68 := out_$i338;
    call {:si_unique_call 1669} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i338);
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i338 := $sub.i32(out_$i337, 1);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i337 := $M.68;
    goto corral_source_split_8247;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8246;

  SeqInstr_567:
    goto corral_source_split_8245;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} rndis_wlan_unbind(out_$p335, out_$p336);
    goto SeqInstr_566;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    out_$p336 := $M.39;
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    out_$p335 := $M.38;
    goto corral_source_split_8243;

  $bb227:
    assume out_$i334 == 1;
    goto corral_source_split_8242;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 2);
    goto corral_source_split_8121;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    out_$i333 := $M.62;
    goto corral_source_split_8120;

  $bb180:
    assume out_$i272 == 1;
    goto corral_source_split_8119;

  $bb179:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    out_$i272 := $slt.i32(out_$i263, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb231:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume !(out_$i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $M.68 := out_$i347;
    call {:si_unique_call 1673} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i347);
    goto corral_source_split_8263;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i347 := $add.i32(out_$i346, 1);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i346 := $M.68;
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8260;

  $bb232:
    assume out_$i345 == 1;
    goto corral_source_split_8259;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i344, 0);
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i344 := $M.72;
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.72 := out_$i343;
    call {:si_unique_call 1671} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i343);
    goto corral_source_split_8255;

  SeqInstr_570:
    goto corral_source_split_8254;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_$i343 := rndis_wlan_bind(out_$p341, out_$p342);
    goto SeqInstr_569;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$p342 := $M.39;
    goto corral_source_split_8253;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    out_$p341 := $M.38;
    goto corral_source_split_8252;

  $bb230:
    assume out_$i340 == 1;
    goto corral_source_split_8251;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_8125;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    out_$i339 := $M.62;
    goto corral_source_split_8124;

  $bb182:
    assume out_$i273 == 1;
    goto corral_source_split_8123;

  $bb181:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i263, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb237:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8268;

  SeqInstr_573:
    goto corral_source_split_8267;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_246 := rndis_wlan_stop(out_$p350);
    goto SeqInstr_572;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    out_$p350 := $M.38;
    goto corral_source_split_8266;

  $bb236:
    assume out_$i349 == 1;
    goto corral_source_split_8265;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 4);
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    out_$i348 := $M.62;
    goto corral_source_split_8128;

  $bb183:
    assume !(out_$i273 == 1);
    goto corral_source_split_8127;

  $bb249:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8297;

  SeqInstr_585:
    goto corral_source_split_8296;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_250 := rndis_wlan_reset(out_$p366);
    goto SeqInstr_584;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$p366 := $M.38;
    goto corral_source_split_8295;

  $bb248:
    assume out_$i365 == 1;
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 2);
    goto corral_source_split_8292;

  $bb247:
    assume {:verifier.code 0} true;
    out_$i364 := $M.62;
    goto corral_source_split_8291;

  $bb246:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8289;

  SeqInstr_582:
    goto corral_source_split_8288;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} out_vslice_dummy_var_249 := rndis_wlan_reset(out_$p362);
    goto SeqInstr_581;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$p362 := $M.38;
    goto corral_source_split_8287;

  $bb245:
    assume out_$i361 == 1;
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 3);
    goto corral_source_split_8284;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i360 := $M.62;
    goto corral_source_split_8283;

  $bb243:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8281;

  SeqInstr_579:
    goto corral_source_split_8280;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} out_vslice_dummy_var_248 := rndis_wlan_reset(out_$p358);
    goto SeqInstr_578;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$p358 := $M.38;
    goto corral_source_split_8279;

  $bb242:
    assume out_$i357 == 1;
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 1);
    goto corral_source_split_8276;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i356 := $M.62;
    goto corral_source_split_8275;

  $bb240:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8273;

  SeqInstr_576:
    goto corral_source_split_8272;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_247 := rndis_wlan_reset(out_$p354);
    goto SeqInstr_575;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    out_$p354 := $M.38;
    goto corral_source_split_8271;

  $bb239:
    assume out_$i353 == 1;
    goto corral_source_split_8270;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 4);
    goto corral_source_split_8109;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    out_$i352 := $M.62;
    goto corral_source_split_8108;

  $bb174:
    assume out_$i269 == 1;
    goto corral_source_split_8107;

  $bb165:
    assume out_$i265 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := $slt.i32(out_$i263, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb164:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i263, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb261:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_vslice_dummy_var_254 := rndis_rx_fixup(out_$p385, out_$p386);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$p386 := $M.37;
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$p385 := $M.38;
    goto corral_source_split_8327;

  $bb260:
    assume out_$i384 == 1;
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 2);
    goto corral_source_split_8324;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i383 := $M.62;
    goto corral_source_split_8323;

  $bb258:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} out_vslice_dummy_var_253 := rndis_rx_fixup(out_$p380, out_$p381);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$p381 := $M.37;
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$p380 := $M.38;
    goto corral_source_split_8318;

  $bb257:
    assume out_$i379 == 1;
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 3);
    goto corral_source_split_8315;

  $bb256:
    assume {:verifier.code 0} true;
    out_$i378 := $M.62;
    goto corral_source_split_8314;

  $bb255:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8312;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} out_vslice_dummy_var_252 := rndis_rx_fixup(out_$p375, out_$p376);
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$p376 := $M.37;
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$p375 := $M.38;
    goto corral_source_split_8309;

  $bb254:
    assume out_$i374 == 1;
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 1);
    goto corral_source_split_8306;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i373 := $M.62;
    goto corral_source_split_8305;

  $bb252:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_vslice_dummy_var_251 := rndis_rx_fixup(out_$p370, out_$p371);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$p371 := $M.37;
    goto corral_source_split_8301;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$p370 := $M.38;
    goto corral_source_split_8300;

  $bb251:
    assume out_$i369 == 1;
    goto corral_source_split_8299;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 4);
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i368 := $M.62;
    goto corral_source_split_8112;

  $bb176:
    assume out_$i270 == 1;
    goto corral_source_split_8111;

  $bb175:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := $slt.i32(out_$i263, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb273:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} rndis_status(out_$p399, in_$p29);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$p399 := $M.38;
    goto corral_source_split_8357;

  $bb272:
    assume out_$i398 == 1;
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 2);
    goto corral_source_split_8354;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i397 := $M.62;
    goto corral_source_split_8353;

  $bb270:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} rndis_status(out_$p396, in_$p29);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$p396 := $M.38;
    goto corral_source_split_8349;

  $bb269:
    assume out_$i395 == 1;
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 3);
    goto corral_source_split_8346;

  $bb268:
    assume {:verifier.code 0} true;
    out_$i394 := $M.62;
    goto corral_source_split_8345;

  $bb267:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} rndis_status(out_$p393, in_$p29);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$p393 := $M.38;
    goto corral_source_split_8341;

  $bb266:
    assume out_$i392 == 1;
    goto corral_source_split_8340;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 1);
    goto corral_source_split_8338;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i391 := $M.62;
    goto corral_source_split_8337;

  $bb264:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} rndis_status(out_$p390, in_$p29);
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$p390 := $M.38;
    goto corral_source_split_8333;

  $bb263:
    assume out_$i389 == 1;
    goto corral_source_split_8332;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 4);
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$i388 := $M.62;
    goto corral_source_split_8116;

  $bb177:
    assume !(out_$i270 == 1);
    goto corral_source_split_8115;

  $bb279:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} out_vslice_dummy_var_256 := ldv_disconnect_7();
    goto corral_source_split_8369;

  $bb278:
    assume out_$i404 == 1;
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 3);
    goto corral_source_split_8366;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i403 := $M.62;
    goto corral_source_split_8365;

  $bb276:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_255 := ldv_disconnect_7();
    goto corral_source_split_8362;

  $bb275:
    assume out_$i401 == 1;
    goto corral_source_split_8361;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 4);
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$i400 := $M.62;
    goto corral_source_split_8096;

  $bb167:
    assume out_$i266 == 1;
    goto corral_source_split_8095;

  $bb166:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i263, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb282:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} out_vslice_dummy_var_257 := ldv_init_7();
    goto corral_source_split_8373;

  $bb281:
    assume out_$i407 == 1;
    goto corral_source_split_8372;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 2);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$i406 := $M.62;
    goto corral_source_split_8100;

  $bb169:
    assume out_$i267 == 1;
    goto corral_source_split_8099;

  $bb168:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i263, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb285:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $M.62 := 4;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(4);
    goto corral_source_split_8378;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_258 := ldv_start_7();
    goto corral_source_split_8377;

  $bb284:
    assume out_$i410 == 1;
    goto corral_source_split_8376;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 3);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$i409 := $M.62;
    goto corral_source_split_8104;

  $bb171:
    assume out_$i268 == 1;
    goto corral_source_split_8103;

  $bb170:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i263, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} ldv_stop();
    goto corral_source_split_8380;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb172:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb173;

  $bb189:
    assume {:verifier.code 0} true;
    assume !(out_$i276 == 1);
    goto $bb173;

  $bb291:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb345:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8499;

  SeqInstr_594:
    goto corral_source_split_8498;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} out_vslice_dummy_var_261 := rndis_set_power_mgmt(out_$p455, out_$p456, out_$i458, out_$i459);
    goto SeqInstr_593;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$i459 := $load.i32($M.33, in_$p19);
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i458 := $trunc.i8.i1(out_$i457);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i8($M.33, in_$p11);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$p456 := $M.56;
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$p455 := $M.57;
    goto corral_source_split_8493;

  $bb344:
    assume out_$i454 == 1;
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i453, 2);
    goto corral_source_split_8490;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i453 := $M.63;
    goto corral_source_split_8489;

  $bb342:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8487;

  SeqInstr_591:
    goto corral_source_split_8486;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} out_vslice_dummy_var_260 := rndis_set_power_mgmt(out_$p447, out_$p448, out_$i450, out_$i451);
    goto SeqInstr_590;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$i451 := $load.i32($M.33, in_$p19);
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$i450 := $trunc.i8.i1(out_$i449);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$i449 := $load.i8($M.33, in_$p11);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    out_$p448 := $M.56;
    goto corral_source_split_8482;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$p447 := $M.57;
    goto corral_source_split_8481;

  $bb341:
    assume out_$i446 == 1;
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i446 := $eq.i32(out_$i445, 3);
    goto corral_source_split_8478;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i445 := $M.63;
    goto corral_source_split_8477;

  $bb339:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8475;

  SeqInstr_588:
    goto corral_source_split_8474;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_259 := rndis_set_power_mgmt(out_$p439, out_$p440, out_$i442, out_$i443);
    goto SeqInstr_587;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    out_$i443 := $load.i32($M.33, in_$p19);
    goto corral_source_split_8473;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    out_$i442 := $trunc.i8.i1(out_$i441);
    goto corral_source_split_8472;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    out_$i441 := $load.i8($M.33, in_$p11);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$p440 := $M.56;
    goto corral_source_split_8470;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    out_$p439 := $M.57;
    goto corral_source_split_8469;

  $bb338:
    assume out_$i438 == 1;
    goto corral_source_split_8468;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 1);
    goto corral_source_split_8466;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$i437 := $M.63;
    goto corral_source_split_8465;

  $bb336:
    assume out_$i436 == 1;
    goto corral_source_split_8464;

  $bb334:
    assume out_$i435 == 1;
    assume {:verifier.code 0} true;
    out_$i436 := $eq.i32(out_$i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb328:
    assume out_$i432 == 1;
    assume {:verifier.code 0} true;
    out_$i435 := $slt.i32(out_$i414, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb318:
    assume out_$i427 == 1;
    assume {:verifier.code 0} true;
    out_$i432 := $slt.i32(out_$i414, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb293:
    assume out_$i415 == 1;
    assume {:verifier.code 0} true;
    out_$i427 := $slt.i32(out_$i414, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i415 := $slt.i32(out_$i414, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_8382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1709} out_$i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 1710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i414);
    call {:si_unique_call 1711} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i414);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume out_$i413 == 1;
    goto corral_source_split_8382;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    out_$i413 := $ne.i32(out_$i412, 0);
    goto corral_source_split_7787;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    out_$i412 := $M.63;
    goto corral_source_split_7786;

  $bb20:
    assume out_$i105 == 1;
    goto corral_source_split_7785;

  $bb19:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i96, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb355:
    assume !(out_$i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8538;

  SeqInstr_603:
    goto corral_source_split_8537;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} out_vslice_dummy_var_264 := rndis_add_key(out_$p483, out_$p484, out_$i487, out_$i489, in_$p44, in_$p46);
    goto SeqInstr_602;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i489 := $trunc.i8.i1(out_$i488);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$i488 := $load.i8($M.33, in_$p5);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$i487 := $trunc.i32.i8(out_$i486);
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$i486 := $zext.i8.i32(out_$i485);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$i485 := $load.i8($M.33, in_$p4);
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$p484 := $M.56;
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$p483 := $M.57;
    goto corral_source_split_8530;

  $bb354:
    assume out_$i482 == 1;
    goto corral_source_split_8529;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i481, 2);
    goto corral_source_split_8527;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i481 := $M.63;
    goto corral_source_split_8526;

  $bb352:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8524;

  SeqInstr_600:
    goto corral_source_split_8523;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} out_vslice_dummy_var_263 := rndis_add_key(out_$p473, out_$p474, out_$i477, out_$i479, in_$p44, in_$p46);
    goto SeqInstr_599;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i479 := $trunc.i8.i1(out_$i478);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i478 := $load.i8($M.33, in_$p5);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$i477 := $trunc.i32.i8(out_$i476);
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    out_$i476 := $zext.i8.i32(out_$i475);
    goto corral_source_split_8519;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    out_$i475 := $load.i8($M.33, in_$p4);
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    out_$p474 := $M.56;
    goto corral_source_split_8517;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$p473 := $M.57;
    goto corral_source_split_8516;

  $bb351:
    assume out_$i472 == 1;
    goto corral_source_split_8515;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i471, 3);
    goto corral_source_split_8513;

  $bb350:
    assume {:verifier.code 0} true;
    out_$i471 := $M.63;
    goto corral_source_split_8512;

  $bb349:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8510;

  SeqInstr_597:
    goto corral_source_split_8509;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} out_vslice_dummy_var_262 := rndis_add_key(out_$p463, out_$p464, out_$i467, out_$i469, in_$p44, in_$p46);
    goto SeqInstr_596;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    out_$i469 := $trunc.i8.i1(out_$i468);
    goto corral_source_split_8508;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    out_$i468 := $load.i8($M.33, in_$p5);
    goto corral_source_split_8507;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    out_$i467 := $trunc.i32.i8(out_$i466);
    goto corral_source_split_8506;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$i466 := $zext.i8.i32(out_$i465);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i465 := $load.i8($M.33, in_$p4);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$p464 := $M.56;
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    out_$p463 := $M.57;
    goto corral_source_split_8502;

  $bb348:
    assume out_$i462 == 1;
    goto corral_source_split_8501;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i461, 1);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$i461 := $M.63;
    goto corral_source_split_8461;

  $bb335:
    assume !(out_$i435 == 1);
    goto corral_source_split_8460;

  $bb364:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8565;

  SeqInstr_612:
    goto corral_source_split_8564;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} out_vslice_dummy_var_267 := rndis_change_virtual_intf(out_$p505, out_$p506, out_$i507, in_$p43, in_$p41);
    goto SeqInstr_611;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$i507 := $load.i32($M.33, in_$p20);
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$p506 := $M.56;
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$p505 := $M.57;
    goto corral_source_split_8561;

  $bb363:
    assume out_$i504 == 1;
    goto corral_source_split_8560;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 2);
    goto corral_source_split_8558;

  $bb362:
    assume {:verifier.code 0} true;
    out_$i503 := $M.63;
    goto corral_source_split_8557;

  $bb361:
    assume !(out_$i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8555;

  SeqInstr_609:
    goto corral_source_split_8554;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} out_vslice_dummy_var_266 := rndis_change_virtual_intf(out_$p499, out_$p500, out_$i501, in_$p43, in_$p41);
    goto SeqInstr_608;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i501 := $load.i32($M.33, in_$p20);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$p500 := $M.56;
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$p499 := $M.57;
    goto corral_source_split_8551;

  $bb360:
    assume out_$i498 == 1;
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$i498 := $eq.i32(out_$i497, 3);
    goto corral_source_split_8548;

  $bb359:
    assume {:verifier.code 0} true;
    out_$i497 := $M.63;
    goto corral_source_split_8547;

  $bb358:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8545;

  SeqInstr_606:
    goto corral_source_split_8544;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_vslice_dummy_var_265 := rndis_change_virtual_intf(out_$p493, out_$p494, out_$i495, in_$p43, in_$p41);
    goto SeqInstr_605;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i495 := $load.i32($M.33, in_$p20);
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$p494 := $M.56;
    goto corral_source_split_8542;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$p493 := $M.57;
    goto corral_source_split_8541;

  $bb357:
    assume out_$i492 == 1;
    goto corral_source_split_8540;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 1);
    goto corral_source_split_8450;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    out_$i491 := $M.63;
    goto corral_source_split_8449;

  $bb330:
    assume out_$i433 == 1;
    goto corral_source_split_8448;

  $bb329:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    out_$i433 := $slt.i32(out_$i414, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb373:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8610;

  SeqInstr_621:
    goto corral_source_split_8609;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} out_vslice_dummy_var_270 := rndis_set_default_key(out_$p535, out_$p536, out_$i539, out_$i541, out_$i543);
    goto SeqInstr_620;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    out_$i543 := $trunc.i8.i1(out_$i542);
    goto corral_source_split_8608;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    out_$i542 := $load.i8($M.33, in_$p10);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$i541 := $trunc.i8.i1(out_$i540);
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$i540 := $load.i8($M.33, in_$p9);
    goto corral_source_split_8605;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    out_$i539 := $trunc.i32.i8(out_$i538);
    goto corral_source_split_8604;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    out_$i538 := $zext.i8.i32(out_$i537);
    goto corral_source_split_8603;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i537 := $load.i8($M.33, in_$p15);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$p536 := $M.56;
    goto corral_source_split_8601;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$p535 := $M.57;
    goto corral_source_split_8600;

  $bb372:
    assume out_$i534 == 1;
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 2);
    goto corral_source_split_8597;

  $bb371:
    assume {:verifier.code 0} true;
    out_$i533 := $M.63;
    goto corral_source_split_8596;

  $bb370:
    assume !(out_$i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8594;

  SeqInstr_618:
    goto corral_source_split_8593;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_vslice_dummy_var_269 := rndis_set_default_key(out_$p523, out_$p524, out_$i527, out_$i529, out_$i531);
    goto SeqInstr_617;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    out_$i531 := $trunc.i8.i1(out_$i530);
    goto corral_source_split_8592;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    out_$i530 := $load.i8($M.33, in_$p10);
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i529 := $trunc.i8.i1(out_$i528);
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i528 := $load.i8($M.33, in_$p9);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i527 := $trunc.i32.i8(out_$i526);
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    out_$i526 := $zext.i8.i32(out_$i525);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$i525 := $load.i8($M.33, in_$p15);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$p524 := $M.56;
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    out_$p523 := $M.57;
    goto corral_source_split_8584;

  $bb369:
    assume out_$i522 == 1;
    goto corral_source_split_8583;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i522 := $eq.i32(out_$i521, 3);
    goto corral_source_split_8581;

  $bb368:
    assume {:verifier.code 0} true;
    out_$i521 := $M.63;
    goto corral_source_split_8580;

  $bb367:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8578;

  SeqInstr_615:
    goto corral_source_split_8577;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} out_vslice_dummy_var_268 := rndis_set_default_key(out_$p511, out_$p512, out_$i515, out_$i517, out_$i519);
    goto SeqInstr_614;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$i519 := $trunc.i8.i1(out_$i518);
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    out_$i518 := $load.i8($M.33, in_$p10);
    goto corral_source_split_8575;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i517 := $trunc.i8.i1(out_$i516);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i516 := $load.i8($M.33, in_$p9);
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$i515 := $trunc.i32.i8(out_$i514);
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i514 := $zext.i8.i32(out_$i513);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$i513 := $load.i8($M.33, in_$p15);
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$p512 := $M.56;
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    out_$p511 := $M.57;
    goto corral_source_split_8568;

  $bb366:
    assume out_$i510 == 1;
    goto corral_source_split_8567;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$i510 := $eq.i32(out_$i509, 1);
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    out_$i509 := $M.63;
    goto corral_source_split_8453;

  $bb332:
    assume out_$i434 == 1;
    goto corral_source_split_8452;

  $bb331:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    out_$i434 := $slt.i32(out_$i414, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb382:
    assume !(out_$i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8631;

  SeqInstr_630:
    goto corral_source_split_8630;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_vslice_dummy_var_273 := rndis_scan(out_$p555, in_$p34);
    goto SeqInstr_629;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$p555 := $M.57;
    goto corral_source_split_8629;

  $bb381:
    assume out_$i554 == 1;
    goto corral_source_split_8628;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i554 := $eq.i32(out_$i553, 2);
    goto corral_source_split_8626;

  $bb380:
    assume {:verifier.code 0} true;
    out_$i553 := $M.63;
    goto corral_source_split_8625;

  $bb379:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8623;

  SeqInstr_627:
    goto corral_source_split_8622;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} out_vslice_dummy_var_272 := rndis_scan(out_$p551, in_$p34);
    goto SeqInstr_626;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$p551 := $M.57;
    goto corral_source_split_8621;

  $bb378:
    assume out_$i550 == 1;
    goto corral_source_split_8620;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    out_$i550 := $eq.i32(out_$i549, 3);
    goto corral_source_split_8618;

  $bb377:
    assume {:verifier.code 0} true;
    out_$i549 := $M.63;
    goto corral_source_split_8617;

  $bb376:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8615;

  SeqInstr_624:
    goto corral_source_split_8614;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} out_vslice_dummy_var_271 := rndis_scan(out_$p547, in_$p34);
    goto SeqInstr_623;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    out_$p547 := $M.57;
    goto corral_source_split_8613;

  $bb375:
    assume out_$i546 == 1;
    goto corral_source_split_8612;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 1);
    goto corral_source_split_8458;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$i545 := $M.63;
    goto corral_source_split_8457;

  $bb333:
    assume !(out_$i434 == 1);
    goto corral_source_split_8456;

  $bb391:
    assume !(out_$i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8658;

  SeqInstr_639:
    goto corral_source_split_8657;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_276 := rndis_del_pmksa(out_$p571, out_$p572, out_$p573);
    goto SeqInstr_638;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$p573 := $M.55;
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$p572 := $M.56;
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    out_$p571 := $M.57;
    goto corral_source_split_8654;

  $bb390:
    assume out_$i570 == 1;
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$i570 := $eq.i32(out_$i569, 2);
    goto corral_source_split_8651;

  $bb389:
    assume {:verifier.code 0} true;
    out_$i569 := $M.63;
    goto corral_source_split_8650;

  $bb388:
    assume !(out_$i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8648;

  SeqInstr_636:
    goto corral_source_split_8647;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} out_vslice_dummy_var_275 := rndis_del_pmksa(out_$p565, out_$p566, out_$p567);
    goto SeqInstr_635;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    out_$p567 := $M.55;
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$p566 := $M.56;
    goto corral_source_split_8645;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    out_$p565 := $M.57;
    goto corral_source_split_8644;

  $bb387:
    assume out_$i564 == 1;
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    out_$i564 := $eq.i32(out_$i563, 3);
    goto corral_source_split_8641;

  $bb386:
    assume {:verifier.code 0} true;
    out_$i563 := $M.63;
    goto corral_source_split_8640;

  $bb385:
    assume !(out_$i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8638;

  SeqInstr_633:
    goto corral_source_split_8637;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_vslice_dummy_var_274 := rndis_del_pmksa(out_$p559, out_$p560, out_$p561);
    goto SeqInstr_632;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$p561 := $M.55;
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$p560 := $M.56;
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p559 := $M.57;
    goto corral_source_split_8634;

  $bb384:
    assume out_$i558 == 1;
    goto corral_source_split_8633;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i557, 1);
    goto corral_source_split_8442;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    out_$i557 := $M.63;
    goto corral_source_split_8441;

  $bb326:
    assume out_$i431 == 1;
    goto corral_source_split_8440;

  $bb320:
    assume out_$i428 == 1;
    assume {:verifier.code 0} true;
    out_$i431 := $slt.i32(out_$i414, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb319:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    out_$i428 := $slt.i32(out_$i414, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb400:
    assume !(out_$i596 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8697;

  SeqInstr_648:
    goto corral_source_split_8696;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} out_vslice_dummy_var_279 := rndis_del_key(out_$p597, out_$p598, out_$i601, out_$i603, in_$p47);
    goto SeqInstr_647;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    out_$i603 := $trunc.i8.i1(out_$i602);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$i602 := $load.i8($M.33, in_$p6);
    goto corral_source_split_8694;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    out_$i601 := $trunc.i32.i8(out_$i600);
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    out_$i600 := $zext.i8.i32(out_$i599);
    goto corral_source_split_8692;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    out_$i599 := $load.i8($M.33, in_$p14);
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    out_$p598 := $M.56;
    goto corral_source_split_8690;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    out_$p597 := $M.57;
    goto corral_source_split_8689;

  $bb399:
    assume out_$i596 == 1;
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    out_$i596 := $eq.i32(out_$i595, 2);
    goto corral_source_split_8686;

  $bb398:
    assume {:verifier.code 0} true;
    out_$i595 := $M.63;
    goto corral_source_split_8685;

  $bb397:
    assume !(out_$i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8683;

  SeqInstr_645:
    goto corral_source_split_8682;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} out_vslice_dummy_var_278 := rndis_del_key(out_$p587, out_$p588, out_$i591, out_$i593, in_$p47);
    goto SeqInstr_644;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    out_$i593 := $trunc.i8.i1(out_$i592);
    goto corral_source_split_8681;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    out_$i592 := $load.i8($M.33, in_$p6);
    goto corral_source_split_8680;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    out_$i591 := $trunc.i32.i8(out_$i590);
    goto corral_source_split_8679;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$i590 := $zext.i8.i32(out_$i589);
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    out_$i589 := $load.i8($M.33, in_$p14);
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    out_$p588 := $M.56;
    goto corral_source_split_8676;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    out_$p587 := $M.57;
    goto corral_source_split_8675;

  $bb396:
    assume out_$i586 == 1;
    goto corral_source_split_8674;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    out_$i586 := $eq.i32(out_$i585, 3);
    goto corral_source_split_8672;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i585 := $M.63;
    goto corral_source_split_8671;

  $bb394:
    assume !(out_$i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8669;

  SeqInstr_642:
    goto corral_source_split_8668;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_vslice_dummy_var_277 := rndis_del_key(out_$p577, out_$p578, out_$i581, out_$i583, in_$p47);
    goto SeqInstr_641;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    out_$i583 := $trunc.i8.i1(out_$i582);
    goto corral_source_split_8667;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    out_$i582 := $load.i8($M.33, in_$p6);
    goto corral_source_split_8666;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    out_$i581 := $trunc.i32.i8(out_$i580);
    goto corral_source_split_8665;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    out_$i580 := $zext.i8.i32(out_$i579);
    goto corral_source_split_8664;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$i579 := $load.i8($M.33, in_$p14);
    goto corral_source_split_8663;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    out_$p578 := $M.56;
    goto corral_source_split_8662;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    out_$p577 := $M.57;
    goto corral_source_split_8661;

  $bb393:
    assume out_$i576 == 1;
    goto corral_source_split_8660;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    out_$i576 := $eq.i32(out_$i575, 1);
    goto corral_source_split_8446;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    out_$i575 := $M.63;
    goto corral_source_split_8445;

  $bb327:
    assume !(out_$i431 == 1);
    goto corral_source_split_8444;

  $bb409:
    assume !(out_$i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8727;

  SeqInstr_657:
    goto corral_source_split_8726;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} out_vslice_dummy_var_282 := rndis_dump_station(out_$p621, out_$p622, out_$i623, in_$p30, out_$p624);
    goto SeqInstr_656;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    out_$p624 := $M.58;
    goto corral_source_split_8725;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    out_$i623 := $load.i32($M.33, in_$p18);
    goto corral_source_split_8724;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    out_$p622 := $M.56;
    goto corral_source_split_8723;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    out_$p621 := $M.57;
    goto corral_source_split_8722;

  $bb408:
    assume out_$i620 == 1;
    goto corral_source_split_8721;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    out_$i620 := $eq.i32(out_$i619, 2);
    goto corral_source_split_8719;

  $bb407:
    assume {:verifier.code 0} true;
    out_$i619 := $M.63;
    goto corral_source_split_8718;

  $bb406:
    assume !(out_$i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8716;

  SeqInstr_654:
    goto corral_source_split_8715;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_vslice_dummy_var_281 := rndis_dump_station(out_$p614, out_$p615, out_$i616, in_$p30, out_$p617);
    goto SeqInstr_653;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    out_$p617 := $M.58;
    goto corral_source_split_8714;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    out_$i616 := $load.i32($M.33, in_$p18);
    goto corral_source_split_8713;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    out_$p615 := $M.56;
    goto corral_source_split_8712;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$p614 := $M.57;
    goto corral_source_split_8711;

  $bb405:
    assume out_$i613 == 1;
    goto corral_source_split_8710;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    out_$i613 := $eq.i32(out_$i612, 3);
    goto corral_source_split_8708;

  $bb404:
    assume {:verifier.code 0} true;
    out_$i612 := $M.63;
    goto corral_source_split_8707;

  $bb403:
    assume !(out_$i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8705;

  SeqInstr_651:
    goto corral_source_split_8704;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_vslice_dummy_var_280 := rndis_dump_station(out_$p607, out_$p608, out_$i609, in_$p30, out_$p610);
    goto SeqInstr_650;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    out_$p610 := $M.58;
    goto corral_source_split_8703;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    out_$i609 := $load.i32($M.33, in_$p18);
    goto corral_source_split_8702;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    out_$p608 := $M.56;
    goto corral_source_split_8701;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    out_$p607 := $M.57;
    goto corral_source_split_8700;

  $bb402:
    assume out_$i606 == 1;
    goto corral_source_split_8699;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    out_$i606 := $eq.i32(out_$i605, 1);
    goto corral_source_split_8430;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    out_$i605 := $M.63;
    goto corral_source_split_8429;

  $bb322:
    assume out_$i429 == 1;
    goto corral_source_split_8428;

  $bb321:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    out_$i429 := $slt.i32(out_$i414, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb418:
    assume !(out_$i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    goto $bb419;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8757;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} out_vslice_dummy_var_285 := rndis_set_cqm_rssi_config(out_$p642, out_$p643, out_$i644, out_$i645);
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    out_$i645 := $load.i32($M.33, in_$p13);
    goto corral_source_split_8755;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    out_$i644 := $load.i32($M.33, in_$p17);
    goto corral_source_split_8754;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    out_$p643 := $M.56;
    goto corral_source_split_8753;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    out_$p642 := $M.57;
    goto corral_source_split_8752;

  $bb417:
    assume out_$i641 == 1;
    goto corral_source_split_8751;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    out_$i641 := $eq.i32(out_$i640, 2);
    goto corral_source_split_8749;

  $bb416:
    assume {:verifier.code 0} true;
    out_$i640 := $M.63;
    goto corral_source_split_8748;

  $bb415:
    assume !(out_$i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8746;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_284 := rndis_set_cqm_rssi_config(out_$p635, out_$p636, out_$i637, out_$i638);
    goto corral_source_split_8745;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$i638 := $load.i32($M.33, in_$p13);
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    out_$i637 := $load.i32($M.33, in_$p17);
    goto corral_source_split_8743;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    out_$p636 := $M.56;
    goto corral_source_split_8742;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    out_$p635 := $M.57;
    goto corral_source_split_8741;

  $bb414:
    assume out_$i634 == 1;
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    out_$i634 := $eq.i32(out_$i633, 3);
    goto corral_source_split_8738;

  $bb413:
    assume {:verifier.code 0} true;
    out_$i633 := $M.63;
    goto corral_source_split_8737;

  $bb412:
    assume !(out_$i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8735;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} out_vslice_dummy_var_283 := rndis_set_cqm_rssi_config(out_$p628, out_$p629, out_$i630, out_$i631);
    goto corral_source_split_8734;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    out_$i631 := $load.i32($M.33, in_$p13);
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    out_$i630 := $load.i32($M.33, in_$p17);
    goto corral_source_split_8732;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    out_$p629 := $M.56;
    goto corral_source_split_8731;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    out_$p628 := $M.57;
    goto corral_source_split_8730;

  $bb411:
    assume out_$i627 == 1;
    goto corral_source_split_8729;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$i627 := $eq.i32(out_$i626, 1);
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i626 := $M.63;
    goto corral_source_split_8433;

  $bb324:
    assume out_$i430 == 1;
    goto corral_source_split_8432;

  $bb323:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    out_$i430 := $slt.i32(out_$i414, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb427:
    assume !(out_$i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8787;

  SeqInstr_666:
    goto corral_source_split_8786;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_288 := rndis_set_tx_power(out_$p663, out_$p664, out_$i665, out_$i666);
    goto SeqInstr_665;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    out_$i666 := $load.i32($M.33, in_$p16);
    goto corral_source_split_8785;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    out_$i665 := $load.i32($M.33, in_$p12);
    goto corral_source_split_8784;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    out_$p664 := $M.54;
    goto corral_source_split_8783;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    out_$p663 := $M.57;
    goto corral_source_split_8782;

  $bb426:
    assume out_$i662 == 1;
    goto corral_source_split_8781;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    out_$i662 := $eq.i32(out_$i661, 2);
    goto corral_source_split_8779;

  $bb425:
    assume {:verifier.code 0} true;
    out_$i661 := $M.63;
    goto corral_source_split_8778;

  $bb424:
    assume !(out_$i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8776;

  SeqInstr_663:
    goto corral_source_split_8775;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} out_vslice_dummy_var_287 := rndis_set_tx_power(out_$p656, out_$p657, out_$i658, out_$i659);
    goto SeqInstr_662;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    out_$i659 := $load.i32($M.33, in_$p16);
    goto corral_source_split_8774;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    out_$i658 := $load.i32($M.33, in_$p12);
    goto corral_source_split_8773;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    out_$p657 := $M.54;
    goto corral_source_split_8772;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    out_$p656 := $M.57;
    goto corral_source_split_8771;

  $bb423:
    assume out_$i655 == 1;
    goto corral_source_split_8770;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    out_$i655 := $eq.i32(out_$i654, 3);
    goto corral_source_split_8768;

  $bb422:
    assume {:verifier.code 0} true;
    out_$i654 := $M.63;
    goto corral_source_split_8767;

  $bb421:
    assume !(out_$i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8765;

  SeqInstr_660:
    goto corral_source_split_8764;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_vslice_dummy_var_286 := rndis_set_tx_power(out_$p649, out_$p650, out_$i651, out_$i652);
    goto SeqInstr_659;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    out_$i652 := $load.i32($M.33, in_$p16);
    goto corral_source_split_8763;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    out_$i651 := $load.i32($M.33, in_$p12);
    goto corral_source_split_8762;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    out_$p650 := $M.54;
    goto corral_source_split_8761;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    out_$p649 := $M.57;
    goto corral_source_split_8760;

  $bb420:
    assume out_$i648 == 1;
    goto corral_source_split_8759;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    out_$i648 := $eq.i32(out_$i647, 1);
    goto corral_source_split_8438;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    out_$i647 := $M.63;
    goto corral_source_split_8437;

  $bb325:
    assume !(out_$i430 == 1);
    goto corral_source_split_8436;

  $bb430:
    assume !(out_$i669 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb432:
    assume !(out_$i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8798;

  $bb431:
    assume out_$i674 == 1;
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    out_$i674 := $eq.i32(out_$i673, 0);
    goto corral_source_split_8795;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    out_$i673 := $M.73;
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.73 := out_$i672;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i672);
    goto corral_source_split_8793;

  SeqInstr_669:
    goto corral_source_split_8792;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_$i672 := rndis_connect(out_$p670, out_$p671, in_$p39);
    goto SeqInstr_668;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    out_$p671 := $M.56;
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    out_$p670 := $M.57;
    goto corral_source_split_8790;

  $bb429:
    assume out_$i669 == 1;
    goto corral_source_split_8789;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$i669 := $eq.i32(out_$i668, 2);
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i668 := $M.63;
    goto corral_source_split_8421;

  $bb316:
    assume out_$i426 == 1;
    goto corral_source_split_8420;

  $bb310:
    assume out_$i423 == 1;
    assume {:verifier.code 0} true;
    out_$i426 := $slt.i32(out_$i414, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb295:
    assume out_$i416 == 1;
    assume {:verifier.code 0} true;
    out_$i423 := $slt.i32(out_$i414, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb294:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    out_$i416 := $slt.i32(out_$i414, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb442:
    assume !(out_$i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8822;

  SeqInstr_678:
    goto corral_source_split_8821;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} out_vslice_dummy_var_291 := rndis_flush_pmksa(out_$p687, out_$p688);
    goto SeqInstr_677;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    out_$p688 := $M.56;
    goto corral_source_split_8820;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    out_$p687 := $M.57;
    goto corral_source_split_8819;

  $bb441:
    assume out_$i686 == 1;
    goto corral_source_split_8818;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    out_$i686 := $eq.i32(out_$i685, 2);
    goto corral_source_split_8816;

  $bb440:
    assume {:verifier.code 0} true;
    out_$i685 := $M.63;
    goto corral_source_split_8815;

  $bb439:
    assume !(out_$i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8813;

  SeqInstr_675:
    goto corral_source_split_8812;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} out_vslice_dummy_var_290 := rndis_flush_pmksa(out_$p682, out_$p683);
    goto SeqInstr_674;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    out_$p683 := $M.56;
    goto corral_source_split_8811;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    out_$p682 := $M.57;
    goto corral_source_split_8810;

  $bb438:
    assume out_$i681 == 1;
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$i681 := $eq.i32(out_$i680, 3);
    goto corral_source_split_8807;

  $bb437:
    assume {:verifier.code 0} true;
    out_$i680 := $M.63;
    goto corral_source_split_8806;

  $bb436:
    assume !(out_$i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8804;

  SeqInstr_672:
    goto corral_source_split_8803;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} out_vslice_dummy_var_289 := rndis_flush_pmksa(out_$p677, out_$p678);
    goto SeqInstr_671;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    out_$p678 := $M.56;
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    out_$p677 := $M.57;
    goto corral_source_split_8801;

  $bb435:
    assume out_$i676 == 1;
    goto corral_source_split_8800;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$i676 := $eq.i32(out_$i675, 1);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$i675 := $M.63;
    goto corral_source_split_8425;

  $bb317:
    assume !(out_$i426 == 1);
    goto corral_source_split_8424;

  $bb451:
    assume !(out_$i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8849;

  SeqInstr_687:
    goto corral_source_split_8848;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} out_vslice_dummy_var_294 := rndis_get_station(out_$p704, out_$p705, in_$p35, out_$p706);
    goto SeqInstr_686;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    out_$p706 := $M.58;
    goto corral_source_split_8847;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    out_$p705 := $M.56;
    goto corral_source_split_8846;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    out_$p704 := $M.57;
    goto corral_source_split_8845;

  $bb450:
    assume out_$i703 == 1;
    goto corral_source_split_8844;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    out_$i703 := $eq.i32(out_$i702, 2);
    goto corral_source_split_8842;

  $bb449:
    assume {:verifier.code 0} true;
    out_$i702 := $M.63;
    goto corral_source_split_8841;

  $bb448:
    assume !(out_$i697 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8839;

  SeqInstr_684:
    goto corral_source_split_8838;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} out_vslice_dummy_var_293 := rndis_get_station(out_$p698, out_$p699, in_$p35, out_$p700);
    goto SeqInstr_683;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    out_$p700 := $M.58;
    goto corral_source_split_8837;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    out_$p699 := $M.56;
    goto corral_source_split_8836;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    out_$p698 := $M.57;
    goto corral_source_split_8835;

  $bb447:
    assume out_$i697 == 1;
    goto corral_source_split_8834;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    out_$i697 := $eq.i32(out_$i696, 3);
    goto corral_source_split_8832;

  $bb446:
    assume {:verifier.code 0} true;
    out_$i696 := $M.63;
    goto corral_source_split_8831;

  $bb445:
    assume !(out_$i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8829;

  SeqInstr_681:
    goto corral_source_split_8828;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} out_vslice_dummy_var_292 := rndis_get_station(out_$p692, out_$p693, in_$p35, out_$p694);
    goto SeqInstr_680;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    out_$p694 := $M.58;
    goto corral_source_split_8827;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    out_$p693 := $M.56;
    goto corral_source_split_8826;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    out_$p692 := $M.57;
    goto corral_source_split_8825;

  $bb444:
    assume out_$i691 == 1;
    goto corral_source_split_8824;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i691 := $eq.i32(out_$i690, 1);
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$i690 := $M.63;
    goto corral_source_split_8409;

  $bb312:
    assume out_$i424 == 1;
    goto corral_source_split_8408;

  $bb311:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    out_$i424 := $slt.i32(out_$i414, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb460:
    assume !(out_$i719 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8873;

  SeqInstr_696:
    goto corral_source_split_8872;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_vslice_dummy_var_297 := rndis_leave_ibss(out_$p720, out_$p721);
    goto SeqInstr_695;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$p721 := $M.56;
    goto corral_source_split_8871;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$p720 := $M.57;
    goto corral_source_split_8870;

  $bb459:
    assume out_$i719 == 1;
    goto corral_source_split_8869;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    out_$i719 := $eq.i32(out_$i718, 2);
    goto corral_source_split_8867;

  $bb458:
    assume {:verifier.code 0} true;
    out_$i718 := $M.63;
    goto corral_source_split_8866;

  $bb457:
    assume !(out_$i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8864;

  SeqInstr_693:
    goto corral_source_split_8863;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_vslice_dummy_var_296 := rndis_leave_ibss(out_$p715, out_$p716);
    goto SeqInstr_692;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    out_$p716 := $M.56;
    goto corral_source_split_8862;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    out_$p715 := $M.57;
    goto corral_source_split_8861;

  $bb456:
    assume out_$i714 == 1;
    goto corral_source_split_8860;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    out_$i714 := $eq.i32(out_$i713, 3);
    goto corral_source_split_8858;

  $bb455:
    assume {:verifier.code 0} true;
    out_$i713 := $M.63;
    goto corral_source_split_8857;

  $bb454:
    assume !(out_$i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8855;

  SeqInstr_690:
    goto corral_source_split_8854;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} out_vslice_dummy_var_295 := rndis_leave_ibss(out_$p710, out_$p711);
    goto SeqInstr_689;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    out_$p711 := $M.56;
    goto corral_source_split_8853;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    out_$p710 := $M.57;
    goto corral_source_split_8852;

  $bb453:
    assume out_$i709 == 1;
    goto corral_source_split_8851;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$i709 := $eq.i32(out_$i708, 1);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$i708 := $M.63;
    goto corral_source_split_8413;

  $bb314:
    assume out_$i425 == 1;
    goto corral_source_split_8412;

  $bb313:
    assume !(out_$i424 == 1);
    assume {:verifier.code 0} true;
    out_$i425 := $slt.i32(out_$i414, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb469:
    assume !(out_$i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8897;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} out_vslice_dummy_var_300 := rndis_get_tx_power(out_$p735, out_$p736, in_$p32);
    goto corral_source_split_8896;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    out_$p736 := $M.54;
    goto corral_source_split_8895;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    out_$p735 := $M.57;
    goto corral_source_split_8894;

  $bb468:
    assume out_$i734 == 1;
    goto corral_source_split_8893;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    out_$i734 := $eq.i32(out_$i733, 2);
    goto corral_source_split_8891;

  $bb467:
    assume {:verifier.code 0} true;
    out_$i733 := $M.63;
    goto corral_source_split_8890;

  $bb466:
    assume !(out_$i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8888;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} out_vslice_dummy_var_299 := rndis_get_tx_power(out_$p730, out_$p731, in_$p32);
    goto corral_source_split_8887;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    out_$p731 := $M.54;
    goto corral_source_split_8886;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    out_$p730 := $M.57;
    goto corral_source_split_8885;

  $bb465:
    assume out_$i729 == 1;
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$i729 := $eq.i32(out_$i728, 3);
    goto corral_source_split_8882;

  $bb464:
    assume {:verifier.code 0} true;
    out_$i728 := $M.63;
    goto corral_source_split_8881;

  $bb463:
    assume !(out_$i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8879;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} out_vslice_dummy_var_298 := rndis_get_tx_power(out_$p725, out_$p726, in_$p32);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    out_$p726 := $M.54;
    goto corral_source_split_8877;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$p725 := $M.57;
    goto corral_source_split_8876;

  $bb462:
    assume out_$i724 == 1;
    goto corral_source_split_8875;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i724 := $eq.i32(out_$i723, 1);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    out_$i723 := $M.63;
    goto corral_source_split_8417;

  $bb315:
    assume !(out_$i425 == 1);
    goto corral_source_split_8416;

  $bb478:
    assume !(out_$i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8921;

  SeqInstr_705:
    goto corral_source_split_8920;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} out_vslice_dummy_var_303 := rndis_set_wiphy_params(out_$p750, out_$i751);
    goto SeqInstr_704;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    out_$i751 := $load.i32($M.33, in_$p7);
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    out_$p750 := $M.57;
    goto corral_source_split_8918;

  $bb477:
    assume out_$i749 == 1;
    goto corral_source_split_8917;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    out_$i749 := $eq.i32(out_$i748, 2);
    goto corral_source_split_8915;

  $bb476:
    assume {:verifier.code 0} true;
    out_$i748 := $M.63;
    goto corral_source_split_8914;

  $bb475:
    assume !(out_$i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8912;

  SeqInstr_702:
    goto corral_source_split_8911;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} out_vslice_dummy_var_302 := rndis_set_wiphy_params(out_$p745, out_$i746);
    goto SeqInstr_701;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    out_$i746 := $load.i32($M.33, in_$p7);
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    out_$p745 := $M.57;
    goto corral_source_split_8909;

  $bb474:
    assume out_$i744 == 1;
    goto corral_source_split_8908;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    out_$i744 := $eq.i32(out_$i743, 3);
    goto corral_source_split_8906;

  $bb473:
    assume {:verifier.code 0} true;
    out_$i743 := $M.63;
    goto corral_source_split_8905;

  $bb472:
    assume !(out_$i739 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    goto $bb473;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8903;

  SeqInstr_699:
    goto corral_source_split_8902;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_vslice_dummy_var_301 := rndis_set_wiphy_params(out_$p740, out_$i741);
    goto SeqInstr_698;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    out_$i741 := $load.i32($M.33, in_$p7);
    goto corral_source_split_8901;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    out_$p740 := $M.57;
    goto corral_source_split_8900;

  $bb471:
    assume out_$i739 == 1;
    goto corral_source_split_8899;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$i739 := $eq.i32(out_$i738, 1);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$i738 := $M.63;
    goto corral_source_split_8397;

  $bb306:
    assume out_$i421 == 1;
    goto corral_source_split_8396;

  $bb297:
    assume out_$i417 == 1;
    assume {:verifier.code 0} true;
    out_$i421 := $slt.i32(out_$i414, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb296:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    out_$i417 := $slt.i32(out_$i414, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb481:
    assume !(out_$i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8930;

  SeqInstr_708:
    goto corral_source_split_8929;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} out_vslice_dummy_var_304 := rndis_disconnect(out_$p755, out_$p756, out_$i759);
    goto SeqInstr_707;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$i759 := $trunc.i32.i16(out_$i758);
    goto corral_source_split_8928;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    out_$i758 := $zext.i16.i32(out_$i757);
    goto corral_source_split_8927;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    out_$i757 := $load.i16($M.33, in_$p8);
    goto corral_source_split_8926;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$p756 := $M.56;
    goto corral_source_split_8925;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    out_$p755 := $M.57;
    goto corral_source_split_8924;

  $bb480:
    assume out_$i754 == 1;
    goto corral_source_split_8923;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$i754 := $eq.i32(out_$i753, 3);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$i753 := $M.63;
    goto corral_source_split_8401;

  $bb308:
    assume out_$i422 == 1;
    goto corral_source_split_8400;

  $bb307:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    out_$i422 := $slt.i32(out_$i414, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb490:
    assume !(out_$i774 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8957;

  SeqInstr_717:
    goto corral_source_split_8956;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_vslice_dummy_var_307 := rndis_set_pmksa(out_$p775, out_$p776, out_$p777);
    goto SeqInstr_716;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$p777 := $M.55;
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$p776 := $M.56;
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$p775 := $M.57;
    goto corral_source_split_8953;

  $bb489:
    assume out_$i774 == 1;
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    out_$i774 := $eq.i32(out_$i773, 2);
    goto corral_source_split_8950;

  $bb488:
    assume {:verifier.code 0} true;
    out_$i773 := $M.63;
    goto corral_source_split_8949;

  $bb487:
    assume !(out_$i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8947;

  SeqInstr_714:
    goto corral_source_split_8946;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_vslice_dummy_var_306 := rndis_set_pmksa(out_$p769, out_$p770, out_$p771);
    goto SeqInstr_713;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    out_$p771 := $M.55;
    goto corral_source_split_8945;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    out_$p770 := $M.56;
    goto corral_source_split_8944;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    out_$p769 := $M.57;
    goto corral_source_split_8943;

  $bb486:
    assume out_$i768 == 1;
    goto corral_source_split_8942;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    out_$i768 := $eq.i32(out_$i767, 3);
    goto corral_source_split_8940;

  $bb485:
    assume {:verifier.code 0} true;
    out_$i767 := $M.63;
    goto corral_source_split_8939;

  $bb484:
    assume !(out_$i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8937;

  SeqInstr_711:
    goto corral_source_split_8936;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_305 := rndis_set_pmksa(out_$p763, out_$p764, out_$p765);
    goto SeqInstr_710;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    out_$p765 := $M.55;
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    out_$p764 := $M.56;
    goto corral_source_split_8934;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$p763 := $M.57;
    goto corral_source_split_8933;

  $bb483:
    assume out_$i762 == 1;
    goto corral_source_split_8932;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$i762 := $eq.i32(out_$i761, 1);
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$i761 := $M.63;
    goto corral_source_split_8405;

  $bb309:
    assume !(out_$i422 == 1);
    goto corral_source_split_8404;

  $bb499:
    assume !(out_$i790 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8981;

  SeqInstr_726:
    goto corral_source_split_8980;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_vslice_dummy_var_310 := rndis_join_ibss(out_$p791, out_$p792, in_$p37);
    goto SeqInstr_725;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    out_$p792 := $M.56;
    goto corral_source_split_8979;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    out_$p791 := $M.57;
    goto corral_source_split_8978;

  $bb498:
    assume out_$i790 == 1;
    goto corral_source_split_8977;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i790 := $eq.i32(out_$i789, 2);
    goto corral_source_split_8975;

  $bb497:
    assume {:verifier.code 0} true;
    out_$i789 := $M.63;
    goto corral_source_split_8974;

  $bb496:
    assume !(out_$i785 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $M.63 := 3;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(3);
    goto corral_source_split_8972;

  SeqInstr_723:
    goto corral_source_split_8971;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} out_vslice_dummy_var_309 := rndis_join_ibss(out_$p786, out_$p787, in_$p37);
    goto SeqInstr_722;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    out_$p787 := $M.56;
    goto corral_source_split_8970;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    out_$p786 := $M.57;
    goto corral_source_split_8969;

  $bb495:
    assume out_$i785 == 1;
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    out_$i785 := $eq.i32(out_$i784, 3);
    goto corral_source_split_8966;

  $bb494:
    assume {:verifier.code 0} true;
    out_$i784 := $M.63;
    goto corral_source_split_8965;

  $bb493:
    assume !(out_$i780 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8963;

  SeqInstr_720:
    goto corral_source_split_8962;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_vslice_dummy_var_308 := rndis_join_ibss(out_$p781, out_$p782, in_$p37);
    goto SeqInstr_719;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    out_$p782 := $M.56;
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    out_$p781 := $M.57;
    goto corral_source_split_8960;

  $bb492:
    assume out_$i780 == 1;
    goto corral_source_split_8959;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$i780 := $eq.i32(out_$i779, 1);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$i779 := $M.63;
    goto corral_source_split_8385;

  $bb299:
    assume out_$i418 == 1;
    goto corral_source_split_8384;

  $bb298:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    out_$i418 := $slt.i32(out_$i414, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb502:
    assume !(out_$i795 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.68 := out_$i798;
    call {:si_unique_call 1821} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i798);
    goto corral_source_split_8988;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$i798 := $sub.i32(out_$i797, 1);
    goto corral_source_split_8987;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    out_$i797 := $M.68;
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8985;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_311 := ldv_release_9();
    goto corral_source_split_8984;

  $bb501:
    assume out_$i795 == 1;
    goto corral_source_split_8983;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$i795 := $eq.i32(out_$i794, 2);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$i794 := $M.63;
    goto corral_source_split_8389;

  $bb301:
    assume out_$i419 == 1;
    goto corral_source_split_8388;

  $bb300:
    assume !(out_$i418 == 1);
    assume {:verifier.code 0} true;
    out_$i419 := $slt.i32(out_$i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb505:
    assume !(out_$i800 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $M.68 := out_$i803;
    call {:si_unique_call 1824} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i803);
    goto corral_source_split_8995;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    out_$i803 := $add.i32(out_$i802, 1);
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$i802 := $M.68;
    goto corral_source_split_8993;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1823} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} out_vslice_dummy_var_312 := ldv_bind_9();
    goto corral_source_split_8991;

  $bb504:
    assume out_$i800 == 1;
    goto corral_source_split_8990;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    out_$i800 := $eq.i32(out_$i799, 1);
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$i799 := $M.63;
    goto corral_source_split_8393;

  $bb303:
    assume out_$i420 == 1;
    goto corral_source_split_8392;

  $bb302:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i414, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} ldv_stop();
    goto corral_source_split_8997;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb304:
    assume {:verifier.code 0} true;
    assume !(out_$i420 == 1);
    goto $bb305;

  $bb337:
    assume {:verifier.code 0} true;
    assume !(out_$i436 == 1);
    goto $bb305;

  $bb511:
    assume !(out_$i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb512;

  SeqInstr_729:
    goto corral_source_split_9000;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} invoke_work_2();
    goto SeqInstr_728;

  $bb510:
    assume out_$i805 == 1;
    goto corral_source_split_8999;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    out_$i805 := $ne.i32(out_$i804, 0);
    goto corral_source_split_7791;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    out_$i804 := $M.64;
    goto corral_source_split_7790;

  $bb21:
    assume !(out_$i105 == 1);
    goto corral_source_split_7789;

  $bb514:
    assume !(out_$i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb538:
    assume !(out_$i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb540:
    assume !(out_$i824 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb541;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9048;

  $bb539:
    assume out_$i824 == 1;
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    out_$i824 := $eq.i32(out_$i823, 0);
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    out_$i823 := $M.74;
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.74 := out_$i822;
    call {:si_unique_call 1831} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i822);
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} out_$i822 := usbnet_open(out_$p821);
    goto corral_source_split_9042;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$p821 := $M.53;
    goto corral_source_split_9041;

  $bb537:
    assume out_$i820 == 1;
    goto corral_source_split_9040;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    out_$i820 := $eq.i32(out_$i819, 2);
    goto corral_source_split_9038;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$i819 := $M.65;
    goto corral_source_split_9037;

  $bb535:
    assume out_$i818 == 1;
    goto corral_source_split_9036;

  $bb533:
    assume out_$i817 == 1;
    assume {:verifier.code 0} true;
    out_$i818 := $eq.i32(out_$i808, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb529:
    assume out_$i815 == 1;
    assume {:verifier.code 0} true;
    out_$i817 := $slt.i32(out_$i808, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb516:
    assume out_$i809 == 1;
    assume {:verifier.code 0} true;
    out_$i815 := $slt.i32(out_$i808, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb515:
    assume {:verifier.code 0} true;
    out_$i809 := $slt.i32(out_$i808, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  corral_source_split_9002:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1827} out_$i808 := __VERIFIER_nondet_int();
    call {:si_unique_call 1828} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i808);
    call {:si_unique_call 1829} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i808);
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb513:
    assume out_$i807 == 1;
    goto corral_source_split_9002;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    out_$i807 := $ne.i32(out_$i806, 0);
    goto corral_source_split_7775;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    out_$i806 := $M.65;
    goto corral_source_split_7774;

  $bb14:
    assume out_$i102 == 1;
    goto corral_source_split_7773;

  $bb5:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i96, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i96, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb545:
    assume !(out_$i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9053;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_vslice_dummy_var_313 := usbnet_start_xmit(in_$p49, out_$p827);
    goto corral_source_split_9052;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    out_$p827 := $M.53;
    goto corral_source_split_9051;

  $bb544:
    assume out_$i826 == 1;
    goto corral_source_split_9050;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    out_$i826 := $eq.i32(out_$i825, 3);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$i825 := $M.65;
    goto corral_source_split_9033;

  $bb534:
    assume !(out_$i817 == 1);
    goto corral_source_split_9032;

  $bb554:
    assume !(out_$i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9074;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} out_vslice_dummy_var_316 := eth_validate_addr(out_$p839);
    goto corral_source_split_9073;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    out_$p839 := $M.53;
    goto corral_source_split_9072;

  $bb553:
    assume out_$i838 == 1;
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    out_$i838 := $eq.i32(out_$i837, 2);
    goto corral_source_split_9069;

  $bb552:
    assume {:verifier.code 0} true;
    out_$i837 := $M.65;
    goto corral_source_split_9068;

  $bb551:
    assume !(out_$i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    goto $bb552;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9066;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} out_vslice_dummy_var_315 := eth_validate_addr(out_$p835);
    goto corral_source_split_9065;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    out_$p835 := $M.53;
    goto corral_source_split_9064;

  $bb550:
    assume out_$i834 == 1;
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb550, $bb551;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    out_$i834 := $eq.i32(out_$i833, 3);
    goto corral_source_split_9061;

  $bb549:
    assume {:verifier.code 0} true;
    out_$i833 := $M.65;
    goto corral_source_split_9060;

  $bb548:
    assume !(out_$i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    goto $bb549;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9058;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_vslice_dummy_var_314 := eth_validate_addr(out_$p831);
    goto corral_source_split_9057;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    out_$p831 := $M.53;
    goto corral_source_split_9056;

  $bb547:
    assume out_$i830 == 1;
    goto corral_source_split_9055;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547, $bb548;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    out_$i830 := $eq.i32(out_$i829, 1);
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    out_$i829 := $M.65;
    goto corral_source_split_9025;

  $bb531:
    assume out_$i816 == 1;
    goto corral_source_split_9024;

  $bb530:
    assume !(out_$i815 == 1);
    assume {:verifier.code 0} true;
    out_$i816 := $slt.i32(out_$i808, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb563:
    assume !(out_$i848 == 1);
    assume {:verifier.code 0} true;
    goto $bb564;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    goto $bb564;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} rndis_wlan_set_multicast_list(out_$p849);
    goto corral_source_split_9094;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    out_$p849 := $M.53;
    goto corral_source_split_9093;

  $bb562:
    assume out_$i848 == 1;
    goto corral_source_split_9092;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i848 := $eq.i32(out_$i847, 2);
    goto corral_source_split_9090;

  $bb561:
    assume {:verifier.code 0} true;
    out_$i847 := $M.65;
    goto corral_source_split_9089;

  $bb560:
    assume !(out_$i845 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    goto $bb561;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9087;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} rndis_wlan_set_multicast_list(out_$p846);
    goto corral_source_split_9086;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    out_$p846 := $M.53;
    goto corral_source_split_9085;

  $bb559:
    assume out_$i845 == 1;
    goto corral_source_split_9084;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb559, $bb560;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    out_$i845 := $eq.i32(out_$i844, 3);
    goto corral_source_split_9082;

  $bb558:
    assume {:verifier.code 0} true;
    out_$i844 := $M.65;
    goto corral_source_split_9081;

  $bb557:
    assume !(out_$i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    goto $bb558;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9079;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} rndis_wlan_set_multicast_list(out_$p843);
    goto corral_source_split_9078;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    out_$p843 := $M.53;
    goto corral_source_split_9077;

  $bb556:
    assume out_$i842 == 1;
    goto corral_source_split_9076;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb556, $bb557;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    out_$i842 := $eq.i32(out_$i841, 1);
    goto corral_source_split_9030;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    out_$i841 := $M.65;
    goto corral_source_split_9029;

  $bb532:
    assume !(out_$i816 == 1);
    goto corral_source_split_9028;

  $bb566:
    assume !(out_$i851 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb567;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9100;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} out_vslice_dummy_var_317 := usbnet_stop(out_$p852);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$p852 := $M.53;
    goto corral_source_split_9098;

  $bb565:
    assume out_$i851 == 1;
    goto corral_source_split_9097;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    out_$i851 := $eq.i32(out_$i850, 3);
    goto corral_source_split_9018;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    out_$i850 := $M.65;
    goto corral_source_split_9017;

  $bb527:
    assume out_$i814 == 1;
    goto corral_source_split_9016;

  $bb518:
    assume out_$i810 == 1;
    assume {:verifier.code 0} true;
    out_$i814 := $slt.i32(out_$i808, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  $bb517:
    assume !(out_$i809 == 1);
    assume {:verifier.code 0} true;
    out_$i810 := $slt.i32(out_$i808, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb575:
    assume !(out_$i863 == 1);
    assume {:verifier.code 0} true;
    goto $bb576;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb576;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1854} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9121;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} out_vslice_dummy_var_320 := eth_mac_addr(out_$p864, in_$p50);
    goto corral_source_split_9120;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    out_$p864 := $M.53;
    goto corral_source_split_9119;

  $bb574:
    assume out_$i863 == 1;
    goto corral_source_split_9118;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb574, $bb575;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    out_$i863 := $eq.i32(out_$i862, 2);
    goto corral_source_split_9116;

  $bb573:
    assume {:verifier.code 0} true;
    out_$i862 := $M.65;
    goto corral_source_split_9115;

  $bb572:
    assume !(out_$i859 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9113;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} out_vslice_dummy_var_319 := eth_mac_addr(out_$p860, in_$p50);
    goto corral_source_split_9112;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    out_$p860 := $M.53;
    goto corral_source_split_9111;

  $bb571:
    assume out_$i859 == 1;
    goto corral_source_split_9110;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    out_$i859 := $eq.i32(out_$i858, 3);
    goto corral_source_split_9108;

  $bb570:
    assume {:verifier.code 0} true;
    out_$i858 := $M.65;
    goto corral_source_split_9107;

  $bb569:
    assume !(out_$i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    goto $bb570;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1850} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9105;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} out_vslice_dummy_var_318 := eth_mac_addr(out_$p856, in_$p50);
    goto corral_source_split_9104;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    out_$p856 := $M.53;
    goto corral_source_split_9103;

  $bb568:
    assume out_$i855 == 1;
    goto corral_source_split_9102;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568, $bb569;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i855 := $eq.i32(out_$i854, 1);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$i854 := $M.65;
    goto corral_source_split_9021;

  $bb528:
    assume !(out_$i814 == 1);
    goto corral_source_split_9020;

  $bb584:
    assume !(out_$i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9142;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} usbnet_tx_timeout(out_$p874);
    goto corral_source_split_9141;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    out_$p874 := $M.53;
    goto corral_source_split_9140;

  $bb583:
    assume out_$i873 == 1;
    goto corral_source_split_9139;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    out_$i873 := $eq.i32(out_$i872, 2);
    goto corral_source_split_9137;

  $bb582:
    assume {:verifier.code 0} true;
    out_$i872 := $M.65;
    goto corral_source_split_9136;

  $bb581:
    assume !(out_$i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    goto $bb582;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.65 := 3;
    call {:si_unique_call 1858} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} usbnet_tx_timeout(out_$p871);
    goto corral_source_split_9133;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    out_$p871 := $M.53;
    goto corral_source_split_9132;

  $bb580:
    assume out_$i870 == 1;
    goto corral_source_split_9131;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb580, $bb581;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    out_$i870 := $eq.i32(out_$i869, 3);
    goto corral_source_split_9129;

  $bb579:
    assume {:verifier.code 0} true;
    out_$i869 := $M.65;
    goto corral_source_split_9128;

  $bb578:
    assume !(out_$i867 == 1);
    assume {:verifier.code 0} true;
    goto $bb579;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    goto $bb579;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1856} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9126;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} usbnet_tx_timeout(out_$p868);
    goto corral_source_split_9125;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    out_$p868 := $M.53;
    goto corral_source_split_9124;

  $bb577:
    assume out_$i867 == 1;
    goto corral_source_split_9123;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i867 := $eq.i32(out_$i866, 1);
    goto corral_source_split_9006;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i866 := $M.65;
    goto corral_source_split_9005;

  $bb520:
    assume out_$i811 == 1;
    goto corral_source_split_9004;

  $bb519:
    assume !(out_$i810 == 1);
    assume {:verifier.code 0} true;
    out_$i811 := $slt.i32(out_$i808, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb520, $bb521;

  $bb587:
    assume !(out_$i876 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb589:
    assume !(out_$i879 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb590;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.68 := out_$i883;
    call {:si_unique_call 1865} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i883);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    out_$i883 := $add.i32(out_$i882, 1);
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$i882 := $M.68;
    goto corral_source_split_9155;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $M.76 := out_$i881;
    call {:si_unique_call 1864} {:cexpr "usb_counter"} boogie_si_record_i32(out_$i881);
    goto corral_source_split_9154;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    out_$i881 := $add.i32(out_$i880, 1);
    goto corral_source_split_9153;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    out_$i880 := $M.76;
    goto corral_source_split_9152;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_9151;

  $bb588:
    assume out_$i879 == 1;
    goto corral_source_split_9150;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    out_$i879 := $eq.i32(out_$i878, 0);
    goto corral_source_split_9148;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    out_$i878 := $M.75;
    goto corral_source_split_9147;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $M.75 := out_$i877;
    call {:si_unique_call 1862} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i877);
    goto corral_source_split_9146;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} out_$i877 := ldv_ndo_init_8();
    goto corral_source_split_9145;

  $bb586:
    assume out_$i876 == 1;
    goto corral_source_split_9144;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb586, $bb587;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    out_$i876 := $eq.i32(out_$i875, 1);
    goto corral_source_split_9010;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$i875 := $M.65;
    goto corral_source_split_9009;

  $bb522:
    assume out_$i812 == 1;
    goto corral_source_split_9008;

  $bb521:
    assume !(out_$i811 == 1);
    assume {:verifier.code 0} true;
    out_$i812 := $slt.i32(out_$i808, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb593:
    assume !(out_$i885 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    goto $bb594;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $M.68 := out_$i890;
    call {:si_unique_call 1869} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i890);
    goto corral_source_split_9167;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    out_$i890 := $sub.i32(out_$i889, 1);
    goto corral_source_split_9166;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    out_$i889 := $M.68;
    goto corral_source_split_9165;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $M.76 := out_$i888;
    call {:si_unique_call 1868} {:cexpr "usb_counter"} boogie_si_record_i32(out_$i888);
    goto corral_source_split_9164;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    out_$i888 := $sub.i32(out_$i887, 1);
    goto corral_source_split_9163;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    out_$i887 := $M.76;
    goto corral_source_split_9162;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9161;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} out_vslice_dummy_var_321 := ldv_ndo_uninit_8();
    goto corral_source_split_9160;

  $bb592:
    assume out_$i885 == 1;
    goto corral_source_split_9159;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    out_$i885 := $eq.i32(out_$i884, 2);
    goto corral_source_split_9014;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    out_$i884 := $M.65;
    goto corral_source_split_9013;

  $bb524:
    assume out_$i813 == 1;
    goto corral_source_split_9012;

  $bb523:
    assume !(out_$i812 == 1);
    assume {:verifier.code 0} true;
    out_$i813 := $eq.i32(out_$i808, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_9169;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb525:
    assume {:verifier.code 0} true;
    assume !(out_$i813 == 1);
    goto $bb526;

  $bb536:
    assume {:verifier.code 0} true;
    assume !(out_$i818 == 1);
    goto $bb526;

  $bb599:
    assume !(out_$i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb600;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb600;

  SeqInstr_732:
    goto corral_source_split_9172;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} invoke_work_1();
    goto SeqInstr_731;

  $bb598:
    assume out_$i892 == 1;
    goto corral_source_split_9171;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    out_$i892 := $ne.i32(out_$i891, 0);
    goto corral_source_split_7779;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$i891 := $M.66;
    goto corral_source_split_7778;

  $bb15:
    assume !(out_$i102 == 1);
    goto corral_source_split_7777;

  $bb602:
    assume !(out_$i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb652:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb632:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb618:
    assume !(out_$i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb620:
    assume !(out_$i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.68 := out_$i909;
    call {:si_unique_call 1878} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i909);
    goto corral_source_split_9207;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    out_$i909 := $add.i32(out_$i908, 1);
    goto corral_source_split_9206;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    out_$i908 := $M.68;
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1877} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9204;

  $bb619:
    assume out_$i907 == 1;
    goto corral_source_split_9203;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    out_$i907 := $eq.i32(out_$i906, 0);
    goto corral_source_split_9201;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    out_$i906 := $M.77;
    goto corral_source_split_9200;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.77 := out_$i905;
    call {:si_unique_call 1876} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i905);
    goto corral_source_split_9199;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} out_$i905 := usbnet_probe(out_$p904, in_$p52);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$p904 := $M.44;
    goto corral_source_split_9197;

  $bb617:
    assume out_$i903 == 1;
    goto corral_source_split_9196;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    out_$i903 := $eq.i32(out_$i902, 1);
    goto corral_source_split_9194;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    out_$i902 := $M.67;
    goto corral_source_split_9193;

  $bb615:
    assume out_$i901 == 1;
    goto corral_source_split_9192;

  $bb613:
    assume out_$i900 == 1;
    assume {:verifier.code 0} true;
    out_$i901 := $eq.i32(out_$i895, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb604:
    assume out_$i896 == 1;
    assume {:verifier.code 0} true;
    out_$i900 := $slt.i32(out_$i895, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb603:
    assume {:verifier.code 0} true;
    out_$i896 := $slt.i32(out_$i895, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  corral_source_split_9174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1872} out_$i895 := __VERIFIER_nondet_int();
    call {:si_unique_call 1873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i895);
    call {:si_unique_call 1874} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i895);
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb601:
    assume out_$i894 == 1;
    goto corral_source_split_9174;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i894 := $ne.i32(out_$i893, 0);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i893 := $M.67;
    goto corral_source_split_7762;

  $bb7:
    assume out_$i99 == 1;
    goto corral_source_split_7761;

  $bb6:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i96, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb625:
    assume !(out_$i911 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    goto $bb626;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $M.67 := 3;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9214;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} out_vslice_dummy_var_322 := usbnet_suspend(out_$p912, out_$i914);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$i914 := $load.i32($M.33, out_$p913);
    goto corral_source_split_9212;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$p913 := $add.ref($add.ref(in_$p21, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9211;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    out_$p912 := $M.44;
    goto corral_source_split_9210;

  $bb624:
    assume out_$i911 == 1;
    goto corral_source_split_9209;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb624, $bb625;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    out_$i911 := $eq.i32(out_$i910, 2);
    goto corral_source_split_9190;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    out_$i910 := $M.67;
    goto corral_source_split_9189;

  $bb614:
    assume !(out_$i900 == 1);
    goto corral_source_split_9188;

  $bb628:
    assume !(out_$i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb630:
    assume !(out_$i921 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    goto $bb631;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1883} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9224;

  $bb629:
    assume out_$i921 == 1;
    goto corral_source_split_9223;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$i921 := $eq.i32(out_$i920, 0);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i920 := $M.78;
    goto corral_source_split_9220;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.78 := out_$i919;
    call {:si_unique_call 1882} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i919);
    goto corral_source_split_9219;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} out_$i919 := usbnet_resume(out_$p918);
    goto corral_source_split_9218;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$p918 := $M.44;
    goto corral_source_split_9217;

  $bb627:
    assume out_$i917 == 1;
    goto corral_source_split_9216;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    out_$i917 := $eq.i32(out_$i916, 3);
    goto corral_source_split_9178;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    out_$i916 := $M.67;
    goto corral_source_split_9177;

  $bb606:
    assume out_$i897 == 1;
    goto corral_source_split_9176;

  $bb605:
    assume !(out_$i896 == 1);
    assume {:verifier.code 0} true;
    out_$i897 := $slt.i32(out_$i895, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    goto $bb644;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.68 := out_$i935;
    call {:si_unique_call 1889} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i935);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i935 := $sub.i32(out_$i934, 1);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i934 := $M.68;
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} usbnet_disconnect(out_$p933);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$p933 := $M.44;
    goto corral_source_split_9246;

  $bb642:
    assume out_$i932 == 1;
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb642, $bb643;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    out_$i932 := $eq.i32(out_$i931, 0);
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$i931 := $M.76;
    goto corral_source_split_9242;

  $bb639:
    assume out_$i930 == 1;
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb639, $bb640;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i930 := $eq.i32(out_$i929, 2);
    goto corral_source_split_9239;

  $bb638:
    assume {:verifier.code 0} true;
    out_$i929 := $M.67;
    goto corral_source_split_9238;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb638;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    goto $bb638;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $M.68 := out_$i928;
    call {:si_unique_call 1886} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i928);
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    out_$i928 := $sub.i32(out_$i927, 1);
    goto corral_source_split_9235;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    out_$i927 := $M.68;
    goto corral_source_split_9234;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1885} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} usbnet_disconnect(out_$p926);
    goto corral_source_split_9232;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$p926 := $M.44;
    goto corral_source_split_9231;

  $bb636:
    assume out_$i925 == 1;
    goto corral_source_split_9230;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb636, $bb637;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$i925 := $eq.i32(out_$i924, 0);
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    out_$i924 := $M.76;
    goto corral_source_split_9227;

  $bb633:
    assume out_$i923 == 1;
    goto corral_source_split_9226;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    out_$i923 := $eq.i32(out_$i922, 3);
    goto corral_source_split_9182;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$i922 := $M.67;
    goto corral_source_split_9181;

  $bb608:
    assume out_$i898 == 1;
    goto corral_source_split_9180;

  $bb607:
    assume !(out_$i897 == 1);
    assume {:verifier.code 0} true;
    out_$i898 := $slt.i32(out_$i895, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb634:
    assume {:verifier.code 0} true;
    assume !(out_$i923 == 1);
    goto $bb635;

  $bb637:
    assume {:verifier.code 0} true;
    assume !(out_$i925 == 1);
    goto $bb635;

  $bb640:
    assume {:verifier.code 0} true;
    assume !(out_$i930 == 1);
    goto $bb641;

  $bb643:
    assume {:verifier.code 0} true;
    assume !(out_$i932 == 1);
    goto $bb641;

  $bb646:
    assume !(out_$i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb648:
    assume !(out_$i940 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    goto $bb649;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9260;

  $bb647:
    assume out_$i940 == 1;
    goto corral_source_split_9259;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb647, $bb648;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    out_$i940 := $eq.i32(out_$i939, 0);
    goto corral_source_split_9257;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    out_$i939 := $M.79;
    goto corral_source_split_9256;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $M.79 := out_$i938;
    call {:si_unique_call 1891} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i938);
    goto corral_source_split_9255;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} out_$i938 := ldv_reset_resume_4();
    goto corral_source_split_9254;

  $bb645:
    assume out_$i937 == 1;
    goto corral_source_split_9253;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb645, $bb646;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    out_$i937 := $eq.i32(out_$i936, 3);
    goto corral_source_split_9186;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$i936 := $M.67;
    goto corral_source_split_9185;

  $bb610:
    assume out_$i899 == 1;
    goto corral_source_split_9184;

  $bb609:
    assume !(out_$i898 == 1);
    assume {:verifier.code 0} true;
    out_$i899 := $eq.i32(out_$i895, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} ldv_stop();
    goto corral_source_split_9262;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb611:
    assume {:verifier.code 0} true;
    assume !(out_$i899 == 1);
    goto $bb612;

  $bb616:
    assume {:verifier.code 0} true;
    assume !(out_$i901 == 1);
    goto $bb612;

  $bb655:
    assume !(out_$i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb680:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb670:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb665:
    assume {:verifier.code 0} true;
    assume !(out_$i948 == 1);
    goto $bb666;

  $bb668:
    assume {:verifier.code 0} true;
    assume !(out_$i950 == 1);
    goto $bb666;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb668;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    out_$i950 := $eq.i32(out_$i949, 0);
    goto corral_source_split_9276;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    out_$i949 := $M.68;
    goto corral_source_split_9275;

  $bb664:
    assume out_$i948 == 1;
    goto corral_source_split_9274;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb664, $bb665;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    out_$i948 := $eq.i32(out_$i947, 2);
    goto corral_source_split_9272;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    out_$i947 := $M.69;
    goto corral_source_split_9271;

  $bb662:
    assume out_$i946 == 1;
    goto corral_source_split_9270;

  $bb657:
    assume out_$i944 == 1;
    assume {:verifier.code 0} true;
    out_$i946 := $eq.i32(out_$i943, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb662, $bb663;

  $bb656:
    assume {:verifier.code 0} true;
    out_$i944 := $slt.i32(out_$i943, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb657, $bb658;

  corral_source_split_9264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1894} out_$i943 := __VERIFIER_nondet_int();
    call {:si_unique_call 1895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i943);
    call {:si_unique_call 1896} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i943);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb654:
    assume out_$i942 == 1;
    goto corral_source_split_9264;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb654, $bb655;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$i942 := $ne.i32(out_$i941, 0);
    goto corral_source_split_7767;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i941 := $M.69;
    goto corral_source_split_7766;

  $bb9:
    assume out_$i100 == 1;
    goto corral_source_split_7765;

  $bb8:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i96, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb673:
    assume !(out_$i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb678:
    assume !(out_$i957 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb679;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_net_device_ops_8();
    goto corral_source_split_9307;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9306;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_initialize_driver_info_6();
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1910} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9304;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_initialize_driver_info_7();
    goto corral_source_split_9303;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1908} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9302;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} ldv_initialize_cfg80211_ops_9();
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9300;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} ldv_initialize_driver_info_5();
    goto corral_source_split_9299;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9298;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9297;

  $bb677:
    assume out_$i957 == 1;
    goto corral_source_split_9296;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb677, $bb678;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    out_$i957 := $eq.i32(out_$i956, 0);
    goto corral_source_split_9294;

  $bb676:
    assume {:verifier.code 0} true;
    out_$i956 := $M.80;
    goto corral_source_split_9293;

  $bb675:
    assume !(out_$i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb676;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb675;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    out_$i955 := $ne.i32(out_$i954, 0);
    goto corral_source_split_9288;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    out_$i954 := $M.80;
    goto corral_source_split_9287;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $M.80 := out_$i953;
    call {:si_unique_call 1901} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i953);
    goto corral_source_split_9286;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} out_$i953 := rndis_wlan_driver_init();
    goto corral_source_split_9285;

  $bb672:
    assume out_$i952 == 1;
    goto corral_source_split_9284;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb672, $bb673;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    out_$i952 := $eq.i32(out_$i951, 1);
    goto corral_source_split_9268;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    out_$i951 := $M.69;
    goto corral_source_split_9267;

  $bb659:
    assume out_$i945 == 1;
    goto corral_source_split_9266;

  $bb658:
    assume !(out_$i944 == 1);
    assume {:verifier.code 0} true;
    out_$i945 := $eq.i32(out_$i943, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb659, $bb660;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_9309;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb660:
    assume {:verifier.code 0} true;
    assume !(out_$i945 == 1);
    goto $bb661;

  $bb663:
    assume {:verifier.code 0} true;
    assume !(out_$i946 == 1);
    goto $bb661;

  $bb685:
    assume !(out_$i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb812:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb807:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb804:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb759:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb753:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb750:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb738:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb724:
    assume !(out_$i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    goto $bb725;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1925} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9392;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} rndis_wlan_indication(out_$p988, in_$p53, out_$i989);
    goto corral_source_split_9391;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    out_$i989 := $load.i32($M.33, in_$p23);
    goto corral_source_split_9390;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    out_$p988 := $M.46;
    goto corral_source_split_9389;

  $bb723:
    assume out_$i987 == 1;
    goto corral_source_split_9388;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb723, $bb724;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    out_$i987 := $eq.i32(out_$i986, 2);
    goto corral_source_split_9386;

  $bb722:
    assume {:verifier.code 0} true;
    out_$i986 := $M.70;
    goto corral_source_split_9385;

  $bb721:
    assume !(out_$i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb722;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9383;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} rndis_wlan_indication(out_$p984, in_$p53, out_$i985);
    goto corral_source_split_9382;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    out_$i985 := $load.i32($M.33, in_$p23);
    goto corral_source_split_9381;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    out_$p984 := $M.46;
    goto corral_source_split_9380;

  $bb720:
    assume out_$i983 == 1;
    goto corral_source_split_9379;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb720, $bb721;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    out_$i983 := $eq.i32(out_$i982, 3);
    goto corral_source_split_9377;

  $bb719:
    assume {:verifier.code 0} true;
    out_$i982 := $M.70;
    goto corral_source_split_9376;

  $bb718:
    assume !(out_$i979 == 1);
    assume {:verifier.code 0} true;
    goto $bb719;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb719;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1921} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9374;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} rndis_wlan_indication(out_$p980, in_$p53, out_$i981);
    goto corral_source_split_9373;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    out_$i981 := $load.i32($M.33, in_$p23);
    goto corral_source_split_9372;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    out_$p980 := $M.46;
    goto corral_source_split_9371;

  $bb717:
    assume out_$i979 == 1;
    goto corral_source_split_9370;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb717, $bb718;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    out_$i979 := $eq.i32(out_$i978, 1);
    goto corral_source_split_9368;

  $bb716:
    assume {:verifier.code 0} true;
    out_$i978 := $M.70;
    goto corral_source_split_9367;

  $bb715:
    assume !(out_$i975 == 1);
    assume {:verifier.code 0} true;
    goto $bb716;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb716;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1919} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9365;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} rndis_wlan_indication(out_$p976, in_$p53, out_$i977);
    goto corral_source_split_9364;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    out_$i977 := $load.i32($M.33, in_$p23);
    goto corral_source_split_9363;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    out_$p976 := $M.46;
    goto corral_source_split_9362;

  $bb714:
    assume out_$i975 == 1;
    goto corral_source_split_9361;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb714, $bb715;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    out_$i975 := $eq.i32(out_$i974, 4);
    goto corral_source_split_9359;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    out_$i974 := $M.70;
    goto corral_source_split_9358;

  $bb712:
    assume out_$i973 == 1;
    goto corral_source_split_9357;

  $bb708:
    assume out_$i971 == 1;
    assume {:verifier.code 0} true;
    out_$i973 := $eq.i32(out_$i960, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb712, $bb713;

  $bb702:
    assume out_$i968 == 1;
    assume {:verifier.code 0} true;
    out_$i971 := $slt.i32(out_$i960, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb708, $bb709;

  $bb687:
    assume out_$i961 == 1;
    assume {:verifier.code 0} true;
    out_$i968 := $slt.i32(out_$i960, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb702, $bb703;

  $bb686:
    assume {:verifier.code 0} true;
    out_$i961 := $slt.i32(out_$i960, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb687, $bb688;

  corral_source_split_9311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1915} out_$i960 := __VERIFIER_nondet_int();
    call {:si_unique_call 1916} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i960);
    call {:si_unique_call 1917} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i960);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb684:
    assume out_$i959 == 1;
    goto corral_source_split_9311;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb684, $bb685;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$i959 := $ne.i32(out_$i958, 0);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$i958 := $M.70;
    goto corral_source_split_7770;

  $bb11:
    assume out_$i101 == 1;
    goto corral_source_split_7769;

  $bb10:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i96, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb737:
    assume !(out_$i1009 == 1);
    assume {:verifier.code 0} true;
    goto $bb738;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb738;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9429;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} out_vslice_dummy_var_326 := rndis_tx_fixup(out_$p1010, out_$p1011, out_$i1012);
    goto corral_source_split_9428;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    out_$i1012 := $load.i32($M.33, in_$p22);
    goto corral_source_split_9427;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    out_$p1011 := $M.45;
    goto corral_source_split_9426;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$p1010 := $M.46;
    goto corral_source_split_9425;

  $bb736:
    assume out_$i1009 == 1;
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb736, $bb737;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$i1009 := $eq.i32(out_$i1008, 2);
    goto corral_source_split_9422;

  $bb735:
    assume {:verifier.code 0} true;
    out_$i1008 := $M.70;
    goto corral_source_split_9421;

  $bb734:
    assume !(out_$i1003 == 1);
    assume {:verifier.code 0} true;
    goto $bb735;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb735;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1931} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9419;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} out_vslice_dummy_var_325 := rndis_tx_fixup(out_$p1004, out_$p1005, out_$i1006);
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    out_$i1006 := $load.i32($M.33, in_$p22);
    goto corral_source_split_9417;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    out_$p1005 := $M.45;
    goto corral_source_split_9416;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    out_$p1004 := $M.46;
    goto corral_source_split_9415;

  $bb733:
    assume out_$i1003 == 1;
    goto corral_source_split_9414;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb733, $bb734;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    out_$i1003 := $eq.i32(out_$i1002, 3);
    goto corral_source_split_9412;

  $bb732:
    assume {:verifier.code 0} true;
    out_$i1002 := $M.70;
    goto corral_source_split_9411;

  $bb731:
    assume !(out_$i997 == 1);
    assume {:verifier.code 0} true;
    goto $bb732;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    goto $bb732;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1929} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9409;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_vslice_dummy_var_324 := rndis_tx_fixup(out_$p998, out_$p999, out_$i1000);
    goto corral_source_split_9408;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    out_$i1000 := $load.i32($M.33, in_$p22);
    goto corral_source_split_9407;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    out_$p999 := $M.45;
    goto corral_source_split_9406;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    out_$p998 := $M.46;
    goto corral_source_split_9405;

  $bb730:
    assume out_$i997 == 1;
    goto corral_source_split_9404;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb730, $bb731;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    out_$i997 := $eq.i32(out_$i996, 1);
    goto corral_source_split_9402;

  $bb729:
    assume {:verifier.code 0} true;
    out_$i996 := $M.70;
    goto corral_source_split_9401;

  $bb728:
    assume !(out_$i991 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    goto $bb729;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1927} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9399;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} out_vslice_dummy_var_323 := rndis_tx_fixup(out_$p992, out_$p993, out_$i994);
    goto corral_source_split_9398;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    out_$i994 := $load.i32($M.33, in_$p22);
    goto corral_source_split_9397;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$p993 := $M.45;
    goto corral_source_split_9396;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$p992 := $M.46;
    goto corral_source_split_9395;

  $bb727:
    assume out_$i991 == 1;
    goto corral_source_split_9394;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb727, $bb728;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    out_$i991 := $eq.i32(out_$i990, 4);
    goto corral_source_split_9351;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$i990 := $M.70;
    goto corral_source_split_9350;

  $bb710:
    assume out_$i972 == 1;
    goto corral_source_split_9349;

  $bb709:
    assume !(out_$i971 == 1);
    assume {:verifier.code 0} true;
    out_$i972 := $slt.i32(out_$i960, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  $bb749:
    assume !(out_$i1027 == 1);
    assume {:verifier.code 0} true;
    goto $bb750;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    goto $bb750;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1941} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9458;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} out_vslice_dummy_var_330 := unknown_early_init(out_$p1028);
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$p1028 := $M.46;
    goto corral_source_split_9456;

  $bb748:
    assume out_$i1027 == 1;
    goto corral_source_split_9455;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb748, $bb749;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    out_$i1027 := $eq.i32(out_$i1026, 2);
    goto corral_source_split_9453;

  $bb747:
    assume {:verifier.code 0} true;
    out_$i1026 := $M.70;
    goto corral_source_split_9452;

  $bb746:
    assume !(out_$i1023 == 1);
    assume {:verifier.code 0} true;
    goto $bb747;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb747;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1939} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9450;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} out_vslice_dummy_var_329 := unknown_early_init(out_$p1024);
    goto corral_source_split_9449;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    out_$p1024 := $M.46;
    goto corral_source_split_9448;

  $bb745:
    assume out_$i1023 == 1;
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb745, $bb746;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    out_$i1023 := $eq.i32(out_$i1022, 3);
    goto corral_source_split_9445;

  $bb744:
    assume {:verifier.code 0} true;
    out_$i1022 := $M.70;
    goto corral_source_split_9444;

  $bb743:
    assume !(out_$i1019 == 1);
    assume {:verifier.code 0} true;
    goto $bb744;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb744;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9442;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} out_vslice_dummy_var_328 := unknown_early_init(out_$p1020);
    goto corral_source_split_9441;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$p1020 := $M.46;
    goto corral_source_split_9440;

  $bb742:
    assume out_$i1019 == 1;
    goto corral_source_split_9439;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb742, $bb743;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    out_$i1019 := $eq.i32(out_$i1018, 1);
    goto corral_source_split_9437;

  $bb741:
    assume {:verifier.code 0} true;
    out_$i1018 := $M.70;
    goto corral_source_split_9436;

  $bb740:
    assume !(out_$i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb741;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    goto $bb741;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9434;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} out_vslice_dummy_var_327 := unknown_early_init(out_$p1016);
    goto corral_source_split_9433;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    out_$p1016 := $M.46;
    goto corral_source_split_9432;

  $bb739:
    assume out_$i1015 == 1;
    goto corral_source_split_9431;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb739, $bb740;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    out_$i1015 := $eq.i32(out_$i1014, 4);
    goto corral_source_split_9355;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    out_$i1014 := $M.70;
    goto corral_source_split_9354;

  $bb711:
    assume !(out_$i972 == 1);
    goto corral_source_split_9353;

  $bb752:
    assume !(out_$i1031 == 1);
    assume {:verifier.code 0} true;
    goto $bb753;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb753;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $M.68 := out_$i1035;
    call {:si_unique_call 1944} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i1035);
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    out_$i1035 := $sub.i32(out_$i1034, 1);
    goto corral_source_split_9466;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    out_$i1034 := $M.68;
    goto corral_source_split_9465;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1943} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9464;

  SeqInstr_735:
    goto corral_source_split_9463;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} rndis_wlan_unbind(out_$p1032, out_$p1033);
    goto SeqInstr_734;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    out_$p1033 := $M.47;
    goto corral_source_split_9462;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    out_$p1032 := $M.46;
    goto corral_source_split_9461;

  $bb751:
    assume out_$i1031 == 1;
    goto corral_source_split_9460;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb751, $bb752;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    out_$i1031 := $eq.i32(out_$i1030, 2);
    goto corral_source_split_9339;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    out_$i1030 := $M.70;
    goto corral_source_split_9338;

  $bb704:
    assume out_$i969 == 1;
    goto corral_source_split_9337;

  $bb703:
    assume !(out_$i968 == 1);
    assume {:verifier.code 0} true;
    out_$i969 := $slt.i32(out_$i960, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb704, $bb705;

  $bb755:
    assume !(out_$i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb757:
    assume !(out_$i1042 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto $bb758;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $M.68 := out_$i1044;
    call {:si_unique_call 1948} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i1044);
    goto corral_source_split_9481;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$i1044 := $add.i32(out_$i1043, 1);
    goto corral_source_split_9480;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    out_$i1043 := $M.68;
    goto corral_source_split_9479;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9478;

  $bb756:
    assume out_$i1042 == 1;
    goto corral_source_split_9477;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb756, $bb757;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    out_$i1042 := $eq.i32(out_$i1041, 0);
    goto corral_source_split_9475;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    out_$i1041 := $M.81;
    goto corral_source_split_9474;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.81 := out_$i1040;
    call {:si_unique_call 1946} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i1040);
    goto corral_source_split_9473;

  SeqInstr_738:
    goto corral_source_split_9472;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} out_$i1040 := rndis_wlan_bind(out_$p1038, out_$p1039);
    goto SeqInstr_737;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$p1039 := $M.47;
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    out_$p1038 := $M.46;
    goto corral_source_split_9470;

  $bb754:
    assume out_$i1037 == 1;
    goto corral_source_split_9469;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb754, $bb755;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    out_$i1037 := $eq.i32(out_$i1036, 1);
    goto corral_source_split_9343;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$i1036 := $M.70;
    goto corral_source_split_9342;

  $bb706:
    assume out_$i970 == 1;
    goto corral_source_split_9341;

  $bb705:
    assume !(out_$i969 == 1);
    assume {:verifier.code 0} true;
    out_$i970 := $slt.i32(out_$i960, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb706, $bb707;

  $bb761:
    assume !(out_$i1046 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    goto $bb762;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1950} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9486;

  SeqInstr_741:
    goto corral_source_split_9485;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} out_vslice_dummy_var_331 := rndis_wlan_stop(out_$p1047);
    goto SeqInstr_740;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    out_$p1047 := $M.46;
    goto corral_source_split_9484;

  $bb760:
    assume out_$i1046 == 1;
    goto corral_source_split_9483;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb760, $bb761;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    out_$i1046 := $eq.i32(out_$i1045, 4);
    goto corral_source_split_9347;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    out_$i1045 := $M.70;
    goto corral_source_split_9346;

  $bb707:
    assume !(out_$i970 == 1);
    goto corral_source_split_9345;

  $bb773:
    assume !(out_$i1062 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    goto $bb774;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9515;

  SeqInstr_753:
    goto corral_source_split_9514;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} out_vslice_dummy_var_335 := rndis_wlan_reset(out_$p1063);
    goto SeqInstr_752;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    out_$p1063 := $M.46;
    goto corral_source_split_9513;

  $bb772:
    assume out_$i1062 == 1;
    goto corral_source_split_9512;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb772, $bb773;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    out_$i1062 := $eq.i32(out_$i1061, 2);
    goto corral_source_split_9510;

  $bb771:
    assume {:verifier.code 0} true;
    out_$i1061 := $M.70;
    goto corral_source_split_9509;

  $bb770:
    assume !(out_$i1058 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb771;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1956} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9507;

  SeqInstr_750:
    goto corral_source_split_9506;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} out_vslice_dummy_var_334 := rndis_wlan_reset(out_$p1059);
    goto SeqInstr_749;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    out_$p1059 := $M.46;
    goto corral_source_split_9505;

  $bb769:
    assume out_$i1058 == 1;
    goto corral_source_split_9504;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb769, $bb770;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    out_$i1058 := $eq.i32(out_$i1057, 3);
    goto corral_source_split_9502;

  $bb768:
    assume {:verifier.code 0} true;
    out_$i1057 := $M.70;
    goto corral_source_split_9501;

  $bb767:
    assume !(out_$i1054 == 1);
    assume {:verifier.code 0} true;
    goto $bb768;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb768;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1954} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9499;

  SeqInstr_747:
    goto corral_source_split_9498;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} out_vslice_dummy_var_333 := rndis_wlan_reset(out_$p1055);
    goto SeqInstr_746;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$p1055 := $M.46;
    goto corral_source_split_9497;

  $bb766:
    assume out_$i1054 == 1;
    goto corral_source_split_9496;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb766, $bb767;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    out_$i1054 := $eq.i32(out_$i1053, 1);
    goto corral_source_split_9494;

  $bb765:
    assume {:verifier.code 0} true;
    out_$i1053 := $M.70;
    goto corral_source_split_9493;

  $bb764:
    assume !(out_$i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb765;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb765;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1952} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9491;

  SeqInstr_744:
    goto corral_source_split_9490;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} out_vslice_dummy_var_332 := rndis_wlan_reset(out_$p1051);
    goto SeqInstr_743;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$p1051 := $M.46;
    goto corral_source_split_9489;

  $bb763:
    assume out_$i1050 == 1;
    goto corral_source_split_9488;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb763, $bb764;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    out_$i1050 := $eq.i32(out_$i1049, 4);
    goto corral_source_split_9327;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    out_$i1049 := $M.70;
    goto corral_source_split_9326;

  $bb698:
    assume out_$i966 == 1;
    goto corral_source_split_9325;

  $bb689:
    assume out_$i962 == 1;
    assume {:verifier.code 0} true;
    out_$i966 := $slt.i32(out_$i960, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  $bb688:
    assume !(out_$i961 == 1);
    assume {:verifier.code 0} true;
    out_$i962 := $slt.i32(out_$i960, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  $bb785:
    assume !(out_$i1081 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    goto $bb786;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9548;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} out_vslice_dummy_var_339 := rndis_rx_fixup(out_$p1082, out_$p1083);
    goto corral_source_split_9547;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$p1083 := $M.45;
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$p1082 := $M.46;
    goto corral_source_split_9545;

  $bb784:
    assume out_$i1081 == 1;
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb784, $bb785;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$i1081 := $eq.i32(out_$i1080, 2);
    goto corral_source_split_9542;

  $bb783:
    assume {:verifier.code 0} true;
    out_$i1080 := $M.70;
    goto corral_source_split_9541;

  $bb782:
    assume !(out_$i1076 == 1);
    assume {:verifier.code 0} true;
    goto $bb783;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb783;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} out_vslice_dummy_var_338 := rndis_rx_fixup(out_$p1077, out_$p1078);
    goto corral_source_split_9538;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    out_$p1078 := $M.45;
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    out_$p1077 := $M.46;
    goto corral_source_split_9536;

  $bb781:
    assume out_$i1076 == 1;
    goto corral_source_split_9535;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb781, $bb782;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    out_$i1076 := $eq.i32(out_$i1075, 3);
    goto corral_source_split_9533;

  $bb780:
    assume {:verifier.code 0} true;
    out_$i1075 := $M.70;
    goto corral_source_split_9532;

  $bb779:
    assume !(out_$i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb780;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb780;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} out_vslice_dummy_var_337 := rndis_rx_fixup(out_$p1072, out_$p1073);
    goto corral_source_split_9529;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    out_$p1073 := $M.45;
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    out_$p1072 := $M.46;
    goto corral_source_split_9527;

  $bb778:
    assume out_$i1071 == 1;
    goto corral_source_split_9526;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb778, $bb779;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$i1071 := $eq.i32(out_$i1070, 1);
    goto corral_source_split_9524;

  $bb777:
    assume {:verifier.code 0} true;
    out_$i1070 := $M.70;
    goto corral_source_split_9523;

  $bb776:
    assume !(out_$i1066 == 1);
    assume {:verifier.code 0} true;
    goto $bb777;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    goto $bb777;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9521;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} out_vslice_dummy_var_336 := rndis_rx_fixup(out_$p1067, out_$p1068);
    goto corral_source_split_9520;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$p1068 := $M.45;
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    out_$p1067 := $M.46;
    goto corral_source_split_9518;

  $bb775:
    assume out_$i1066 == 1;
    goto corral_source_split_9517;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb775, $bb776;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    out_$i1066 := $eq.i32(out_$i1065, 4);
    goto corral_source_split_9331;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    out_$i1065 := $M.70;
    goto corral_source_split_9330;

  $bb700:
    assume out_$i967 == 1;
    goto corral_source_split_9329;

  $bb699:
    assume !(out_$i966 == 1);
    assume {:verifier.code 0} true;
    out_$i967 := $slt.i32(out_$i960, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb700, $bb701;

  $bb797:
    assume !(out_$i1095 == 1);
    assume {:verifier.code 0} true;
    goto $bb798;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    goto $bb798;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9577;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} rndis_status(out_$p1096, in_$p55);
    goto corral_source_split_9576;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    out_$p1096 := $M.46;
    goto corral_source_split_9575;

  $bb796:
    assume out_$i1095 == 1;
    goto corral_source_split_9574;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb796, $bb797;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    out_$i1095 := $eq.i32(out_$i1094, 2);
    goto corral_source_split_9572;

  $bb795:
    assume {:verifier.code 0} true;
    out_$i1094 := $M.70;
    goto corral_source_split_9571;

  $bb794:
    assume !(out_$i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb795;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb795;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} rndis_status(out_$p1093, in_$p55);
    goto corral_source_split_9568;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    out_$p1093 := $M.46;
    goto corral_source_split_9567;

  $bb793:
    assume out_$i1092 == 1;
    goto corral_source_split_9566;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb793, $bb794;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i1092 := $eq.i32(out_$i1091, 3);
    goto corral_source_split_9564;

  $bb792:
    assume {:verifier.code 0} true;
    out_$i1091 := $M.70;
    goto corral_source_split_9563;

  $bb791:
    assume !(out_$i1089 == 1);
    assume {:verifier.code 0} true;
    goto $bb792;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb792;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9561;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} rndis_status(out_$p1090, in_$p55);
    goto corral_source_split_9560;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$p1090 := $M.46;
    goto corral_source_split_9559;

  $bb790:
    assume out_$i1089 == 1;
    goto corral_source_split_9558;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb790, $bb791;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$i1089 := $eq.i32(out_$i1088, 1);
    goto corral_source_split_9556;

  $bb789:
    assume {:verifier.code 0} true;
    out_$i1088 := $M.70;
    goto corral_source_split_9555;

  $bb788:
    assume !(out_$i1086 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb789;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9553;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} rndis_status(out_$p1087, in_$p55);
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    out_$p1087 := $M.46;
    goto corral_source_split_9551;

  $bb787:
    assume out_$i1086 == 1;
    goto corral_source_split_9550;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb787, $bb788;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    out_$i1086 := $eq.i32(out_$i1085, 4);
    goto corral_source_split_9335;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    out_$i1085 := $M.70;
    goto corral_source_split_9334;

  $bb701:
    assume !(out_$i967 == 1);
    goto corral_source_split_9333;

  $bb803:
    assume !(out_$i1101 == 1);
    assume {:verifier.code 0} true;
    goto $bb804;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    goto $bb804;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} out_vslice_dummy_var_341 := ldv_disconnect_5();
    goto corral_source_split_9587;

  $bb802:
    assume out_$i1101 == 1;
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb802, $bb803;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    out_$i1101 := $eq.i32(out_$i1100, 3);
    goto corral_source_split_9584;

  $bb801:
    assume {:verifier.code 0} true;
    out_$i1100 := $M.70;
    goto corral_source_split_9583;

  $bb800:
    assume !(out_$i1098 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb801;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_9581;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} out_vslice_dummy_var_340 := ldv_disconnect_5();
    goto corral_source_split_9580;

  $bb799:
    assume out_$i1098 == 1;
    goto corral_source_split_9579;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb799, $bb800;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    out_$i1098 := $eq.i32(out_$i1097, 4);
    goto corral_source_split_9315;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    out_$i1097 := $M.70;
    goto corral_source_split_9314;

  $bb691:
    assume out_$i963 == 1;
    goto corral_source_split_9313;

  $bb690:
    assume !(out_$i962 == 1);
    assume {:verifier.code 0} true;
    out_$i963 := $slt.i32(out_$i960, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb691, $bb692;

  $bb806:
    assume !(out_$i1104 == 1);
    assume {:verifier.code 0} true;
    goto $bb807;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    goto $bb807;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} out_vslice_dummy_var_342 := ldv_init_5();
    goto corral_source_split_9591;

  $bb805:
    assume out_$i1104 == 1;
    goto corral_source_split_9590;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb805, $bb806;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    out_$i1104 := $eq.i32(out_$i1103, 2);
    goto corral_source_split_9319;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    out_$i1103 := $M.70;
    goto corral_source_split_9318;

  $bb693:
    assume out_$i964 == 1;
    goto corral_source_split_9317;

  $bb692:
    assume !(out_$i963 == 1);
    assume {:verifier.code 0} true;
    out_$i964 := $slt.i32(out_$i960, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb693, $bb694;

  $bb809:
    assume !(out_$i1107 == 1);
    assume {:verifier.code 0} true;
    goto $bb810;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto $bb810;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $M.70 := 4;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} out_vslice_dummy_var_343 := ldv_start_5();
    goto corral_source_split_9595;

  $bb808:
    assume out_$i1107 == 1;
    goto corral_source_split_9594;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb808, $bb809;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    out_$i1107 := $eq.i32(out_$i1106, 3);
    goto corral_source_split_9323;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    out_$i1106 := $M.70;
    goto corral_source_split_9322;

  $bb695:
    assume out_$i965 == 1;
    goto corral_source_split_9321;

  $bb694:
    assume !(out_$i964 == 1);
    assume {:verifier.code 0} true;
    out_$i965 := $eq.i32(out_$i960, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb695, $bb696;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} ldv_stop();
    goto corral_source_split_9598;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb696:
    assume {:verifier.code 0} true;
    assume !(out_$i965 == 1);
    goto $bb697;

  $bb713:
    assume {:verifier.code 0} true;
    assume !(out_$i973 == 1);
    goto $bb697;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} ldv_stop();
    goto corral_source_split_9600;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb13;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb13;

  $bb156_dummy:
    call {:si_unique_call 1} out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i220, out_$i221, out_$p222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i253, out_$i254, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i305, out_$i306, out_$p307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$p314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$p342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$p375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i445, out_$i446, out_$p447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i453, out_$i454, out_$p455, out_$p456, out_$i457, out_$i458, out_$i459, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i495, out_$i497, out_$i498, out_$p499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i521, out_$i522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i533, out_$i534, out_$p535, out_$p536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$p560, out_$p561, out_$i563, out_$i564, out_$p565, out_$p566, out_$p567, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$i575, out_$i576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$p588, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i595, out_$i596, out_$p597, out_$p598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i605, out_$i606, out_$p607, out_$p608, out_$i609, out_$p610, out_$i612, out_$i613, out_$p614, out_$p615, out_$i616, out_$p617, out_$i619, out_$i620, out_$p621, out_$p622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$i631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i640, out_$i641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$i652, out_$i654, out_$i655, out_$p656, out_$p657, out_$i658, out_$i659, out_$i661, out_$i662, out_$p663, out_$p664, out_$i665, out_$i666, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$i676, out_$p677, out_$p678, out_$i680, out_$i681, out_$p682, out_$p683, out_$i685, out_$i686, out_$p687, out_$p688, out_$i690, out_$i691, out_$p692, out_$p693, out_$p694, out_$i696, out_$i697, out_$p698, out_$p699, out_$p700, out_$i702, out_$i703, out_$p704, out_$p705, out_$p706, out_$i708, out_$i709, out_$p710, out_$p711, out_$i713, out_$i714, out_$p715, out_$p716, out_$i718, out_$i719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$i728, out_$i729, out_$p730, out_$p731, out_$i733, out_$i734, out_$p735, out_$p736, out_$i738, out_$i739, out_$p740, out_$i741, out_$i743, out_$i744, out_$p745, out_$i746, out_$i748, out_$i749, out_$p750, out_$i751, out_$i753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$i759, out_$i761, out_$i762, out_$p763, out_$p764, out_$p765, out_$i767, out_$i768, out_$p769, out_$p770, out_$p771, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$i779, out_$i780, out_$p781, out_$p782, out_$i784, out_$i785, out_$p786, out_$p787, out_$i789, out_$i790, out_$p791, out_$p792, out_$i794, out_$i795, out_$i797, out_$i798, out_$i799, out_$i800, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$i844, out_$i845, out_$p846, out_$i847, out_$i848, out_$p849, out_$i850, out_$i851, out_$p852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$p860, out_$i862, out_$i863, out_$p864, out_$i866, out_$i867, out_$p868, out_$i869, out_$i870, out_$p871, out_$i872, out_$i873, out_$p874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$p904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$p913, out_$i914, out_$i916, out_$i917, out_$p918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i939, out_$i940, out_$i941, out_$i942, out_$i943, out_$i944, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$i953, out_$i954, out_$i955, out_$i956, out_$i957, out_$i958, out_$i959, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$i970, out_$i971, out_$i972, out_$i973, out_$i974, out_$i975, out_$p976, out_$i977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$p984, out_$i985, out_$i986, out_$i987, out_$p988, out_$i989, out_$i990, out_$i991, out_$p992, out_$p993, out_$i994, out_$i996, out_$i997, out_$p998, out_$p999, out_$i1000, out_$i1002, out_$i1003, out_$p1004, out_$p1005, out_$i1006, out_$i1008, out_$i1009, out_$p1010, out_$p1011, out_$i1012, out_$i1014, out_$i1015, out_$p1016, out_$i1018, out_$i1019, out_$p1020, out_$i1022, out_$i1023, out_$p1024, out_$i1026, out_$i1027, out_$p1028, out_$i1030, out_$i1031, out_$p1032, out_$p1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$p1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$i1049, out_$i1050, out_$p1051, out_$i1053, out_$i1054, out_$p1055, out_$i1057, out_$i1058, out_$p1059, out_$i1061, out_$i1062, out_$p1063, out_$i1065, out_$i1066, out_$p1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$p1073, out_$i1075, out_$i1076, out_$p1077, out_$p1078, out_$i1080, out_$i1081, out_$p1082, out_$p1083, out_$i1085, out_$i1086, out_$p1087, out_$i1088, out_$i1089, out_$p1090, out_$i1091, out_$i1092, out_$p1093, out_$i1094, out_$i1095, out_$p1096, out_$i1097, out_$i1098, out_$i1100, out_$i1101, out_$i1103, out_$i1104, out_$i1106, out_$i1107, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315, out_vslice_dummy_var_316, out_vslice_dummy_var_317, out_vslice_dummy_var_318, out_vslice_dummy_var_319, out_vslice_dummy_var_320, out_vslice_dummy_var_321, out_vslice_dummy_var_322, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p26, in_$p27, in_$p29, in_$p30, in_$p32, in_$p34, in_$p35, in_$p37, in_$p39, in_$p41, in_$p43, in_$p44, in_$p46, in_$p47, in_$p49, in_$p50, in_$p52, in_$p53, in_$p55, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$i187, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i199, out_$i200, out_$p201, out_$i203, out_$i204, out_$p205, out_$i207, out_$i208, out_$p209, out_$i211, out_$i212, out_$p213, out_$i215, out_$i216, out_$p217, out_$p218, out_$i220, out_$i221, out_$p222, out_$p223, out_$i225, out_$i226, out_$p227, out_$p228, out_$i230, out_$i231, out_$p232, out_$p233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i250, out_$i251, out_$i253, out_$i254, out_$i256, out_$i257, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$i297, out_$i299, out_$i300, out_$p301, out_$p302, out_$i303, out_$i305, out_$i306, out_$p307, out_$p308, out_$i309, out_$i311, out_$i312, out_$p313, out_$p314, out_$i315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$p336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$p342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$p371, out_$i373, out_$i374, out_$p375, out_$p376, out_$i378, out_$i379, out_$p380, out_$p381, out_$i383, out_$i384, out_$p385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$p396, out_$i397, out_$i398, out_$p399, out_$i400, out_$i401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i409, out_$i410, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i443, out_$i445, out_$i446, out_$p447, out_$p448, out_$i449, out_$i450, out_$i451, out_$i453, out_$i454, out_$p455, out_$p456, out_$i457, out_$i458, out_$i459, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i495, out_$i497, out_$i498, out_$p499, out_$p500, out_$i501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i509, out_$i510, out_$p511, out_$p512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i521, out_$i522, out_$p523, out_$p524, out_$i525, out_$i526, out_$i527, out_$i528, out_$i529, out_$i530, out_$i531, out_$i533, out_$i534, out_$p535, out_$p536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$p560, out_$p561, out_$i563, out_$i564, out_$p565, out_$p566, out_$p567, out_$i569, out_$i570, out_$p571, out_$p572, out_$p573, out_$i575, out_$i576, out_$p577, out_$p578, out_$i579, out_$i580, out_$i581, out_$i582, out_$i583, out_$i585, out_$i586, out_$p587, out_$p588, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i595, out_$i596, out_$p597, out_$p598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i605, out_$i606, out_$p607, out_$p608, out_$i609, out_$p610, out_$i612, out_$i613, out_$p614, out_$p615, out_$i616, out_$p617, out_$i619, out_$i620, out_$p621, out_$p622, out_$i623, out_$p624, out_$i626, out_$i627, out_$p628, out_$p629, out_$i630, out_$i631, out_$i633, out_$i634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i640, out_$i641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$p650, out_$i651, out_$i652, out_$i654, out_$i655, out_$p656, out_$p657, out_$i658, out_$i659, out_$i661, out_$i662, out_$p663, out_$p664, out_$i665, out_$i666, out_$i668, out_$i669, out_$p670, out_$p671, out_$i672, out_$i673, out_$i674, out_$i675, out_$i676, out_$p677, out_$p678, out_$i680, out_$i681, out_$p682, out_$p683, out_$i685, out_$i686, out_$p687, out_$p688, out_$i690, out_$i691, out_$p692, out_$p693, out_$p694, out_$i696, out_$i697, out_$p698, out_$p699, out_$p700, out_$i702, out_$i703, out_$p704, out_$p705, out_$p706, out_$i708, out_$i709, out_$p710, out_$p711, out_$i713, out_$i714, out_$p715, out_$p716, out_$i718, out_$i719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$i728, out_$i729, out_$p730, out_$p731, out_$i733, out_$i734, out_$p735, out_$p736, out_$i738, out_$i739, out_$p740, out_$i741, out_$i743, out_$i744, out_$p745, out_$i746, out_$i748, out_$i749, out_$p750, out_$i751, out_$i753, out_$i754, out_$p755, out_$p756, out_$i757, out_$i758, out_$i759, out_$i761, out_$i762, out_$p763, out_$p764, out_$p765, out_$i767, out_$i768, out_$p769, out_$p770, out_$p771, out_$i773, out_$i774, out_$p775, out_$p776, out_$p777, out_$i779, out_$i780, out_$p781, out_$p782, out_$i784, out_$i785, out_$p786, out_$p787, out_$i789, out_$i790, out_$p791, out_$p792, out_$i794, out_$i795, out_$i797, out_$i798, out_$i799, out_$i800, out_$i802, out_$i803, out_$i804, out_$i805, out_$i806, out_$i807, out_$i808, out_$i809, out_$i810, out_$i811, out_$i812, out_$i813, out_$i814, out_$i815, out_$i816, out_$i817, out_$i818, out_$i819, out_$i820, out_$p821, out_$i822, out_$i823, out_$i824, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$i844, out_$i845, out_$p846, out_$i847, out_$i848, out_$p849, out_$i850, out_$i851, out_$p852, out_$i854, out_$i855, out_$p856, out_$i858, out_$i859, out_$p860, out_$i862, out_$i863, out_$p864, out_$i866, out_$i867, out_$p868, out_$i869, out_$i870, out_$p871, out_$i872, out_$i873, out_$p874, out_$i875, out_$i876, out_$i877, out_$i878, out_$i879, out_$i880, out_$i881, out_$i882, out_$i883, out_$i884, out_$i885, out_$i887, out_$i888, out_$i889, out_$i890, out_$i891, out_$i892, out_$i893, out_$i894, out_$i895, out_$i896, out_$i897, out_$i898, out_$i899, out_$i900, out_$i901, out_$i902, out_$i903, out_$p904, out_$i905, out_$i906, out_$i907, out_$i908, out_$i909, out_$i910, out_$i911, out_$p912, out_$p913, out_$i914, out_$i916, out_$i917, out_$p918, out_$i919, out_$i920, out_$i921, out_$i922, out_$i923, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i929, out_$i930, out_$i931, out_$i932, out_$p933, out_$i934, out_$i935, out_$i936, out_$i937, out_$i938, out_$i939, out_$i940, out_$i941, out_$i942, out_$i943, out_$i944, out_$i945, out_$i946, out_$i947, out_$i948, out_$i949, out_$i950, out_$i951, out_$i952, out_$i953, out_$i954, out_$i955, out_$i956, out_$i957, out_$i958, out_$i959, out_$i960, out_$i961, out_$i962, out_$i963, out_$i964, out_$i965, out_$i966, out_$i967, out_$i968, out_$i969, out_$i970, out_$i971, out_$i972, out_$i973, out_$i974, out_$i975, out_$p976, out_$i977, out_$i978, out_$i979, out_$p980, out_$i981, out_$i982, out_$i983, out_$p984, out_$i985, out_$i986, out_$i987, out_$p988, out_$i989, out_$i990, out_$i991, out_$p992, out_$p993, out_$i994, out_$i996, out_$i997, out_$p998, out_$p999, out_$i1000, out_$i1002, out_$i1003, out_$p1004, out_$p1005, out_$i1006, out_$i1008, out_$i1009, out_$p1010, out_$p1011, out_$i1012, out_$i1014, out_$i1015, out_$p1016, out_$i1018, out_$i1019, out_$p1020, out_$i1022, out_$i1023, out_$p1024, out_$i1026, out_$i1027, out_$p1028, out_$i1030, out_$i1031, out_$p1032, out_$p1033, out_$i1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$p1039, out_$i1040, out_$i1041, out_$i1042, out_$i1043, out_$i1044, out_$i1045, out_$i1046, out_$p1047, out_$i1049, out_$i1050, out_$p1051, out_$i1053, out_$i1054, out_$p1055, out_$i1057, out_$i1058, out_$p1059, out_$i1061, out_$i1062, out_$p1063, out_$i1065, out_$i1066, out_$p1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$p1073, out_$i1075, out_$i1076, out_$p1077, out_$p1078, out_$i1080, out_$i1081, out_$p1082, out_$p1083, out_$i1085, out_$i1086, out_$p1087, out_$i1088, out_$i1089, out_$p1090, out_$i1091, out_$i1092, out_$p1093, out_$i1094, out_$i1095, out_$p1096, out_$i1097, out_$i1098, out_$i1100, out_$i1101, out_$i1103, out_$i1104, out_$i1106, out_$i1107, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250, out_vslice_dummy_var_251, out_vslice_dummy_var_252, out_vslice_dummy_var_253, out_vslice_dummy_var_254, out_vslice_dummy_var_255, out_vslice_dummy_var_256, out_vslice_dummy_var_257, out_vslice_dummy_var_258, out_vslice_dummy_var_259, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263, out_vslice_dummy_var_264, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315, out_vslice_dummy_var_316, out_vslice_dummy_var_317, out_vslice_dummy_var_318, out_vslice_dummy_var_319, out_vslice_dummy_var_320, out_vslice_dummy_var_321, out_vslice_dummy_var_322, out_vslice_dummy_var_323, out_vslice_dummy_var_324, out_vslice_dummy_var_325, out_vslice_dummy_var_326, out_vslice_dummy_var_327, out_vslice_dummy_var_328, out_vslice_dummy_var_329, out_vslice_dummy_var_330, out_vslice_dummy_var_331, out_vslice_dummy_var_332, out_vslice_dummy_var_333, out_vslice_dummy_var_334, out_vslice_dummy_var_335, out_vslice_dummy_var_336, out_vslice_dummy_var_337, out_vslice_dummy_var_338, out_vslice_dummy_var_339, out_vslice_dummy_var_340, out_vslice_dummy_var_341, out_vslice_dummy_var_342, out_vslice_dummy_var_343);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$i96: i32, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$p189: ref, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$p233: ref, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i1, in_$i250: i32, in_$i251: i1, in_$i253: i32, in_$i254: i1, in_$i256: i32, in_$i257: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$i297: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$p308: ref, in_$i309: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$p314: ref, in_$i315: i32, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$p336: ref, in_$i337: i32, in_$i338: i32, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$p342: ref, in_$i343: i32, in_$i344: i32, in_$i345: i1, in_$i346: i32, in_$i347: i32, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$p376: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$p381: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i394: i32, in_$i395: i1, in_$p396: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$i400: i32, in_$i401: i1, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i1, in_$i409: i32, in_$i410: i1, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i1, in_$i417: i1, in_$i418: i1, in_$i419: i1, in_$i420: i1, in_$i421: i1, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i1, in_$i426: i1, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i1, in_$i436: i1, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$i441: i8, in_$i442: i1, in_$i443: i32, in_$i445: i32, in_$i446: i1, in_$p447: ref, in_$p448: ref, in_$i449: i8, in_$i450: i1, in_$i451: i32, in_$i453: i32, in_$i454: i1, in_$p455: ref, in_$p456: ref, in_$i457: i8, in_$i458: i1, in_$i459: i32, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$p464: ref, in_$i465: i8, in_$i466: i32, in_$i467: i8, in_$i468: i8, in_$i469: i1, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$p474: ref, in_$i475: i8, in_$i476: i32, in_$i477: i8, in_$i478: i8, in_$i479: i1, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$p484: ref, in_$i485: i8, in_$i486: i32, in_$i487: i8, in_$i488: i8, in_$i489: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$p494: ref, in_$i495: i32, in_$i497: i32, in_$i498: i1, in_$p499: ref, in_$p500: ref, in_$i501: i32, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$p512: ref, in_$i513: i8, in_$i514: i32, in_$i515: i8, in_$i516: i8, in_$i517: i1, in_$i518: i8, in_$i519: i1, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$p524: ref, in_$i525: i8, in_$i526: i32, in_$i527: i8, in_$i528: i8, in_$i529: i1, in_$i530: i8, in_$i531: i1, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$i537: i8, in_$i538: i32, in_$i539: i8, in_$i540: i8, in_$i541: i1, in_$i542: i8, in_$i543: i1, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$p560: ref, in_$p561: ref, in_$i563: i32, in_$i564: i1, in_$p565: ref, in_$p566: ref, in_$p567: ref, in_$i569: i32, in_$i570: i1, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$i575: i32, in_$i576: i1, in_$p577: ref, in_$p578: ref, in_$i579: i8, in_$i580: i32, in_$i581: i8, in_$i582: i8, in_$i583: i1, in_$i585: i32, in_$i586: i1, in_$p587: ref, in_$p588: ref, in_$i589: i8, in_$i590: i32, in_$i591: i8, in_$i592: i8, in_$i593: i1, in_$i595: i32, in_$i596: i1, in_$p597: ref, in_$p598: ref, in_$i599: i8, in_$i600: i32, in_$i601: i8, in_$i602: i8, in_$i603: i1, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$p608: ref, in_$i609: i32, in_$p610: ref, in_$i612: i32, in_$i613: i1, in_$p614: ref, in_$p615: ref, in_$i616: i32, in_$p617: ref, in_$i619: i32, in_$i620: i1, in_$p621: ref, in_$p622: ref, in_$i623: i32, in_$p624: ref, in_$i626: i32, in_$i627: i1, in_$p628: ref, in_$p629: ref, in_$i630: i32, in_$i631: i32, in_$i633: i32, in_$i634: i1, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i640: i32, in_$i641: i1, in_$p642: ref, in_$p643: ref, in_$i644: i32, in_$i645: i32, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$p650: ref, in_$i651: i32, in_$i652: i32, in_$i654: i32, in_$i655: i1, in_$p656: ref, in_$p657: ref, in_$i658: i32, in_$i659: i32, in_$i661: i32, in_$i662: i1, in_$p663: ref, in_$p664: ref, in_$i665: i32, in_$i666: i32, in_$i668: i32, in_$i669: i1, in_$p670: ref, in_$p671: ref, in_$i672: i32, in_$i673: i32, in_$i674: i1, in_$i675: i32, in_$i676: i1, in_$p677: ref, in_$p678: ref, in_$i680: i32, in_$i681: i1, in_$p682: ref, in_$p683: ref, in_$i685: i32, in_$i686: i1, in_$p687: ref, in_$p688: ref, in_$i690: i32, in_$i691: i1, in_$p692: ref, in_$p693: ref, in_$p694: ref, in_$i696: i32, in_$i697: i1, in_$p698: ref, in_$p699: ref, in_$p700: ref, in_$i702: i32, in_$i703: i1, in_$p704: ref, in_$p705: ref, in_$p706: ref, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$p711: ref, in_$i713: i32, in_$i714: i1, in_$p715: ref, in_$p716: ref, in_$i718: i32, in_$i719: i1, in_$p720: ref, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$p726: ref, in_$i728: i32, in_$i729: i1, in_$p730: ref, in_$p731: ref, in_$i733: i32, in_$i734: i1, in_$p735: ref, in_$p736: ref, in_$i738: i32, in_$i739: i1, in_$p740: ref, in_$i741: i32, in_$i743: i32, in_$i744: i1, in_$p745: ref, in_$i746: i32, in_$i748: i32, in_$i749: i1, in_$p750: ref, in_$i751: i32, in_$i753: i32, in_$i754: i1, in_$p755: ref, in_$p756: ref, in_$i757: i16, in_$i758: i32, in_$i759: i16, in_$i761: i32, in_$i762: i1, in_$p763: ref, in_$p764: ref, in_$p765: ref, in_$i767: i32, in_$i768: i1, in_$p769: ref, in_$p770: ref, in_$p771: ref, in_$i773: i32, in_$i774: i1, in_$p775: ref, in_$p776: ref, in_$p777: ref, in_$i779: i32, in_$i780: i1, in_$p781: ref, in_$p782: ref, in_$i784: i32, in_$i785: i1, in_$p786: ref, in_$p787: ref, in_$i789: i32, in_$i790: i1, in_$p791: ref, in_$p792: ref, in_$i794: i32, in_$i795: i1, in_$i797: i32, in_$i798: i32, in_$i799: i32, in_$i800: i1, in_$i802: i32, in_$i803: i32, in_$i804: i32, in_$i805: i1, in_$i806: i32, in_$i807: i1, in_$i808: i32, in_$i809: i1, in_$i810: i1, in_$i811: i1, in_$i812: i1, in_$i813: i1, in_$i814: i1, in_$i815: i1, in_$i816: i1, in_$i817: i1, in_$i818: i1, in_$i819: i32, in_$i820: i1, in_$p821: ref, in_$i822: i32, in_$i823: i32, in_$i824: i1, in_$i825: i32, in_$i826: i1, in_$p827: ref, in_$i829: i32, in_$i830: i1, in_$p831: ref, in_$i833: i32, in_$i834: i1, in_$p835: ref, in_$i837: i32, in_$i838: i1, in_$p839: ref, in_$i841: i32, in_$i842: i1, in_$p843: ref, in_$i844: i32, in_$i845: i1, in_$p846: ref, in_$i847: i32, in_$i848: i1, in_$p849: ref, in_$i850: i32, in_$i851: i1, in_$p852: ref, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i858: i32, in_$i859: i1, in_$p860: ref, in_$i862: i32, in_$i863: i1, in_$p864: ref, in_$i866: i32, in_$i867: i1, in_$p868: ref, in_$i869: i32, in_$i870: i1, in_$p871: ref, in_$i872: i32, in_$i873: i1, in_$p874: ref, in_$i875: i32, in_$i876: i1, in_$i877: i32, in_$i878: i32, in_$i879: i1, in_$i880: i32, in_$i881: i32, in_$i882: i32, in_$i883: i32, in_$i884: i32, in_$i885: i1, in_$i887: i32, in_$i888: i32, in_$i889: i32, in_$i890: i32, in_$i891: i32, in_$i892: i1, in_$i893: i32, in_$i894: i1, in_$i895: i32, in_$i896: i1, in_$i897: i1, in_$i898: i1, in_$i899: i1, in_$i900: i1, in_$i901: i1, in_$i902: i32, in_$i903: i1, in_$p904: ref, in_$i905: i32, in_$i906: i32, in_$i907: i1, in_$i908: i32, in_$i909: i32, in_$i910: i32, in_$i911: i1, in_$p912: ref, in_$p913: ref, in_$i914: i32, in_$i916: i32, in_$i917: i1, in_$p918: ref, in_$i919: i32, in_$i920: i32, in_$i921: i1, in_$i922: i32, in_$i923: i1, in_$i924: i32, in_$i925: i1, in_$p926: ref, in_$i927: i32, in_$i928: i32, in_$i929: i32, in_$i930: i1, in_$i931: i32, in_$i932: i1, in_$p933: ref, in_$i934: i32, in_$i935: i32, in_$i936: i32, in_$i937: i1, in_$i938: i32, in_$i939: i32, in_$i940: i1, in_$i941: i32, in_$i942: i1, in_$i943: i32, in_$i944: i1, in_$i945: i1, in_$i946: i1, in_$i947: i32, in_$i948: i1, in_$i949: i32, in_$i950: i1, in_$i951: i32, in_$i952: i1, in_$i953: i32, in_$i954: i32, in_$i955: i1, in_$i956: i32, in_$i957: i1, in_$i958: i32, in_$i959: i1, in_$i960: i32, in_$i961: i1, in_$i962: i1, in_$i963: i1, in_$i964: i1, in_$i965: i1, in_$i966: i1, in_$i967: i1, in_$i968: i1, in_$i969: i1, in_$i970: i1, in_$i971: i1, in_$i972: i1, in_$i973: i1, in_$i974: i32, in_$i975: i1, in_$p976: ref, in_$i977: i32, in_$i978: i32, in_$i979: i1, in_$p980: ref, in_$i981: i32, in_$i982: i32, in_$i983: i1, in_$p984: ref, in_$i985: i32, in_$i986: i32, in_$i987: i1, in_$p988: ref, in_$i989: i32, in_$i990: i32, in_$i991: i1, in_$p992: ref, in_$p993: ref, in_$i994: i32, in_$i996: i32, in_$i997: i1, in_$p998: ref, in_$p999: ref, in_$i1000: i32, in_$i1002: i32, in_$i1003: i1, in_$p1004: ref, in_$p1005: ref, in_$i1006: i32, in_$i1008: i32, in_$i1009: i1, in_$p1010: ref, in_$p1011: ref, in_$i1012: i32, in_$i1014: i32, in_$i1015: i1, in_$p1016: ref, in_$i1018: i32, in_$i1019: i1, in_$p1020: ref, in_$i1022: i32, in_$i1023: i1, in_$p1024: ref, in_$i1026: i32, in_$i1027: i1, in_$p1028: ref, in_$i1030: i32, in_$i1031: i1, in_$p1032: ref, in_$p1033: ref, in_$i1034: i32, in_$i1035: i32, in_$i1036: i32, in_$i1037: i1, in_$p1038: ref, in_$p1039: ref, in_$i1040: i32, in_$i1041: i32, in_$i1042: i1, in_$i1043: i32, in_$i1044: i32, in_$i1045: i32, in_$i1046: i1, in_$p1047: ref, in_$i1049: i32, in_$i1050: i1, in_$p1051: ref, in_$i1053: i32, in_$i1054: i1, in_$p1055: ref, in_$i1057: i32, in_$i1058: i1, in_$p1059: ref, in_$i1061: i32, in_$i1062: i1, in_$p1063: ref, in_$i1065: i32, in_$i1066: i1, in_$p1067: ref, in_$p1068: ref, in_$i1070: i32, in_$i1071: i1, in_$p1072: ref, in_$p1073: ref, in_$i1075: i32, in_$i1076: i1, in_$p1077: ref, in_$p1078: ref, in_$i1080: i32, in_$i1081: i1, in_$p1082: ref, in_$p1083: ref, in_$i1085: i32, in_$i1086: i1, in_$p1087: ref, in_$i1088: i32, in_$i1089: i1, in_$p1090: ref, in_$i1091: i32, in_$i1092: i1, in_$p1093: ref, in_$i1094: i32, in_$i1095: i1, in_$p1096: ref, in_$i1097: i32, in_$i1098: i1, in_$i1100: i32, in_$i1101: i1, in_$i1103: i32, in_$i1104: i1, in_$i1106: i32, in_$i1107: i1, in_vslice_dummy_var_217: ref, in_vslice_dummy_var_218: ref, in_vslice_dummy_var_219: ref, in_vslice_dummy_var_220: ref, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: ref, in_vslice_dummy_var_239: ref, in_vslice_dummy_var_240: ref, in_vslice_dummy_var_241: ref, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i32, in_vslice_dummy_var_246: i32, in_vslice_dummy_var_247: i32, in_vslice_dummy_var_248: i32, in_vslice_dummy_var_249: i32, in_vslice_dummy_var_250: i32, in_vslice_dummy_var_251: i32, in_vslice_dummy_var_252: i32, in_vslice_dummy_var_253: i32, in_vslice_dummy_var_254: i32, in_vslice_dummy_var_255: i32, in_vslice_dummy_var_256: i32, in_vslice_dummy_var_257: i32, in_vslice_dummy_var_258: i32, in_vslice_dummy_var_259: i32, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32, in_vslice_dummy_var_264: i32, in_vslice_dummy_var_265: i32, in_vslice_dummy_var_266: i32, in_vslice_dummy_var_267: i32, in_vslice_dummy_var_268: i32, in_vslice_dummy_var_269: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_271: i32, in_vslice_dummy_var_272: i32, in_vslice_dummy_var_273: i32, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i32, in_vslice_dummy_var_276: i32, in_vslice_dummy_var_277: i32, in_vslice_dummy_var_278: i32, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: i32, in_vslice_dummy_var_303: i32, in_vslice_dummy_var_304: i32, in_vslice_dummy_var_305: i32, in_vslice_dummy_var_306: i32, in_vslice_dummy_var_307: i32, in_vslice_dummy_var_308: i32, in_vslice_dummy_var_309: i32, in_vslice_dummy_var_310: i32, in_vslice_dummy_var_311: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_313: i32, in_vslice_dummy_var_314: i32, in_vslice_dummy_var_315: i32, in_vslice_dummy_var_316: i32, in_vslice_dummy_var_317: i32, in_vslice_dummy_var_318: i32, in_vslice_dummy_var_319: i32, in_vslice_dummy_var_320: i32, in_vslice_dummy_var_321: i32, in_vslice_dummy_var_322: i32, in_vslice_dummy_var_323: ref, in_vslice_dummy_var_324: ref, in_vslice_dummy_var_325: ref, in_vslice_dummy_var_326: ref, in_vslice_dummy_var_327: i32, in_vslice_dummy_var_328: i32, in_vslice_dummy_var_329: i32, in_vslice_dummy_var_330: i32, in_vslice_dummy_var_331: i32, in_vslice_dummy_var_332: i32, in_vslice_dummy_var_333: i32, in_vslice_dummy_var_334: i32, in_vslice_dummy_var_335: i32, in_vslice_dummy_var_336: i32, in_vslice_dummy_var_337: i32, in_vslice_dummy_var_338: i32, in_vslice_dummy_var_339: i32, in_vslice_dummy_var_340: i32, in_vslice_dummy_var_341: i32, in_vslice_dummy_var_342: i32, in_vslice_dummy_var_343: i32) returns (out_$i96: i32, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$p189: ref, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$p233: ref, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i1, out_$i250: i32, out_$i251: i1, out_$i253: i32, out_$i254: i1, out_$i256: i32, out_$i257: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$i297: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$p308: ref, out_$i309: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$p314: ref, out_$i315: i32, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$p336: ref, out_$i337: i32, out_$i338: i32, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$p342: ref, out_$i343: i32, out_$i344: i32, out_$i345: i1, out_$i346: i32, out_$i347: i32, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$p376: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$p381: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i394: i32, out_$i395: i1, out_$p396: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$i400: i32, out_$i401: i1, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i1, out_$i409: i32, out_$i410: i1, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i1, out_$i417: i1, out_$i418: i1, out_$i419: i1, out_$i420: i1, out_$i421: i1, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i1, out_$i426: i1, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i1, out_$i436: i1, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$i441: i8, out_$i442: i1, out_$i443: i32, out_$i445: i32, out_$i446: i1, out_$p447: ref, out_$p448: ref, out_$i449: i8, out_$i450: i1, out_$i451: i32, out_$i453: i32, out_$i454: i1, out_$p455: ref, out_$p456: ref, out_$i457: i8, out_$i458: i1, out_$i459: i32, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$p464: ref, out_$i465: i8, out_$i466: i32, out_$i467: i8, out_$i468: i8, out_$i469: i1, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$p474: ref, out_$i475: i8, out_$i476: i32, out_$i477: i8, out_$i478: i8, out_$i479: i1, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$p484: ref, out_$i485: i8, out_$i486: i32, out_$i487: i8, out_$i488: i8, out_$i489: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$p494: ref, out_$i495: i32, out_$i497: i32, out_$i498: i1, out_$p499: ref, out_$p500: ref, out_$i501: i32, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$p512: ref, out_$i513: i8, out_$i514: i32, out_$i515: i8, out_$i516: i8, out_$i517: i1, out_$i518: i8, out_$i519: i1, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$p524: ref, out_$i525: i8, out_$i526: i32, out_$i527: i8, out_$i528: i8, out_$i529: i1, out_$i530: i8, out_$i531: i1, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$i537: i8, out_$i538: i32, out_$i539: i8, out_$i540: i8, out_$i541: i1, out_$i542: i8, out_$i543: i1, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$p560: ref, out_$p561: ref, out_$i563: i32, out_$i564: i1, out_$p565: ref, out_$p566: ref, out_$p567: ref, out_$i569: i32, out_$i570: i1, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$i575: i32, out_$i576: i1, out_$p577: ref, out_$p578: ref, out_$i579: i8, out_$i580: i32, out_$i581: i8, out_$i582: i8, out_$i583: i1, out_$i585: i32, out_$i586: i1, out_$p587: ref, out_$p588: ref, out_$i589: i8, out_$i590: i32, out_$i591: i8, out_$i592: i8, out_$i593: i1, out_$i595: i32, out_$i596: i1, out_$p597: ref, out_$p598: ref, out_$i599: i8, out_$i600: i32, out_$i601: i8, out_$i602: i8, out_$i603: i1, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$p608: ref, out_$i609: i32, out_$p610: ref, out_$i612: i32, out_$i613: i1, out_$p614: ref, out_$p615: ref, out_$i616: i32, out_$p617: ref, out_$i619: i32, out_$i620: i1, out_$p621: ref, out_$p622: ref, out_$i623: i32, out_$p624: ref, out_$i626: i32, out_$i627: i1, out_$p628: ref, out_$p629: ref, out_$i630: i32, out_$i631: i32, out_$i633: i32, out_$i634: i1, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i640: i32, out_$i641: i1, out_$p642: ref, out_$p643: ref, out_$i644: i32, out_$i645: i32, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$p650: ref, out_$i651: i32, out_$i652: i32, out_$i654: i32, out_$i655: i1, out_$p656: ref, out_$p657: ref, out_$i658: i32, out_$i659: i32, out_$i661: i32, out_$i662: i1, out_$p663: ref, out_$p664: ref, out_$i665: i32, out_$i666: i32, out_$i668: i32, out_$i669: i1, out_$p670: ref, out_$p671: ref, out_$i672: i32, out_$i673: i32, out_$i674: i1, out_$i675: i32, out_$i676: i1, out_$p677: ref, out_$p678: ref, out_$i680: i32, out_$i681: i1, out_$p682: ref, out_$p683: ref, out_$i685: i32, out_$i686: i1, out_$p687: ref, out_$p688: ref, out_$i690: i32, out_$i691: i1, out_$p692: ref, out_$p693: ref, out_$p694: ref, out_$i696: i32, out_$i697: i1, out_$p698: ref, out_$p699: ref, out_$p700: ref, out_$i702: i32, out_$i703: i1, out_$p704: ref, out_$p705: ref, out_$p706: ref, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$p711: ref, out_$i713: i32, out_$i714: i1, out_$p715: ref, out_$p716: ref, out_$i718: i32, out_$i719: i1, out_$p720: ref, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$p726: ref, out_$i728: i32, out_$i729: i1, out_$p730: ref, out_$p731: ref, out_$i733: i32, out_$i734: i1, out_$p735: ref, out_$p736: ref, out_$i738: i32, out_$i739: i1, out_$p740: ref, out_$i741: i32, out_$i743: i32, out_$i744: i1, out_$p745: ref, out_$i746: i32, out_$i748: i32, out_$i749: i1, out_$p750: ref, out_$i751: i32, out_$i753: i32, out_$i754: i1, out_$p755: ref, out_$p756: ref, out_$i757: i16, out_$i758: i32, out_$i759: i16, out_$i761: i32, out_$i762: i1, out_$p763: ref, out_$p764: ref, out_$p765: ref, out_$i767: i32, out_$i768: i1, out_$p769: ref, out_$p770: ref, out_$p771: ref, out_$i773: i32, out_$i774: i1, out_$p775: ref, out_$p776: ref, out_$p777: ref, out_$i779: i32, out_$i780: i1, out_$p781: ref, out_$p782: ref, out_$i784: i32, out_$i785: i1, out_$p786: ref, out_$p787: ref, out_$i789: i32, out_$i790: i1, out_$p791: ref, out_$p792: ref, out_$i794: i32, out_$i795: i1, out_$i797: i32, out_$i798: i32, out_$i799: i32, out_$i800: i1, out_$i802: i32, out_$i803: i32, out_$i804: i32, out_$i805: i1, out_$i806: i32, out_$i807: i1, out_$i808: i32, out_$i809: i1, out_$i810: i1, out_$i811: i1, out_$i812: i1, out_$i813: i1, out_$i814: i1, out_$i815: i1, out_$i816: i1, out_$i817: i1, out_$i818: i1, out_$i819: i32, out_$i820: i1, out_$p821: ref, out_$i822: i32, out_$i823: i32, out_$i824: i1, out_$i825: i32, out_$i826: i1, out_$p827: ref, out_$i829: i32, out_$i830: i1, out_$p831: ref, out_$i833: i32, out_$i834: i1, out_$p835: ref, out_$i837: i32, out_$i838: i1, out_$p839: ref, out_$i841: i32, out_$i842: i1, out_$p843: ref, out_$i844: i32, out_$i845: i1, out_$p846: ref, out_$i847: i32, out_$i848: i1, out_$p849: ref, out_$i850: i32, out_$i851: i1, out_$p852: ref, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i858: i32, out_$i859: i1, out_$p860: ref, out_$i862: i32, out_$i863: i1, out_$p864: ref, out_$i866: i32, out_$i867: i1, out_$p868: ref, out_$i869: i32, out_$i870: i1, out_$p871: ref, out_$i872: i32, out_$i873: i1, out_$p874: ref, out_$i875: i32, out_$i876: i1, out_$i877: i32, out_$i878: i32, out_$i879: i1, out_$i880: i32, out_$i881: i32, out_$i882: i32, out_$i883: i32, out_$i884: i32, out_$i885: i1, out_$i887: i32, out_$i888: i32, out_$i889: i32, out_$i890: i32, out_$i891: i32, out_$i892: i1, out_$i893: i32, out_$i894: i1, out_$i895: i32, out_$i896: i1, out_$i897: i1, out_$i898: i1, out_$i899: i1, out_$i900: i1, out_$i901: i1, out_$i902: i32, out_$i903: i1, out_$p904: ref, out_$i905: i32, out_$i906: i32, out_$i907: i1, out_$i908: i32, out_$i909: i32, out_$i910: i32, out_$i911: i1, out_$p912: ref, out_$p913: ref, out_$i914: i32, out_$i916: i32, out_$i917: i1, out_$p918: ref, out_$i919: i32, out_$i920: i32, out_$i921: i1, out_$i922: i32, out_$i923: i1, out_$i924: i32, out_$i925: i1, out_$p926: ref, out_$i927: i32, out_$i928: i32, out_$i929: i32, out_$i930: i1, out_$i931: i32, out_$i932: i1, out_$p933: ref, out_$i934: i32, out_$i935: i32, out_$i936: i32, out_$i937: i1, out_$i938: i32, out_$i939: i32, out_$i940: i1, out_$i941: i32, out_$i942: i1, out_$i943: i32, out_$i944: i1, out_$i945: i1, out_$i946: i1, out_$i947: i32, out_$i948: i1, out_$i949: i32, out_$i950: i1, out_$i951: i32, out_$i952: i1, out_$i953: i32, out_$i954: i32, out_$i955: i1, out_$i956: i32, out_$i957: i1, out_$i958: i32, out_$i959: i1, out_$i960: i32, out_$i961: i1, out_$i962: i1, out_$i963: i1, out_$i964: i1, out_$i965: i1, out_$i966: i1, out_$i967: i1, out_$i968: i1, out_$i969: i1, out_$i970: i1, out_$i971: i1, out_$i972: i1, out_$i973: i1, out_$i974: i32, out_$i975: i1, out_$p976: ref, out_$i977: i32, out_$i978: i32, out_$i979: i1, out_$p980: ref, out_$i981: i32, out_$i982: i32, out_$i983: i1, out_$p984: ref, out_$i985: i32, out_$i986: i32, out_$i987: i1, out_$p988: ref, out_$i989: i32, out_$i990: i32, out_$i991: i1, out_$p992: ref, out_$p993: ref, out_$i994: i32, out_$i996: i32, out_$i997: i1, out_$p998: ref, out_$p999: ref, out_$i1000: i32, out_$i1002: i32, out_$i1003: i1, out_$p1004: ref, out_$p1005: ref, out_$i1006: i32, out_$i1008: i32, out_$i1009: i1, out_$p1010: ref, out_$p1011: ref, out_$i1012: i32, out_$i1014: i32, out_$i1015: i1, out_$p1016: ref, out_$i1018: i32, out_$i1019: i1, out_$p1020: ref, out_$i1022: i32, out_$i1023: i1, out_$p1024: ref, out_$i1026: i32, out_$i1027: i1, out_$p1028: ref, out_$i1030: i32, out_$i1031: i1, out_$p1032: ref, out_$p1033: ref, out_$i1034: i32, out_$i1035: i32, out_$i1036: i32, out_$i1037: i1, out_$p1038: ref, out_$p1039: ref, out_$i1040: i32, out_$i1041: i32, out_$i1042: i1, out_$i1043: i32, out_$i1044: i32, out_$i1045: i32, out_$i1046: i1, out_$p1047: ref, out_$i1049: i32, out_$i1050: i1, out_$p1051: ref, out_$i1053: i32, out_$i1054: i1, out_$p1055: ref, out_$i1057: i32, out_$i1058: i1, out_$p1059: ref, out_$i1061: i32, out_$i1062: i1, out_$p1063: ref, out_$i1065: i32, out_$i1066: i1, out_$p1067: ref, out_$p1068: ref, out_$i1070: i32, out_$i1071: i1, out_$p1072: ref, out_$p1073: ref, out_$i1075: i32, out_$i1076: i1, out_$p1077: ref, out_$p1078: ref, out_$i1080: i32, out_$i1081: i1, out_$p1082: ref, out_$p1083: ref, out_$i1085: i32, out_$i1086: i1, out_$p1087: ref, out_$i1088: i32, out_$i1089: i1, out_$p1090: ref, out_$i1091: i32, out_$i1092: i1, out_$p1093: ref, out_$i1094: i32, out_$i1095: i1, out_$p1096: ref, out_$i1097: i32, out_$i1098: i1, out_$i1100: i32, out_$i1101: i1, out_$i1103: i32, out_$i1104: i1, out_$i1106: i32, out_$i1107: i1, out_vslice_dummy_var_217: ref, out_vslice_dummy_var_218: ref, out_vslice_dummy_var_219: ref, out_vslice_dummy_var_220: ref, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: ref, out_vslice_dummy_var_239: ref, out_vslice_dummy_var_240: ref, out_vslice_dummy_var_241: ref, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i32, out_vslice_dummy_var_246: i32, out_vslice_dummy_var_247: i32, out_vslice_dummy_var_248: i32, out_vslice_dummy_var_249: i32, out_vslice_dummy_var_250: i32, out_vslice_dummy_var_251: i32, out_vslice_dummy_var_252: i32, out_vslice_dummy_var_253: i32, out_vslice_dummy_var_254: i32, out_vslice_dummy_var_255: i32, out_vslice_dummy_var_256: i32, out_vslice_dummy_var_257: i32, out_vslice_dummy_var_258: i32, out_vslice_dummy_var_259: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32, out_vslice_dummy_var_264: i32, out_vslice_dummy_var_265: i32, out_vslice_dummy_var_266: i32, out_vslice_dummy_var_267: i32, out_vslice_dummy_var_268: i32, out_vslice_dummy_var_269: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_271: i32, out_vslice_dummy_var_272: i32, out_vslice_dummy_var_273: i32, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i32, out_vslice_dummy_var_276: i32, out_vslice_dummy_var_277: i32, out_vslice_dummy_var_278: i32, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: i32, out_vslice_dummy_var_303: i32, out_vslice_dummy_var_304: i32, out_vslice_dummy_var_305: i32, out_vslice_dummy_var_306: i32, out_vslice_dummy_var_307: i32, out_vslice_dummy_var_308: i32, out_vslice_dummy_var_309: i32, out_vslice_dummy_var_310: i32, out_vslice_dummy_var_311: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_313: i32, out_vslice_dummy_var_314: i32, out_vslice_dummy_var_315: i32, out_vslice_dummy_var_316: i32, out_vslice_dummy_var_317: i32, out_vslice_dummy_var_318: i32, out_vslice_dummy_var_319: i32, out_vslice_dummy_var_320: i32, out_vslice_dummy_var_321: i32, out_vslice_dummy_var_322: i32, out_vslice_dummy_var_323: ref, out_vslice_dummy_var_324: ref, out_vslice_dummy_var_325: ref, out_vslice_dummy_var_326: ref, out_vslice_dummy_var_327: i32, out_vslice_dummy_var_328: i32, out_vslice_dummy_var_329: i32, out_vslice_dummy_var_330: i32, out_vslice_dummy_var_331: i32, out_vslice_dummy_var_332: i32, out_vslice_dummy_var_333: i32, out_vslice_dummy_var_334: i32, out_vslice_dummy_var_335: i32, out_vslice_dummy_var_336: i32, out_vslice_dummy_var_337: i32, out_vslice_dummy_var_338: i32, out_vslice_dummy_var_339: i32, out_vslice_dummy_var_340: i32, out_vslice_dummy_var_341: i32, out_vslice_dummy_var_342: i32, out_vslice_dummy_var_343: i32);
  modifies $M.60, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $CurrAddr, $M.0, $M.68, $M.8, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.71, $M.9, $M.62, $M.72, $M.63, $M.73, $M.40, $M.41, $M.42, $M.43, $M.65, $M.74, $M.76, $M.75, $M.48, $M.49, $M.50, $M.51, $M.32, $M.67, $M.77, $M.22, $M.78, $M.79, $M.53, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.54, $M.55, $M.56, $M.57, $M.58, $M.45, $M.46, $M.47, $M.70, $M.69, $M.80, $M.44, $M.81;


