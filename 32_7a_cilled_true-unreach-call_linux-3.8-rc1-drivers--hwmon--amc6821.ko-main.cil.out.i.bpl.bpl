var $M.0: i32;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: i32;

var $M.18: i32;

var $M.19: i32;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: i32;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: i64;

var $M.58: ref;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: i64;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: i64;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: i64;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: ref;

var $M.91: ref;

var $M.92: ref;

var $M.93: ref;

var $M.94: ref;

var $M.95: i64;

var $M.96: ref;

var $M.97: ref;

var $M.98: ref;

var $M.99: ref;

var $M.100: ref;

var $M.101: ref;

var $M.102: ref;

var $M.103: i64;

var $M.104: ref;

var $M.105: ref;

var $M.106: ref;

var $M.107: ref;

var $M.108: i64;

var $M.109: ref;

var $M.110: ref;

var $M.111: ref;

var $M.112: ref;

var $M.113: i64;

var $M.114: ref;

var $M.115: i32;

var $M.116: ref;

var $M.117: ref;

var $M.118: ref;

var $M.119: i64;

var $M.120: ref;

var $M.121: ref;

var $M.122: ref;

var $M.123: ref;

var $M.124: i64;

var $M.125: ref;

var $M.126: ref;

var $M.127: ref;

var $M.128: ref;

var $M.129: i64;

var $M.130: ref;

var $M.131: ref;

var $M.132: ref;

var $M.133: ref;

var $M.134: ref;

var $M.135: ref;

var $M.136: ref;

var $M.137: i64;

var $M.138: ref;

var $M.139: ref;

var $M.140: ref;

var $M.141: ref;

var $M.142: i64;

var $M.143: ref;

var $M.144: ref;

var $M.145: ref;

var $M.146: ref;

var $M.147: i64;

var $M.148: ref;

var $M.149: ref;

var $M.150: ref;

var $M.151: ref;

var $M.152: i64;

var $M.153: ref;

var $M.154: ref;

var $M.155: ref;

var $M.156: ref;

var $M.157: ref;

var $M.158: ref;

var $M.159: ref;

var $M.160: i64;

var $M.161: ref;

var $M.162: ref;

var $M.163: ref;

var $M.164: ref;

var $M.165: ref;

var $M.166: ref;

var $M.167: ref;

var $M.168: i64;

var $M.169: ref;

var $M.170: i32;

var $M.171: i32;

var $M.172: i32;

var $M.173: i32;

var $M.174: [ref]ref;

var $M.175: [ref]i16;

var $M.176: [ref]ref;

var $M.177: [ref]ref;

var $M.178: [ref]ref;

var $M.179: [ref]ref;

var $M.180: [ref]i24;

var $M.181: [ref]i8;

var $M.182: [ref]i8;

var $M.183: [ref]i32;

var $M.184: [ref]i32;

var $M.185: [ref]i32;

var $M.186: [ref]i8;

var $M.187: [ref]i8;

var $M.188: [ref]i64;

var $M.189: [ref]i8;

var $M.190: [ref]i8;

var $M.191: [ref]i8;

var $M.192: [ref]i32;

var $M.193: i32;

var $M.194: i32;

var $M.195: [ref]ref;

var $M.196: [ref]ref;

var $M.197: [ref]i8;

var $M.198: [ref]i16;

var $M.199: [ref]i8;

var $M.230: [ref]i8;

var $M.231: [ref]ref;

var $M.235: [ref]i8;

var $M.236: [ref]i8;

var $M.237: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 408297);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_state_variable_33: ref;

axiom ldv_state_variable_33 == $sub.ref(0, 1028);

const ldv_state_variable_32: ref;

axiom ldv_state_variable_32 == $sub.ref(0, 2056);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 3084);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 4112);

const ldv_state_variable_26: ref;

axiom ldv_state_variable_26 == $sub.ref(0, 5140);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 6168);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 7196);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 8224);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 9252);

const ldv_state_variable_30: ref;

axiom ldv_state_variable_30 == $sub.ref(0, 10280);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 11308);

const ldv_state_variable_27: ref;

axiom ldv_state_variable_27 == $sub.ref(0, 12336);

const ldv_state_variable_25: ref;

axiom ldv_state_variable_25 == $sub.ref(0, 13364);

const ldv_state_variable_28: ref;

axiom ldv_state_variable_28 == $sub.ref(0, 14392);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 15420);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 16448);

const ldv_state_variable_24: ref;

axiom ldv_state_variable_24 == $sub.ref(0, 17476);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 18504);

const ldv_state_variable_31: ref;

axiom ldv_state_variable_31 == $sub.ref(0, 19532);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 20560);

const ldv_state_variable_22: ref;

axiom ldv_state_variable_22 == $sub.ref(0, 21588);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 22616);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 23644);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 24672);

const ldv_state_variable_23: ref;

axiom ldv_state_variable_23 == $sub.ref(0, 25700);

const ldv_state_variable_29: ref;

axiom ldv_state_variable_29 == $sub.ref(0, 26728);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 27756);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 28784);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 29812);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 30840);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 31868);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 32896);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 33924);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 34952);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 35980);

const amc6821_driver_group0: ref;

axiom amc6821_driver_group0 == $sub.ref(0, 37012);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 38044);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 39076);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 40104);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 41136);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 42168);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 43200);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 44232);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 45264);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 46296);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 47328);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 48360);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 49392);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 50424);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 51456);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 52488);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 53520);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 54552);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 55584);

const sensor_dev_attr_temp2_auto_point2_temp_group0: ref;

axiom sensor_dev_attr_temp2_auto_point2_temp_group0 == $sub.ref(0, 56616);

const sensor_dev_attr_temp2_auto_point2_temp_group1: ref;

axiom sensor_dev_attr_temp2_auto_point2_temp_group1 == $sub.ref(0, 57648);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 58680);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 59712);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 60744);

const sensor_dev_attr_temp2_auto_point3_temp_group0: ref;

axiom sensor_dev_attr_temp2_auto_point3_temp_group0 == $sub.ref(0, 61776);

const sensor_dev_attr_temp2_auto_point3_temp_group1: ref;

axiom sensor_dev_attr_temp2_auto_point3_temp_group1 == $sub.ref(0, 62808);

const ldvarg22: ref;

axiom ldvarg22 == $sub.ref(0, 63840);

const ldvarg21: ref;

axiom ldvarg21 == $sub.ref(0, 64872);

const ldvarg20: ref;

axiom ldvarg20 == $sub.ref(0, 65904);

const ldvarg23: ref;

axiom ldvarg23 == $sub.ref(0, 66936);

const ldvarg25: ref;

axiom ldvarg25 == $sub.ref(0, 67968);

const ldvarg24: ref;

axiom ldvarg24 == $sub.ref(0, 69000);

const sensor_dev_attr_temp1_max_group0: ref;

axiom sensor_dev_attr_temp1_max_group0 == $sub.ref(0, 70032);

const sensor_dev_attr_temp1_max_group1: ref;

axiom sensor_dev_attr_temp1_max_group1 == $sub.ref(0, 71064);

const ldvarg28: ref;

axiom ldvarg28 == $sub.ref(0, 72096);

const ldvarg27: ref;

axiom ldvarg27 == $sub.ref(0, 73128);

const ldvarg26: ref;

axiom ldvarg26 == $sub.ref(0, 74160);

const sensor_dev_attr_fan1_min_group0: ref;

axiom sensor_dev_attr_fan1_min_group0 == $sub.ref(0, 75192);

const sensor_dev_attr_fan1_min_group1: ref;

axiom sensor_dev_attr_fan1_min_group1 == $sub.ref(0, 76224);

const ldvarg31: ref;

axiom ldvarg31 == $sub.ref(0, 77256);

const ldvarg30: ref;

axiom ldvarg30 == $sub.ref(0, 78288);

const ldvarg29: ref;

axiom ldvarg29 == $sub.ref(0, 79320);

const ldvarg32: ref;

axiom ldvarg32 == $sub.ref(0, 80352);

const ldvarg34: ref;

axiom ldvarg34 == $sub.ref(0, 81384);

const ldvarg33: ref;

axiom ldvarg33 == $sub.ref(0, 82416);

const ldvarg35: ref;

axiom ldvarg35 == $sub.ref(0, 83448);

const ldvarg37: ref;

axiom ldvarg37 == $sub.ref(0, 84480);

const ldvarg36: ref;

axiom ldvarg36 == $sub.ref(0, 85512);

const ldvarg38: ref;

axiom ldvarg38 == $sub.ref(0, 86544);

const ldvarg40: ref;

axiom ldvarg40 == $sub.ref(0, 87576);

const ldvarg39: ref;

axiom ldvarg39 == $sub.ref(0, 88608);

const ldvarg41: ref;

axiom ldvarg41 == $sub.ref(0, 89640);

const ldvarg43: ref;

axiom ldvarg43 == $sub.ref(0, 90672);

const ldvarg42: ref;

axiom ldvarg42 == $sub.ref(0, 91704);

const ldvarg44: ref;

axiom ldvarg44 == $sub.ref(0, 92736);

const ldvarg46: ref;

axiom ldvarg46 == $sub.ref(0, 93768);

const ldvarg45: ref;

axiom ldvarg45 == $sub.ref(0, 94800);

const sensor_dev_attr_temp2_min_group0: ref;

axiom sensor_dev_attr_temp2_min_group0 == $sub.ref(0, 95832);

const sensor_dev_attr_temp2_min_group1: ref;

axiom sensor_dev_attr_temp2_min_group1 == $sub.ref(0, 96864);

const ldvarg49: ref;

axiom ldvarg49 == $sub.ref(0, 97896);

const ldvarg48: ref;

axiom ldvarg48 == $sub.ref(0, 98928);

const ldvarg47: ref;

axiom ldvarg47 == $sub.ref(0, 99960);

const ldvarg50: ref;

axiom ldvarg50 == $sub.ref(0, 100992);

const ldvarg52: ref;

axiom ldvarg52 == $sub.ref(0, 102024);

const ldvarg51: ref;

axiom ldvarg51 == $sub.ref(0, 103056);

const sensor_dev_attr_temp1_min_group0: ref;

axiom sensor_dev_attr_temp1_min_group0 == $sub.ref(0, 104088);

const sensor_dev_attr_temp1_min_group1: ref;

axiom sensor_dev_attr_temp1_min_group1 == $sub.ref(0, 105120);

const ldvarg55: ref;

axiom ldvarg55 == $sub.ref(0, 106152);

const ldvarg54: ref;

axiom ldvarg54 == $sub.ref(0, 107184);

const ldvarg53: ref;

axiom ldvarg53 == $sub.ref(0, 108216);

const sensor_dev_attr_pwm1_enable_group0: ref;

axiom sensor_dev_attr_pwm1_enable_group0 == $sub.ref(0, 109248);

const sensor_dev_attr_pwm1_enable_group1: ref;

axiom sensor_dev_attr_pwm1_enable_group1 == $sub.ref(0, 110280);

const ldvarg58: ref;

axiom ldvarg58 == $sub.ref(0, 111312);

const ldvarg57: ref;

axiom ldvarg57 == $sub.ref(0, 112344);

const ldvarg56: ref;

axiom ldvarg56 == $sub.ref(0, 113376);

const sensor_dev_attr_temp2_crit_group0: ref;

axiom sensor_dev_attr_temp2_crit_group0 == $sub.ref(0, 114408);

const sensor_dev_attr_temp2_crit_group1: ref;

axiom sensor_dev_attr_temp2_crit_group1 == $sub.ref(0, 115440);

const ldvarg61: ref;

axiom ldvarg61 == $sub.ref(0, 116472);

const ldvarg60: ref;

axiom ldvarg60 == $sub.ref(0, 117504);

const ldvarg59: ref;

axiom ldvarg59 == $sub.ref(0, 118536);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 119564);

const sensor_dev_attr_fan1_div_group0: ref;

axiom sensor_dev_attr_fan1_div_group0 == $sub.ref(0, 120596);

const sensor_dev_attr_fan1_div_group1: ref;

axiom sensor_dev_attr_fan1_div_group1 == $sub.ref(0, 121628);

const ldvarg64: ref;

axiom ldvarg64 == $sub.ref(0, 122660);

const ldvarg63: ref;

axiom ldvarg63 == $sub.ref(0, 123692);

const ldvarg62: ref;

axiom ldvarg62 == $sub.ref(0, 124724);

const sensor_dev_attr_temp2_max_group0: ref;

axiom sensor_dev_attr_temp2_max_group0 == $sub.ref(0, 125756);

const sensor_dev_attr_temp2_max_group1: ref;

axiom sensor_dev_attr_temp2_max_group1 == $sub.ref(0, 126788);

const ldvarg67: ref;

axiom ldvarg67 == $sub.ref(0, 127820);

const ldvarg66: ref;

axiom ldvarg66 == $sub.ref(0, 128852);

const ldvarg65: ref;

axiom ldvarg65 == $sub.ref(0, 129884);

const sensor_dev_attr_temp1_crit_group0: ref;

axiom sensor_dev_attr_temp1_crit_group0 == $sub.ref(0, 130916);

const sensor_dev_attr_temp1_crit_group1: ref;

axiom sensor_dev_attr_temp1_crit_group1 == $sub.ref(0, 131948);

const ldvarg70: ref;

axiom ldvarg70 == $sub.ref(0, 132980);

const ldvarg69: ref;

axiom ldvarg69 == $sub.ref(0, 134012);

const ldvarg68: ref;

axiom ldvarg68 == $sub.ref(0, 135044);

const ldvarg71: ref;

axiom ldvarg71 == $sub.ref(0, 136076);

const ldvarg73: ref;

axiom ldvarg73 == $sub.ref(0, 137108);

const ldvarg72: ref;

axiom ldvarg72 == $sub.ref(0, 138140);

const sensor_dev_attr_temp2_auto_point1_temp_group0: ref;

axiom sensor_dev_attr_temp2_auto_point1_temp_group0 == $sub.ref(0, 139172);

const sensor_dev_attr_temp2_auto_point1_temp_group1: ref;

axiom sensor_dev_attr_temp2_auto_point1_temp_group1 == $sub.ref(0, 140204);

const ldvarg76: ref;

axiom ldvarg76 == $sub.ref(0, 141236);

const ldvarg75: ref;

axiom ldvarg75 == $sub.ref(0, 142268);

const ldvarg74: ref;

axiom ldvarg74 == $sub.ref(0, 143300);

const sensor_dev_attr_pwm1_auto_point2_pwm_group0: ref;

axiom sensor_dev_attr_pwm1_auto_point2_pwm_group0 == $sub.ref(0, 144332);

const sensor_dev_attr_pwm1_auto_point2_pwm_group1: ref;

axiom sensor_dev_attr_pwm1_auto_point2_pwm_group1 == $sub.ref(0, 145364);

const ldvarg79: ref;

axiom ldvarg79 == $sub.ref(0, 146396);

const ldvarg78: ref;

axiom ldvarg78 == $sub.ref(0, 147428);

const ldvarg77: ref;

axiom ldvarg77 == $sub.ref(0, 148460);

const sensor_dev_attr_pwm1_group0: ref;

axiom sensor_dev_attr_pwm1_group0 == $sub.ref(0, 149492);

const sensor_dev_attr_pwm1_group1: ref;

axiom sensor_dev_attr_pwm1_group1 == $sub.ref(0, 150524);

const ldvarg82: ref;

axiom ldvarg82 == $sub.ref(0, 151556);

const ldvarg81: ref;

axiom ldvarg81 == $sub.ref(0, 152588);

const ldvarg80: ref;

axiom ldvarg80 == $sub.ref(0, 153620);

const sensor_dev_attr_fan1_max_group0: ref;

axiom sensor_dev_attr_fan1_max_group0 == $sub.ref(0, 154652);

const sensor_dev_attr_fan1_max_group1: ref;

axiom sensor_dev_attr_fan1_max_group1 == $sub.ref(0, 155684);

const ldvarg85: ref;

axiom ldvarg85 == $sub.ref(0, 156716);

const ldvarg84: ref;

axiom ldvarg84 == $sub.ref(0, 157748);

const ldvarg83: ref;

axiom ldvarg83 == $sub.ref(0, 158780);

const ldvarg86: ref;

axiom ldvarg86 == $sub.ref(0, 159812);

const ldvarg88: ref;

axiom ldvarg88 == $sub.ref(0, 160844);

const ldvarg87: ref;

axiom ldvarg87 == $sub.ref(0, 161876);

const sensor_dev_attr_temp1_auto_point3_temp_group0: ref;

axiom sensor_dev_attr_temp1_auto_point3_temp_group0 == $sub.ref(0, 162908);

const sensor_dev_attr_temp1_auto_point3_temp_group1: ref;

axiom sensor_dev_attr_temp1_auto_point3_temp_group1 == $sub.ref(0, 163940);

const ldvarg91: ref;

axiom ldvarg91 == $sub.ref(0, 164972);

const ldvarg90: ref;

axiom ldvarg90 == $sub.ref(0, 166004);

const ldvarg89: ref;

axiom ldvarg89 == $sub.ref(0, 167036);

const ldvarg92: ref;

axiom ldvarg92 == $sub.ref(0, 168068);

const ldvarg94: ref;

axiom ldvarg94 == $sub.ref(0, 169100);

const ldvarg93: ref;

axiom ldvarg93 == $sub.ref(0, 170132);

const sensor_dev_attr_temp1_auto_point2_temp_group0: ref;

axiom sensor_dev_attr_temp1_auto_point2_temp_group0 == $sub.ref(0, 171164);

const sensor_dev_attr_temp1_auto_point2_temp_group1: ref;

axiom sensor_dev_attr_temp1_auto_point2_temp_group1 == $sub.ref(0, 172196);

const ldvarg97: ref;

axiom ldvarg97 == $sub.ref(0, 173228);

const ldvarg96: ref;

axiom ldvarg96 == $sub.ref(0, 174260);

const ldvarg95: ref;

axiom ldvarg95 == $sub.ref(0, 175292);

const __mod_i2c_device_table: ref;

axiom __mod_i2c_device_table == $sub.ref(0, 176348);

const {:count 10} normal_i2c: ref;

axiom normal_i2c == $sub.ref(0, 177392);

const {:count 2} amc6821_id: ref;

axiom amc6821_id == $sub.ref(0, 178480);

const amc6821_driver: ref;

axiom amc6821_driver == $sub.ref(0, 179744);

const {:count 3} fan_reg_hi: ref;

axiom fan_reg_hi == $sub.ref(0, 180771);

const {:count 3} fan_reg_low: ref;

axiom fan_reg_low == $sub.ref(0, 181798);

const {:count 8} temp_reg: ref;

axiom temp_reg == $sub.ref(0, 182830);

const sensor_dev_attr_temp2_auto_point3_temp: ref;

axiom sensor_dev_attr_temp2_auto_point3_temp == $sub.ref(0, 183910);

const sensor_dev_attr_temp2_auto_point2_temp: ref;

axiom sensor_dev_attr_temp2_auto_point2_temp == $sub.ref(0, 184990);

const sensor_dev_attr_temp2_auto_point1_temp: ref;

axiom sensor_dev_attr_temp2_auto_point1_temp == $sub.ref(0, 186070);

const sensor_dev_attr_temp1_auto_point3_temp: ref;

axiom sensor_dev_attr_temp1_auto_point3_temp == $sub.ref(0, 187150);

const sensor_dev_attr_temp1_auto_point2_temp: ref;

axiom sensor_dev_attr_temp1_auto_point2_temp == $sub.ref(0, 188230);

const sensor_dev_attr_temp1_auto_point1_temp: ref;

axiom sensor_dev_attr_temp1_auto_point1_temp == $sub.ref(0, 189310);

const sensor_dev_attr_pwm1_auto_point3_pwm: ref;

axiom sensor_dev_attr_pwm1_auto_point3_pwm == $sub.ref(0, 190390);

const sensor_dev_attr_pwm1_auto_point2_pwm: ref;

axiom sensor_dev_attr_pwm1_auto_point2_pwm == $sub.ref(0, 191470);

const sensor_dev_attr_pwm1_auto_point1_pwm: ref;

axiom sensor_dev_attr_pwm1_auto_point1_pwm == $sub.ref(0, 192550);

const sensor_dev_attr_pwm1_auto_channels_temp: ref;

axiom sensor_dev_attr_pwm1_auto_channels_temp == $sub.ref(0, 193630);

const sensor_dev_attr_pwm1_enable: ref;

axiom sensor_dev_attr_pwm1_enable == $sub.ref(0, 194710);

const sensor_dev_attr_pwm1: ref;

axiom sensor_dev_attr_pwm1 == $sub.ref(0, 195790);

const sensor_dev_attr_fan1_div: ref;

axiom sensor_dev_attr_fan1_div == $sub.ref(0, 196870);

const sensor_dev_attr_fan1_fault: ref;

axiom sensor_dev_attr_fan1_fault == $sub.ref(0, 197950);

const sensor_dev_attr_fan1_max: ref;

axiom sensor_dev_attr_fan1_max == $sub.ref(0, 199030);

const sensor_dev_attr_fan1_min: ref;

axiom sensor_dev_attr_fan1_min == $sub.ref(0, 200110);

const sensor_dev_attr_fan1_input: ref;

axiom sensor_dev_attr_fan1_input == $sub.ref(0, 201190);

const sensor_dev_attr_temp2_fault: ref;

axiom sensor_dev_attr_temp2_fault == $sub.ref(0, 202270);

const sensor_dev_attr_temp2_crit_alarm: ref;

axiom sensor_dev_attr_temp2_crit_alarm == $sub.ref(0, 203350);

const sensor_dev_attr_temp2_max_alarm: ref;

axiom sensor_dev_attr_temp2_max_alarm == $sub.ref(0, 204430);

const sensor_dev_attr_temp2_min_alarm: ref;

axiom sensor_dev_attr_temp2_min_alarm == $sub.ref(0, 205510);

const sensor_dev_attr_temp2_crit: ref;

axiom sensor_dev_attr_temp2_crit == $sub.ref(0, 206590);

const sensor_dev_attr_temp2_max: ref;

axiom sensor_dev_attr_temp2_max == $sub.ref(0, 207670);

const sensor_dev_attr_temp2_min: ref;

axiom sensor_dev_attr_temp2_min == $sub.ref(0, 208750);

const sensor_dev_attr_temp2_input: ref;

axiom sensor_dev_attr_temp2_input == $sub.ref(0, 209830);

const sensor_dev_attr_temp1_crit_alarm: ref;

axiom sensor_dev_attr_temp1_crit_alarm == $sub.ref(0, 210910);

const sensor_dev_attr_temp1_max_alarm: ref;

axiom sensor_dev_attr_temp1_max_alarm == $sub.ref(0, 211990);

const sensor_dev_attr_temp1_min_alarm: ref;

axiom sensor_dev_attr_temp1_min_alarm == $sub.ref(0, 213070);

const sensor_dev_attr_temp1_crit: ref;

axiom sensor_dev_attr_temp1_crit == $sub.ref(0, 214150);

const sensor_dev_attr_temp1_max: ref;

axiom sensor_dev_attr_temp1_max == $sub.ref(0, 215230);

const sensor_dev_attr_temp1_min: ref;

axiom sensor_dev_attr_temp1_min == $sub.ref(0, 216310);

const sensor_dev_attr_temp1_input: ref;

axiom sensor_dev_attr_temp1_input == $sub.ref(0, 217390);

const {:count 33} amc6821_attrs: ref;

axiom amc6821_attrs == $sub.ref(0, 218678);

const amc6821_attr_grp: ref;

axiom amc6821_attr_grp == $sub.ref(0, 219726);

const pwminv: ref;

axiom pwminv == $sub.ref(0, 220754);

const init: ref;

axiom init == $sub.ref(0, 221782);

const ldv_mutex_update_lock_of_amc6821_data: ref;

axiom ldv_mutex_update_lock_of_amc6821_data == $sub.ref(0, 222810);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 223838);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 224866);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 225894);

const {:count 4} .str.44: ref;

axiom .str.44 == $sub.ref(0, 226922);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 33} .str.51: ref;

axiom .str.51 == $sub.ref(0, 227979);

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 229052);

const {:count 47} .str.10: ref;

axiom .str.10 == $sub.ref(0, 230123);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 2} .str.45: ref;

axiom .str.45 == $sub.ref(0, 231149);

const {:count 2} .str.46: ref;

axiom .str.46 == $sub.ref(0, 232175);

const .str: ref;

axiom .str == $sub.ref(0, 233207);

const {:count 25} .str.52: ref;

axiom .str.52 == $sub.ref(0, 234256);

const {:count 221} .str.2: ref;

axiom .str.2 == $sub.ref(0, 235501);

const {:count 24} .str.50: ref;

axiom .str.50 == $sub.ref(0, 236549);

const {:count 25} .str.49: ref;

axiom .str.49 == $sub.ref(0, 237598);

const {:count 27} .str.48: ref;

axiom .str.48 == $sub.ref(0, 238649);

const {:count 15} .str.47: ref;

axiom .str.47 == $sub.ref(0, 239688);

const {:count 19} .str.7: ref;

axiom .str.7 == $sub.ref(0, 240731);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 241788);

const {:count 13} .str.11: ref;

axiom .str.11 == $sub.ref(0, 242825);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 243864);

const {:count 24} .str.3: ref;

axiom .str.3 == $sub.ref(0, 244912);

const {:count 55} .str.4: ref;

axiom .str.4 == $sub.ref(0, 245991);

const {:count 38} .str.5: ref;

axiom .str.5 == $sub.ref(0, 247053);

const {:count 32} .str.6: ref;

axiom .str.6 == $sub.ref(0, 248109);

const {:count 12} .str.12: ref;

axiom .str.12 == $sub.ref(0, 249145);

const {:count 10} .str.13: ref;

axiom .str.13 == $sub.ref(0, 250179);

const {:count 10} .str.14: ref;

axiom .str.14 == $sub.ref(0, 251213);

const {:count 11} .str.15: ref;

axiom .str.15 == $sub.ref(0, 252248);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 253288);

const {:count 16} .str.17: ref;

axiom .str.17 == $sub.ref(0, 254328);

const {:count 17} .str.18: ref;

axiom .str.18 == $sub.ref(0, 255369);

const {:count 12} .str.19: ref;

axiom .str.19 == $sub.ref(0, 256405);

const {:count 10} .str.20: ref;

axiom .str.20 == $sub.ref(0, 257439);

const {:count 10} .str.21: ref;

axiom .str.21 == $sub.ref(0, 258473);

const {:count 11} .str.22: ref;

axiom .str.22 == $sub.ref(0, 259508);

const {:count 16} .str.23: ref;

axiom .str.23 == $sub.ref(0, 260548);

const {:count 16} .str.24: ref;

axiom .str.24 == $sub.ref(0, 261588);

const {:count 17} .str.25: ref;

axiom .str.25 == $sub.ref(0, 262629);

const {:count 12} .str.26: ref;

axiom .str.26 == $sub.ref(0, 263665);

const {:count 11} .str.27: ref;

axiom .str.27 == $sub.ref(0, 264700);

const {:count 9} .str.28: ref;

axiom .str.28 == $sub.ref(0, 265733);

const {:count 9} .str.29: ref;

axiom .str.29 == $sub.ref(0, 266766);

const {:count 11} .str.30: ref;

axiom .str.30 == $sub.ref(0, 267801);

const {:count 9} .str.31: ref;

axiom .str.31 == $sub.ref(0, 268834);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 269863);

const {:count 12} .str.33: ref;

axiom .str.33 == $sub.ref(0, 270899);

const {:count 24} .str.34: ref;

axiom .str.34 == $sub.ref(0, 271947);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 272992);

const {:count 21} .str.36: ref;

axiom .str.36 == $sub.ref(0, 274037);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 275082);

const {:count 23} .str.38: ref;

axiom .str.38 == $sub.ref(0, 276129);

const {:count 23} .str.39: ref;

axiom .str.39 == $sub.ref(0, 277176);

const {:count 23} .str.40: ref;

axiom .str.40 == $sub.ref(0, 278223);

const {:count 23} .str.41: ref;

axiom .str.41 == $sub.ref(0, 279270);

const {:count 23} .str.42: ref;

axiom .str.42 == $sub.ref(0, 280317);

const {:count 23} .str.43: ref;

axiom .str.43 == $sub.ref(0, 281364);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 282396);

const {:count 3} .str.1.114: ref;

axiom .str.1.114 == $sub.ref(0, 283423);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 284461);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 285489);

const main: ref;

axiom main == $sub.ref(0, 286521);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.38, $M.115, $M.35, $M.36, $M.37, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.197, $M.198, $M.199, $M.191, $M.190, $M.189, $M.230, $M.231, $M.194, $M.193, $M.173, $M.172, $M.171, $M.170, $M.235, $M.236, $M.237, $CurrAddr, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.188, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i1;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i1;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i1;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $i313: i64;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $i332: i64;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i340: i32;
  var $i341: i1;
  var $i342: i32;
  var $i343: i1;
  var $i344: i1;
  var $i345: i1;
  var $i346: i32;
  var $i347: i1;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $i351: i1;
  var $i352: i32;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i1;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $i368: i64;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $i380: i1;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $i387: i64;
  var $i389: i32;
  var $i390: i1;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i1;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $i406: i64;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i414: i32;
  var $i415: i1;
  var $i416: i32;
  var $i417: i1;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $i424: i32;
  var $i425: i1;
  var $i426: i32;
  var $i427: i1;
  var $i428: i1;
  var $i429: i1;
  var $i430: i32;
  var $i431: i1;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $i446: i1;
  var $i447: i1;
  var $i448: i1;
  var $i449: i32;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i64;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $p459: ref;
  var $p460: ref;
  var $i462: i32;
  var $i463: i1;
  var $i464: i32;
  var $i465: i1;
  var $i466: i1;
  var $i467: i1;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $i473: i64;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $i481: i32;
  var $i482: i1;
  var $i483: i32;
  var $i484: i1;
  var $i485: i1;
  var $i486: i1;
  var $i487: i32;
  var $i488: i1;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $i492: i64;
  var $i494: i32;
  var $i495: i1;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i500: i32;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i32;
  var $i505: i1;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $i510: i32;
  var $i511: i1;
  var $i512: i32;
  var $i513: i1;
  var $i514: i1;
  var $i515: i1;
  var $i516: i32;
  var $i517: i1;
  var $p518: ref;
  var $p519: ref;
  var $p520: ref;
  var $i521: i64;
  var $i523: i32;
  var $i524: i1;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $i529: i32;
  var $i530: i1;
  var $i531: i32;
  var $i532: i1;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $i539: i32;
  var $i540: i1;
  var $i541: i32;
  var $i542: i1;
  var $i543: i1;
  var $i544: i1;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $i550: i64;
  var $i552: i32;
  var $i553: i1;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var vslice_dummy_var_0: i32;
  var vslice_dummy_var_1: i32;
  var vslice_dummy_var_2: i32;
  var vslice_dummy_var_3: i64;
  var vslice_dummy_var_4: i64;
  var vslice_dummy_var_5: i64;
  var vslice_dummy_var_6: i64;
  var vslice_dummy_var_7: i64;
  var vslice_dummy_var_8: i64;
  var vslice_dummy_var_9: i64;
  var vslice_dummy_var_10: i64;
  var vslice_dummy_var_11: i64;
  var vslice_dummy_var_12: i64;
  var vslice_dummy_var_13: i64;
  var vslice_dummy_var_14: i64;
  var vslice_dummy_var_15: i64;
  var vslice_dummy_var_16: i64;
  var vslice_dummy_var_17: i64;
  var vslice_dummy_var_18: i64;
  var vslice_dummy_var_19: i64;
  var vslice_dummy_var_20: i64;
  var vslice_dummy_var_21: i64;
  var vslice_dummy_var_22: i64;
  var vslice_dummy_var_23: i64;
  var vslice_dummy_var_24: i64;
  var vslice_dummy_var_25: i64;
  var vslice_dummy_var_26: i64;
  var vslice_dummy_var_27: i64;
  var vslice_dummy_var_28: i64;
  var vslice_dummy_var_29: i64;
  var vslice_dummy_var_30: i64;
  var vslice_dummy_var_31: i64;
  var vslice_dummy_var_32: i64;
  var vslice_dummy_var_33: i64;
  var vslice_dummy_var_34: i64;
  var vslice_dummy_var_35: i64;
  var vslice_dummy_var_36: i64;
  var vslice_dummy_var_37: i64;
  var vslice_dummy_var_38: i64;
  var vslice_dummy_var_39: i64;
  var vslice_dummy_var_40: i64;
  var vslice_dummy_var_41: i64;
  var vslice_dummy_var_42: i64;
  var vslice_dummy_var_43: i64;
  var vslice_dummy_var_44: i64;
  var vslice_dummy_var_45: i64;
  var vslice_dummy_var_46: i64;
  var vslice_dummy_var_47: i64;
  var vslice_dummy_var_48: i64;
  var vslice_dummy_var_49: i64;
  var vslice_dummy_var_50: i64;
  var vslice_dummy_var_51: i64;

  $bb0:
    call {:si_unique_call 0} $initialize();
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} ldv_initialize();
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $M.0 := 0;
    call {:si_unique_call 3} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 4} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 5} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 6} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 7} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 8} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $M.6 := 0;
    call {:si_unique_call 9} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 10} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 11} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 12} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 13} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 14} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 15} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 16} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 17} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 18} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 19} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 20} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 21} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.19 := 0;
    call {:si_unique_call 22} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 23} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 24} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 25} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 26} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 27} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 28} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 29} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 30} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 31} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 32} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 33} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 34} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 35} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 36} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 37} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $p96, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $p105, $p106, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $p115, $p116, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $p127, $p128, $i129, $i131, $i132, $p133, $p134, $p135, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p145, $p146, $p147, $i148, $i150, $i151, $p152, $p153, $p154, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $p174, $p175, $p176, $i177, $i179, $i180, $p181, $p182, $p183, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $p194, $p195, $i196, $i198, $i199, $p200, $p201, $p202, $i204, $i205, $i206, $i207, $i208, $i209, $p210, $p211, $p212, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $p221, $p222, $i224, $i225, $i226, $i227, $i228, $i229, $p230, $p231, $p232, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $p241, $p242, $i244, $i245, $i246, $i247, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $p263, $p264, $i265, $i267, $i268, $p269, $p270, $p271, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p280, $p281, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $p291, $p292, $p293, $i294, $i296, $i297, $p298, $p299, $p300, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $p310, $p311, $p312, $i313, $i315, $i316, $p317, $p318, $p319, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $p330, $p331, $i332, $i334, $i335, $p336, $p337, $p338, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $p365, $p366, $p367, $i368, $i370, $i371, $p372, $p373, $p374, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $p385, $p386, $i387, $i389, $i390, $p391, $p392, $p393, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $p403, $p404, $p405, $i406, $i408, $i409, $p410, $p411, $p412, $i414, $i415, $i416, $i417, $i418, $i419, $p420, $p421, $p422, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $p432, $p433, $p434, $i435, $i437, $i438, $p439, $p440, $p441, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $p451, $p452, $p453, $i454, $i456, $i457, $p458, $p459, $p460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $p470, $p471, $p472, $i473, $i475, $i476, $p477, $p478, $p479, $i481, $i482, $i483, $i484, $i485, $i486, $i487, $i488, $p489, $p490, $p491, $i492, $i494, $i495, $p496, $p497, $p498, $i500, $i501, $i502, $i503, $i504, $i505, $p506, $p507, $p508, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $p518, $p519, $p520, $i521, $i523, $i524, $p525, $p526, $p527, $i529, $i530, $i531, $i532, $i533, $i534, $p535, $p536, $p537, $i539, $i540, $i541, $i542, $i543, $i544, $i545, $i546, $p547, $p548, $p549, $i550, $i552, $i553, $p554, $p555, $p556, vslice_dummy_var_0, vslice_dummy_var_1, vslice_dummy_var_2, vslice_dummy_var_3, vslice_dummy_var_4, vslice_dummy_var_5, vslice_dummy_var_6, vslice_dummy_var_7, vslice_dummy_var_8, vslice_dummy_var_9, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_12, vslice_dummy_var_13, vslice_dummy_var_14, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $i48, $i49, $p50, $p51, $i53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $p85, $p86, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $p95, $p96, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $p105, $p106, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $p115, $p116, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $p126, $p127, $p128, $i129, $i131, $i132, $p133, $p134, $p135, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p145, $p146, $p147, $i148, $i150, $i151, $p152, $p153, $p154, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $p174, $p175, $p176, $i177, $i179, $i180, $p181, $p182, $p183, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $p193, $p194, $p195, $i196, $i198, $i199, $p200, $p201, $p202, $i204, $i205, $i206, $i207, $i208, $i209, $p210, $p211, $p212, $i214, $i215, $i216, $i217, $i218, $i219, $p220, $p221, $p222, $i224, $i225, $i226, $i227, $i228, $i229, $p230, $p231, $p232, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $p241, $p242, $i244, $i245, $i246, $i247, $i248, $i249, $p250, $p251, $p252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $p263, $p264, $i265, $i267, $i268, $p269, $p270, $p271, $i273, $i274, $i275, $i276, $i277, $i278, $p279, $p280, $p281, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $p291, $p292, $p293, $i294, $i296, $i297, $p298, $p299, $p300, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $p310, $p311, $p312, $i313, $i315, $i316, $p317, $p318, $p319, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $p329, $p330, $p331, $i332, $i334, $i335, $p336, $p337, $p338, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i361, $i362, $i363, $i364, $p365, $p366, $p367, $i368, $i370, $i371, $p372, $p373, $p374, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $p385, $p386, $i387, $i389, $i390, $p391, $p392, $p393, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $p403, $p404, $p405, $i406, $i408, $i409, $p410, $p411, $p412, $i414, $i415, $i416, $i417, $i418, $i419, $p420, $p421, $p422, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $p432, $p433, $p434, $i435, $i437, $i438, $p439, $p440, $p441, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $p451, $p452, $p453, $i454, $i456, $i457, $p458, $p459, $p460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $p470, $p471, $p472, $i473, $i475, $i476, $p477, $p478, $p479, $i481, $i482, $i483, $i484, $i485, $i486, $i487, $i488, $p489, $p490, $p491, $i492, $i494, $i495, $p496, $p497, $p498, $i500, $i501, $i502, $i503, $i504, $i505, $p506, $p507, $p508, $i510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $p518, $p519, $p520, $i521, $i523, $i524, $p525, $p526, $p527, $i529, $i530, $i531, $i532, $i533, $i534, $p535, $p536, $p537, $i539, $i540, $i541, $i542, $i543, $i544, $i545, $i546, $p547, $p548, $p549, $i550, $i552, $i553, $p554, $p555, $p556, vslice_dummy_var_0, vslice_dummy_var_1, vslice_dummy_var_2, vslice_dummy_var_3, vslice_dummy_var_4, vslice_dummy_var_5, vslice_dummy_var_6, vslice_dummy_var_7, vslice_dummy_var_8, vslice_dummy_var_9, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_12, vslice_dummy_var_13, vslice_dummy_var_14, vslice_dummy_var_15, vslice_dummy_var_16, vslice_dummy_var_17, vslice_dummy_var_18, vslice_dummy_var_19, vslice_dummy_var_20, vslice_dummy_var_21, vslice_dummy_var_22, vslice_dummy_var_23, vslice_dummy_var_24, vslice_dummy_var_25, vslice_dummy_var_26, vslice_dummy_var_27, vslice_dummy_var_28, vslice_dummy_var_29, vslice_dummy_var_30, vslice_dummy_var_31, vslice_dummy_var_32, vslice_dummy_var_33, vslice_dummy_var_34, vslice_dummy_var_35, vslice_dummy_var_36, vslice_dummy_var_37, vslice_dummy_var_38, vslice_dummy_var_39, vslice_dummy_var_40, vslice_dummy_var_41, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i539 := $M.34;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i540 := $ne.i32($i539, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb603:
    assume $i540 == 1;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} $i541 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i541);
    call {:si_unique_call 287} {:cexpr "tmp___33"} boogie_si_record_i32($i541);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    $i542 := $slt.i32($i541, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb607:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i541, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    assume !($i543 == 1);
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb608:
    assume $i543 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i552 := $M.34;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i552, 1);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb617:
    assume $i553 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p554 := $M.165;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p555 := $M.166;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p556 := $M.169;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_51 := get_temp_auto_point_temp($p554, $p555, $p556);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb619;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb606:
    assume $i542 == 1;
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i541, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    assume !($i544 == 1);
    goto $bb610;

  $bb611:
    assume $i544 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i545 := $M.34;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 1);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb613:
    assume $i546 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p547 := $M.165;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p548 := $M.166;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p549 := $M.167;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i550 := $M.168;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_50 := set_temp_auto_point_temp($p547, $p548, $p549, $i550);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 289} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    goto $bb615;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i529 := $M.33;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i530 := $ne.i32($i529, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb592:
    assume $i530 == 1;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} $i531 := __VERIFIER_nondet_int();
    call {:si_unique_call 281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i531);
    call {:si_unique_call 282} {:cexpr "tmp___32"} boogie_si_record_i32($i531);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb595:
    assume $i532 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i533 := $M.33;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb597:
    assume $i534 == 1;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p535 := $M.162;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p536 := $M.163;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p537 := $M.164;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_49 := get_temp_alarm($p535, $p536, $p537);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 284} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb599;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i510 := $M.32;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i511 := $ne.i32($i510, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb573:
    assume $i511 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} $i512 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i512);
    call {:si_unique_call 275} {:cexpr "tmp___31"} boogie_si_record_i32($i512);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $i513 := $slt.i32($i512, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i512, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    assume !($i514 == 1);
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb578:
    assume $i514 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i523 := $M.32;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i523, 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb587:
    assume $i524 == 1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p525 := $M.157;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p526 := $M.158;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p527 := $M.161;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_48 := get_temp_auto_point_temp($p525, $p526, $p527);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 279} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb589;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb576:
    assume $i513 == 1;
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i512, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    assume !($i515 == 1);
    goto $bb580;

  $bb581:
    assume $i515 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i516 := $M.32;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb583:
    assume $i517 == 1;
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p518 := $M.157;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p519 := $M.158;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p520 := $M.159;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i521 := $M.160;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} vslice_dummy_var_47 := set_temp_auto_point_temp($p518, $p519, $p520, $i521);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 277} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb585;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i8 == 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i500 := $M.31;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i501 := $ne.i32($i500, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb562:
    assume $i501 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i502);
    call {:si_unique_call 270} {:cexpr "tmp___30"} boogie_si_record_i32($i502);
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb565:
    assume $i503 == 1;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i504 := $M.31;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i504, 1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb567:
    assume $i505 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p506 := $M.154;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p507 := $M.155;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p508 := $M.156;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_46 := get_pwm1_auto_point_pwm($p506, $p507, $p508);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 272} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    goto $bb569;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i8 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i481 := $M.30;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i482 := $ne.i32($i481, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb543:
    assume $i482 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} $i483 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i483);
    call {:si_unique_call 263} {:cexpr "tmp___29"} boogie_si_record_i32($i483);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $i484 := $slt.i32($i483, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i483, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    assume !($i485 == 1);
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb548:
    assume $i485 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i494 := $M.30;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i494, 1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  $bb558:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb557:
    assume $i495 == 1;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p496 := $M.149;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p497 := $M.150;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p498 := $M.153;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_45 := get_fan($p496, $p497, $p498);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 267} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb559;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb546:
    assume $i484 == 1;
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i483, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    assume !($i486 == 1);
    goto $bb550;

  $bb551:
    assume $i486 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i487 := $M.30;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb553:
    assume $i488 == 1;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p489 := $M.149;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p490 := $M.150;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p491 := $M.151;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i492 := $M.152;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} vslice_dummy_var_44 := set_fan($p489, $p490, $p491, $i492);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 265} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb555;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i10 == 1);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i462 := $M.29;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i463 := $ne.i32($i462, 0);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb524:
    assume $i463 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i464 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i464);
    call {:si_unique_call 256} {:cexpr "tmp___28"} boogie_si_record_i32($i464);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $i465 := $slt.i32($i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb529:
    assume $i466 == 1;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i475 := $M.29;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  $bb539:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb538:
    assume $i476 == 1;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p477 := $M.144;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p478 := $M.145;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p479 := $M.148;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_43 := get_pwm1($p477, $p478, $p479);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 260} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb540;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb527:
    assume $i465 == 1;
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i464, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb532, $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb531;

  $bb532:
    assume $i467 == 1;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i468 := $M.29;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb534:
    assume $i469 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p470 := $M.144;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p471 := $M.145;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p472 := $M.146;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i473 := $M.147;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_42 := set_pwm1($p470, $p471, $p472, $i473);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 258} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb536;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i10 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i443 := $M.28;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i444 := $ne.i32($i443, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb505:
    assume $i444 == 1;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} $i445 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i445);
    call {:si_unique_call 249} {:cexpr "tmp___27"} boogie_si_record_i32($i445);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $i446 := $slt.i32($i445, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i445, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    assume !($i447 == 1);
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb510:
    assume $i447 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i456 := $M.28;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb519:
    assume $i457 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p458 := $M.139;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p459 := $M.140;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p460 := $M.143;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_41 := get_pwm1_auto_point_pwm($p458, $p459, $p460);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 253} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb521;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb508:
    assume $i446 == 1;
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i445, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    assume !($i448 == 1);
    goto $bb512;

  $bb513:
    assume $i448 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i449 := $M.28;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb515:
    assume $i450 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p451 := $M.139;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p452 := $M.140;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p453 := $M.141;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i454 := $M.142;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_40 := set_pwm1_auto_point_pwm($p451, $p452, $p453, $i454);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 251} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb517;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i11 == 1);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i424 := $M.27;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 0);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb486:
    assume $i425 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} $i426 := __VERIFIER_nondet_int();
    call {:si_unique_call 241} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i426);
    call {:si_unique_call 242} {:cexpr "tmp___26"} boogie_si_record_i32($i426);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $i427 := $slt.i32($i426, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i426, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    assume !($i428 == 1);
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb491:
    assume $i428 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i437 := $M.27;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb500:
    assume $i438 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p439 := $M.134;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p440 := $M.135;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p441 := $M.138;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_39 := get_temp_auto_point_temp($p439, $p440, $p441);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 246} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto $bb502;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb489:
    assume $i427 == 1;
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i426, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    assume !($i429 == 1);
    goto $bb493;

  $bb494:
    assume $i429 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i430 := $M.27;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i430, 1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb496:
    assume $i431 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p432 := $M.134;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p433 := $M.135;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p434 := $M.136;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i435 := $M.137;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} vslice_dummy_var_38 := set_temp_auto_point_temp($p432, $p433, $p434, $i435);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 244} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb498;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i11 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i414 := $M.26;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb475:
    assume $i415 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i416 := __VERIFIER_nondet_int();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i416);
    call {:si_unique_call 237} {:cexpr "tmp___25"} boogie_si_record_i32($i416);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb478:
    assume $i417 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i418 := $M.26;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb480:
    assume $i419 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p420 := $M.131;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p421 := $M.132;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p422 := $M.133;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_37 := get_temp_auto_point_temp($p420, $p421, $p422);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 239} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    goto $bb482;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i14 == 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i395 := $M.25;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb456:
    assume $i396 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} $i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i397);
    call {:si_unique_call 230} {:cexpr "tmp___24"} boogie_si_record_i32($i397);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $i398 := $slt.i32($i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i399 == 1);
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb461:
    assume $i399 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i408 := $M.25;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb470:
    assume $i409 == 1;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p410 := $M.126;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p411 := $M.127;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p412 := $M.130;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_36 := get_temp($p410, $p411, $p412);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 234} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb472;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb459:
    assume $i398 == 1;
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb463;

  $bb464:
    assume $i400 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i401 := $M.25;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb466:
    assume $i402 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p403 := $M.126;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p404 := $M.127;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p405 := $M.128;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i406 := $M.129;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} vslice_dummy_var_35 := set_temp($p403, $p404, $p405, $i406);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 232} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb468;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i14 == 1;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i376 := $M.24;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb437:
    assume $i377 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i378 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i378);
    call {:si_unique_call 223} {:cexpr "tmp___23"} boogie_si_record_i32($i378);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $i379 := $slt.i32($i378, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i378, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb442:
    assume $i380 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i389 := $M.24;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, 1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb451:
    assume $i390 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p391 := $M.121;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p392 := $M.122;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p393 := $M.125;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_34 := get_temp($p391, $p392, $p393);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 227} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto $bb453;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb440:
    assume $i379 == 1;
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i378, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb444;

  $bb445:
    assume $i381 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i382 := $M.24;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb447:
    assume $i383 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p384 := $M.121;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p385 := $M.122;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p386 := $M.123;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i387 := $M.124;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} vslice_dummy_var_33 := set_temp($p384, $p385, $p386, $i387);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 225} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb449;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i0, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i15 == 1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i357 := $M.23;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb418:
    assume $i358 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} $i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i359);
    call {:si_unique_call 216} {:cexpr "tmp___22"} boogie_si_record_i32($i359);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    $i360 := $slt.i32($i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb423:
    assume $i361 == 1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i370 := $M.23;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb432:
    assume $i371 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p372 := $M.116;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p373 := $M.117;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p374 := $M.120;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_32 := get_fan1_div($p372, $p373, $p374);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 220} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb434;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb421:
    assume $i360 == 1;
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb425;

  $bb426:
    assume $i362 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i363 := $M.23;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i363, 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb428:
    assume $i364 == 1;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p365 := $M.116;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p366 := $M.117;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p367 := $M.118;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i368 := $M.119;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_31 := set_fan1_div($p365, $p366, $p367, $i368);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 218} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb430;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i15 == 1;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i340 := $M.22;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb389:
    assume $i341 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} $i342 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i342);
    call {:si_unique_call 173} {:cexpr "tmp___21"} boogie_si_record_i32($i342);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i342, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i342, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb394:
    assume $i344 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i350 := $M.22;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 1);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb407:
    assume $i351 == 1;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i352 := amc6821_driver_init();
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.115 := $i352;
    call {:si_unique_call 178} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i352);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i353 := $M.115;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $i355 := $M.115;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i356 := $ne.i32($i355, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb412:
    assume $i356 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 213} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_check_final_state();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb409:
    assume $i354 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 179} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 180} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 181} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 182} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 183} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 184} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 185} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 186} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 187} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 188} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 189} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 190} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 191} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 192} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 193} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 194} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 195} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 196} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 197} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 198} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 199} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 200} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 201} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 202} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 203} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 204} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 205} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 206} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 207} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 208} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 209} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 210} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 211} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 212} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb392:
    assume $i343 == 1;
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i342, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb396;

  $bb397:
    assume $i345 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i346 := $M.22;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 3);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb399:
    assume $i347 == 1;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i348 := $M.21;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb401;

  $bb402:
    assume $i349 == 1;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} amc6821_driver_exit();
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 175} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb26:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i0, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i0, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i17 == 1);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i321 := $M.20;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb370:
    assume $i322 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} $i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i323);
    call {:si_unique_call 166} {:cexpr "tmp___20"} boogie_si_record_i32($i323);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb375:
    assume $i325 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i334 := $M.20;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb384:
    assume $i335 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p336 := $M.110;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p337 := $M.111;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p338 := $M.114;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_30 := get_temp($p336, $p337, $p338);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 170} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb386;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb373:
    assume $i324 == 1;
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb377;

  $bb378:
    assume $i326 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i327 := $M.20;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb380:
    assume $i328 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p329 := $M.110;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p330 := $M.111;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p331 := $M.112;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i332 := $M.113;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_29 := set_temp($p329, $p330, $p331, $i332);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 168} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    goto $bb382;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i17 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i302 := $M.19;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i303 := $ne.i32($i302, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb351:
    assume $i303 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i304 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i304);
    call {:si_unique_call 159} {:cexpr "tmp___19"} boogie_si_record_i32($i304);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i304, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i304, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb356:
    assume $i306 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i315 := $M.19;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb365:
    assume $i316 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p317 := $M.105;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p318 := $M.106;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p319 := $M.109;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_28 := get_pwm1_enable($p317, $p318, $p319);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 163} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb367;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb354:
    assume $i305 == 1;
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i304, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb358;

  $bb359:
    assume $i307 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i308 := $M.19;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb361:
    assume $i309 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p310 := $M.105;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p311 := $M.106;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p312 := $M.107;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i313 := $M.108;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_27 := set_pwm1_enable($p310, $p311, $p312, $i313);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 161} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb363;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i0, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i18 == 1);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i283 := $M.18;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb332:
    assume $i284 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} $i285 := __VERIFIER_nondet_int();
    call {:si_unique_call 151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i285);
    call {:si_unique_call 152} {:cexpr "tmp___18"} boogie_si_record_i32($i285);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i285, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i285, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb337:
    assume $i287 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i296 := $M.18;
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb346:
    assume $i297 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p298 := $M.100;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p299 := $M.101;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p300 := $M.104;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_26 := get_temp($p298, $p299, $p300);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 156} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb348;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb335:
    assume $i286 == 1;
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i285, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb339;

  $bb340:
    assume $i288 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i289 := $M.18;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb342:
    assume $i290 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p291 := $M.100;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p292 := $M.101;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p293 := $M.102;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i294 := $M.103;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_25 := set_temp($p291, $p292, $p293, $i294);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 154} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb344;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i18 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i273 := $M.17;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb321:
    assume $i274 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i275);
    call {:si_unique_call 147} {:cexpr "tmp___17"} boogie_si_record_i32($i275);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb324:
    assume $i276 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i277 := $M.17;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb326:
    assume $i278 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p279 := $M.97;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p280 := $M.98;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p281 := $M.99;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_24 := get_pwm1_auto_point_pwm($p279, $p280, $p281);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 149} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb328;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i0, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i23 == 1);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i254 := $M.16;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb302:
    assume $i255 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i256 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i256);
    call {:si_unique_call 140} {:cexpr "tmp___16"} boogie_si_record_i32($i256);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i257 := $slt.i32($i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb307:
    assume $i258 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i267 := $M.16;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 1);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb316:
    assume $i268 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p269 := $M.92;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p270 := $M.93;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p271 := $M.96;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_23 := get_temp($p269, $p270, $p271);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 144} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb318;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb305:
    assume $i257 == 1;
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i256, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb309;

  $bb310:
    assume $i259 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i260 := $M.16;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb312:
    assume $i261 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p262 := $M.92;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p263 := $M.93;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p264 := $M.94;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i265 := $M.95;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_22 := set_temp($p262, $p263, $p264, $i265);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 142} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    goto $bb314;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i23 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i244 := $M.15;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb291:
    assume $i245 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i246 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i246);
    call {:si_unique_call 135} {:cexpr "tmp___15"} boogie_si_record_i32($i246);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb294:
    assume $i247 == 1;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i248 := $M.15;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 1);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb296:
    assume $i249 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p250 := $M.89;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p251 := $M.90;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p252 := $M.91;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} vslice_dummy_var_21 := get_fan1_fault($p250, $p251, $p252);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 137} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb298;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i22 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i234 := $M.14;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i235 := $ne.i32($i234, 0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb280:
    assume $i235 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i236 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i236);
    call {:si_unique_call 130} {:cexpr "tmp___14"} boogie_si_record_i32($i236);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb283:
    assume $i237 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i238 := $M.14;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb285:
    assume $i239 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p240 := $M.86;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p241 := $M.87;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p242 := $M.88;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_20 := get_temp_alarm($p240, $p241, $p242);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 132} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb287;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i0, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i24 == 1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i224 := $M.13;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb269:
    assume $i225 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i226);
    call {:si_unique_call 125} {:cexpr "tmp___13"} boogie_si_record_i32($i226);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb272:
    assume $i227 == 1;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i228 := $M.13;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb274:
    assume $i229 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p230 := $M.83;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p231 := $M.84;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p232 := $M.85;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_19 := get_temp_alarm($p230, $p231, $p232);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 127} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb276;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i24 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i214 := $M.12;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb258:
    assume $i215 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i216 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i216);
    call {:si_unique_call 120} {:cexpr "tmp___12"} boogie_si_record_i32($i216);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb261:
    assume $i217 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i218 := $M.12;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb263:
    assume $i219 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p220 := $M.80;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p221 := $M.81;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p222 := $M.82;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_18 := get_temp($p220, $p221, $p222);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 122} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i0, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i26 == 1);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i204 := $M.11;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb247:
    assume $i205 == 1;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i206 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i206);
    call {:si_unique_call 115} {:cexpr "tmp___11"} boogie_si_record_i32($i206);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb250:
    assume $i207 == 1;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i208 := $M.11;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb252:
    assume $i209 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p210 := $M.77;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p211 := $M.78;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p212 := $M.79;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_17 := get_temp_alarm($p210, $p211, $p212);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 117} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb254;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i26 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i185 := $M.10;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb228:
    assume $i186 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i187 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i187);
    call {:si_unique_call 108} {:cexpr "tmp___10"} boogie_si_record_i32($i187);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i187, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i187, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb233:
    assume $i189 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i198 := $M.10;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb242:
    assume $i199 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p200 := $M.72;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p201 := $M.73;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p202 := $M.76;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_16 := get_fan($p200, $p201, $p202);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 112} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb244;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb231:
    assume $i188 == 1;
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i187, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb235;

  $bb236:
    assume $i190 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i191 := $M.10;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb238:
    assume $i192 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p193 := $M.72;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p194 := $M.73;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p195 := $M.74;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i196 := $M.75;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_15 := set_fan($p193, $p194, $p195, $i196);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 110} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb240;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i27 == 1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i166 := $M.9;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb209:
    assume $i167 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i168 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i168);
    call {:si_unique_call 101} {:cexpr "tmp___9"} boogie_si_record_i32($i168);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i169 := $slt.i32($i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb214:
    assume $i170 == 1;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i179 := $M.9;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb223:
    assume $i180 == 1;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p181 := $M.67;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p182 := $M.68;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p183 := $M.71;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_14 := get_temp($p181, $p182, $p183);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 105} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb225;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb212:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i168, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb216;

  $bb217:
    assume $i171 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i172 := $M.9;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb219:
    assume $i173 == 1;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p174 := $M.67;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p175 := $M.68;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p176 := $M.69;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i177 := $M.70;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} vslice_dummy_var_13 := set_temp($p174, $p175, $p176, $i177);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 103} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb221;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i27 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i156 := $M.8;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb198:
    assume $i157 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i158 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i158);
    call {:si_unique_call 96} {:cexpr "tmp___8"} boogie_si_record_i32($i158);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb201:
    assume $i159 == 1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i160 := $M.8;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb203:
    assume $i161 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p162 := $M.64;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p163 := $M.65;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p164 := $M.66;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_12 := get_temp_alarm($p162, $p163, $p164);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 98} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb205;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i30 == 1);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i137 := $M.7;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb179:
    assume $i138 == 1;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i139 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i139);
    call {:si_unique_call 89} {:cexpr "tmp___7"} boogie_si_record_i32($i139);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i139, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i139, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb184:
    assume $i141 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i150 := $M.7;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb193:
    assume $i151 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p152 := $M.59;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p153 := $M.60;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p154 := $M.63;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_11 := get_temp_auto_point_temp($p152, $p153, $p154);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 93} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i139, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb186;

  $bb187:
    assume $i142 == 1;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i143 := $M.7;
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 1);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i144 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p145 := $M.59;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p146 := $M.60;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p147 := $M.61;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i148 := $M.62;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_10 := set_temp_auto_point_temp($p145, $p146, $p147, $i148);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 91} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb191;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i30 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i118 := $M.6;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb160:
    assume $i119 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i120);
    call {:si_unique_call 82} {:cexpr "tmp___6"} boogie_si_record_i32($i120);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb165:
    assume $i122 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i131 := $M.6;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb174:
    assume $i132 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p133 := $M.54;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p134 := $M.55;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p135 := $M.58;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_9 := get_temp_auto_point_temp($p133, $p134, $p135);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 86} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb167;

  $bb168:
    assume $i123 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i124 := $M.6;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb170:
    assume $i125 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p126 := $M.54;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p127 := $M.55;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p128 := $M.56;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i129 := $M.57;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_8 := set_temp_auto_point_temp($p126, $p127, $p128, $i129);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 84} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb172;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i31 == 1);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i108 := $M.5;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb149:
    assume $i109 == 1;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} $i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 76} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i110);
    call {:si_unique_call 77} {:cexpr "tmp___5"} boogie_si_record_i32($i110);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb152:
    assume $i111 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i112 := $M.5;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i113 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p114 := $M.51;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p115 := $M.52;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p116 := $M.53;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_7 := get_fan($p114, $p115, $p116);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 79} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb156;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i31 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i98 := $M.4;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb138:
    assume $i99 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
    call {:si_unique_call 72} {:cexpr "tmp___4"} boogie_si_record_i32($i100);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb141:
    assume $i101 == 1;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i102 := $M.4;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i103 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p104 := $M.48;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p105 := $M.49;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p106 := $M.50;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} vslice_dummy_var_6 := get_temp_alarm($p104, $p105, $p106);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 74} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i33 == 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i88 := $M.3;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb127:
    assume $i89 == 1;
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i90);
    call {:si_unique_call 67} {:cexpr "tmp___3"} boogie_si_record_i32($i90);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb130:
    assume $i91 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i92 := $M.3;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb132:
    assume $i93 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p94 := $M.45;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p95 := $M.46;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p96 := $M.47;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_5 := get_pwm1_auto_channels_temp($p94, $p95, $p96);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 69} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto $bb134;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i33 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i78 := $M.2;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb116:
    assume $i79 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} $i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i80);
    call {:si_unique_call 62} {:cexpr "tmp___2"} boogie_si_record_i32($i80);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb119:
    assume $i81 == 1;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i82 := $M.2;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb121:
    assume $i83 == 1;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p84 := $M.42;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p85 := $M.43;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p86 := $M.44;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} vslice_dummy_var_4 := get_temp2_fault($p84, $p85, $p86);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 64} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i34 == 1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i68 := $M.1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb105:
    assume $i69 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 57} {:cexpr "tmp___1"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb108:
    assume $i71 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i72 := $M.1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i73 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p74 := $M.39;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p75 := $M.40;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p76 := $M.41;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_3 := get_temp($p74, $p75, $p76);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 59} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb17;

  $bb72:
    assume $i35 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i36 := $M.0;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb74:
    assume $i37 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb81:
    assume $i41 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i62 := $M.0;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb99:
    assume $i63 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p64 := $M.35;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_2 := amc6821_remove($p64);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 53} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i66 := $M.21;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i66, 1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.21 := $i67;
    call {:si_unique_call 54} {:cexpr "ref_cnt"} boogie_si_record_i32($i67);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb79:
    assume $i40 == 1;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i53 := $M.0;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb93:
    assume $i54 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p55 := $M.35;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p56 := $M.37;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i57 := amc6821_probe($p55, $p56);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.38 := $i57;
    call {:si_unique_call 49} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i57);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i58 := $M.38;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i59 == 1;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.0 := 2;
    call {:si_unique_call 50} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i60 := $M.21;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $M.21 := $i61;
    call {:si_unique_call 51} {:cexpr "ref_cnt"} boogie_si_record_i32($i61);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb77:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb83;

  $bb84:
    assume $i42 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i43 := $M.0;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i48 := $M.0;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i49 == 1;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p50 := $M.35;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p51 := $M.36;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_1 := amc6821_detect($p50, $p51);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.0 := 2;
    call {:si_unique_call 47} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i44 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p45 := $M.35;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p46 := $M.36;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_0 := amc6821_detect($p45, $p46);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 45} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb104_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 40} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 287553);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 288585);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.170, $M.171, $M.172, $M.173;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.170 := 1;
    call {:si_unique_call 292} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.171 := 1;
    call {:si_unique_call 293} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $M.172 := 1;
    call {:si_unique_call 294} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.173 := 1;
    call {:si_unique_call 295} {:cexpr "ldv_mutex_update_lock_of_amc6821_data"} boogie_si_record_i32(1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    return;
}



const amc6821_detect: ref;

axiom amc6821_detect == $sub.ref(0, 289617);

procedure amc6821_detect($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $CurrAddr;



implementation amc6821_detect($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $i49: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(24, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.174, $p6);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(2, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.175, $p8);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 300} {:cexpr "address"} boogie_si_record_i32($i10);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p11, .str);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p12, .str.1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p13, .str.2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p14, .str.3);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.180, $p16);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 898);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p16, $i19);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p20, 1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.181, $p21);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 302} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i29 := i2c_check_functionality($p7, 1572864);
    call {:si_unique_call 305} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i50 := i2c_smbus_read_byte_data($p0, 61);
    call {:si_unique_call 310} {:cexpr "dev_id"} boogie_si_record_i32($i50);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i51 := i2c_smbus_read_byte_data($p0, 62);
    call {:si_unique_call 312} {:cexpr "comp_id"} boogie_si_record_i32($i51);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i50, 33);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i52 == 1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i51, 73);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i72 := i2c_smbus_read_byte_data($p0, $sub.i8(0, 67));
    call {:si_unique_call 317} {:cexpr "dev_id"} boogie_si_record_i32($i72);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i73 := i2c_smbus_read_byte_data($p0, $sub.i8(0, 66));
    call {:si_unique_call 319} {:cexpr "comp_id"} boogie_si_record_i32($i73);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i72, 33);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i74 == 1);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i73, 73);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} vslice_dummy_var_56 := _dev_info.ref.ref.i32($p94, .str.6, $i10);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_57 := strlcpy($p97, .str, 20);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p76, .str);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p77, .str.1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p78, .str.2);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p79, .str.5);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.180, $p81);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 925);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p81, $i84);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p85, 1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.181, $p86);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 321} {:cexpr "tmp___3"} boogie_si_record_i64($i90);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 19);
    goto $bb9;

  $bb25:
    assume $i91 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_55 := __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p92, .str.5, $i10);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p54, .str);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p55, .str.1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p56, .str.2);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p57, .str.5);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.180, $p59);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 912);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p59, $i62);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p63, 1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.181, $p64);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 314} {:cexpr "tmp___2"} boogie_si_record_i64($i68);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 19);
    goto $bb9;

  $bb16:
    assume $i69 == 1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vslice_dummy_var_54 := __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p70, .str.5, $i10);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb12;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p31, .str);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p32, .str.1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p33, .str.2);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p34, .str.4);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.180, $p36);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 903);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p36, $i39);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p40, 1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.181, $p41);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 307} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 19);
    goto $bb9;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_53 := __dynamic_dev_dbg.ref.ref.ref($p3, $p47, .str.4);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_52 := __dynamic_dev_dbg.ref.ref.ref($p2, $p27, .str.3);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const amc6821_probe: ref;

axiom amc6821_probe == $sub.ref(0, 290649);

procedure amc6821_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.182, $CurrAddr;



implementation amc6821_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p33: ref;
  var $i8: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p4 := devm_kzalloc($p3, 248, 208);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} i2c_set_clientdata($p0, $p9);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} __mutex_init($p10, .str.7, $p2);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i11 := amc6821_init_client($p0);
    call {:si_unique_call 330} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i15 := sysfs_create_group($p14, amc6821_attr_grp);
    call {:si_unique_call 332} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p18 := hwmon_device_register($p17);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.182 := $store.ref($M.182, $p19, $p18);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.182, $p20);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i23 := IS_ERR($p22);
    call {:si_unique_call 335} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.182, $p25);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i28 := PTR_ERR($p27);
    call {:si_unique_call 337} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    call {:si_unique_call 338} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_58 := dev_err.ref.ref($p30, .str.8);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} sysfs_remove_group($p33, amc6821_attr_grp);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i8 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const amc6821_remove: ref;

axiom amc6821_remove == $sub.ref(0, 291681);

procedure amc6821_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation amc6821_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p1 := i2c_get_clientdata($p0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.182, $p3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} hwmon_device_unregister($p4);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} sysfs_remove_group($p6, amc6821_attr_grp);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const get_temp: ref;

axiom get_temp == $sub.ref(0, 292713);

procedure get_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p3 := amc6821_update_device($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.183, $p5);
    call {:si_unique_call 345} {:cexpr "ix"} boogie_si_record_i32($i6);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref($i7, 4));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.182, $p9);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 1000);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i12 := sprintf.ref.ref.i32($p2, .str.44, $i11);
    call {:si_unique_call 347} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const get_temp2_fault: ref;

axiom get_temp2_fault == $sub.ref(0, 293745);

procedure get_temp2_fault($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_temp2_fault($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i12: i32;
  var $i13: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p3 := amc6821_update_device($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 32);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i12 := sprintf.ref.ref($p2, .str.46);
    call {:si_unique_call 352} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i9 := sprintf.ref.ref($p2, .str.45);
    call {:si_unique_call 350} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const get_pwm1_auto_channels_temp: ref;

axiom get_pwm1_auto_channels_temp == $sub.ref(0, 294777);

procedure get_pwm1_auto_channels_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_pwm1_auto_channels_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p3 := amc6821_update_device($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(242, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i7 := sprintf.ref.ref.i32($p2, .str.44, $i6);
    call {:si_unique_call 355} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const get_temp_alarm: ref;

axiom get_temp_alarm == $sub.ref(0, 295809);

procedure get_temp_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $CurrAddr, $M.173, assertsPassed;



implementation get_temp_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i21: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i32;
  var $i70: i64;
  var $i64: i64;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p4 := amc6821_update_device($p0);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.184, $p6);
    call {:si_unique_call 358} {:cexpr "ix"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p47, .str);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p48, .str.47);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p49, .str.2);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p50, .str.48);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.180, $p52);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 365);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p52, $i55);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p56, 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.181, $p57);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 366} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i64 := $sub.i64(0, 22);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p0, .str.48, $i7);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(244, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.182, $p42);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 8);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 361} {:cexpr "flag"} boogie_si_record_i8($i46);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i21 := $i46;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i21);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i66 == 1);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i69 := sprintf.ref.ref($p2, .str.46);
    call {:si_unique_call 371} {:cexpr "tmp___2"} boogie_si_record_i32($i69);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i64 := $i70;
    goto $bb24;

  $bb25:
    assume $i66 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i67 := sprintf.ref.ref($p2, .str.45);
    call {:si_unique_call 369} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i64 := $i68;
    goto $bb24;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.182, $p37);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 4);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    call {:si_unique_call 360} {:cexpr "flag"} boogie_si_record_i8($i41);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i21 := $i41;
    goto $bb19;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.182, $p32);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 8);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 359} {:cexpr "flag"} boogie_si_record_i8($i36);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i21 := $i36;
    goto $bb19;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb15:
    assume $i14 == 1;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(244, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.182, $p27);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    call {:si_unique_call 363} {:cexpr "flag"} boogie_si_record_i8($i31);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    goto $bb19;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.182, $p22);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 64);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    call {:si_unique_call 362} {:cexpr "flag"} boogie_si_record_i8($i26);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb19;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.182, $p16);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 128);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 364} {:cexpr "flag"} boogie_si_record_i8($i20);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb19;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const get_fan: ref;

axiom get_fan == $sub.ref(0, 296841);

procedure get_fan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_fan($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p3 := amc6821_update_device($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.185, $p5);
    call {:si_unique_call 373} {:cexpr "ix"} boogie_si_record_i32($i6);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref($i7, 2));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.182, $p9);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i6);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref($i16, 2));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.182, $p18);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i21 := $sdiv.i32(6000000, $i20);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i22 := sprintf.ref.ref.i32($p2, .str.44, $i21);
    call {:si_unique_call 377} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i13 := sprintf.ref.ref($p2, .str.46);
    call {:si_unique_call 375} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const set_temp_auto_point_temp: ref;

axiom set_temp_auto_point_temp == $sub.ref(0, 297873);

procedure set_temp_auto_point_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.173, $CurrAddr, assertsPassed;



implementation set_temp_auto_point_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p27: ref;
  var $i28: i8;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i32;
  var $i61: i8;
  var $i62: i8;
  var $i63: i64;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i32;
  var $i69: i8;
  var $i70: i8;
  var $i71: i64;
  var $i72: i32;
  var $i73: i8;
  var $i74: i8;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i64;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i64;
  var $i117: i32;
  var $i118: i8;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $i148: i8;
  var $i149: i32;
  var $i150: i8;
  var $i151: i64;
  var $i152: i1;
  var $i153: i64;
  var $i82: i64;
  var $p154: ref;
  var $i21: i64;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 381} {:cexpr "set_temp_auto_point_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p9 := amc6821_update_device($p0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.186, $p11);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 383} {:cexpr "ix"} boogie_si_record_i32($i13);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.187, $p15);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    call {:si_unique_call 384} {:cexpr "nr"} boogie_si_record_i32($i17);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i18 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 386} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p31, .str);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p32, .str.49);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p33, .str.2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p34, .str.50);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.180, $p36);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 571);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p36, $i39);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p40, 1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.181, $p41);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 389} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p0, .str.50, $i17);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(235, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p29, 37;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(176, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p48, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_mutex_lock_14($p49);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p120, .str);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p121, .str.49);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p122, .str.2);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p123, .str.48);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.180, $p125);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 611);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p125, $i128);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p129, 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.181, $p130);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 411} {:cexpr "tmp___9"} boogie_si_record_i64($i134);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i82 := $sub.i64(0, 22);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} ldv_mutex_unlock_15($p154);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i21 := $i82;
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i135 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_62 := __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p0, .str.48, $i13);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i52 == 1;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.188, $p4);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i111 := $sdiv.i64($i110, 1000);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.182, $p112);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, 1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i115);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i117 := SENSORS_LIMIT($i111, $i116, 255);
    call {:si_unique_call 396} {:cexpr "tmp___8"} boogie_si_record_i32($i117);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p27, $mul.ref(2, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p119, $i118);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(2, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.182, $p138);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.182, $p142);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i145 := $sub.i32($i140, $i144);
    call {:si_unique_call 407} {:cexpr "dpwm"} boogie_si_record_i32($i145);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i28);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i145);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i8($i149);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i151 := set_slope_register($p8, $i147, $i150, $p27);
    call {:si_unique_call 409} {:cexpr "tmp___10"} boogie_si_record_i64($i151);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $i3;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i82 := $i153;
    goto $bb31;

  $bb37:
    assume $i152 == 1;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i153 := $sub.i64(0, 5);
    goto $bb39;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.188, $p4);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i84 := $sdiv.i64($i83, 1000);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.182, $p27);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 124);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 4);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i90 := SENSORS_LIMIT($i84, $i89, 124);
    call {:si_unique_call 392} {:cexpr "tmp___6"} boogie_si_record_i32($i90);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p92, $i91);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.182, $p93);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 124);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p98, $i97);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p27, $mul.ref(2, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.182, $p99);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.182, $p102);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 1);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i107 := SENSORS_LIMIT($i101, $i106, 255);
    call {:si_unique_call 394} {:cexpr "tmp___7"} boogie_si_record_i32($i107);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p27, $mul.ref(2, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p109, $i108);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.188, $p4);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i55 := $sdiv.i64($i54, 1000);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(1, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.182, $p57);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i60 := SENSORS_LIMIT($i55, 0, $i59);
    call {:si_unique_call 398} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p27, $i61);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.182, $p27);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(1, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.182, $p65);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i68 := SENSORS_LIMIT($i63, 0, $i67);
    call {:si_unique_call 400} {:cexpr "tmp___3"} boogie_si_record_i32($i68);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p27, $i69);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.182, $p27);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i72 := SENSORS_LIMIT($i71, 0, 63);
    call {:si_unique_call 402} {:cexpr "tmp___4"} boogie_si_record_i32($i72);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p27, $i73);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.182, $p27);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i77 := i2c_smbus_write_byte_data($p8, 28, $i76);
    call {:si_unique_call 404} {:cexpr "tmp___5"} boogie_si_record_i32($i77);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i3;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb31;

  $bb28:
    assume $i78 == 1;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_61 := dev_err.ref.ref($p79, .str.51);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i81 := $sub.i64(0, 5);
    goto $bb30;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p25, 36;
    goto $bb13;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i18);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const get_temp_auto_point_temp: ref;

axiom get_temp_auto_point_temp == $sub.ref(0, 298905);

procedure get_temp_auto_point_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $CurrAddr, $M.173, assertsPassed;



implementation get_temp_auto_point_temp($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $i24: i64;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.186, $p5);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 414} {:cexpr "ix"} boogie_si_record_i32($i7);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.187, $p9);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 415} {:cexpr "nr"} boogie_si_record_i32($i11);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p12 := amc6821_update_device($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $M.176 := $store.ref($M.176, $p33, .str);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.177 := $store.ref($M.177, $p34, .str.52);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.178 := $store.ref($M.178, $p35, .str.2);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.179 := $store.ref($M.179, $p36, .str.50);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.180, $p38);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 502);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.180 := $store.i24($M.180, $p38, $i41);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.181 := $store.i8($M.181, $p42, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.181, $p43);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 422} {:cexpr "tmp___2"} boogie_si_record_i64($i47);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_63 := __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p0, .str.50, $i11);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i7);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref($i25, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.182, $p27);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 1000);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i31 := sprintf.ref.ref.i32($p2, .str.44, $i30);
    call {:si_unique_call 418} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i24 := $i32;
    goto $bb9;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref($i16, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.182, $p18);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 1000);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i22 := sprintf.ref.ref.i32($p2, .str.44, $i21);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb9;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const set_temp: ref;

axiom set_temp == $sub.ref(0, 299937);

procedure set_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.188, $M.182, $M.173, $CurrAddr, assertsPassed;



implementation set_temp($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i42: i64;
  var $p43: ref;
  var $i15: i64;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 425} {:cexpr "set_temp:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.183, $p10);
    call {:si_unique_call 427} {:cexpr "ix"} boogie_si_record_i32($i11);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i12 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 429} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.188, $p4);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i17 := $sdiv.i64($i16, 1000);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i18 := SENSORS_LIMIT($i17, $sub.i64(0, 128), 127);
    call {:si_unique_call 431} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $M.188 := $store.i64($M.188, $p4, $i19);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ldv_mutex_lock_8($p20);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.188, $p4);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i11);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref($i23, 4));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p25, $i22);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i11);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref($i26, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.189, $p27);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i11);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref($i31, 4));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.182, $p33);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i38 := i2c_smbus_write_byte_data($p6, $i30, $i37);
    call {:si_unique_call 434} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} ldv_mutex_unlock_9($p43);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i15 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_64 := dev_err.ref.ref($p40, .str.51);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64(0, 5);
    goto $bb7;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const set_fan: ref;

axiom set_fan == $sub.ref(0, 300969);

procedure set_fan($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.188, $M.182, $M.173, $CurrAddr, assertsPassed;



implementation set_fan($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i16;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i64;
  var $p34: ref;
  var $i35: i16;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $i49: i64;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i62: i64;
  var $i43: i64;
  var $p63: ref;
  var $i15: i64;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 438} {:cexpr "set_fan:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.185, $p10);
    call {:si_unique_call 440} {:cexpr "ix"} boogie_si_record_i32($i11);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i12 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 442} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.188, $p4);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i64($i16, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.188 := $store.i64($M.188, $p4, 65535);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} ldv_mutex_lock_18($p20);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.188, $p4);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i22 := SENSORS_LIMIT($i21, 1, 65535);
    call {:si_unique_call 445} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i11);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref($i24, 2));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p26, $i23);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i11);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(fan_reg_low, $mul.ref(0, 3)), $mul.ref($i27, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.190, $p28);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i11);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref($i32, 2));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.182, $p34);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i16.i8($i35);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i39 := i2c_smbus_write_byte_data($p6, $i31, $i38);
    call {:si_unique_call 447} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i11);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(fan_reg_hi, $mul.ref(0, 3)), $mul.ref($i44, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.191, $p45);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i11);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref($i49, 2));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.182, $p51);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i54 := $ashr.i32($i53, 8);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i58 := i2c_smbus_write_byte_data($p6, $i48, $i57);
    call {:si_unique_call 451} {:cexpr "tmp___3"} boogie_si_record_i32($i58);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i3;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i43 := $i62;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_mutex_unlock_19($p63);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i59 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_66 := dev_err.ref.ref($p60, .str.51);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64(0, 5);
    goto $bb14;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_65 := dev_err.ref.ref($p41, .str.51);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64(0, 5);
    goto $bb10;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.188, $p4);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i19 := $sdiv.i64(6000000, $i18);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.188 := $store.i64($M.188, $p4, $i19);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i12);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const get_fan1_fault: ref;

axiom get_fan1_fault == $sub.ref(0, 302001);

procedure get_fan1_fault($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_fan1_fault($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i12: i32;
  var $i13: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p3 := amc6821_update_device($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i12 := sprintf.ref.ref($p2, .str.46);
    call {:si_unique_call 457} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i9 := sprintf.ref.ref($p2, .str.45);
    call {:si_unique_call 455} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const get_pwm1_auto_point_pwm: ref;

axiom get_pwm1_auto_point_pwm == $sub.ref(0, 303033);

procedure get_pwm1_auto_point_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_pwm1_auto_point_pwm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.192, $p4);
    call {:si_unique_call 458} {:cexpr "ix"} boogie_si_record_i32($i5);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p6 := amc6821_update_device($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref($i7, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.182, $p9);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i12 := sprintf.ref.ref.i32($p2, .str.44, $i11);
    call {:si_unique_call 461} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const set_pwm1_enable: ref;

axiom set_pwm1_enable == $sub.ref(0, 304065);

procedure set_pwm1_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.173, $CurrAddr, assertsPassed;



implementation set_pwm1_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i24: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i64;
  var $p38: ref;
  var $i12: i64;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 463} {:cexpr "set_pwm1_enable:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 466} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i13 := i2c_smbus_read_byte_data($p6, 0);
    call {:si_unique_call 468} {:cexpr "config"} boogie_si_record_i32($i13);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.188, $p4);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i64($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i13, 32);
    call {:si_unique_call 472} {:cexpr "config"} boogie_si_record_i32($i27);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 64);
    call {:si_unique_call 473} {:cexpr "config"} boogie_si_record_i32($i28);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i24 := $i28;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ldv_mutex_lock_12($p29);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i24);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i33 := i2c_smbus_write_byte_data($p6, 0, $i32);
    call {:si_unique_call 478} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i3;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_mutex_unlock_13($p38);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_68 := dev_err.ref.ref($p35, .str.10);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64(0, 5);
    goto $bb22;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i13, $sub.i32(0, 33));
    call {:si_unique_call 470} {:cexpr "config"} boogie_si_record_i32($i25);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 64);
    call {:si_unique_call 471} {:cexpr "config"} boogie_si_record_i32($i26);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i24 := $i26;
    goto $bb18;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb15;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i13, $sub.i32(0, 33));
    call {:si_unique_call 474} {:cexpr "config"} boogie_si_record_i32($i22);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $sub.i32(0, 65));
    call {:si_unique_call 475} {:cexpr "config"} boogie_si_record_i32($i23);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb18;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_67 := dev_err.ref.ref($p15, .str.9);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 5);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const get_pwm1_enable: ref;

axiom get_pwm1_enable == $sub.ref(0, 305097);

procedure get_pwm1_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_pwm1_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p3 := amc6821_update_device($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(241, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i7 := sprintf.ref.ref.i32($p2, .str.44, $i6);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const amc6821_driver_exit: ref;

axiom amc6821_driver_exit == $sub.ref(0, 306129);

procedure amc6821_driver_exit();
  free requires assertsPassed;



implementation amc6821_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} i2c_del_driver(amc6821_driver);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    return;
}



const amc6821_driver_init: ref;

axiom amc6821_driver_init == $sub.ref(0, 307161);

procedure amc6821_driver_init() returns ($r: i32);
  free requires assertsPassed;



implementation amc6821_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i0 := i2c_register_driver(__this_module, amc6821_driver);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const set_fan1_div: ref;

axiom set_fan1_div == $sub.ref(0, 308193);

procedure set_fan1_div($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, $CurrAddr, assertsPassed;



implementation set_fan1_div($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $i25: i32;
  var $p26: ref;
  var $i24: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i35: i64;
  var $i27: i64;
  var $p36: ref;
  var $i12: i64;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 488} {:cexpr "set_fan1_div:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 491} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i13 := i2c_smbus_read_byte_data($p6, 4);
    call {:si_unique_call 493} {:cexpr "config"} boogie_si_record_i32($i13);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ldv_mutex_lock_20($p17);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.188, $p4);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i19 := $slt.i64($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i18, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} ldv_mutex_unlock_21($p36);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i13, 64);
    call {:si_unique_call 496} {:cexpr "config"} boogie_si_record_i32($i25);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p26, 4);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i24);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i31 := i2c_smbus_write_byte_data($p6, 4, $i30);
    call {:si_unique_call 499} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i27 := $i35;
    goto $bb18;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_70 := dev_err.ref.ref($p33, .str.10);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64(0, 5);
    goto $bb21;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i18, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i13, $sub.i32(0, 65));
    call {:si_unique_call 497} {:cexpr "config"} boogie_si_record_i32($i22);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p23, 2);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb16;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_69 := dev_err.ref.ref($p15, .str.9);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 5);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const get_fan1_div: ref;

axiom get_fan1_div == $sub.ref(0, 309225);

procedure get_fan1_div($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_fan1_div($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p3 := amc6821_update_device($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i7 := sprintf.ref.ref.i32($p2, .str.44, $i6);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const set_pwm1_auto_point_pwm: ref;

axiom set_pwm1_auto_point_pwm == $sub.ref(0, 310257);

procedure set_pwm1_auto_point_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, $CurrAddr, assertsPassed;



implementation set_pwm1_auto_point_pwm($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i8;
  var $p18: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i28: i64;
  var $p52: ref;
  var $p53: ref;
  var $i12: i64;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 506} {:cexpr "set_pwm1_auto_point_pwm:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ldv_mutex_lock_16($p13);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.188, $p4);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i15 := SENSORS_LIMIT($i14, 0, 254);
    call {:si_unique_call 512} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p18, $i16);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.182, $p20);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i24 := i2c_smbus_write_byte_data($p6, 33, $i23);
    call {:si_unique_call 514} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(2, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.182, $p30);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.182, $p34);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i32, $i36);
    call {:si_unique_call 517} {:cexpr "dpwm"} boogie_si_record_i32($i37);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(232, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i43 := set_slope_register($p6, 36, $i40, $p42);
    call {:si_unique_call 519} {:cexpr "tmp___3"} boogie_si_record_i64($i43);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i37);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(235, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i50 := set_slope_register($p6, 37, $i47, $p49);
    call {:si_unique_call 521} {:cexpr "tmp___4"} boogie_si_record_i64($i50);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(176, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p52, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ldv_mutex_unlock_17($p53);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i12 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 5);
    goto $bb7;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 5);
    goto $bb7;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 40), 1208)), $mul.ref(40, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_71 := dev_err.ref.ref($p26, .str.51);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64(0, 5);
    goto $bb7;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const set_pwm1: ref;

axiom set_pwm1 == $sub.ref(0, 311289);

procedure set_pwm1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, $CurrAddr, assertsPassed;



implementation set_pwm1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p23: ref;
  var $i12: i64;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 523} {:cexpr "set_pwm1:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p7 := i2c_get_clientdata($p6);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i9 := kstrtol($p2, 10, $p4);
    call {:si_unique_call 526} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} ldv_mutex_lock_10($p13);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.188, $p4);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i15 := SENSORS_LIMIT($i14, 0, 255);
    call {:si_unique_call 529} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(231, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p17, $i16);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(231, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.182, $p18);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_72 := i2c_smbus_write_byte_data($p6, 34, $i21);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_unlock_11($p23);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const get_pwm1: ref;

axiom get_pwm1 == $sub.ref(0, 312321);

procedure get_pwm1($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation get_pwm1($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p3 := amc6821_update_device($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 248)), $mul.ref(231, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i7 := sprintf.ref.ref.i32($p2, .str.44, $i6);
    call {:si_unique_call 534} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 313353);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i0 := $M.170;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_error();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.171;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_error();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.172;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} ldv_error();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.173;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_error();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 314385);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} __VERIFIER_error();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const amc6821_update_device: ref;

axiom amc6821_update_device == $sub.ref(0, 315417);

procedure amc6821_update_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.182, $M.173, assertsPassed;



implementation amc6821_update_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i32;
  var $i30: i16;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $p44: ref;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $i63: i32;
  var $i64: i8;
  var $p66: ref;
  var $p68: ref;
  var $i69: i8;
  var $p71: ref;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $p108: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i8;
  var $p147: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i8;
  var $i152: i32;
  var $i153: i32;
  var $i154: i8;
  var $i155: i32;
  var $i156: i32;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i16;
  var $p179: ref;
  var $i180: i32;
  var $p182: ref;
  var $i183: i16;
  var $i184: i32;
  var $i185: i16;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i16;
  var $p191: ref;
  var $i192: i32;
  var $i193: i16;
  var $p195: ref;
  var $i196: i32;
  var $p198: ref;
  var $i199: i16;
  var $i200: i32;
  var $i201: i16;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i16;
  var $p207: ref;
  var $i208: i32;
  var $p210: ref;
  var $i211: i32;
  var $p213: ref;
  var $i214: i32;
  var $p216: ref;
  var $i217: i32;
  var $p219: ref;
  var $i220: i32;
  var $p222: ref;
  var $i223: i32;
  var $p225: ref;
  var $i226: i32;
  var $p228: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 40), 1208));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p3 := i2c_get_clientdata($p2);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_mutex_lock_22($p5);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(184, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.182, $p6);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64(250);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i7, $i8);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.182, jiffies);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i9, $i10);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(176, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.182, $p13);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(8, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_mutex_unlock_23($p175);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i17 := i2c_smbus_read_byte_data($p2, 10);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(0, 4));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p19, $i17);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i208 := i2c_smbus_read_byte_data($p2, 21);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(1, 4));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p210, $i208);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i211 := i2c_smbus_read_byte_data($p2, 20);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(2, 4));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p213, $i211);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i214 := i2c_smbus_read_byte_data($p2, 27);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(3, 4));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p216, $i214);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i217 := i2c_smbus_read_byte_data($p2, 11);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(4, 4));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p219, $i217);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i220 := i2c_smbus_read_byte_data($p2, 25);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(5, 4));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p222, $i220);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i223 := i2c_smbus_read_byte_data($p2, 24);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(6, 4));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p225, $i223);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i226 := i2c_smbus_read_byte_data($p2, 29);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(192, 1)), $mul.ref(7, 4));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $M.182 := $store.i32($M.182, $p228, $i226);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i20 := i2c_smbus_read_byte_data($p2, 2);
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(243, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p22, $i21);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i23 := i2c_smbus_read_byte_data($p2, 3);
    call {:si_unique_call 547} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(244, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p25, $i24);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i26 := i2c_smbus_read_byte_data($p2, 34);
    call {:si_unique_call 549} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(231, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p28, $i27);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i29 := i2c_smbus_read_byte_data($p2, 8);
    call {:si_unique_call 551} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(0, 2));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p32, $i30);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i33 := i2c_smbus_read_byte_data($p2, 9);
    call {:si_unique_call 553} {:cexpr "tmp___4"} boogie_si_record_i32($i33);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(0, 2));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.182, $p35);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i33);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 8);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i37, $i40);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(0, 2));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p44, $i42);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i176 := i2c_smbus_read_byte_data($p2, 16);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i32.i16($i176);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(1, 2));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p179, $i177);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i180 := i2c_smbus_read_byte_data($p2, 17);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(1, 2));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.182, $p182);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i180);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i186 := $zext.i16.i32($i185);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i187 := $shl.i32($i186, 8);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i184, $i187);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i32.i16($i188);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(1, 2));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p191, $i189);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i192 := i2c_smbus_read_byte_data($p2, 18);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(2, 2));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p195, $i193);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i196 := i2c_smbus_read_byte_data($p2, 19);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(2, 2));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i199 := $load.i16($M.182, $p198);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i200 := $zext.i16.i32($i199);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i32.i16($i196);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i202 := $zext.i16.i32($i201);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i203 := $shl.i32($i202, 8);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i200, $i203);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(224, 1)), $mul.ref(2, 2));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.182 := $store.i16($M.182, $p207, $i205);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i45 := i2c_smbus_read_byte_data($p2, 4);
    call {:si_unique_call 557} {:cexpr "tmp___5"} boogie_si_record_i32($i45);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p47, $i46);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.182, $p48);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 64);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p54, 2);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p56, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(2, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p58, $sub.i8(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i59 := i2c_smbus_read_byte_data($p2, 33);
    call {:si_unique_call 559} {:cexpr "tmp___6"} boogie_si_record_i32($i59);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p62, $i60);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i63 := i2c_smbus_read_byte_data($p2, 28);
    call {:si_unique_call 561} {:cexpr "tmp___7"} boogie_si_record_i32($i63);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p66, $i64);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.182, $p68);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(0, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p71, $i69);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i72 := i2c_smbus_read_byte_data($p2, 36);
    call {:si_unique_call 563} {:cexpr "tmp___8"} boogie_si_record_i32($i72);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i8($i72);
    call {:si_unique_call 564} {:cexpr "reg"} boogie_si_record_i8($i73);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 248);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i76 := $ashr.i32($i75, 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(1, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p79, $i77);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i73);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 7);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    call {:si_unique_call 565} {:cexpr "reg"} boogie_si_record_i8($i82);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32(32, $i83);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    call {:si_unique_call 566} {:cexpr "reg"} boogie_si_record_i8($i85);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i87 == 1);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(2, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p110, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i111 := i2c_smbus_read_byte_data($p2, 37);
    call {:si_unique_call 568} {:cexpr "tmp___9"} boogie_si_record_i32($i111);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    call {:si_unique_call 569} {:cexpr "reg"} boogie_si_record_i8($i112);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 248);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i115 := $ashr.i32($i114, 1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(1, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p118, $i116);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i112);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 7);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    call {:si_unique_call 570} {:cexpr "reg"} boogie_si_record_i8($i121);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i123 := $ashr.i32(32, $i122);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    call {:si_unique_call 571} {:cexpr "reg"} boogie_si_record_i8($i124);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i126 == 1);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(2, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p149, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i150 := i2c_smbus_read_byte_data($p2, 0);
    call {:si_unique_call 573} {:cexpr "tmp___10"} boogie_si_record_i32($i150);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    call {:si_unique_call 574} {:cexpr "reg"} boogie_si_record_i8($i151);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i153 := $ashr.i32($i152, 5);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i32.i8($i153);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 3);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i8($i156);
    call {:si_unique_call 575} {:cexpr "reg"} boogie_si_record_i8($i157);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i158, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i158, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i158, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i172 := $load.i64($M.182, jiffies);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(184, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.182 := $store.i64($M.182, $p173, $i172);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(176, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p174, 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb28:
    assume $i161 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(242, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p168, 3);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(241, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p169, 3);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume $i160 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(242, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p166, 2);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(241, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p167, 2);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb24:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i158, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i162 == 1);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(242, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p170, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(241, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p171, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i158, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb30;

  $bb33:
    assume $i163 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(242, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p164, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(241, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p165, 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb20:
    assume $i126 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(1, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.182, $p128);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(2, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.182, $p132);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.182, $p136);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i134, $i138);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i124);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i141 := $sdiv.i32($i139, $i140);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i8($i141);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i130, $i143);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i144);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(235, 1)), $mul.ref(2, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p147, $i145);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i87 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(1, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.182, $p89);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(2, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.182, $p93);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(238, 1)), $mul.ref(1, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.182, $p97);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i95, $i99);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i85);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i102 := $sdiv.i32($i100, $i101);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i91, $i104);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(232, 1)), $mul.ref(2, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p108, $i106);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 248)), $mul.ref(230, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.182 := $store.i8($M.182, $p53, 4);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 316449);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const i2c_get_clientdata: ref;

axiom i2c_get_clientdata == $sub.ref(0, 317481);

procedure i2c_get_clientdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_clientdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 318513);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} mutex_lock($p0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const i2c_smbus_read_byte_data: ref;

axiom i2c_smbus_read_byte_data == $sub.ref(0, 319545);

procedure i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_read_byte_data($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} {:cexpr "i2c_smbus_read_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 320577);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} mutex_unlock($p0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_update_lock_of_amc6821_data: ref;

axiom ldv_mutex_unlock_update_lock_of_amc6821_data == $sub.ref(0, 321609);

procedure ldv_mutex_unlock_update_lock_of_amc6821_data($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_update_lock_of_amc6821_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i1 := $M.173;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} ldv_error();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.173 := 1;
    call {:si_unique_call 594} {:cexpr "ldv_mutex_update_lock_of_amc6821_data"} boogie_si_record_i32(1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 322641);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_update_lock_of_amc6821_data: ref;

axiom ldv_mutex_lock_update_lock_of_amc6821_data == $sub.ref(0, 323673);

procedure ldv_mutex_lock_update_lock_of_amc6821_data($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_update_lock_of_amc6821_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i1 := $M.173;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} ldv_error();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.173 := 2;
    call {:si_unique_call 596} {:cexpr "ldv_mutex_update_lock_of_amc6821_data"} boogie_si_record_i32(2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 324705);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 325737);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p1 := external_alloc();
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 326769);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 599} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kstrtol: ref;

axiom kstrtol == $sub.ref(0, 327801);

procedure kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtol($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "kstrtol:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i3 := kstrtoll($p0, $i1, $p2);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 328833);

procedure ldv_mutex_lock_10($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} mutex_lock($p0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const SENSORS_LIMIT: ref;

axiom SENSORS_LIMIT == $sub.ref(0, 329865);

procedure SENSORS_LIMIT($i0: i64, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation SENSORS_LIMIT($i0: i64, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "SENSORS_LIMIT:arg:value"} boogie_si_record_i64($i0);
    call {:si_unique_call 606} {:cexpr "SENSORS_LIMIT:arg:low"} boogie_si_record_i64($i1);
    call {:si_unique_call 607} {:cexpr "SENSORS_LIMIT:arg:high"} boogie_si_record_i64($i2);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i3 := $slt.i64($i0, $i1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i64($i0, $i2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i2);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const i2c_smbus_write_byte_data: ref;

axiom i2c_smbus_write_byte_data == $sub.ref(0, 330897);

procedure i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_smbus_write_byte_data($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} {:cexpr "i2c_smbus_write_byte_data:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 609} {:cexpr "i2c_smbus_write_byte_data:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 610} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 331929);

procedure ldv_mutex_unlock_11($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} mutex_unlock($p0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const kstrtoll: ref;

axiom kstrtoll == $sub.ref(0, 332961);

procedure kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoll($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} {:cexpr "kstrtoll:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 616} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 333993);

procedure ldv_mutex_lock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} mutex_lock($p0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 335025);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_slope_register: ref;

axiom set_slope_register == $sub.ref(0, 336057);

procedure set_slope_register($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation set_slope_register($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "set_slope_register:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 622} {:cexpr "set_slope_register:arg:dpwm"} boogie_si_record_i8($i2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(2, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.182, $p4);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.182, $p7);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i6, $i9);
    call {:si_unique_call 623} {:cexpr "dt"} boogie_si_record_i32($i10);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32(2, $i10);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i2);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i13 := $sge.i32($i11, $i12);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i14 := 4;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32(4, $i10);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i35, $i36);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i14 := 3;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32(8, $i10);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i40 := $sge.i32($i38, $i39);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i14 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32(16, $i10);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i2);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i43 := $sge.i32($i41, $i42);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i14 := 1;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.182, $p16);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 124);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 1);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i15);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i22, $i23);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 624} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i25);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i30 := i2c_smbus_write_byte_data($p0, $i27, $i29);
    call {:si_unique_call 626} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_73 := dev_err.ref.ref($p32, .str.51);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64(0, 5);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 337089);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} mutex_unlock($p0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 338121);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} mutex_lock($p0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 339153);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} mutex_unlock($p0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const i2c_register_driver: ref;

axiom i2c_register_driver == $sub.ref(0, 340185);

procedure i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_register_driver($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 634} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 635} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_del_driver: ref;

axiom i2c_del_driver == $sub.ref(0, 341217);

procedure i2c_del_driver($p0: ref);
  free requires assertsPassed;



implementation i2c_del_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 342249);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} mutex_lock($p0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 343281);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} mutex_unlock($p0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 344313);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} mutex_lock($p0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 345345);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} mutex_unlock($p0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 346377);

procedure ldv_mutex_lock_8($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} mutex_lock($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 347409);

procedure ldv_mutex_unlock_9($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} mutex_unlock($p0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 348441);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 649} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 349473);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 650} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 651} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 653} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 350505);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} ldv_mutex_lock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} mutex_lock($p0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 351537);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.173, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ldv_mutex_unlock_update_lock_of_amc6821_data($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} mutex_unlock($p0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const hwmon_device_unregister: ref;

axiom hwmon_device_unregister == $sub.ref(0, 352569);

procedure hwmon_device_unregister($p0: ref);
  free requires assertsPassed;



implementation hwmon_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    return;
}



const sysfs_remove_group: ref;

axiom sysfs_remove_group == $sub.ref(0, 353601);

procedure sysfs_remove_group($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_group($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 354633);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "devm_kzalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 659} {:cexpr "devm_kzalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p3 := external_alloc();
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i2c_set_clientdata: ref;

axiom i2c_set_clientdata == $sub.ref(0, 355665);

procedure i2c_set_clientdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation i2c_set_clientdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_74 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 356697);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    return;
}



const amc6821_init_client: ref;

axiom amc6821_init_client == $sub.ref(0, 357729);

procedure amc6821_init_client($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation amc6821_init_client($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i56: i32;
  var $i55: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i7: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i1 := $M.193;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i3 := i2c_smbus_read_byte_data($p0, 4);
    call {:si_unique_call 663} {:cexpr "config"} boogie_si_record_i32($i3);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i3, 128);
    call {:si_unique_call 665} {:cexpr "config"} boogie_si_record_i32($i8);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i12 := i2c_smbus_write_byte_data($p0, 4, $i11);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i16 := i2c_smbus_read_byte_data($p0, 63);
    call {:si_unique_call 670} {:cexpr "config"} boogie_si_record_i32($i16);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i16, 15);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_78 := _dev_info.ref.ref.i32($p20, .str.11, $i21);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i16, $sub.i32(0, 129));
    call {:si_unique_call 673} {:cexpr "config"} boogie_si_record_i32($i23);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i27 := i2c_smbus_write_byte_data($p0, 63, $i26);
    call {:si_unique_call 675} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i31 := i2c_smbus_read_byte_data($p0, 1);
    call {:si_unique_call 678} {:cexpr "config"} boogie_si_record_i32($i31);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i31, $sub.i32(0, 9));
    call {:si_unique_call 680} {:cexpr "config"} boogie_si_record_i32($i35);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 17));
    call {:si_unique_call 681} {:cexpr "config"} boogie_si_record_i32($i36);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 33));
    call {:si_unique_call 682} {:cexpr "config"} boogie_si_record_i32($i37);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i41 := i2c_smbus_write_byte_data($p0, 1, $i40);
    call {:si_unique_call 684} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i45 := i2c_smbus_read_byte_data($p0, 0);
    call {:si_unique_call 687} {:cexpr "config"} boogie_si_record_i32($i45);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i45, $sub.i32(0, 129));
    call {:si_unique_call 689} {:cexpr "config"} boogie_si_record_i32($i49);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, $sub.i32(0, 5));
    call {:si_unique_call 690} {:cexpr "config"} boogie_si_record_i32($i50);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 1);
    call {:si_unique_call 691} {:cexpr "config"} boogie_si_record_i32($i51);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i52 := $M.194;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i51, $sub.i32(0, 9));
    call {:si_unique_call 693} {:cexpr "config"} boogie_si_record_i32($i56);
    assume {:verifier.code 0} true;
    $i55 := $i56;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i55);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i60 := i2c_smbus_write_byte_data($p0, 0, $i59);
    call {:si_unique_call 695} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_83 := dev_err.ref.ref($p62, .str.10);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i51, 8);
    call {:si_unique_call 692} {:cexpr "config"} boogie_si_record_i32($i54);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb27;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_82 := dev_err.ref.ref($p47, .str.9);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_81 := dev_err.ref.ref($p43, .str.10);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_80 := dev_err.ref.ref($p33, .str.9);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_79 := dev_err.ref.ref($p29, .str.10);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_77 := dev_err.ref.ref($p18, .str.9);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_76 := dev_err.ref.ref($p14, .str.10);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1208)), $mul.ref(40, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_75 := dev_err.ref.ref($p5, .str.9);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb5;
}



const sysfs_create_group: ref;

axiom sysfs_create_group == $sub.ref(0, 358761);

procedure sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_group($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hwmon_device_register: ref;

axiom hwmon_device_register == $sub.ref(0, 359793);

procedure hwmon_device_register($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hwmon_device_register($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p1 := external_alloc();
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 360825);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 701} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 361857);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 362889);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 363921);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 705} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i2c_check_functionality: ref;

axiom i2c_check_functionality == $sub.ref(0, 364953);

procedure i2c_check_functionality($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_check_functionality($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} {:cexpr "i2c_check_functionality:arg:func"} boogie_si_record_i32($i1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i2 := i2c_get_functionality($p0);
    call {:si_unique_call 708} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $i1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 365985);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i2c_get_functionality: ref;

axiom i2c_get_functionality == $sub.ref(0, 367017);

procedure i2c_get_functionality($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_get_functionality($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(16, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.195, $p1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.196, $p3);
    call {:si_unique_call 712} $i5 := devirtbounce($p4, $p0);
    call {:si_unique_call 713} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 368049);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 714} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 1} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 369081);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 370113);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 371145);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 372177);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 373209);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 374241);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 375273);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 376305);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 377337);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 378369);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 379401);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 380433);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 381465);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 716} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 717} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 718} __VERIFIER_assume($i4);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 382497);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 383529);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 384561);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 385593);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 386625);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 387657);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 388689);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 389721);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 390753);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 719} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 720} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 721} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 723} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 724} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 725} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 726} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 727} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} __VERIFIER_assume($i7);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} __VERIFIER_assume($i11);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 391785);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 392817);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 393849);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 394881);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 395913);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 396945);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 397977);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 399009);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 400041);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 730} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 731} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 732} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 401073);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 402105);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 403137);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 735} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 404169);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 405201);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 406233);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 407265);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.197, $M.198, $M.199, $M.191, $M.190, $M.189, $M.230, $M.231, $M.194, $M.193, $M.173, $M.172, $M.171, $M.170, $M.235, $M.236, $M.237;



implementation __SMACK_static_init()
{

  $bb0:
    $M.0 := 0;
    call {:si_unique_call 736} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 738} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 739} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.4 := 0;
    call {:si_unique_call 740} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 744} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    $M.19 := 0;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 756} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 757} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 758} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 762} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 764} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 765} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 767} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 769} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 771} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 772} {:cexpr "ldvarg18"} boogie_si_record_i64(0);
    $M.58 := $0.ref;
    $M.59 := $0.ref;
    $M.60 := $0.ref;
    $M.61 := $0.ref;
    $M.62 := 0;
    call {:si_unique_call 773} {:cexpr "ldvarg21"} boogie_si_record_i64(0);
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := $0.ref;
    $M.66 := $0.ref;
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.69 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 774} {:cexpr "ldvarg27"} boogie_si_record_i64(0);
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 775} {:cexpr "ldvarg30"} boogie_si_record_i64(0);
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := $0.ref;
    $M.80 := $0.ref;
    $M.81 := $0.ref;
    $M.82 := $0.ref;
    $M.83 := $0.ref;
    $M.84 := $0.ref;
    $M.85 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := $0.ref;
    $M.88 := $0.ref;
    $M.89 := $0.ref;
    $M.90 := $0.ref;
    $M.91 := $0.ref;
    $M.92 := $0.ref;
    $M.93 := $0.ref;
    $M.94 := $0.ref;
    $M.95 := 0;
    call {:si_unique_call 776} {:cexpr "ldvarg48"} boogie_si_record_i64(0);
    $M.96 := $0.ref;
    $M.97 := $0.ref;
    $M.98 := $0.ref;
    $M.99 := $0.ref;
    $M.100 := $0.ref;
    $M.101 := $0.ref;
    $M.102 := $0.ref;
    $M.103 := 0;
    call {:si_unique_call 777} {:cexpr "ldvarg54"} boogie_si_record_i64(0);
    $M.104 := $0.ref;
    $M.105 := $0.ref;
    $M.106 := $0.ref;
    $M.107 := $0.ref;
    $M.108 := 0;
    call {:si_unique_call 778} {:cexpr "ldvarg57"} boogie_si_record_i64(0);
    $M.109 := $0.ref;
    $M.110 := $0.ref;
    $M.111 := $0.ref;
    $M.112 := $0.ref;
    $M.113 := 0;
    call {:si_unique_call 779} {:cexpr "ldvarg60"} boogie_si_record_i64(0);
    $M.114 := $0.ref;
    $M.115 := 0;
    call {:si_unique_call 780} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.116 := $0.ref;
    $M.117 := $0.ref;
    $M.118 := $0.ref;
    $M.119 := 0;
    call {:si_unique_call 781} {:cexpr "ldvarg63"} boogie_si_record_i64(0);
    $M.120 := $0.ref;
    $M.121 := $0.ref;
    $M.122 := $0.ref;
    $M.123 := $0.ref;
    $M.124 := 0;
    call {:si_unique_call 782} {:cexpr "ldvarg66"} boogie_si_record_i64(0);
    $M.125 := $0.ref;
    $M.126 := $0.ref;
    $M.127 := $0.ref;
    $M.128 := $0.ref;
    $M.129 := 0;
    call {:si_unique_call 783} {:cexpr "ldvarg69"} boogie_si_record_i64(0);
    $M.130 := $0.ref;
    $M.131 := $0.ref;
    $M.132 := $0.ref;
    $M.133 := $0.ref;
    $M.134 := $0.ref;
    $M.135 := $0.ref;
    $M.136 := $0.ref;
    $M.137 := 0;
    call {:si_unique_call 784} {:cexpr "ldvarg75"} boogie_si_record_i64(0);
    $M.138 := $0.ref;
    $M.139 := $0.ref;
    $M.140 := $0.ref;
    $M.141 := $0.ref;
    $M.142 := 0;
    call {:si_unique_call 785} {:cexpr "ldvarg78"} boogie_si_record_i64(0);
    $M.143 := $0.ref;
    $M.144 := $0.ref;
    $M.145 := $0.ref;
    $M.146 := $0.ref;
    $M.147 := 0;
    call {:si_unique_call 786} {:cexpr "ldvarg81"} boogie_si_record_i64(0);
    $M.148 := $0.ref;
    $M.149 := $0.ref;
    $M.150 := $0.ref;
    $M.151 := $0.ref;
    $M.152 := 0;
    call {:si_unique_call 787} {:cexpr "ldvarg84"} boogie_si_record_i64(0);
    $M.153 := $0.ref;
    $M.154 := $0.ref;
    $M.155 := $0.ref;
    $M.156 := $0.ref;
    $M.157 := $0.ref;
    $M.158 := $0.ref;
    $M.159 := $0.ref;
    $M.160 := 0;
    call {:si_unique_call 788} {:cexpr "ldvarg90"} boogie_si_record_i64(0);
    $M.161 := $0.ref;
    $M.162 := $0.ref;
    $M.163 := $0.ref;
    $M.164 := $0.ref;
    $M.165 := $0.ref;
    $M.166 := $0.ref;
    $M.167 := $0.ref;
    $M.168 := 0;
    call {:si_unique_call 789} {:cexpr "ldvarg96"} boogie_si_record_i64(0);
    $M.169 := $0.ref;
    $M.197 := $store.i8($M.197, __mod_i2c_device_table, 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.197 := $store.i8($M.197, $add.ref($add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.197 := $store.i64($M.197, $add.ref($add.ref(__mod_i2c_device_table, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.198 := $store.i16($M.198, normal_i2c, 24);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(1, 2)), 25);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(2, 2)), 26);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(3, 2)), 44);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(4, 2)), 45);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(5, 2)), 46);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(6, 2)), 76);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(7, 2)), 77);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(8, 2)), 78);
    $M.198 := $store.i16($M.198, $add.ref($add.ref(normal_i2c, $mul.ref(0, 20)), $mul.ref(9, 2)), $sub.i16(0, 2));
    $M.199 := $store.i8($M.199, amc6821_id, 97);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 109);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 99);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 54);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 56);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 50);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.199 := $store.i64($M.199, $add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.199 := $store.i8($M.199, $add.ref($add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.199 := $store.i64($M.199, $add.ref($add.ref($add.ref(amc6821_id, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.191 := $store.i8($M.191, fan_reg_hi, 9);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(fan_reg_hi, $mul.ref(0, 3)), $mul.ref(1, 1)), 17);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(fan_reg_hi, $mul.ref(0, 3)), $mul.ref(2, 1)), 19);
    $M.190 := $store.i8($M.190, fan_reg_low, 8);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(fan_reg_low, $mul.ref(0, 3)), $mul.ref(1, 1)), 16);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(fan_reg_low, $mul.ref(0, 3)), $mul.ref(2, 1)), 18);
    $M.189 := $store.i8($M.189, temp_reg, 10);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(1, 1)), 21);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(2, 1)), 20);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(3, 1)), 27);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(4, 1)), 11);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(5, 1)), 25);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(6, 1)), 24);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(temp_reg, $mul.ref(0, 8)), $mul.ref(7, 1)), 29);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_auto_point3_temp, .str.43);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp_auto_point_temp);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_auto_point2_temp, .str.42);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp_auto_point_temp);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_auto_point1_temp, .str.41);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp_auto_point_temp);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_auto_point3_temp, .str.40);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp_auto_point_temp);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point3_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_auto_point2_temp, .str.39);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp_auto_point_temp);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point2_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_auto_point1_temp, .str.38);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_auto_point_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_auto_point1_temp, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1_auto_point3_pwm, .str.37);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1_auto_point_pwm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1_auto_point3_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1_auto_point2_pwm, .str.36);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1_auto_point_pwm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_pwm1_auto_point_pwm);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1_auto_point2_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1_auto_point1_pwm, .str.35);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1_auto_point_pwm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1_auto_point1_pwm, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1_auto_channels_temp, .str.34);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1_auto_channels_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1_auto_channels_temp, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1_enable, .str.33);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1_enable);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_pwm1_enable);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1_enable, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_pwm1, .str.32);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_pwm1);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_pwm1);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_pwm1, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_fan1_div, .str.31);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_fan1_div);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_fan1_div);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_fan1_div, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_fan1_fault, .str.30);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_fan1_fault);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_fan1_fault, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_fan1_max, .str.29);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_fan);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_fan);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_fan1_max, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_fan1_min, .str.28);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_fan);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_fan);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_fan1_min, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_fan1_input, .str.27);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_fan);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_fan1_input, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_fault, .str.26);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp2_fault);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_fault, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_crit_alarm, .str.25);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_crit_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 7);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_max_alarm, .str.24);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_max_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 6);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_min_alarm, .str.23);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_min_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 5);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_crit, .str.22);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), 7);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_max, .str.21);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_max, $mul.ref(0, 56)), $mul.ref(48, 1)), 6);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_min, .str.20);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_min, $mul.ref(0, 56)), $mul.ref(48, 1)), 5);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp2_input, .str.19);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp2_input, $mul.ref(0, 56)), $mul.ref(48, 1)), 4);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_crit_alarm, .str.18);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_crit_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 3);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_max_alarm, .str.17);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_max_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_min_alarm, .str.16);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp_alarm);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_min_alarm, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_crit, .str.15);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_crit, $mul.ref(0, 56)), $mul.ref(48, 1)), 3);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_max, .str.14);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_max, $mul.ref(0, 56)), $mul.ref(48, 1)), 2);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_min, .str.13);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), set_temp);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_min, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.230 := $store.ref($M.230, sensor_dev_attr_temp1_input, .str.12);
    $M.230 := $store.i16($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), get_temp);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(sensor_dev_attr_temp1_input, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.231 := $store.ref($M.231, amc6821_attrs, sensor_dev_attr_temp1_input);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(1, 8)), sensor_dev_attr_temp1_min);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(2, 8)), sensor_dev_attr_temp1_max);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(3, 8)), sensor_dev_attr_temp1_crit);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(4, 8)), sensor_dev_attr_temp1_min_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(5, 8)), sensor_dev_attr_temp1_max_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(6, 8)), sensor_dev_attr_temp1_crit_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(7, 8)), sensor_dev_attr_temp2_input);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(8, 8)), sensor_dev_attr_temp2_min);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(9, 8)), sensor_dev_attr_temp2_max);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(10, 8)), sensor_dev_attr_temp2_crit);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(11, 8)), sensor_dev_attr_temp2_min_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(12, 8)), sensor_dev_attr_temp2_max_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(13, 8)), sensor_dev_attr_temp2_crit_alarm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(14, 8)), sensor_dev_attr_temp2_fault);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(15, 8)), sensor_dev_attr_fan1_input);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(16, 8)), sensor_dev_attr_fan1_min);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(17, 8)), sensor_dev_attr_fan1_max);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(18, 8)), sensor_dev_attr_fan1_fault);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(19, 8)), sensor_dev_attr_fan1_div);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(20, 8)), sensor_dev_attr_pwm1);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(21, 8)), sensor_dev_attr_pwm1_enable);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(22, 8)), sensor_dev_attr_pwm1_auto_channels_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(23, 8)), sensor_dev_attr_pwm1_auto_point1_pwm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(24, 8)), sensor_dev_attr_pwm1_auto_point2_pwm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(25, 8)), sensor_dev_attr_pwm1_auto_point3_pwm);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(26, 8)), sensor_dev_attr_temp1_auto_point1_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(27, 8)), sensor_dev_attr_temp1_auto_point2_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(28, 8)), sensor_dev_attr_temp1_auto_point3_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(29, 8)), sensor_dev_attr_temp2_auto_point1_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(30, 8)), sensor_dev_attr_temp2_auto_point2_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(31, 8)), sensor_dev_attr_temp2_auto_point3_temp);
    $M.231 := $store.ref($M.231, $add.ref($add.ref(amc6821_attrs, $mul.ref(0, 264)), $mul.ref(32, 8)), $0.ref);
    $M.194 := 0;
    call {:si_unique_call 790} {:cexpr "pwminv"} boogie_si_record_i32(0);
    $M.193 := 1;
    call {:si_unique_call 791} {:cexpr "init"} boogie_si_record_i32(1);
    $M.173 := 0;
    call {:si_unique_call 792} {:cexpr "ldv_mutex_update_lock_of_amc6821_data"} boogie_si_record_i32(0);
    $M.172 := 0;
    call {:si_unique_call 793} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.171 := 0;
    call {:si_unique_call 794} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.170 := 0;
    call {:si_unique_call 795} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.235 := $store.i8($M.235, .str.44, 37);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.44, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.236 := $store.i8($M.236, .str.45, 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.45, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.237 := $store.i8($M.237, .str.46, 48);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.46, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    call {:si_unique_call 796} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 408297);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(amc6821_remove, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 797} $i2 := amc6821_remove($p1);
    $r := $i2;
    return;
}



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.197, $M.198, $M.199, $M.191, $M.190, $M.189, $M.230, $M.231, $M.194, $M.193, $M.173, $M.172, $M.171, $M.170, $M.235, $M.236, $M.237, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 798} __SMACK_static_init();
    call {:si_unique_call 799} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.38, $M.115, $M.35, $M.36, $M.37, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.197, $M.198, $M.199, $M.191, $M.190, $M.189, $M.230, $M.231, $M.194, $M.193, $M.173, $M.172, $M.171, $M.170, $M.235, $M.236, $M.237, $CurrAddr, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.188;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$i294: i64, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$i313: i64, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$p331: ref, in_$i332: i64, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$i342: i32, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i32, in_$i349: i1, in_$i350: i32, in_$i351: i1, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i1, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$p366: ref, in_$p367: ref, in_$i368: i64, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$i380: i1, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$p385: ref, in_$p386: ref, in_$i387: i64, in_$i389: i32, in_$i390: i1, in_$p391: ref, in_$p392: ref, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$p403: ref, in_$p404: ref, in_$p405: ref, in_$i406: i64, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$p421: ref, in_$p422: ref, in_$i424: i32, in_$i425: i1, in_$i426: i32, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i32, in_$i431: i1, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i1, in_$i447: i1, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$p453: ref, in_$i454: i64, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$p459: ref, in_$p460: ref, in_$i462: i32, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$p471: ref, in_$p472: ref, in_$i473: i64, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$p478: ref, in_$p479: ref, in_$i481: i32, in_$i482: i1, in_$i483: i32, in_$i484: i1, in_$i485: i1, in_$i486: i1, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$i492: i64, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$p497: ref, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i1, in_$p506: ref, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$i512: i32, in_$i513: i1, in_$i514: i1, in_$i515: i1, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$p519: ref, in_$p520: ref, in_$i521: i64, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$p526: ref, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$i531: i32, in_$i532: i1, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$p537: ref, in_$i539: i32, in_$i540: i1, in_$i541: i32, in_$i542: i1, in_$i543: i1, in_$i544: i1, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$i550: i64, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$p555: ref, in_$p556: ref, in_vslice_dummy_var_0: i32, in_vslice_dummy_var_1: i32, in_vslice_dummy_var_2: i32, in_vslice_dummy_var_3: i64, in_vslice_dummy_var_4: i64, in_vslice_dummy_var_5: i64, in_vslice_dummy_var_6: i64, in_vslice_dummy_var_7: i64, in_vslice_dummy_var_8: i64, in_vslice_dummy_var_9: i64, in_vslice_dummy_var_10: i64, in_vslice_dummy_var_11: i64, in_vslice_dummy_var_12: i64, in_vslice_dummy_var_13: i64, in_vslice_dummy_var_14: i64, in_vslice_dummy_var_15: i64, in_vslice_dummy_var_16: i64, in_vslice_dummy_var_17: i64, in_vslice_dummy_var_18: i64, in_vslice_dummy_var_19: i64, in_vslice_dummy_var_20: i64, in_vslice_dummy_var_21: i64, in_vslice_dummy_var_22: i64, in_vslice_dummy_var_23: i64, in_vslice_dummy_var_24: i64, in_vslice_dummy_var_25: i64, in_vslice_dummy_var_26: i64, in_vslice_dummy_var_27: i64, in_vslice_dummy_var_28: i64, in_vslice_dummy_var_29: i64, in_vslice_dummy_var_30: i64, in_vslice_dummy_var_31: i64, in_vslice_dummy_var_32: i64, in_vslice_dummy_var_33: i64, in_vslice_dummy_var_34: i64, in_vslice_dummy_var_35: i64, in_vslice_dummy_var_36: i64, in_vslice_dummy_var_37: i64, in_vslice_dummy_var_38: i64, in_vslice_dummy_var_39: i64, in_vslice_dummy_var_40: i64, in_vslice_dummy_var_41: i64, in_vslice_dummy_var_42: i64, in_vslice_dummy_var_43: i64, in_vslice_dummy_var_44: i64, in_vslice_dummy_var_45: i64, in_vslice_dummy_var_46: i64, in_vslice_dummy_var_47: i64, in_vslice_dummy_var_48: i64, in_vslice_dummy_var_49: i64, in_vslice_dummy_var_50: i64, in_vslice_dummy_var_51: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$i294: i64, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$i313: i64, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$p331: ref, out_$i332: i64, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$i342: i32, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i32, out_$i349: i1, out_$i350: i32, out_$i351: i1, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i1, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$p366: ref, out_$p367: ref, out_$i368: i64, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$i380: i1, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$p385: ref, out_$p386: ref, out_$i387: i64, out_$i389: i32, out_$i390: i1, out_$p391: ref, out_$p392: ref, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$p403: ref, out_$p404: ref, out_$p405: ref, out_$i406: i64, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$p421: ref, out_$p422: ref, out_$i424: i32, out_$i425: i1, out_$i426: i32, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i32, out_$i431: i1, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i1, out_$i447: i1, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$p453: ref, out_$i454: i64, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$p459: ref, out_$p460: ref, out_$i462: i32, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$p471: ref, out_$p472: ref, out_$i473: i64, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$p478: ref, out_$p479: ref, out_$i481: i32, out_$i482: i1, out_$i483: i32, out_$i484: i1, out_$i485: i1, out_$i486: i1, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$i492: i64, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$p497: ref, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i1, out_$p506: ref, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$i512: i32, out_$i513: i1, out_$i514: i1, out_$i515: i1, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$p519: ref, out_$p520: ref, out_$i521: i64, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$p526: ref, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$i531: i32, out_$i532: i1, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$p537: ref, out_$i539: i32, out_$i540: i1, out_$i541: i32, out_$i542: i1, out_$i543: i1, out_$i544: i1, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$i550: i64, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$p555: ref, out_$p556: ref, out_vslice_dummy_var_0: i32, out_vslice_dummy_var_1: i32, out_vslice_dummy_var_2: i32, out_vslice_dummy_var_3: i64, out_vslice_dummy_var_4: i64, out_vslice_dummy_var_5: i64, out_vslice_dummy_var_6: i64, out_vslice_dummy_var_7: i64, out_vslice_dummy_var_8: i64, out_vslice_dummy_var_9: i64, out_vslice_dummy_var_10: i64, out_vslice_dummy_var_11: i64, out_vslice_dummy_var_12: i64, out_vslice_dummy_var_13: i64, out_vslice_dummy_var_14: i64, out_vslice_dummy_var_15: i64, out_vslice_dummy_var_16: i64, out_vslice_dummy_var_17: i64, out_vslice_dummy_var_18: i64, out_vslice_dummy_var_19: i64, out_vslice_dummy_var_20: i64, out_vslice_dummy_var_21: i64, out_vslice_dummy_var_22: i64, out_vslice_dummy_var_23: i64, out_vslice_dummy_var_24: i64, out_vslice_dummy_var_25: i64, out_vslice_dummy_var_26: i64, out_vslice_dummy_var_27: i64, out_vslice_dummy_var_28: i64, out_vslice_dummy_var_29: i64, out_vslice_dummy_var_30: i64, out_vslice_dummy_var_31: i64, out_vslice_dummy_var_32: i64, out_vslice_dummy_var_33: i64, out_vslice_dummy_var_34: i64, out_vslice_dummy_var_35: i64, out_vslice_dummy_var_36: i64, out_vslice_dummy_var_37: i64, out_vslice_dummy_var_38: i64, out_vslice_dummy_var_39: i64, out_vslice_dummy_var_40: i64, out_vslice_dummy_var_41: i64, out_vslice_dummy_var_42: i64, out_vslice_dummy_var_43: i64, out_vslice_dummy_var_44: i64, out_vslice_dummy_var_45: i64, out_vslice_dummy_var_46: i64, out_vslice_dummy_var_47: i64, out_vslice_dummy_var_48: i64, out_vslice_dummy_var_49: i64, out_vslice_dummy_var_50: i64, out_vslice_dummy_var_51: i64)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$p182, out_$p183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$p212, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p232, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$p242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$p293, out_$i294, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$p312, out_$i313, out_$i315, out_$i316, out_$p317, out_$p318, out_$p319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$p337, out_$p338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$p366, out_$p367, out_$i368, out_$i370, out_$i371, out_$p372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$p385, out_$p386, out_$i387, out_$i389, out_$i390, out_$p391, out_$p392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$p403, out_$p404, out_$p405, out_$i406, out_$i408, out_$i409, out_$p410, out_$p411, out_$p412, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i437, out_$i438, out_$p439, out_$p440, out_$p441, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$i454, out_$i456, out_$i457, out_$p458, out_$p459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$p471, out_$p472, out_$i473, out_$i475, out_$i476, out_$p477, out_$p478, out_$p479, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$p497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$p506, out_$p507, out_$p508, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$p518, out_$p519, out_$p520, out_$i521, out_$i523, out_$i524, out_$p525, out_$p526, out_$p527, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$p537, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$p547, out_$p548, out_$p549, out_$i550, out_$i552, out_$i553, out_$p554, out_$p555, out_$p556, out_vslice_dummy_var_0, out_vslice_dummy_var_1, out_vslice_dummy_var_2, out_vslice_dummy_var_3, out_vslice_dummy_var_4, out_vslice_dummy_var_5, out_vslice_dummy_var_6, out_vslice_dummy_var_7, out_vslice_dummy_var_8, out_vslice_dummy_var_9, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_12, out_vslice_dummy_var_13, out_vslice_dummy_var_14, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i48, in_$i49, in_$p50, in_$p51, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$p85, in_$p86, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$p106, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$p115, in_$p116, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p128, in_$i129, in_$i131, in_$i132, in_$p133, in_$p134, in_$p135, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$p145, in_$p146, in_$p147, in_$i148, in_$i150, in_$i151, in_$p152, in_$p153, in_$p154, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p174, in_$p175, in_$p176, in_$i177, in_$i179, in_$i180, in_$p181, in_$p182, in_$p183, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$p194, in_$p195, in_$i196, in_$i198, in_$i199, in_$p200, in_$p201, in_$p202, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$p210, in_$p211, in_$p212, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$p220, in_$p221, in_$p222, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$p230, in_$p231, in_$p232, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$p240, in_$p241, in_$p242, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$p250, in_$p251, in_$p252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$p262, in_$p263, in_$p264, in_$i265, in_$i267, in_$i268, in_$p269, in_$p270, in_$p271, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$p279, in_$p280, in_$p281, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$p292, in_$p293, in_$i294, in_$i296, in_$i297, in_$p298, in_$p299, in_$p300, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$p310, in_$p311, in_$p312, in_$i313, in_$i315, in_$i316, in_$p317, in_$p318, in_$p319, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$p329, in_$p330, in_$p331, in_$i332, in_$i334, in_$i335, in_$p336, in_$p337, in_$p338, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$p366, in_$p367, in_$i368, in_$i370, in_$i371, in_$p372, in_$p373, in_$p374, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$p385, in_$p386, in_$i387, in_$i389, in_$i390, in_$p391, in_$p392, in_$p393, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$p403, in_$p404, in_$p405, in_$i406, in_$i408, in_$i409, in_$p410, in_$p411, in_$p412, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$p420, in_$p421, in_$p422, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$p432, in_$p433, in_$p434, in_$i435, in_$i437, in_$i438, in_$p439, in_$p440, in_$p441, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$p451, in_$p452, in_$p453, in_$i454, in_$i456, in_$i457, in_$p458, in_$p459, in_$p460, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$p470, in_$p471, in_$p472, in_$i473, in_$i475, in_$i476, in_$p477, in_$p478, in_$p479, in_$i481, in_$i482, in_$i483, in_$i484, in_$i485, in_$i486, in_$i487, in_$i488, in_$p489, in_$p490, in_$p491, in_$i492, in_$i494, in_$i495, in_$p496, in_$p497, in_$p498, in_$i500, in_$i501, in_$i502, in_$i503, in_$i504, in_$i505, in_$p506, in_$p507, in_$p508, in_$i510, in_$i511, in_$i512, in_$i513, in_$i514, in_$i515, in_$i516, in_$i517, in_$p518, in_$p519, in_$p520, in_$i521, in_$i523, in_$i524, in_$p525, in_$p526, in_$p527, in_$i529, in_$i530, in_$i531, in_$i532, in_$i533, in_$i534, in_$p535, in_$p536, in_$p537, in_$i539, in_$i540, in_$i541, in_$i542, in_$i543, in_$i544, in_$i545, in_$i546, in_$p547, in_$p548, in_$p549, in_$i550, in_$i552, in_$i553, in_$p554, in_$p555, in_$p556, in_vslice_dummy_var_0, in_vslice_dummy_var_1, in_vslice_dummy_var_2, in_vslice_dummy_var_3, in_vslice_dummy_var_4, in_vslice_dummy_var_5, in_vslice_dummy_var_6, in_vslice_dummy_var_7, in_vslice_dummy_var_8, in_vslice_dummy_var_9, in_vslice_dummy_var_10, in_vslice_dummy_var_11, in_vslice_dummy_var_12, in_vslice_dummy_var_13, in_vslice_dummy_var_14, in_vslice_dummy_var_15, in_vslice_dummy_var_16, in_vslice_dummy_var_17, in_vslice_dummy_var_18, in_vslice_dummy_var_19, in_vslice_dummy_var_20, in_vslice_dummy_var_21, in_vslice_dummy_var_22, in_vslice_dummy_var_23, in_vslice_dummy_var_24, in_vslice_dummy_var_25, in_vslice_dummy_var_26, in_vslice_dummy_var_27, in_vslice_dummy_var_28, in_vslice_dummy_var_29, in_vslice_dummy_var_30, in_vslice_dummy_var_31, in_vslice_dummy_var_32, in_vslice_dummy_var_33, in_vslice_dummy_var_34, in_vslice_dummy_var_35, in_vslice_dummy_var_36, in_vslice_dummy_var_37, in_vslice_dummy_var_38, in_vslice_dummy_var_39, in_vslice_dummy_var_40, in_vslice_dummy_var_41, in_vslice_dummy_var_42, in_vslice_dummy_var_43, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 39} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 40} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb75:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.0 := 2;
    call {:si_unique_call 47} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_vslice_dummy_var_1 := amc6821_detect(out_$p50, out_$p51);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p51 := $M.36;
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p50 := $M.35;
    goto corral_source_split_200;

  $bb89:
    assume out_$i49 == 1;
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 2);
    goto corral_source_split_197;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i48 := $M.0;
    goto corral_source_split_196;

  $bb87:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 45} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_vslice_dummy_var_0 := amc6821_detect(out_$p45, out_$p46);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$p46 := $M.36;
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$p45 := $M.35;
    goto corral_source_split_191;

  $bb86:
    assume out_$i44 == 1;
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 1);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i43 := $M.0;
    goto corral_source_split_187;

  $bb84:
    assume out_$i42 == 1;
    goto corral_source_split_186;

  $bb77:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} out_$i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i38);
    call {:si_unique_call 43} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i38);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume out_$i37 == 1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i36 := $M.0;
    goto corral_source_split_173;

  $bb72:
    assume out_$i35 == 1;
    goto corral_source_split_172;

  $bb70:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb66:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb58:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb40:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb94:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $M.21 := out_$i61;
    call {:si_unique_call 51} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$i60 := $M.21;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.0 := 2;
    call {:si_unique_call 50} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(2);
    goto corral_source_split_214;

  $bb95:
    assume out_$i59 == 1;
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i58 := $M.38;
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.38 := out_$i57;
    call {:si_unique_call 49} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} out_$i57 := amc6821_probe(out_$p55, out_$p56);
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p56 := $M.37;
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p55 := $M.35;
    goto corral_source_split_206;

  $bb93:
    assume out_$i54 == 1;
    goto corral_source_split_205;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i53 := $M.0;
    goto corral_source_split_179;

  $bb79:
    assume out_$i40 == 1;
    goto corral_source_split_178;

  $bb78:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb100:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.21 := out_$i67;
    call {:si_unique_call 54} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(out_$i66, 1);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i66 := $M.21;
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 53} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_vslice_dummy_var_2 := amc6821_remove(out_$p64);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$p64 := $M.35;
    goto corral_source_split_220;

  $bb99:
    assume out_$i63 == 1;
    goto corral_source_split_219;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i62 := $M.0;
    goto corral_source_split_183;

  $bb81:
    assume out_$i41 == 1;
    goto corral_source_split_182;

  $bb80:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb83;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb83;

  $bb106:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb111:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 59} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_238;

  SeqInstr_3:
    goto corral_source_split_237;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_vslice_dummy_var_3 := get_temp(out_$p74, out_$p75, out_$p76);
    goto SeqInstr_2;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$p76 := $M.41;
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p75 := $M.40;
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p74 := $M.39;
    goto corral_source_split_234;

  $bb110:
    assume out_$i73 == 1;
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 1);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i72 := $M.1;
    goto corral_source_split_230;

  $bb108:
    assume out_$i71 == 1;
    goto corral_source_split_229;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} out_$i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i70);
    call {:si_unique_call 57} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i70);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb105:
    assume out_$i69 == 1;
    goto corral_source_split_227;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i68 := $M.1;
    goto corral_source_split_169;

  $bb71:
    assume !(out_$i34 == 1);
    goto corral_source_split_168;

  $bb109:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb117:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb122:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 64} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_251;

  SeqInstr_6:
    goto corral_source_split_250;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_vslice_dummy_var_4 := get_temp2_fault(out_$p84, out_$p85, out_$p86);
    goto SeqInstr_5;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$p86 := $M.44;
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$p85 := $M.43;
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$p84 := $M.42;
    goto corral_source_split_247;

  $bb121:
    assume out_$i83 == 1;
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i82 := $M.2;
    goto corral_source_split_243;

  $bb119:
    assume out_$i81 == 1;
    goto corral_source_split_242;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} out_$i80 := __VERIFIER_nondet_int();
    call {:si_unique_call 61} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i80);
    call {:si_unique_call 62} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i80);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb116:
    assume out_$i79 == 1;
    goto corral_source_split_240;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i78 := $M.2;
    goto corral_source_split_161;

  $bb68:
    assume out_$i33 == 1;
    goto corral_source_split_160;

  $bb67:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb120:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb128:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 69} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_264;

  SeqInstr_9:
    goto corral_source_split_263;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_vslice_dummy_var_5 := get_pwm1_auto_channels_temp(out_$p94, out_$p95, out_$p96);
    goto SeqInstr_8;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$p96 := $M.47;
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$p95 := $M.46;
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p94 := $M.45;
    goto corral_source_split_260;

  $bb132:
    assume out_$i93 == 1;
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 1);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i92 := $M.3;
    goto corral_source_split_256;

  $bb130:
    assume out_$i91 == 1;
    goto corral_source_split_255;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} out_$i90 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i90);
    call {:si_unique_call 67} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i90);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume out_$i89 == 1;
    goto corral_source_split_253;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i88 := $M.3;
    goto corral_source_split_165;

  $bb69:
    assume !(out_$i33 == 1);
    goto corral_source_split_164;

  $bb131:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb139:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb144:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 74} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_277;

  SeqInstr_12:
    goto corral_source_split_276;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} out_vslice_dummy_var_6 := get_temp_alarm(out_$p104, out_$p105, out_$p106);
    goto SeqInstr_11;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p106 := $M.50;
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$p105 := $M.49;
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$p104 := $M.48;
    goto corral_source_split_273;

  $bb143:
    assume out_$i103 == 1;
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 1);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i102 := $M.4;
    goto corral_source_split_269;

  $bb141:
    assume out_$i101 == 1;
    goto corral_source_split_268;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} out_$i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i100);
    call {:si_unique_call 72} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i100);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume out_$i99 == 1;
    goto corral_source_split_266;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i98 := $M.4;
    goto corral_source_split_153;

  $bb64:
    assume out_$i31 == 1;
    goto corral_source_split_152;

  $bb60:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb59:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb142:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb150:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 79} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_290;

  SeqInstr_15:
    goto corral_source_split_289;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} out_vslice_dummy_var_7 := get_fan(out_$p114, out_$p115, out_$p116);
    goto SeqInstr_14;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$p116 := $M.53;
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p115 := $M.52;
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$p114 := $M.51;
    goto corral_source_split_286;

  $bb154:
    assume out_$i113 == 1;
    goto corral_source_split_285;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_283;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i112 := $M.5;
    goto corral_source_split_282;

  $bb152:
    assume out_$i111 == 1;
    goto corral_source_split_281;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 75} out_$i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 76} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i110);
    call {:si_unique_call 77} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i110);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume out_$i109 == 1;
    goto corral_source_split_279;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i108 := $M.5;
    goto corral_source_split_157;

  $bb65:
    assume !(out_$i31 == 1);
    goto corral_source_split_156;

  $bb153:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb161:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb171:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 84} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_308;

  SeqInstr_18:
    goto corral_source_split_307;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} out_vslice_dummy_var_8 := set_temp_auto_point_temp(out_$p126, out_$p127, out_$p128, out_$i129);
    goto SeqInstr_17;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$i129 := $M.57;
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$p128 := $M.56;
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p127 := $M.55;
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p126 := $M.54;
    goto corral_source_split_303;

  $bb170:
    assume out_$i125 == 1;
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 1);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i124 := $M.6;
    goto corral_source_split_299;

  $bb168:
    assume out_$i123 == 1;
    goto corral_source_split_298;

  $bb163:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} out_$i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i120);
    call {:si_unique_call 82} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i120);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb160:
    assume out_$i119 == 1;
    goto corral_source_split_292;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$i118 := $M.6;
    goto corral_source_split_145;

  $bb62:
    assume out_$i30 == 1;
    goto corral_source_split_144;

  $bb61:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb175:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 86} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_315;

  SeqInstr_21:
    goto corral_source_split_314;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} out_vslice_dummy_var_9 := get_temp_auto_point_temp(out_$p133, out_$p134, out_$p135);
    goto SeqInstr_20;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p135 := $M.58;
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p134 := $M.55;
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p133 := $M.54;
    goto corral_source_split_311;

  $bb174:
    assume out_$i132 == 1;
    goto corral_source_split_310;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 1);
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i131 := $M.6;
    goto corral_source_split_295;

  $bb165:
    assume out_$i122 == 1;
    goto corral_source_split_294;

  $bb164:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb166:
    assume {:verifier.code 0} true;
    assume !(out_$i122 == 1);
    goto $bb167;

  $bb169:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb167;

  $bb180:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 91} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_333;

  SeqInstr_24:
    goto corral_source_split_332;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} out_vslice_dummy_var_10 := set_temp_auto_point_temp(out_$p145, out_$p146, out_$p147, out_$i148);
    goto SeqInstr_23;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i148 := $M.62;
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$p147 := $M.61;
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$p146 := $M.60;
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$p145 := $M.59;
    goto corral_source_split_328;

  $bb189:
    assume out_$i144 == 1;
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 1);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i143 := $M.7;
    goto corral_source_split_324;

  $bb187:
    assume out_$i142 == 1;
    goto corral_source_split_323;

  $bb182:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i139, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i139, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} out_$i139 := __VERIFIER_nondet_int();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i139);
    call {:si_unique_call 89} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i139);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume out_$i138 == 1;
    goto corral_source_split_317;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i137 := $M.7;
    goto corral_source_split_149;

  $bb63:
    assume !(out_$i30 == 1);
    goto corral_source_split_148;

  $bb194:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 93} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_340;

  SeqInstr_27:
    goto corral_source_split_339;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} out_vslice_dummy_var_11 := get_temp_auto_point_temp(out_$p152, out_$p153, out_$p154);
    goto SeqInstr_26;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p154 := $M.63;
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p153 := $M.60;
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$p152 := $M.59;
    goto corral_source_split_336;

  $bb193:
    assume out_$i151 == 1;
    goto corral_source_split_335;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 1);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$i150 := $M.7;
    goto corral_source_split_320;

  $bb184:
    assume out_$i141 == 1;
    goto corral_source_split_319;

  $bb183:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i139, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(out_$i141 == 1);
    goto $bb186;

  $bb188:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb186;

  $bb199:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 98} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_353;

  SeqInstr_30:
    goto corral_source_split_352;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} out_vslice_dummy_var_12 := get_temp_alarm(out_$p162, out_$p163, out_$p164);
    goto SeqInstr_29;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p164 := $M.66;
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p163 := $M.65;
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p162 := $M.64;
    goto corral_source_split_349;

  $bb203:
    assume out_$i161 == 1;
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 1);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i160 := $M.8;
    goto corral_source_split_345;

  $bb201:
    assume out_$i159 == 1;
    goto corral_source_split_344;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} out_$i158 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i158);
    call {:si_unique_call 96} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i158);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb198:
    assume out_$i157 == 1;
    goto corral_source_split_342;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i32(out_$i156, 0);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i156 := $M.8;
    goto corral_source_split_137;

  $bb56:
    assume out_$i27 == 1;
    goto corral_source_split_136;

  $bb52:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb42:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb41:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb202:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb210:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 103} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_371;

  SeqInstr_33:
    goto corral_source_split_370;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} out_vslice_dummy_var_13 := set_temp(out_$p174, out_$p175, out_$p176, out_$i177);
    goto SeqInstr_32;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i177 := $M.70;
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$p176 := $M.69;
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$p175 := $M.68;
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$p174 := $M.67;
    goto corral_source_split_366;

  $bb219:
    assume out_$i173 == 1;
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 1);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$i172 := $M.9;
    goto corral_source_split_362;

  $bb217:
    assume out_$i171 == 1;
    goto corral_source_split_361;

  $bb212:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i168, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i169 := $slt.i32(out_$i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} out_$i168 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i168);
    call {:si_unique_call 101} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i168);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume out_$i167 == 1;
    goto corral_source_split_355;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i166, 0);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i166 := $M.9;
    goto corral_source_split_141;

  $bb57:
    assume !(out_$i27 == 1);
    goto corral_source_split_140;

  $bb224:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 105} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_378;

  SeqInstr_36:
    goto corral_source_split_377;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} out_vslice_dummy_var_14 := get_temp(out_$p181, out_$p182, out_$p183);
    goto SeqInstr_35;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p183 := $M.71;
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$p182 := $M.68;
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$p181 := $M.67;
    goto corral_source_split_374;

  $bb223:
    assume out_$i180 == 1;
    goto corral_source_split_373;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 1);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i179 := $M.9;
    goto corral_source_split_358;

  $bb214:
    assume out_$i170 == 1;
    goto corral_source_split_357;

  $bb213:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i168, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb215:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb216;

  $bb218:
    assume {:verifier.code 0} true;
    assume !(out_$i171 == 1);
    goto $bb216;

  $bb229:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb239:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 110} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_396;

  SeqInstr_39:
    goto corral_source_split_395;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} out_vslice_dummy_var_15 := set_fan(out_$p193, out_$p194, out_$p195, out_$i196);
    goto SeqInstr_38;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$i196 := $M.75;
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p195 := $M.74;
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p194 := $M.73;
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p193 := $M.72;
    goto corral_source_split_391;

  $bb238:
    assume out_$i192 == 1;
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 1);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$i191 := $M.10;
    goto corral_source_split_387;

  $bb236:
    assume out_$i190 == 1;
    goto corral_source_split_386;

  $bb231:
    assume out_$i188 == 1;
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i187, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb230:
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i187, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} out_$i187 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i187);
    call {:si_unique_call 108} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i187);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb228:
    assume out_$i186 == 1;
    goto corral_source_split_380;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i185 := $M.10;
    goto corral_source_split_129;

  $bb54:
    assume out_$i26 == 1;
    goto corral_source_split_128;

  $bb53:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i0, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb243:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 112} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_403;

  SeqInstr_42:
    goto corral_source_split_402;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} out_vslice_dummy_var_16 := get_fan(out_$p200, out_$p201, out_$p202);
    goto SeqInstr_41;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p202 := $M.76;
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p201 := $M.73;
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$p200 := $M.72;
    goto corral_source_split_399;

  $bb242:
    assume out_$i199 == 1;
    goto corral_source_split_398;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i198 := $M.10;
    goto corral_source_split_383;

  $bb233:
    assume out_$i189 == 1;
    goto corral_source_split_382;

  $bb232:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i187, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb234:
    assume {:verifier.code 0} true;
    assume !(out_$i189 == 1);
    goto $bb235;

  $bb237:
    assume {:verifier.code 0} true;
    assume !(out_$i190 == 1);
    goto $bb235;

  $bb248:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb253:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 117} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_416;

  SeqInstr_45:
    goto corral_source_split_415;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_vslice_dummy_var_17 := get_temp_alarm(out_$p210, out_$p211, out_$p212);
    goto SeqInstr_44;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p212 := $M.79;
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p211 := $M.78;
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p210 := $M.77;
    goto corral_source_split_412;

  $bb252:
    assume out_$i209 == 1;
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i208 := $M.11;
    goto corral_source_split_408;

  $bb250:
    assume out_$i207 == 1;
    goto corral_source_split_407;

  $bb249:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} out_$i206 := __VERIFIER_nondet_int();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i206);
    call {:si_unique_call 115} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i206);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb247:
    assume out_$i205 == 1;
    goto corral_source_split_405;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i205 := $ne.i32(out_$i204, 0);
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i204 := $M.11;
    goto corral_source_split_133;

  $bb55:
    assume !(out_$i26 == 1);
    goto corral_source_split_132;

  $bb251:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb259:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb264:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 122} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_429;

  SeqInstr_48:
    goto corral_source_split_428;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} out_vslice_dummy_var_18 := get_temp(out_$p220, out_$p221, out_$p222);
    goto SeqInstr_47;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$p222 := $M.82;
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p221 := $M.81;
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p220 := $M.80;
    goto corral_source_split_425;

  $bb263:
    assume out_$i219 == 1;
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i218 := $M.12;
    goto corral_source_split_421;

  $bb261:
    assume out_$i217 == 1;
    goto corral_source_split_420;

  $bb260:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} out_$i216 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i216);
    call {:si_unique_call 120} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i216);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb258:
    assume out_$i215 == 1;
    goto corral_source_split_418;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i32(out_$i214, 0);
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i214 := $M.12;
    goto corral_source_split_121;

  $bb50:
    assume out_$i24 == 1;
    goto corral_source_split_120;

  $bb44:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i0, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb43:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i0, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb262:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb270:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 127} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_442;

  SeqInstr_51:
    goto corral_source_split_441;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} out_vslice_dummy_var_19 := get_temp_alarm(out_$p230, out_$p231, out_$p232);
    goto SeqInstr_50;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$p232 := $M.85;
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p231 := $M.84;
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$p230 := $M.83;
    goto corral_source_split_438;

  $bb274:
    assume out_$i229 == 1;
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i228 := $M.13;
    goto corral_source_split_434;

  $bb272:
    assume out_$i227 == 1;
    goto corral_source_split_433;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} out_$i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i226);
    call {:si_unique_call 125} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i226);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i225 == 1;
    goto corral_source_split_431;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$i225 := $ne.i32(out_$i224, 0);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i224 := $M.13;
    goto corral_source_split_125;

  $bb51:
    assume !(out_$i24 == 1);
    goto corral_source_split_124;

  $bb273:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb281:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb286:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 132} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_455;

  SeqInstr_54:
    goto corral_source_split_454;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_vslice_dummy_var_20 := get_temp_alarm(out_$p240, out_$p241, out_$p242);
    goto SeqInstr_53;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p242 := $M.88;
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$p241 := $M.87;
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$p240 := $M.86;
    goto corral_source_split_451;

  $bb285:
    assume out_$i239 == 1;
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 1);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$i238 := $M.14;
    goto corral_source_split_447;

  $bb283:
    assume out_$i237 == 1;
    goto corral_source_split_446;

  $bb282:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} out_$i236 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i236);
    call {:si_unique_call 130} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i236);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb280:
    assume out_$i235 == 1;
    goto corral_source_split_444;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i235 := $ne.i32(out_$i234, 0);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i234 := $M.14;
    goto corral_source_split_109;

  $bb46:
    assume out_$i22 == 1;
    goto corral_source_split_108;

  $bb45:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i0, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb284:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb292:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb297:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 137} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_468;

  SeqInstr_57:
    goto corral_source_split_467;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} out_vslice_dummy_var_21 := get_fan1_fault(out_$p250, out_$p251, out_$p252);
    goto SeqInstr_56;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_$p252 := $M.91;
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$p251 := $M.90;
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$p250 := $M.89;
    goto corral_source_split_464;

  $bb296:
    assume out_$i249 == 1;
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 1);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i248 := $M.15;
    goto corral_source_split_460;

  $bb294:
    assume out_$i247 == 1;
    goto corral_source_split_459;

  $bb293:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} out_$i246 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i246);
    call {:si_unique_call 135} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i246);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb291:
    assume out_$i245 == 1;
    goto corral_source_split_457;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    out_$i245 := $ne.i32(out_$i244, 0);
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$i244 := $M.15;
    goto corral_source_split_113;

  $bb48:
    assume out_$i23 == 1;
    goto corral_source_split_112;

  $bb47:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i0, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb295:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb303:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb313:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    goto $bb314;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 142} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_486;

  SeqInstr_60:
    goto corral_source_split_485;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} out_vslice_dummy_var_22 := set_temp(out_$p262, out_$p263, out_$p264, out_$i265);
    goto SeqInstr_59;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i265 := $M.95;
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$p264 := $M.94;
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p263 := $M.93;
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$p262 := $M.92;
    goto corral_source_split_481;

  $bb312:
    assume out_$i261 == 1;
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 1);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    out_$i260 := $M.16;
    goto corral_source_split_477;

  $bb310:
    assume out_$i259 == 1;
    goto corral_source_split_476;

  $bb305:
    assume out_$i257 == 1;
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i256, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb304:
    assume {:verifier.code 0} true;
    out_$i257 := $slt.i32(out_$i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} out_$i256 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i256);
    call {:si_unique_call 140} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i256);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb302:
    assume out_$i255 == 1;
    goto corral_source_split_470;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i32(out_$i254, 0);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i254 := $M.16;
    goto corral_source_split_117;

  $bb49:
    assume !(out_$i23 == 1);
    goto corral_source_split_116;

  $bb317:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 144} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_493;

  SeqInstr_63:
    goto corral_source_split_492;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} out_vslice_dummy_var_23 := get_temp(out_$p269, out_$p270, out_$p271);
    goto SeqInstr_62;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$p271 := $M.96;
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$p270 := $M.93;
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p269 := $M.92;
    goto corral_source_split_489;

  $bb316:
    assume out_$i268 == 1;
    goto corral_source_split_488;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 1);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i267 := $M.16;
    goto corral_source_split_473;

  $bb307:
    assume out_$i258 == 1;
    goto corral_source_split_472;

  $bb306:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i256, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb308:
    assume {:verifier.code 0} true;
    assume !(out_$i258 == 1);
    goto $bb309;

  $bb311:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb309;

  $bb322:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb327:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 149} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_506;

  SeqInstr_66:
    goto corral_source_split_505;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} out_vslice_dummy_var_24 := get_pwm1_auto_point_pwm(out_$p279, out_$p280, out_$p281);
    goto SeqInstr_65;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$p281 := $M.99;
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$p280 := $M.98;
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$p279 := $M.97;
    goto corral_source_split_502;

  $bb326:
    assume out_$i278 == 1;
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 1);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$i277 := $M.17;
    goto corral_source_split_498;

  $bb324:
    assume out_$i276 == 1;
    goto corral_source_split_497;

  $bb323:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} out_$i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i275);
    call {:si_unique_call 147} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i275);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb321:
    assume out_$i274 == 1;
    goto corral_source_split_495;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i273 := $M.17;
    goto corral_source_split_101;

  $bb38:
    assume out_$i18 == 1;
    goto corral_source_split_100;

  $bb34:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i0, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb26:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i0, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb5:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i0, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb325:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb333:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb343:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 154} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_524;

  SeqInstr_69:
    goto corral_source_split_523;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} out_vslice_dummy_var_25 := set_temp(out_$p291, out_$p292, out_$p293, out_$i294);
    goto SeqInstr_68;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    out_$i294 := $M.103;
    goto corral_source_split_522;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    out_$p293 := $M.102;
    goto corral_source_split_521;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$p292 := $M.101;
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$p291 := $M.100;
    goto corral_source_split_519;

  $bb342:
    assume out_$i290 == 1;
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 1);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$i289 := $M.18;
    goto corral_source_split_515;

  $bb340:
    assume out_$i288 == 1;
    goto corral_source_split_514;

  $bb335:
    assume out_$i286 == 1;
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i285, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i285, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} out_$i285 := __VERIFIER_nondet_int();
    call {:si_unique_call 151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i285);
    call {:si_unique_call 152} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i285);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume out_$i284 == 1;
    goto corral_source_split_508;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i284 := $ne.i32(out_$i283, 0);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i283 := $M.18;
    goto corral_source_split_105;

  $bb39:
    assume !(out_$i18 == 1);
    goto corral_source_split_104;

  $bb347:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 156} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_531;

  SeqInstr_72:
    goto corral_source_split_530;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} out_vslice_dummy_var_26 := get_temp(out_$p298, out_$p299, out_$p300);
    goto SeqInstr_71;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p300 := $M.104;
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$p299 := $M.101;
    goto corral_source_split_528;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p298 := $M.100;
    goto corral_source_split_527;

  $bb346:
    assume out_$i297 == 1;
    goto corral_source_split_526;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_512;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i296 := $M.18;
    goto corral_source_split_511;

  $bb337:
    assume out_$i287 == 1;
    goto corral_source_split_510;

  $bb336:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i285, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb338:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb339;

  $bb341:
    assume {:verifier.code 0} true;
    assume !(out_$i288 == 1);
    goto $bb339;

  $bb352:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb362:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 161} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_549;

  SeqInstr_75:
    goto corral_source_split_548;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} out_vslice_dummy_var_27 := set_pwm1_enable(out_$p310, out_$p311, out_$p312, out_$i313);
    goto SeqInstr_74;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$i313 := $M.108;
    goto corral_source_split_547;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    out_$p312 := $M.107;
    goto corral_source_split_546;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$p311 := $M.106;
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$p310 := $M.105;
    goto corral_source_split_544;

  $bb361:
    assume out_$i309 == 1;
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 1);
    goto corral_source_split_541;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i308 := $M.19;
    goto corral_source_split_540;

  $bb359:
    assume out_$i307 == 1;
    goto corral_source_split_539;

  $bb354:
    assume out_$i305 == 1;
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i304, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i305 := $slt.i32(out_$i304, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} out_$i304 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i304);
    call {:si_unique_call 159} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i304);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb351:
    assume out_$i303 == 1;
    goto corral_source_split_533;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i303 := $ne.i32(out_$i302, 0);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$i302 := $M.19;
    goto corral_source_split_93;

  $bb36:
    assume out_$i17 == 1;
    goto corral_source_split_92;

  $bb35:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i0, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb366:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 163} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_556;

  SeqInstr_78:
    goto corral_source_split_555;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} out_vslice_dummy_var_28 := get_pwm1_enable(out_$p317, out_$p318, out_$p319);
    goto SeqInstr_77;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$p319 := $M.109;
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p318 := $M.106;
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p317 := $M.105;
    goto corral_source_split_552;

  $bb365:
    assume out_$i316 == 1;
    goto corral_source_split_551;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 1);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i315 := $M.19;
    goto corral_source_split_536;

  $bb356:
    assume out_$i306 == 1;
    goto corral_source_split_535;

  $bb355:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i304, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb357:
    assume {:verifier.code 0} true;
    assume !(out_$i306 == 1);
    goto $bb358;

  $bb360:
    assume {:verifier.code 0} true;
    assume !(out_$i307 == 1);
    goto $bb358;

  $bb371:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb381:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 168} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_574;

  SeqInstr_81:
    goto corral_source_split_573;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} out_vslice_dummy_var_29 := set_temp(out_$p329, out_$p330, out_$p331, out_$i332);
    goto SeqInstr_80;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i332 := $M.113;
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$p331 := $M.112;
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$p330 := $M.111;
    goto corral_source_split_570;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    out_$p329 := $M.110;
    goto corral_source_split_569;

  $bb380:
    assume out_$i328 == 1;
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 1);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i327 := $M.20;
    goto corral_source_split_565;

  $bb378:
    assume out_$i326 == 1;
    goto corral_source_split_564;

  $bb373:
    assume out_$i324 == 1;
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i323, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} out_$i323 := __VERIFIER_nondet_int();
    call {:si_unique_call 165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i323);
    call {:si_unique_call 166} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i323);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb370:
    assume out_$i322 == 1;
    goto corral_source_split_558;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i32(out_$i321, 0);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i321 := $M.20;
    goto corral_source_split_97;

  $bb37:
    assume !(out_$i17 == 1);
    goto corral_source_split_96;

  $bb385:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 170} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_581;

  SeqInstr_84:
    goto corral_source_split_580;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} out_vslice_dummy_var_30 := get_temp(out_$p336, out_$p337, out_$p338);
    goto SeqInstr_83;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$p338 := $M.114;
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$p337 := $M.111;
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$p336 := $M.110;
    goto corral_source_split_577;

  $bb384:
    assume out_$i335 == 1;
    goto corral_source_split_576;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 1);
    goto corral_source_split_562;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i334 := $M.20;
    goto corral_source_split_561;

  $bb375:
    assume out_$i325 == 1;
    goto corral_source_split_560;

  $bb374:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i323, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb376:
    assume {:verifier.code 0} true;
    assume !(out_$i325 == 1);
    goto $bb377;

  $bb379:
    assume {:verifier.code 0} true;
    assume !(out_$i326 == 1);
    goto $bb377;

  $bb390:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb400:
    assume {:verifier.code 0} true;
    assume !(out_$i347 == 1);
    goto $bb401;

  $bb403:
    assume {:verifier.code 0} true;
    assume !(out_$i349 == 1);
    goto $bb401;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 0);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i348 := $M.21;
    goto corral_source_split_594;

  $bb399:
    assume out_$i347 == 1;
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 3);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i346 := $M.22;
    goto corral_source_split_590;

  $bb397:
    assume out_$i345 == 1;
    goto corral_source_split_589;

  $bb392:
    assume out_$i343 == 1;
    assume {:verifier.code 0} true;
    out_$i345 := $eq.i32(out_$i342, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb391:
    assume {:verifier.code 0} true;
    out_$i343 := $slt.i32(out_$i342, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 171} out_$i342 := __VERIFIER_nondet_int();
    call {:si_unique_call 172} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i342);
    call {:si_unique_call 173} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i342);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb389:
    assume out_$i341 == 1;
    goto corral_source_split_583;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i341 := $ne.i32(out_$i340, 0);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i340 := $M.22;
    goto corral_source_split_85;

  $bb32:
    assume out_$i15 == 1;
    goto corral_source_split_84;

  $bb28:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i0, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb27:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i0, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb408:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb413:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i356 := $ne.i32(out_$i355, 0);
    goto corral_source_split_646;

  $bb411:
    assume {:verifier.code 0} true;
    out_$i355 := $M.115;
    goto corral_source_split_645;

  $bb410:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 212} {:cexpr "ldv_state_variable_33"} boogie_si_record_i32(1);
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 211} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 210} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 209} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 208} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 207} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 206} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 205} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 204} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 203} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 202} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_633;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 201} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 200} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 199} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 198} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_629;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 197} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 196} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_627;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 195} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_626;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 194} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 193} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 192} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 191} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_622;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 190} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 189} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 188} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 187} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_618;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 186} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 185} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 184} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 183} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 182} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 181} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 180} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.22 := 3;
    call {:si_unique_call 179} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_610;

  $bb409:
    assume out_$i354 == 1;
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 0);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i353 := $M.115;
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.115 := out_$i352;
    call {:si_unique_call 178} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i352);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} out_$i352 := amc6821_driver_init();
    goto corral_source_split_604;

  $bb407:
    assume out_$i351 == 1;
    goto corral_source_split_603;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 1);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$i350 := $M.22;
    goto corral_source_split_586;

  $bb394:
    assume out_$i344 == 1;
    goto corral_source_split_585;

  $bb393:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i342, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb395:
    assume {:verifier.code 0} true;
    assume !(out_$i344 == 1);
    goto $bb396;

  $bb398:
    assume {:verifier.code 0} true;
    assume !(out_$i345 == 1);
    goto $bb396;

  $bb419:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb429:
    assume !(out_$i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 218} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_667;

  SeqInstr_90:
    goto corral_source_split_666;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} out_vslice_dummy_var_31 := set_fan1_div(out_$p365, out_$p366, out_$p367, out_$i368);
    goto SeqInstr_89;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$i368 := $M.119;
    goto corral_source_split_665;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    out_$p367 := $M.118;
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$p366 := $M.117;
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    out_$p365 := $M.116;
    goto corral_source_split_662;

  $bb428:
    assume out_$i364 == 1;
    goto corral_source_split_661;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$i364 := $eq.i32(out_$i363, 1);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i363 := $M.23;
    goto corral_source_split_658;

  $bb426:
    assume out_$i362 == 1;
    goto corral_source_split_657;

  $bb421:
    assume out_$i360 == 1;
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb420:
    assume {:verifier.code 0} true;
    out_$i360 := $slt.i32(out_$i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} out_$i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i359);
    call {:si_unique_call 216} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i359);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb418:
    assume out_$i358 == 1;
    goto corral_source_split_651;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i358 := $ne.i32(out_$i357, 0);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i357 := $M.23;
    goto corral_source_split_89;

  $bb33:
    assume !(out_$i15 == 1);
    goto corral_source_split_88;

  $bb433:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.23 := 1;
    call {:si_unique_call 220} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_674;

  SeqInstr_93:
    goto corral_source_split_673;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_vslice_dummy_var_32 := get_fan1_div(out_$p372, out_$p373, out_$p374);
    goto SeqInstr_92;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$p374 := $M.120;
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p373 := $M.117;
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$p372 := $M.116;
    goto corral_source_split_670;

  $bb432:
    assume out_$i371 == 1;
    goto corral_source_split_669;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 1);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i370 := $M.23;
    goto corral_source_split_654;

  $bb423:
    assume out_$i361 == 1;
    goto corral_source_split_653;

  $bb422:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i359, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb424:
    assume {:verifier.code 0} true;
    assume !(out_$i361 == 1);
    goto $bb425;

  $bb427:
    assume {:verifier.code 0} true;
    assume !(out_$i362 == 1);
    goto $bb425;

  $bb438:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb448:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 225} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_692;

  SeqInstr_96:
    goto corral_source_split_691;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} out_vslice_dummy_var_33 := set_temp(out_$p384, out_$p385, out_$p386, out_$i387);
    goto SeqInstr_95;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i387 := $M.124;
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$p386 := $M.123;
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$p385 := $M.122;
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p384 := $M.121;
    goto corral_source_split_687;

  $bb447:
    assume out_$i383 == 1;
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 1);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i382 := $M.24;
    goto corral_source_split_683;

  $bb445:
    assume out_$i381 == 1;
    goto corral_source_split_682;

  $bb440:
    assume out_$i379 == 1;
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i378, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb439:
    assume {:verifier.code 0} true;
    out_$i379 := $slt.i32(out_$i378, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} out_$i378 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i378);
    call {:si_unique_call 223} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i378);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb437:
    assume out_$i377 == 1;
    goto corral_source_split_676;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i377 := $ne.i32(out_$i376, 0);
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i376 := $M.24;
    goto corral_source_split_77;

  $bb30:
    assume out_$i14 == 1;
    goto corral_source_split_76;

  $bb29:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i0, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb452:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto $bb453;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 227} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_699;

  SeqInstr_99:
    goto corral_source_split_698;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_vslice_dummy_var_34 := get_temp(out_$p391, out_$p392, out_$p393);
    goto SeqInstr_98;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p393 := $M.125;
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p392 := $M.122;
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$p391 := $M.121;
    goto corral_source_split_695;

  $bb451:
    assume out_$i390 == 1;
    goto corral_source_split_694;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i390 := $eq.i32(out_$i389, 1);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i389 := $M.24;
    goto corral_source_split_679;

  $bb442:
    assume out_$i380 == 1;
    goto corral_source_split_678;

  $bb441:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i378, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb443:
    assume {:verifier.code 0} true;
    assume !(out_$i380 == 1);
    goto $bb444;

  $bb446:
    assume {:verifier.code 0} true;
    assume !(out_$i381 == 1);
    goto $bb444;

  $bb457:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb468:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb467:
    assume !(out_$i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    goto $bb468;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 232} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_717;

  SeqInstr_102:
    goto corral_source_split_716;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_vslice_dummy_var_35 := set_temp(out_$p403, out_$p404, out_$p405, out_$i406);
    goto SeqInstr_101;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i406 := $M.129;
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$p405 := $M.128;
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p404 := $M.127;
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p403 := $M.126;
    goto corral_source_split_712;

  $bb466:
    assume out_$i402 == 1;
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i401, 1);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$i401 := $M.25;
    goto corral_source_split_708;

  $bb464:
    assume out_$i400 == 1;
    goto corral_source_split_707;

  $bb459:
    assume out_$i398 == 1;
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb458:
    assume {:verifier.code 0} true;
    out_$i398 := $slt.i32(out_$i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  corral_source_split_701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} out_$i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i397);
    call {:si_unique_call 230} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i397);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb456:
    assume out_$i396 == 1;
    goto corral_source_split_701;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i396 := $ne.i32(out_$i395, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i395 := $M.25;
    goto corral_source_split_81;

  $bb31:
    assume !(out_$i14 == 1);
    goto corral_source_split_80;

  $bb471:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 234} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_724;

  SeqInstr_105:
    goto corral_source_split_723;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} out_vslice_dummy_var_36 := get_temp(out_$p410, out_$p411, out_$p412);
    goto SeqInstr_104;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p412 := $M.130;
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$p411 := $M.127;
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$p410 := $M.126;
    goto corral_source_split_720;

  $bb470:
    assume out_$i409 == 1;
    goto corral_source_split_719;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 1);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i408 := $M.25;
    goto corral_source_split_704;

  $bb461:
    assume out_$i399 == 1;
    goto corral_source_split_703;

  $bb460:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i397, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb462:
    assume {:verifier.code 0} true;
    assume !(out_$i399 == 1);
    goto $bb463;

  $bb465:
    assume {:verifier.code 0} true;
    assume !(out_$i400 == 1);
    goto $bb463;

  $bb476:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb481:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 239} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_737;

  SeqInstr_108:
    goto corral_source_split_736;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} out_vslice_dummy_var_37 := get_temp_auto_point_temp(out_$p420, out_$p421, out_$p422);
    goto SeqInstr_107;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$p422 := $M.133;
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p421 := $M.132;
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p420 := $M.131;
    goto corral_source_split_733;

  $bb480:
    assume out_$i419 == 1;
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 1);
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i418 := $M.26;
    goto corral_source_split_729;

  $bb478:
    assume out_$i417 == 1;
    goto corral_source_split_728;

  $bb477:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  corral_source_split_726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} out_$i416 := __VERIFIER_nondet_int();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i416);
    call {:si_unique_call 237} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i416);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb475:
    assume out_$i415 == 1;
    goto corral_source_split_726;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i415 := $ne.i32(out_$i414, 0);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i414 := $M.26;
    goto corral_source_split_69;

  $bb24:
    assume out_$i11 == 1;
    goto corral_source_split_68;

  $bb20:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i0, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb7:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i0, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb479:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb487:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb497:
    assume !(out_$i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    goto $bb498;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 244} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_755;

  SeqInstr_111:
    goto corral_source_split_754;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} out_vslice_dummy_var_38 := set_temp_auto_point_temp(out_$p432, out_$p433, out_$p434, out_$i435);
    goto SeqInstr_110;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i435 := $M.137;
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$p434 := $M.136;
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$p433 := $M.135;
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$p432 := $M.134;
    goto corral_source_split_750;

  $bb496:
    assume out_$i431 == 1;
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$i431 := $eq.i32(out_$i430, 1);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i430 := $M.27;
    goto corral_source_split_746;

  $bb494:
    assume out_$i429 == 1;
    goto corral_source_split_745;

  $bb489:
    assume out_$i427 == 1;
    assume {:verifier.code 0} true;
    out_$i429 := $eq.i32(out_$i426, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb488:
    assume {:verifier.code 0} true;
    out_$i427 := $slt.i32(out_$i426, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} out_$i426 := __VERIFIER_nondet_int();
    call {:si_unique_call 241} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i426);
    call {:si_unique_call 242} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i426);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb486:
    assume out_$i425 == 1;
    goto corral_source_split_739;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i425 := $ne.i32(out_$i424, 0);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i424 := $M.27;
    goto corral_source_split_73;

  $bb25:
    assume !(out_$i11 == 1);
    goto corral_source_split_72;

  $bb501:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 246} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_762;

  SeqInstr_114:
    goto corral_source_split_761;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} out_vslice_dummy_var_39 := get_temp_auto_point_temp(out_$p439, out_$p440, out_$p441);
    goto SeqInstr_113;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p441 := $M.138;
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p440 := $M.135;
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p439 := $M.134;
    goto corral_source_split_758;

  $bb500:
    assume out_$i438 == 1;
    goto corral_source_split_757;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 1);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i437 := $M.27;
    goto corral_source_split_742;

  $bb491:
    assume out_$i428 == 1;
    goto corral_source_split_741;

  $bb490:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i426, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb492:
    assume {:verifier.code 0} true;
    assume !(out_$i428 == 1);
    goto $bb493;

  $bb495:
    assume {:verifier.code 0} true;
    assume !(out_$i429 == 1);
    goto $bb493;

  $bb506:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb522:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb516:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 251} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_780;

  SeqInstr_117:
    goto corral_source_split_779;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} out_vslice_dummy_var_40 := set_pwm1_auto_point_pwm(out_$p451, out_$p452, out_$p453, out_$i454);
    goto SeqInstr_116;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$i454 := $M.142;
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$p453 := $M.141;
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$p452 := $M.140;
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$p451 := $M.139;
    goto corral_source_split_775;

  $bb515:
    assume out_$i450 == 1;
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$i450 := $eq.i32(out_$i449, 1);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i449 := $M.28;
    goto corral_source_split_771;

  $bb513:
    assume out_$i448 == 1;
    goto corral_source_split_770;

  $bb508:
    assume out_$i446 == 1;
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i445, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb507:
    assume {:verifier.code 0} true;
    out_$i446 := $slt.i32(out_$i445, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb508, $bb509;

  corral_source_split_764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} out_$i445 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i445);
    call {:si_unique_call 249} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i445);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb505:
    assume out_$i444 == 1;
    goto corral_source_split_764;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i444 := $ne.i32(out_$i443, 0);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i443 := $M.28;
    goto corral_source_split_61;

  $bb22:
    assume out_$i10 == 1;
    goto corral_source_split_60;

  $bb21:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i0, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb520:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 253} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_787;

  SeqInstr_120:
    goto corral_source_split_786;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_vslice_dummy_var_41 := get_pwm1_auto_point_pwm(out_$p458, out_$p459, out_$p460);
    goto SeqInstr_119;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$p460 := $M.143;
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$p459 := $M.140;
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p458 := $M.139;
    goto corral_source_split_783;

  $bb519:
    assume out_$i457 == 1;
    goto corral_source_split_782;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i457 := $eq.i32(out_$i456, 1);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i456 := $M.28;
    goto corral_source_split_767;

  $bb510:
    assume out_$i447 == 1;
    goto corral_source_split_766;

  $bb509:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    out_$i447 := $eq.i32(out_$i445, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb511:
    assume {:verifier.code 0} true;
    assume !(out_$i447 == 1);
    goto $bb512;

  $bb514:
    assume {:verifier.code 0} true;
    assume !(out_$i448 == 1);
    goto $bb512;

  $bb525:
    assume !(out_$i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb535:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 258} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_805;

  SeqInstr_123:
    goto corral_source_split_804;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} out_vslice_dummy_var_42 := set_pwm1(out_$p470, out_$p471, out_$p472, out_$i473);
    goto SeqInstr_122;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$i473 := $M.147;
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p472 := $M.146;
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$p471 := $M.145;
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$p470 := $M.144;
    goto corral_source_split_800;

  $bb534:
    assume out_$i469 == 1;
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 1);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$i468 := $M.29;
    goto corral_source_split_796;

  $bb532:
    assume out_$i467 == 1;
    goto corral_source_split_795;

  $bb527:
    assume out_$i465 == 1;
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i32(out_$i464, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb532, $bb533;

  $bb526:
    assume {:verifier.code 0} true;
    out_$i465 := $slt.i32(out_$i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  corral_source_split_789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} out_$i464 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i464);
    call {:si_unique_call 256} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i464);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb524:
    assume out_$i463 == 1;
    goto corral_source_split_789;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i463 := $ne.i32(out_$i462, 0);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$i462 := $M.29;
    goto corral_source_split_65;

  $bb23:
    assume !(out_$i10 == 1);
    goto corral_source_split_64;

  $bb539:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    goto $bb540;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 260} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_812;

  SeqInstr_126:
    goto corral_source_split_811;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} out_vslice_dummy_var_43 := get_pwm1(out_$p477, out_$p478, out_$p479);
    goto SeqInstr_125;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$p479 := $M.148;
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p478 := $M.145;
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p477 := $M.144;
    goto corral_source_split_808;

  $bb538:
    assume out_$i476 == 1;
    goto corral_source_split_807;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb538, $bb539;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 1);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$i475 := $M.29;
    goto corral_source_split_792;

  $bb529:
    assume out_$i466 == 1;
    goto corral_source_split_791;

  $bb528:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i464, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb531:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb530:
    assume {:verifier.code 0} true;
    assume !(out_$i466 == 1);
    goto $bb531;

  $bb533:
    assume {:verifier.code 0} true;
    assume !(out_$i467 == 1);
    goto $bb531;

  $bb544:
    assume !(out_$i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb556:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb554:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb555;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 265} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_830;

  SeqInstr_129:
    goto corral_source_split_829;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_vslice_dummy_var_44 := set_fan(out_$p489, out_$p490, out_$p491, out_$i492);
    goto SeqInstr_128;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i492 := $M.152;
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p491 := $M.151;
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p490 := $M.150;
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p489 := $M.149;
    goto corral_source_split_825;

  $bb553:
    assume out_$i488 == 1;
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb553, $bb554;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i488 := $eq.i32(out_$i487, 1);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i487 := $M.30;
    goto corral_source_split_821;

  $bb551:
    assume out_$i486 == 1;
    goto corral_source_split_820;

  $bb546:
    assume out_$i484 == 1;
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i483, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  $bb545:
    assume {:verifier.code 0} true;
    out_$i484 := $slt.i32(out_$i483, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} out_$i483 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i483);
    call {:si_unique_call 263} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i483);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb543:
    assume out_$i482 == 1;
    goto corral_source_split_814;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i482 := $ne.i32(out_$i481, 0);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i481 := $M.30;
    goto corral_source_split_53;

  $bb18:
    assume out_$i8 == 1;
    goto corral_source_split_52;

  $bb9:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i0, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i0, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb558:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    goto $bb559;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 267} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_837;

  SeqInstr_132:
    goto corral_source_split_836;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} out_vslice_dummy_var_45 := get_fan(out_$p496, out_$p497, out_$p498);
    goto SeqInstr_131;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p498 := $M.153;
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p497 := $M.150;
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p496 := $M.149;
    goto corral_source_split_833;

  $bb557:
    assume out_$i495 == 1;
    goto corral_source_split_832;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb557, $bb558;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i495 := $eq.i32(out_$i494, 1);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i494 := $M.30;
    goto corral_source_split_817;

  $bb548:
    assume out_$i485 == 1;
    goto corral_source_split_816;

  $bb547:
    assume !(out_$i484 == 1);
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i483, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb548, $bb549;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb549:
    assume {:verifier.code 0} true;
    assume !(out_$i485 == 1);
    goto $bb550;

  $bb552:
    assume {:verifier.code 0} true;
    assume !(out_$i486 == 1);
    goto $bb550;

  $bb563:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb568:
    assume !(out_$i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    goto $bb569;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 272} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_850;

  SeqInstr_135:
    goto corral_source_split_849;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} out_vslice_dummy_var_46 := get_pwm1_auto_point_pwm(out_$p506, out_$p507, out_$p508);
    goto SeqInstr_134;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$p508 := $M.156;
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$p507 := $M.155;
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p506 := $M.154;
    goto corral_source_split_846;

  $bb567:
    assume out_$i505 == 1;
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i505 := $eq.i32(out_$i504, 1);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i504 := $M.31;
    goto corral_source_split_842;

  $bb565:
    assume out_$i503 == 1;
    goto corral_source_split_841;

  $bb564:
    assume {:verifier.code 0} true;
    out_$i503 := $eq.i32(out_$i502, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  corral_source_split_839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} out_$i502 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i502);
    call {:si_unique_call 270} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i502);
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb562:
    assume out_$i501 == 1;
    goto corral_source_split_839;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i501 := $ne.i32(out_$i500, 0);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$i500 := $M.31;
    goto corral_source_split_57;

  $bb19:
    assume !(out_$i8 == 1);
    goto corral_source_split_56;

  $bb566:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb574:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb584:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 277} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_868;

  SeqInstr_138:
    goto corral_source_split_867;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_vslice_dummy_var_47 := set_temp_auto_point_temp(out_$p518, out_$p519, out_$p520, out_$i521);
    goto SeqInstr_137;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i521 := $M.160;
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$p520 := $M.159;
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p519 := $M.158;
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p518 := $M.157;
    goto corral_source_split_863;

  $bb583:
    assume out_$i517 == 1;
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i517 := $eq.i32(out_$i516, 1);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i516 := $M.32;
    goto corral_source_split_859;

  $bb581:
    assume out_$i515 == 1;
    goto corral_source_split_858;

  $bb576:
    assume out_$i513 == 1;
    assume {:verifier.code 0} true;
    out_$i515 := $eq.i32(out_$i512, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb575:
    assume {:verifier.code 0} true;
    out_$i513 := $slt.i32(out_$i512, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb576, $bb577;

  corral_source_split_852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} out_$i512 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i512);
    call {:si_unique_call 275} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i512);
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb573:
    assume out_$i511 == 1;
    goto corral_source_split_852;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i511 := $ne.i32(out_$i510, 0);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i510 := $M.32;
    goto corral_source_split_41;

  $bb11:
    assume out_$i5 == 1;
    goto corral_source_split_40;

  $bb10:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb588:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 279} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_875;

  SeqInstr_141:
    goto corral_source_split_874;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} out_vslice_dummy_var_48 := get_temp_auto_point_temp(out_$p525, out_$p526, out_$p527);
    goto SeqInstr_140;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p527 := $M.161;
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p526 := $M.158;
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p525 := $M.157;
    goto corral_source_split_871;

  $bb587:
    assume out_$i524 == 1;
    goto corral_source_split_870;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i524 := $eq.i32(out_$i523, 1);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i523 := $M.32;
    goto corral_source_split_855;

  $bb578:
    assume out_$i514 == 1;
    goto corral_source_split_854;

  $bb577:
    assume !(out_$i513 == 1);
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i512, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb579:
    assume {:verifier.code 0} true;
    assume !(out_$i514 == 1);
    goto $bb580;

  $bb582:
    assume {:verifier.code 0} true;
    assume !(out_$i515 == 1);
    goto $bb580;

  $bb593:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb601:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb598:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb599;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 284} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_888;

  SeqInstr_144:
    goto corral_source_split_887;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} out_vslice_dummy_var_49 := get_temp_alarm(out_$p535, out_$p536, out_$p537);
    goto SeqInstr_143;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p537 := $M.164;
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p536 := $M.163;
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p535 := $M.162;
    goto corral_source_split_884;

  $bb597:
    assume out_$i534 == 1;
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 1);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$i533 := $M.33;
    goto corral_source_split_880;

  $bb595:
    assume out_$i532 == 1;
    goto corral_source_split_879;

  $bb594:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i32(out_$i531, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  corral_source_split_877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 280} out_$i531 := __VERIFIER_nondet_int();
    call {:si_unique_call 281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i531);
    call {:si_unique_call 282} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i531);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb592:
    assume out_$i530 == 1;
    goto corral_source_split_877;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i530 := $ne.i32(out_$i529, 0);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i529 := $M.33;
    goto corral_source_split_45;

  $bb13:
    assume out_$i6 == 1;
    goto corral_source_split_44;

  $bb12:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i0, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb596:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb604:
    assume !(out_$i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb620:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb614:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb615;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    goto $bb615;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 289} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_906;

  SeqInstr_147:
    goto corral_source_split_905;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_vslice_dummy_var_50 := set_temp_auto_point_temp(out_$p547, out_$p548, out_$p549, out_$i550);
    goto SeqInstr_146;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i550 := $M.168;
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p549 := $M.167;
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p548 := $M.166;
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p547 := $M.165;
    goto corral_source_split_901;

  $bb613:
    assume out_$i546 == 1;
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 1);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i545 := $M.34;
    goto corral_source_split_897;

  $bb611:
    assume out_$i544 == 1;
    goto corral_source_split_896;

  $bb606:
    assume out_$i542 == 1;
    assume {:verifier.code 0} true;
    out_$i544 := $eq.i32(out_$i541, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  $bb605:
    assume {:verifier.code 0} true;
    out_$i542 := $slt.i32(out_$i541, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  corral_source_split_890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} out_$i541 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i541);
    call {:si_unique_call 287} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i541);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb603:
    assume out_$i540 == 1;
    goto corral_source_split_890;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i540 := $ne.i32(out_$i539, 0);
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$i539 := $M.34;
    goto corral_source_split_49;

  $bb15:
    assume out_$i7 == 1;
    goto corral_source_split_48;

  $bb14:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i0, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb618:
    assume !(out_$i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 291} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_913;

  SeqInstr_150:
    goto corral_source_split_912;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_vslice_dummy_var_51 := get_temp_auto_point_temp(out_$p554, out_$p555, out_$p556);
    goto SeqInstr_149;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p556 := $M.169;
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p555 := $M.166;
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p554 := $M.165;
    goto corral_source_split_909;

  $bb617:
    assume out_$i553 == 1;
    goto corral_source_split_908;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i553 := $eq.i32(out_$i552, 1);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i552 := $M.34;
    goto corral_source_split_893;

  $bb608:
    assume out_$i543 == 1;
    goto corral_source_split_892;

  $bb607:
    assume !(out_$i542 == 1);
    assume {:verifier.code 0} true;
    out_$i543 := $eq.i32(out_$i541, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb609:
    assume {:verifier.code 0} true;
    assume !(out_$i543 == 1);
    goto $bb610;

  $bb612:
    assume {:verifier.code 0} true;
    assume !(out_$i544 == 1);
    goto $bb610;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb17;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb17;

  $bb104_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$p182, out_$p183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$p212, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p232, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$p242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$p293, out_$i294, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$p312, out_$i313, out_$i315, out_$i316, out_$p317, out_$p318, out_$p319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$p337, out_$p338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$p366, out_$p367, out_$i368, out_$i370, out_$i371, out_$p372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$p385, out_$p386, out_$i387, out_$i389, out_$i390, out_$p391, out_$p392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$p403, out_$p404, out_$p405, out_$i406, out_$i408, out_$i409, out_$p410, out_$p411, out_$p412, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i437, out_$i438, out_$p439, out_$p440, out_$p441, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$i454, out_$i456, out_$i457, out_$p458, out_$p459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$p471, out_$p472, out_$i473, out_$i475, out_$i476, out_$p477, out_$p478, out_$p479, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$p497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$p506, out_$p507, out_$p508, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$p518, out_$p519, out_$p520, out_$i521, out_$i523, out_$i524, out_$p525, out_$p526, out_$p527, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$p537, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$p547, out_$p548, out_$p549, out_$i550, out_$i552, out_$i553, out_$p554, out_$p555, out_$p556, out_vslice_dummy_var_0, out_vslice_dummy_var_1, out_vslice_dummy_var_2, out_vslice_dummy_var_3, out_vslice_dummy_var_4, out_vslice_dummy_var_5, out_vslice_dummy_var_6, out_vslice_dummy_var_7, out_vslice_dummy_var_8, out_vslice_dummy_var_9, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_12, out_vslice_dummy_var_13, out_vslice_dummy_var_14, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i48, out_$i49, out_$p50, out_$p51, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$p85, out_$p86, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i131, out_$i132, out_$p133, out_$p134, out_$p135, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p145, out_$p146, out_$p147, out_$i148, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i179, out_$i180, out_$p181, out_$p182, out_$p183, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$p212, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p232, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$p241, out_$p242, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$p250, out_$p251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$p264, out_$i265, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$p279, out_$p280, out_$p281, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$p292, out_$p293, out_$i294, out_$i296, out_$i297, out_$p298, out_$p299, out_$p300, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$p312, out_$i313, out_$i315, out_$i316, out_$p317, out_$p318, out_$p319, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$p331, out_$i332, out_$i334, out_$i335, out_$p336, out_$p337, out_$p338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$p366, out_$p367, out_$i368, out_$i370, out_$i371, out_$p372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$p385, out_$p386, out_$i387, out_$i389, out_$i390, out_$p391, out_$p392, out_$p393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$p403, out_$p404, out_$p405, out_$i406, out_$i408, out_$i409, out_$p410, out_$p411, out_$p412, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p432, out_$p433, out_$p434, out_$i435, out_$i437, out_$i438, out_$p439, out_$p440, out_$p441, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$p451, out_$p452, out_$p453, out_$i454, out_$i456, out_$i457, out_$p458, out_$p459, out_$p460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$p470, out_$p471, out_$p472, out_$i473, out_$i475, out_$i476, out_$p477, out_$p478, out_$p479, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$p489, out_$p490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$p497, out_$p498, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$p506, out_$p507, out_$p508, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$p518, out_$p519, out_$p520, out_$i521, out_$i523, out_$i524, out_$p525, out_$p526, out_$p527, out_$i529, out_$i530, out_$i531, out_$i532, out_$i533, out_$i534, out_$p535, out_$p536, out_$p537, out_$i539, out_$i540, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$p547, out_$p548, out_$p549, out_$i550, out_$i552, out_$i553, out_$p554, out_$p555, out_$p556, out_vslice_dummy_var_0, out_vslice_dummy_var_1, out_vslice_dummy_var_2, out_vslice_dummy_var_3, out_vslice_dummy_var_4, out_vslice_dummy_var_5, out_vslice_dummy_var_6, out_vslice_dummy_var_7, out_vslice_dummy_var_8, out_vslice_dummy_var_9, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_12, out_vslice_dummy_var_13, out_vslice_dummy_var_14, out_vslice_dummy_var_15, out_vslice_dummy_var_16, out_vslice_dummy_var_17, out_vslice_dummy_var_18, out_vslice_dummy_var_19, out_vslice_dummy_var_20, out_vslice_dummy_var_21, out_vslice_dummy_var_22, out_vslice_dummy_var_23, out_vslice_dummy_var_24, out_vslice_dummy_var_25, out_vslice_dummy_var_26, out_vslice_dummy_var_27, out_vslice_dummy_var_28, out_vslice_dummy_var_29, out_vslice_dummy_var_30, out_vslice_dummy_var_31, out_vslice_dummy_var_32, out_vslice_dummy_var_33, out_vslice_dummy_var_34, out_vslice_dummy_var_35, out_vslice_dummy_var_36, out_vslice_dummy_var_37, out_vslice_dummy_var_38, out_vslice_dummy_var_39, out_vslice_dummy_var_40, out_vslice_dummy_var_41, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$i139: i32, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$i148: i64, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i1, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i1, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$i265: i64, in_$i267: i32, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$i294: i64, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$p300: ref, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$p311: ref, in_$p312: ref, in_$i313: i64, in_$i315: i32, in_$i316: i1, in_$p317: ref, in_$p318: ref, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$p330: ref, in_$p331: ref, in_$i332: i64, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$p338: ref, in_$i340: i32, in_$i341: i1, in_$i342: i32, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i32, in_$i347: i1, in_$i348: i32, in_$i349: i1, in_$i350: i32, in_$i351: i1, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i1, in_$i362: i1, in_$i363: i32, in_$i364: i1, in_$p365: ref, in_$p366: ref, in_$p367: ref, in_$i368: i64, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$i380: i1, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$p384: ref, in_$p385: ref, in_$p386: ref, in_$i387: i64, in_$i389: i32, in_$i390: i1, in_$p391: ref, in_$p392: ref, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i32, in_$i402: i1, in_$p403: ref, in_$p404: ref, in_$p405: ref, in_$i406: i64, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$p421: ref, in_$p422: ref, in_$i424: i32, in_$i425: i1, in_$i426: i32, in_$i427: i1, in_$i428: i1, in_$i429: i1, in_$i430: i32, in_$i431: i1, in_$p432: ref, in_$p433: ref, in_$p434: ref, in_$i435: i64, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$p440: ref, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$i445: i32, in_$i446: i1, in_$i447: i1, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$p453: ref, in_$i454: i64, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$p459: ref, in_$p460: ref, in_$i462: i32, in_$i463: i1, in_$i464: i32, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$p471: ref, in_$p472: ref, in_$i473: i64, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$p478: ref, in_$p479: ref, in_$i481: i32, in_$i482: i1, in_$i483: i32, in_$i484: i1, in_$i485: i1, in_$i486: i1, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$p490: ref, in_$p491: ref, in_$i492: i64, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$p497: ref, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i1, in_$p506: ref, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$i512: i32, in_$i513: i1, in_$i514: i1, in_$i515: i1, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$p519: ref, in_$p520: ref, in_$i521: i64, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$p526: ref, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$i531: i32, in_$i532: i1, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$p536: ref, in_$p537: ref, in_$i539: i32, in_$i540: i1, in_$i541: i32, in_$i542: i1, in_$i543: i1, in_$i544: i1, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$p548: ref, in_$p549: ref, in_$i550: i64, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$p555: ref, in_$p556: ref, in_vslice_dummy_var_0: i32, in_vslice_dummy_var_1: i32, in_vslice_dummy_var_2: i32, in_vslice_dummy_var_3: i64, in_vslice_dummy_var_4: i64, in_vslice_dummy_var_5: i64, in_vslice_dummy_var_6: i64, in_vslice_dummy_var_7: i64, in_vslice_dummy_var_8: i64, in_vslice_dummy_var_9: i64, in_vslice_dummy_var_10: i64, in_vslice_dummy_var_11: i64, in_vslice_dummy_var_12: i64, in_vslice_dummy_var_13: i64, in_vslice_dummy_var_14: i64, in_vslice_dummy_var_15: i64, in_vslice_dummy_var_16: i64, in_vslice_dummy_var_17: i64, in_vslice_dummy_var_18: i64, in_vslice_dummy_var_19: i64, in_vslice_dummy_var_20: i64, in_vslice_dummy_var_21: i64, in_vslice_dummy_var_22: i64, in_vslice_dummy_var_23: i64, in_vslice_dummy_var_24: i64, in_vslice_dummy_var_25: i64, in_vslice_dummy_var_26: i64, in_vslice_dummy_var_27: i64, in_vslice_dummy_var_28: i64, in_vslice_dummy_var_29: i64, in_vslice_dummy_var_30: i64, in_vslice_dummy_var_31: i64, in_vslice_dummy_var_32: i64, in_vslice_dummy_var_33: i64, in_vslice_dummy_var_34: i64, in_vslice_dummy_var_35: i64, in_vslice_dummy_var_36: i64, in_vslice_dummy_var_37: i64, in_vslice_dummy_var_38: i64, in_vslice_dummy_var_39: i64, in_vslice_dummy_var_40: i64, in_vslice_dummy_var_41: i64, in_vslice_dummy_var_42: i64, in_vslice_dummy_var_43: i64, in_vslice_dummy_var_44: i64, in_vslice_dummy_var_45: i64, in_vslice_dummy_var_46: i64, in_vslice_dummy_var_47: i64, in_vslice_dummy_var_48: i64, in_vslice_dummy_var_49: i64, in_vslice_dummy_var_50: i64, in_vslice_dummy_var_51: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$i139: i32, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$i148: i64, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i1, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i1, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$i265: i64, out_$i267: i32, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$i294: i64, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$p300: ref, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$p311: ref, out_$p312: ref, out_$i313: i64, out_$i315: i32, out_$i316: i1, out_$p317: ref, out_$p318: ref, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$p330: ref, out_$p331: ref, out_$i332: i64, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$p338: ref, out_$i340: i32, out_$i341: i1, out_$i342: i32, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i32, out_$i347: i1, out_$i348: i32, out_$i349: i1, out_$i350: i32, out_$i351: i1, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i1, out_$i362: i1, out_$i363: i32, out_$i364: i1, out_$p365: ref, out_$p366: ref, out_$p367: ref, out_$i368: i64, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$i380: i1, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$p384: ref, out_$p385: ref, out_$p386: ref, out_$i387: i64, out_$i389: i32, out_$i390: i1, out_$p391: ref, out_$p392: ref, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i32, out_$i402: i1, out_$p403: ref, out_$p404: ref, out_$p405: ref, out_$i406: i64, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$p421: ref, out_$p422: ref, out_$i424: i32, out_$i425: i1, out_$i426: i32, out_$i427: i1, out_$i428: i1, out_$i429: i1, out_$i430: i32, out_$i431: i1, out_$p432: ref, out_$p433: ref, out_$p434: ref, out_$i435: i64, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$p440: ref, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$i445: i32, out_$i446: i1, out_$i447: i1, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$p453: ref, out_$i454: i64, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$p459: ref, out_$p460: ref, out_$i462: i32, out_$i463: i1, out_$i464: i32, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$p471: ref, out_$p472: ref, out_$i473: i64, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$p478: ref, out_$p479: ref, out_$i481: i32, out_$i482: i1, out_$i483: i32, out_$i484: i1, out_$i485: i1, out_$i486: i1, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$p490: ref, out_$p491: ref, out_$i492: i64, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$p497: ref, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i1, out_$p506: ref, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$i512: i32, out_$i513: i1, out_$i514: i1, out_$i515: i1, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$p519: ref, out_$p520: ref, out_$i521: i64, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$p526: ref, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$i531: i32, out_$i532: i1, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$p536: ref, out_$p537: ref, out_$i539: i32, out_$i540: i1, out_$i541: i32, out_$i542: i1, out_$i543: i1, out_$i544: i1, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$p548: ref, out_$p549: ref, out_$i550: i64, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$p555: ref, out_$p556: ref, out_vslice_dummy_var_0: i32, out_vslice_dummy_var_1: i32, out_vslice_dummy_var_2: i32, out_vslice_dummy_var_3: i64, out_vslice_dummy_var_4: i64, out_vslice_dummy_var_5: i64, out_vslice_dummy_var_6: i64, out_vslice_dummy_var_7: i64, out_vslice_dummy_var_8: i64, out_vslice_dummy_var_9: i64, out_vslice_dummy_var_10: i64, out_vslice_dummy_var_11: i64, out_vslice_dummy_var_12: i64, out_vslice_dummy_var_13: i64, out_vslice_dummy_var_14: i64, out_vslice_dummy_var_15: i64, out_vslice_dummy_var_16: i64, out_vslice_dummy_var_17: i64, out_vslice_dummy_var_18: i64, out_vslice_dummy_var_19: i64, out_vslice_dummy_var_20: i64, out_vslice_dummy_var_21: i64, out_vslice_dummy_var_22: i64, out_vslice_dummy_var_23: i64, out_vslice_dummy_var_24: i64, out_vslice_dummy_var_25: i64, out_vslice_dummy_var_26: i64, out_vslice_dummy_var_27: i64, out_vslice_dummy_var_28: i64, out_vslice_dummy_var_29: i64, out_vslice_dummy_var_30: i64, out_vslice_dummy_var_31: i64, out_vslice_dummy_var_32: i64, out_vslice_dummy_var_33: i64, out_vslice_dummy_var_34: i64, out_vslice_dummy_var_35: i64, out_vslice_dummy_var_36: i64, out_vslice_dummy_var_37: i64, out_vslice_dummy_var_38: i64, out_vslice_dummy_var_39: i64, out_vslice_dummy_var_40: i64, out_vslice_dummy_var_41: i64, out_vslice_dummy_var_42: i64, out_vslice_dummy_var_43: i64, out_vslice_dummy_var_44: i64, out_vslice_dummy_var_45: i64, out_vslice_dummy_var_46: i64, out_vslice_dummy_var_47: i64, out_vslice_dummy_var_48: i64, out_vslice_dummy_var_49: i64, out_vslice_dummy_var_50: i64, out_vslice_dummy_var_51: i64);
  modifies $M.0, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $CurrAddr, $M.21, $M.38, $M.182, $M.1, $M.173, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.188, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.22, $M.115;


