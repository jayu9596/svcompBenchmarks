var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: ref;

var $M.9: [ref]i32;

var $M.10: i32;

var $M.11: [ref]i8;

var $M.12: [ref]ref;

var $M.13: [ref]i8;

var $M.14: [ref]i32;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]i64;

var $M.21: [ref]i32;

var $M.23: [ref]i32;

var $M.24: [ref]ref;

var $M.26: [ref]i32;

var $M.27: ref;

var $M.28: ref;

var $M.29: ref;

var $M.30: ref;

var $M.31: [ref]i8;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.62: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 408420);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const acm_driver_group1: ref;

axiom acm_driver_group1 == $sub.ref(0, 2060);

const acm_port_ops_group1: ref;

axiom acm_port_ops_group1 == $sub.ref(0, 3092);

const acm_ops_group0: ref;

axiom acm_ops_group0 == $sub.ref(0, 4124);

const acm_ops_group1: ref;

axiom acm_ops_group1 == $sub.ref(0, 5156);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 6184);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 7212);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 8240);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 9268);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 10296);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 11324);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 12352);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 13380);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 14408);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 15436);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 16464);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 17492);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 18520);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 19548);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 20576);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 21604);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 22632);

const __mod_usb__acm_ids_device_table: ref;

axiom __mod_usb__acm_ids_device_table == $sub.ref(0, 23688);

const dev_attr_iCountryCodeRelDate: ref;

axiom dev_attr_iCountryCodeRelDate == $sub.ref(0, 24760);

const dev_attr_wCountryCodes: ref;

axiom dev_attr_wCountryCodes == $sub.ref(0, 25832);

const dev_attr_bmCapabilities: ref;

axiom dev_attr_bmCapabilities == $sub.ref(0, 26904);

const acm_port_ops: ref;

axiom acm_port_ops == $sub.ref(0, 27968);

const acm_ops: ref;

axiom acm_ops == $sub.ref(0, 29264);

const acm_tty_driver: ref;

axiom acm_tty_driver == $sub.ref(0, 30296);

const {:count 99} acm_ids: ref;

axiom acm_ids == $sub.ref(0, 34488);

const acm_driver: ref;

axiom acm_driver == $sub.ref(0, 35816);

const {:count 32} acm_table: ref;

axiom acm_table == $sub.ref(0, 37096);

const acm_table_lock: ref;

axiom acm_table_lock == $sub.ref(0, 38288);

const {:count 25} .str.19: ref;

axiom .str.19 == $sub.ref(0, 39337);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 40376);

const {:count 8} .str.3: ref;

axiom .str.3 == $sub.ref(0, 41408);

const {:count 32} .str.10: ref;

axiom .str.10 == $sub.ref(0, 42464);

const {:count 20} .str.11: ref;

axiom .str.11 == $sub.ref(0, 43508);

const {:count 44} .str.1: ref;

axiom .str.1 == $sub.ref(0, 44576);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 45613);

const {:count 18} .str.77: ref;

axiom .str.77 == $sub.ref(0, 46655);

const {:count 218} .str.5: ref;

axiom .str.5 == $sub.ref(0, 47897);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 48925);

const {:count 15} .str.76: ref;

axiom .str.76 == $sub.ref(0, 49964);

const {:count 29} .str.29: ref;

axiom .str.29 == $sub.ref(0, 51017);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 52051);

const {:count 39} .str.31: ref;

axiom .str.31 == $sub.ref(0, 53114);

const {:count 35} .str.32: ref;

axiom .str.32 == $sub.ref(0, 54173);

const {:count 18} .str.33: ref;

axiom .str.33 == $sub.ref(0, 55215);

const {:count 46} .str.34: ref;

axiom .str.34 == $sub.ref(0, 56285);

const {:count 60} .str.35: ref;

axiom .str.35 == $sub.ref(0, 57369);

const {:count 43} .str.36: ref;

axiom .str.36 == $sub.ref(0, 58436);

const {:count 55} .str.37: ref;

axiom .str.37 == $sub.ref(0, 59515);

const {:count 32} .str.38: ref;

axiom .str.38 == $sub.ref(0, 60571);

const {:count 51} .str.39: ref;

axiom .str.39 == $sub.ref(0, 61646);

const {:count 15} .str.40: ref;

axiom .str.40 == $sub.ref(0, 62685);

const {:count 63} .str.41: ref;

axiom .str.41 == $sub.ref(0, 63772);

const {:count 48} .str.42: ref;

axiom .str.42 == $sub.ref(0, 64844);

const {:count 32} .str.43: ref;

axiom .str.43 == $sub.ref(0, 65900);

const {:count 38} .str.44: ref;

axiom .str.44 == $sub.ref(0, 66962);

const {:count 36} .str.45: ref;

axiom .str.45 == $sub.ref(0, 68022);

const {:count 43} .str.46: ref;

axiom .str.46 == $sub.ref(0, 69089);

const {:count 22} .str.47: ref;

axiom .str.47 == $sub.ref(0, 70135);

const {:count 29} .str.48: ref;

axiom .str.48 == $sub.ref(0, 71188);

const {:count 26} .str.49: ref;

axiom .str.49 == $sub.ref(0, 72238);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 73275);

const {:count 13} .str.51: ref;

axiom .str.51 == $sub.ref(0, 74312);

const {:count 27} .str.52: ref;

axiom .str.52 == $sub.ref(0, 75363);

const {:count 26} .str.53: ref;

axiom .str.53 == $sub.ref(0, 76413);

const {:count 12} .str.54: ref;

axiom .str.54 == $sub.ref(0, 77449);

const {:count 35} .str.55: ref;

axiom .str.55 == $sub.ref(0, 78508);

const {:count 36} .str.56: ref;

axiom .str.56 == $sub.ref(0, 79568);

const {:count 33} .str.57: ref;

axiom .str.57 == $sub.ref(0, 80625);

const {:count 46} .str.58: ref;

axiom .str.58 == $sub.ref(0, 81695);

const {:count 41} .str.59: ref;

axiom .str.59 == $sub.ref(0, 82760);

const {:count 42} .str.60: ref;

axiom .str.60 == $sub.ref(0, 83826);

const {:count 26} .str.61: ref;

axiom .str.61 == $sub.ref(0, 84876);

const {:count 13} .str.14: ref;

axiom .str.14 == $sub.ref(0, 85913);

const {:count 45} .str.15: ref;

axiom .str.15 == $sub.ref(0, 86982);

const {:count 13} .str.70: ref;

axiom .str.70 == $sub.ref(0, 88019);

const {:count 40} .str.71: ref;

axiom .str.71 == $sub.ref(0, 89083);

const {:count 38} .str.72: ref;

axiom .str.72 == $sub.ref(0, 90145);

const {:count 29} .str.73: ref;

axiom .str.73 == $sub.ref(0, 91198);

const {:count 21} .str.74: ref;

axiom .str.74 == $sub.ref(0, 92243);

const {:count 74} .str.75: ref;

axiom .str.75 == $sub.ref(0, 93341);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.64: ref;

axiom .str.64 == $sub.ref(0, 94388);

const {:count 19} .str.65: ref;

axiom .str.65 == $sub.ref(0, 95431);

const {:count 30} .str.66: ref;

axiom .str.66 == $sub.ref(0, 96485);

const {:count 14} .str.62: ref;

axiom .str.62 == $sub.ref(0, 97523);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 98571);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 99613);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 100661);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 101700);

const {:count 20} .str.16: ref;

axiom .str.16 == $sub.ref(0, 102744);

const {:count 28} .str.17: ref;

axiom .str.17 == $sub.ref(0, 103796);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 16} .str.4: ref;

axiom .str.4 == $sub.ref(0, 104836);

const {:count 14} .str.8: ref;

axiom .str.8 == $sub.ref(0, 105874);

const {:count 13} .str.9: ref;

axiom .str.9 == $sub.ref(0, 106911);

const {:count 16} .str.18: ref;

axiom .str.18 == $sub.ref(0, 107951);

const {:count 18} .str.28: ref;

axiom .str.28 == $sub.ref(0, 108993);

const {:count 18} .str.24: ref;

axiom .str.24 == $sub.ref(0, 110035);

const {:count 38} .str.25: ref;

axiom .str.25 == $sub.ref(0, 111097);

const {:count 18} .str.27: ref;

axiom .str.27 == $sub.ref(0, 112139);

const {:count 23} .str.26: ref;

axiom .str.26 == $sub.ref(0, 113186);

const {:count 15} .str.67: ref;

axiom .str.67 == $sub.ref(0, 114225);

const .str: ref;

axiom .str == $sub.ref(0, 115252);

const {:count 14} .str.68: ref;

axiom .str.68 == $sub.ref(0, 116290);

const {:count 20} .str.69: ref;

axiom .str.69 == $sub.ref(0, 117334);

const {:count 4} .str.21: ref;

axiom .str.21 == $sub.ref(0, 118362);

const {:count 7} .str.22: ref;

axiom .str.22 == $sub.ref(0, 119393);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 78} .str.23: ref;

axiom .str.23 == $sub.ref(0, 120495);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 121527);

const {:count 3} .str.1.168: ref;

axiom .str.1.168 == $sub.ref(0, 122554);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 123592);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 124620);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 125652);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 126684);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 127716);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 128748);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const acm_probe: ref;

axiom acm_probe == $sub.ref(0, 129780);

procedure acm_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.12, $CurrAddr, assertsPassed;



implementation acm_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i1;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p143: ref;
  var $i144: i8;
  var $p145: ref;
  var $i146: i8;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i64;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i24;
  var $i164: i24;
  var $i165: i24;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i8;
  var $i178: i32;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i32;
  var $i183: i8;
  var $i184: i64;
  var $p185: ref;
  var $i186: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i187: i8;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $i101: i8;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i191: i64;
  var $i192: i1;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i24;
  var $i201: i24;
  var $i202: i24;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i64;
  var $i207: i64;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p217: ref;
  var $i215: i32;
  var $p216: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i24;
  var $i232: i24;
  var $i233: i24;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i64;
  var $i238: i64;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p243: ref;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i32;
  var $p261: ref;
  var $i262: i64;
  var $i263: i1;
  var $i264: i64;
  var $i265: i1;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i24;
  var $i273: i24;
  var $i274: i24;
  var $p275: ref;
  var $p276: ref;
  var $i277: i8;
  var $i278: i64;
  var $i279: i64;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $i250: i32;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $i284: i1;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i24;
  var $i292: i24;
  var $i293: i24;
  var $p294: ref;
  var $p295: ref;
  var $i296: i8;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $i303: i64;
  var $i304: i64;
  var $i305: i1;
  var $p306: ref;
  var $i308: i64;
  var $p309: ref;
  var $p310: ref;
  var $p312: ref;
  var $i313: i8;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i245: i8;
  var $p246: ref;
  var $i247: i64;
  var $p248: ref;
  var $p249: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $p328: ref;
  var $i329: i32;
  var $i330: i1;
  var $i334: i32;
  var $i335: i1;
  var $i338: i32;
  var $i339: i1;
  var $p336: ref;
  var $p337: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i340: i32;
  var $i341: i1;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i32;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $i347: i64;
  var $i348: i1;
  var $i349: i64;
  var $i350: i1;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p360: ref;
  var $p361: ref;
  var $p363: ref;
  var $i364: i8;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $p368: ref;
  var $p370: ref;
  var $i371: i8;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $i380: i24;
  var $i381: i24;
  var $i382: i24;
  var $p383: ref;
  var $p384: ref;
  var $i385: i8;
  var $i386: i64;
  var $i387: i64;
  var $i388: i64;
  var $i389: i1;
  var $p390: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i1;
  var $i395: i64;
  var $i396: i64;
  var $i397: i1;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i24;
  var $i408: i24;
  var $i409: i24;
  var $p410: ref;
  var $p411: ref;
  var $i412: i8;
  var $i413: i64;
  var $i414: i64;
  var $i415: i64;
  var $i416: i1;
  var $p417: ref;
  var $p419: ref;
  var $p420: ref;
  var $p422: ref;
  var $i423: i8;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $p427: ref;
  var $p429: ref;
  var $i430: i8;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p448: ref;
  var $i449: i32;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $i457: i24;
  var $i458: i24;
  var $i459: i24;
  var $p460: ref;
  var $p461: ref;
  var $i462: i8;
  var $i463: i64;
  var $i464: i64;
  var $i465: i64;
  var $i466: i1;
  var $p467: ref;
  var $p469: ref;
  var $p470: ref;
  var $i351: i8;
  var $i352: i64;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $i477: i24;
  var $i478: i24;
  var $i479: i24;
  var $p480: ref;
  var $p481: ref;
  var $i482: i8;
  var $i483: i64;
  var $i484: i64;
  var $i485: i64;
  var $i486: i1;
  var $p487: ref;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p493: ref;
  var $i496: i32;
  var $i497: i1;
  var $p498: ref;
  var $p500: ref;
  var $i501: i32;
  var $i502: i32;
  var $i503: i1;
  var $i504: i32;
  var $i505: i32;
  var $i506: i8;
  var $p507: ref;
  var $i508: i8;
  var $i509: i8;
  var $i510: i8;
  var $i511: i8;
  var $i512: i32;
  var $i513: i32;
  var $p514: ref;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $i519: i32;
  var $p520: ref;
  var $i521: i64;
  var $i522: i1;
  var $p523: ref;
  var $i524: i32;
  var $i525: i32;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p537: ref;
  var $p539: ref;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $i555: i8;
  var $i556: i32;
  var $i557: i32;
  var $i558: i32;
  var $p559: ref;
  var $i560: i32;
  var $i561: i8;
  var $p562: ref;
  var $i563: i8;
  var $i564: i8;
  var $i565: i8;
  var $i566: i8;
  var $i567: i8;
  var $p568: ref;
  var $p569: ref;
  var $i570: i8;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $i574: i8;
  var $p575: ref;
  var $p576: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $p581: ref;
  var $p582: ref;
  var $i583: i64;
  var $i584: i1;
  var $p585: ref;
  var $p588: ref;
  var $i589: i32;
  var $i590: i1;
  var $p591: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $i598: i64;
  var $i599: i1;
  var $p600: ref;
  var $p604: ref;
  var $p605: ref;
  var $i606: i64;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $i610: i64;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $i616: i64;
  var $i617: i1;
  var $p618: ref;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $i624: i64;
  var $i625: i1;
  var $p626: ref;
  var $p628: ref;
  var $i629: i32;
  var $i630: i32;
  var $p631: ref;
  var $p632: ref;
  var $i633: i64;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $i637: i8;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $i643: i32;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $i647: i32;
  var $p648: ref;
  var $p649: ref;
  var $i650: i8;
  var $i651: i32;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $i655: i32;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $i659: i32;
  var $p660: ref;
  var $i661: i64;
  var $p663: ref;
  var $i664: i64;
  var $p665: ref;
  var $i666: i32;
  var $i667: i1;
  var $i603: i32;
  var $p669: ref;
  var $p670: ref;
  var $i671: i64;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $i677: i64;
  var $i678: i1;
  var $p679: ref;
  var $i682: i32;
  var $i683: i1;
  var $p684: ref;
  var $i685: i8;
  var $i686: i32;
  var $i687: i32;
  var $p688: ref;
  var $p689: ref;
  var $i690: i32;
  var $p691: ref;
  var $i692: i32;
  var $p693: ref;
  var $p694: ref;
  var $i695: i8;
  var $i696: i32;
  var $p697: ref;
  var $i698: i8;
  var $i699: i32;
  var $i700: i32;
  var $p701: ref;
  var $p702: ref;
  var $i703: i32;
  var $p704: ref;
  var $i705: i32;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $i710: i32;
  var $i711: i32;
  var $p712: ref;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i716: i32;
  var $i717: i1;
  var $i668: i32;
  var $p718: ref;
  var $p719: ref;
  var $i720: i32;
  var $i721: i1;
  var $i722: i64;
  var $i723: i1;
  var $p724: ref;
  var $i725: i8;
  var $i726: i32;
  var $i727: i32;
  var $i728: i64;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $i733: i64;
  var $i734: i1;
  var $p735: ref;
  var $i736: i8;
  var $i737: i32;
  var $i738: i32;
  var $p739: ref;
  var $p740: ref;
  var $i741: i8;
  var $i742: i32;
  var $i743: i32;
  var $i744: i64;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $i750: i8;
  var $i751: i32;
  var $p752: ref;
  var $p753: ref;
  var $i754: i32;
  var $i755: i1;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $i761: i32;
  var $i762: i1;
  var $p763: ref;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i8;
  var $i770: i32;
  var $i771: i32;
  var $p772: ref;
  var $p773: ref;
  var $i774: i32;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $i779: i8;
  var $i780: i32;
  var $i781: i1;
  var $p782: ref;
  var $i783: i8;
  var $i784: i32;
  var $i785: i32;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $i789: i32;
  var $i790: i32;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $p794: ref;
  var $i795: i64;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $p802: ref;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $p808: ref;
  var $p810: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $p816: ref;
  var $i817: i1;
  var $i818: i8;
  var $i819: i1;
  var $p820: ref;
  var $i821: i64;
  var $i822: i32;
  var $p823: ref;
  var $p824: ref;
  var $i825: i64;
  var $i826: i1;
  var $p827: ref;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $p835: ref;
  var $i681: i32;
  var $p838: ref;
  var $p839: ref;
  var $i620: i32;
  var $i841: i64;
  var $p843: ref;
  var $p844: ref;
  var $i845: i32;
  var $i846: i1;
  var $i840: i32;
  var $p847: ref;
  var $p848: ref;
  var $i602: i32;
  var $i593: i32;
  var $i849: i64;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $i853: i64;
  var $i587: i32;
  var $p854: ref;
  var $i495: i32;
  var $i30: i32;
  var $p857: ref;
  var $p858: ref;
  var $p861: ref;
  var $p862: ref;
  var $p865: ref;
  var $p866: ref;
  var $p869: ref;
  var $p870: ref;
  var $p873: ref;
  var $p874: ref;
  var $p877: ref;
  var $p878: ref;
  var $p881: ref;
  var $p882: ref;
  var $p885: ref;
  var $p886: ref;
  var $p889: ref;
  var $p890: ref;
  var $p893: ref;
  var $p894: ref;
  var $p897: ref;
  var $p898: ref;
  var $p901: ref;
  var $p902: ref;
  var $p905: ref;
  var $p906: ref;
  var $p909: ref;
  var $p910: ref;
  var $p913: ref;
  var $p914: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    call {:si_unique_call 26} {:cexpr "buflen"} boogie_si_record_i32($i25);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p26 := interface_to_usbdev($p0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    call {:si_unique_call 28} {:cexpr "quirks"} boogie_si_record_i64($i28);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 32);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i28, 2);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 1 else 16);
    call {:si_unique_call 29} {:cexpr "num_rx_buf"} boogie_si_record_i32($i32);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i28, 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p21);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i25, 0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i98, $p99 := $i25, $p21;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i98, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i101, $i102, $p103, $p104 := 0, $sub.i32(0, 1), $0.ref, $0.ref;
    assume {:branchcond $i100} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p104);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i192 := $eq.i64($i191, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i192 == 1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p104, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.1, $p254);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p257 := usb_ifnum_to_if($p26, $i256);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p104, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.1, $p258);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i32($i259);
    call {:si_unique_call 49} {:cexpr "data_interface_num"} boogie_si_record_i32($i260);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p261 := usb_ifnum_to_if($p26, $i260);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p257);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i263 := $eq.i64($i262, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i263 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p261);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i265 := $eq.i64($i264, 0);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i250, $i251, $p252, $p253 := $i102, $i260, $p261, $p257;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i251, $i250);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p253);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i304 := $p2i.ref.i64($p252);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i305 := $eq.i64($i303, $i304);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38, $p39 := $i101, $p252, $p253, $p103;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p37, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.1, $p360);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p361, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i364 := $load.i8($M.1, $p363);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i365 := $zext.i8.i32($i364);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i366 := $ne.i32($i365, 10);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    $p392, $p393 := $p37, $p38;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32(0, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i394} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i394 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32(0, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p392, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.1, $p419);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($add.ref($p420, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i423 := $load.i8($M.1, $p422);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i424 := $zext.i8.i32($i423);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i425 := $ule.i32($i424, 1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb153, $bb155;

  $bb155:
    assume !($i425 == 1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p393, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.1, $p426);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p427, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i430 := $load.i8($M.1, $p429);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i431 := $zext.i8.i32($i430);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i432} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p393, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.1, $p433);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p434, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.1, $p435);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p392, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.1, $p438);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p439, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.1, $p440);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p441, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p392, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.1, $p443);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p444, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.1, $p445);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p446, $mul.ref(1, 72)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i449 := usb_endpoint_dir_in($p442);
    call {:si_unique_call 87} {:cexpr "tmp___13"} boogie_si_record_i32($i449);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    $p469, $p470 := $p448, $p441;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i351, $i352, $p353, $p354, $p355, $p356, $p357, $p358, $i359 := $i36, $i28, $p469, $p470, $p436, $p392, $p393, $p39, 0;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p471, .str.3);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p472, .str.30);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p473, .str.5);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p474, .str.47);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p476 := $bitcast.ref.ref($p475);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i477 := $load.i24($M.6, $p476);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i478 := $and.i24($i477, $sub.i24(0, 262144));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i479 := $or.i24($i478, 1312);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p476, $i479);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p480, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i482 := $load.i8($M.7, $p481);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i483 := $zext.i8.i64($i482);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i484 := $and.i64($i483, 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i485 := ldv__builtin_expect($i484, 0);
    call {:si_unique_call 77} {:cexpr "tmp___14"} boogie_si_record_i64($i485);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i486 := $ne.i64($i485, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p489 := kzalloc(3360, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p490 := $bitcast.ref.ref($p489);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i492 := $eq.i64($i491, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i496 := acm_alloc_minor($p490);
    call {:si_unique_call 95} {:cexpr "minor"} boogie_si_record_i32($i496);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 32);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i501 := usb_endpoint_maxp($p355);
    call {:si_unique_call 99} {:cexpr "ctrlsize"} boogie_si_record_i32($i501);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i502 := usb_endpoint_maxp($p354);
    call {:si_unique_call 101} {:cexpr "tmp___16"} boogie_si_record_i32($i502);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i503 := $eq.i64($i352, 2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i504 := (if $i503 == 1 then 1 else 2);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i505 := $mul.i32($i502, $i504);
    call {:si_unique_call 102} {:cexpr "readsize"} boogie_si_record_i32($i505);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i506 := $trunc.i32.i8($i359);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.1, $p507);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i509 := $and.i8($i506, 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i510 := $and.i8($i508, $sub.i8(0, 2));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i511 := $or.i8($i510, $i509);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p507, $i511);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i512 := usb_endpoint_maxp($p353);
    call {:si_unique_call 104} {:cexpr "tmp___17"} boogie_si_record_i32($i512);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i513 := $mul.i32($i512, 20);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p514, $i513);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p515, $p357);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(16, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p516, $p356);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3164, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p517, $i496);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p518, $p26);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i519 := $zext.i8.i32($i351);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3172, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p520, $i519);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i521 := $and.i64($i352, 4);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i522 := $ne.i64($i521, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3160, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p527, $i501);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p528, $i505);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2544, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p529, $i32);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2888, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} __init_work($p530, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p531, 137438953408);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2888, 1)), $mul.ref(0, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p534 := $bitcast.ref.ref($p533);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p535 := $bitcast.ref.ref($p13);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 106} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p534, $p535, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2888, 1)), $mul.ref(32, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} lockdep_init_map($p537, .str.50, $p12, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2888, 1)), $mul.ref(8, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} INIT_LIST_HEAD($p539);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2888, 1)), $mul.ref(24, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p541, acm_softint);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} __init_waitqueue_head($p542, .str.51, $p14);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_60 := spinlock_check($p543);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2632, 1)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p547 := $bitcast.ref.ref($p546);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __raw_spin_lock_init($p547, .str.52, $p15);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_61 := spinlock_check($p548);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2552, 1)), $mul.ref(0, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p552 := $bitcast.ref.ref($p551);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __raw_spin_lock_init($p552, .str.53, $p16);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} __mutex_init($p553, .str.54, $p17);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p354, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i555 := $load.i8($M.1, $p554);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i556 := $zext.i8.i32($i555);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i557 := __create_pipe($p26, $i556);
    call {:si_unique_call 116} {:cexpr "tmp___18"} boogie_si_record_i32($i557);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i558 := $or.i32($i557, $sub.i32(0, 1073741696));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2548, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p559, $i558);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i560 := usb_endpoint_xfer_int($p354);
    call {:si_unique_call 118} {:cexpr "tmp___19"} boogie_si_record_i32($i560);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i561 := $trunc.i32.i8($i560);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.1, $p562);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i564 := $and.i8($i561, 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i565 := $shl.i8($i564, 1);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i566 := $and.i8($i563, $sub.i8(0, 3));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i567 := $or.i8($i566, $i565);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p562, $i567);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p568 := $bitcast.ref.ref($p490);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($p568, $mul.ref(3172, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i570 := $load.i8($M.1, $p569);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i570);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i572 := $ne.i32($i571, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} tty_port_init($p576);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(336, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p578, acm_port_ops);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3184, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} init_usb_anchor($p579);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i580 := $sext.i32.i64($i501);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1104, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p582 := ldv_usb_alloc_coherent_24($p26, $i580, 208, $p581);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i584 := $eq.i64($i583, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i584 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1096, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p588, $p582);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i589 := acm_write_buffers_alloc($p490);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 126} {:cexpr "tmp___21"} boogie_si_record_i32($i589);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i590 := $slt.i32($i589, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p594 := ldv_usb_alloc_urb_25(0, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p595, $p594);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p597 := $load.ref($M.1, $p596);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i598 := $p2i.ref.i64($p597);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i599 := $eq.i64($i598, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i603 := 0;
    goto $bb193;

  $bb193:
    call $p604, $p605, $i606, $p607, $p608, $p609, $i610, $p611, $p612, $p613, $p614, $p615, $i616, $i617, $p621, $p622, $p623, $i624, $i625, $p628, $i629, $i630, $p631, $p632, $i633, $p634, $p635, $p636, $i637, $i638, $i639, $p640, $p641, $p642, $i643, $p644, $p645, $p646, $i647, $p648, $p649, $i650, $i651, $p652, $p653, $p654, $i655, $p656, $p657, $p658, $i659, $p660, $i661, $p663, $i664, $p665, $i666, $i667, $i603 := acm_probe_loop_$bb193($i32, $p489, $p490, $i505, $p604, $p605, $i606, $p607, $p608, $p609, $i610, $p611, $p612, $p613, $p614, $p615, $i616, $i617, $p621, $p622, $p623, $i624, $i625, $p628, $i629, $i630, $p631, $p632, $i633, $p634, $p635, $p636, $i637, $i638, $i639, $p640, $p641, $p642, $i643, $p644, $p645, $p646, $i647, $p648, $p649, $i650, $i651, $p652, $p653, $p654, $i655, $p656, $p657, $p658, $i659, $p660, $i661, $p663, $i664, $p665, $i666, $i667, $i603);
    goto $bb193_last;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1904, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p604);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i606 := $sext.i32.i64($i603);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($p605, $mul.ref($i606, 40));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p609 := $load.ref($M.1, $p608);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i610 := $sext.i32.i64($i505);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(16, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p612 := ldv_usb_alloc_coherent_26($p609, $i610, 208, $p611);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p613, $p612);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p615 := $load.ref($M.1, $p614);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i616 := $p2i.ref.i64($p615);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i617 := $eq.i64($i616, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(24, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p621, $i603);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(32, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p622, $p489);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p623 := ldv_usb_alloc_urb_27(0, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i624 := $p2i.ref.i64($p623);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i625 := $eq.i64($i624, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p623, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i629 := $load.i32($M.1, $p628);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i630 := $or.i32($i629, 4);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p623, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p631, $i630);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(16, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i633 := $load.i64($M.1, $p632);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p623, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p634, $i633);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p635 := $bitcast.ref.ref($p490);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($p635, $mul.ref(3172, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i637 := $load.i8($M.1, $p636);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i638 := $zext.i8.i32($i637);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i639 := $ne.i32($i638, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i639 == 1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.1, $p652);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2548, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i655 := $load.i32($M.1, $p654);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p657 := $load.ref($M.1, $p656);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i659 := $load.i32($M.1, $p658);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p660 := $bitcast.ref.ref($p607);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} usb_fill_bulk_urb($p623, $p653, $i655, $p657, $i659, acm_read_bulk_callback, $p660);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i661 := $sext.i32.i64($i603);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref($i661, 8));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p663, $p623);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i664 := $sext.i32.i64($i603);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1768, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __set_bit($i664, $p665);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i666 := $add.i32($i603, 1);
    call {:si_unique_call 139} {:cexpr "i"} boogie_si_record_i32($i666);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i667 := $slt.i32($i666, $i32);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i668 := 0;
    goto $bb208;

  $bb208:
    call $p669, $p670, $i671, $p672, $p673, $p674, $p675, $p676, $i677, $i678, $i682, $i683, $p684, $i685, $i686, $i687, $p688, $p689, $i690, $p691, $i692, $p693, $p694, $i695, $i696, $p697, $i698, $i699, $i700, $p701, $p702, $i703, $p704, $i705, $p706, $p707, $p708, $p709, $i710, $i711, $p712, $p713, $p714, $p715, $i716, $i717, $i668 := acm_probe_loop_$bb208($p26, $p353, $p489, $p490, $p669, $p670, $i671, $p672, $p673, $p674, $p675, $p676, $i677, $i678, $i682, $i683, $p684, $i685, $i686, $i687, $p688, $p689, $i690, $p691, $i692, $p693, $p694, $i695, $i696, $p697, $i698, $i699, $i700, $p701, $p702, $i703, $p704, $i705, $p706, $p707, $p708, $p709, $i710, $i711, $p712, $p713, $p714, $p715, $i716, $i717, $i668);
    goto $bb208_last;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p670 := $bitcast.ref.ref($p669);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i671 := $sext.i32.i64($i668);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($p670, $mul.ref($i671, 40));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p673 := ldv_usb_alloc_urb_28(0, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p674, $p673);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p676 := $load.ref($M.1, $p675);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i677 := $p2i.ref.i64($p676);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i678 := $eq.i64($i677, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i682 := usb_endpoint_xfer_int($p353);
    call {:si_unique_call 144} {:cexpr "tmp___25"} boogie_si_record_i32($i682);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i683 := $ne.i32($i682, 0);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i683 == 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p353, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i698 := $load.i8($M.1, $p697);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i699 := $zext.i8.i32($i698);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i700 := __create_pipe($p26, $i699);
    call {:si_unique_call 149} {:cexpr "tmp___24"} boogie_si_record_i32($i700);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p702 := $load.ref($M.1, $p701);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i703 := $or.i32($i700, $sub.i32(0, 1073741824));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i705 := $load.i32($M.1, $p704);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p706 := $bitcast.ref.ref($p672);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} usb_fill_bulk_urb($p702, $p26, $i703, $0.ref, $i705, acm_write_bulk, $p706);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.1, $p707);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p708, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i710 := $load.i32($M.1, $p709);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i711 := $or.i32($i710, 4);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p713 := $load.ref($M.1, $p712);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p713, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p714, $i711);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(32, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p715, $p489);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i716 := $add.i32($i668, 1);
    call {:si_unique_call 151} {:cexpr "i"} boogie_si_record_i32($i716);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i717 := $sle.i32($i716, 15);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p718 := $bitcast.ref.ref($p490);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} usb_set_intfdata($p0, $p718);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i720 := device_create_file($p719, dev_attr_bmCapabilities);
    call {:si_unique_call 154} {:cexpr "i"} boogie_si_record_i32($i720);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i721 := $slt.i32($i720, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i722 := $p2i.ref.i64($p358);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i723 := $ne.i64($i722, 0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p355, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i769 := $load.i8($M.1, $p768);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i770 := $zext.i8.i32($i769);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i771 := __create_pipe($p26, $i770);
    call {:si_unique_call 157} {:cexpr "tmp___27"} boogie_si_record_i32($i771);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p773 := $load.ref($M.1, $p772);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i774 := $or.i32($i771, 1073741952);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1096, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p776 := $load.ref($M.1, $p775);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p777 := $bitcast.ref.ref($p490);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p355, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i779 := $load.i8($M.1, $p778);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i780 := $zext.i8.i32($i779);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i781 := $ne.i32($i780, 0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i781} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i781 == 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i785 := 16;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} usb_fill_int_urb($p773, $p26, $i774, $p776, $i501, acm_ctrl_irq, $p777, $i785);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.1, $p786);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p787, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i789 := $load.i32($M.1, $p788);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i790 := $or.i32($i789, 4);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.1, $p791);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p792, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p793, $i790);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1104, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i795 := $load.i64($M.1, $p794);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p797 := $load.ref($M.1, $p796);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p797, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p798, $i795);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_68 := _dev_info.ref.ref.i32($p799, .str.61, $i496);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p802, 9600);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2876, 1)), $mul.ref(6, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p804, 8);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2876, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p806 := $bitcast.ref.ref($p805);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} vslice_dummy_var_69 := acm_ctrl_msg($p490, 32, 0, $p806, 7);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p808 := $bitcast.ref.ref($p490);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_70 := usb_driver_claim_interface(acm_driver, $p356, $p808);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p810 := $bitcast.ref.ref($p490);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} usb_set_intfdata($p356, $p810);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_71 := usb_get_intf($p357);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p813 := $M.8;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p357, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p815 := tty_port_register_device($p812, $p813, $i496, $p814);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p816 := $bitcast.ref.ref($p815);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i817 := IS_ERR($p816);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i818 := $zext.i1.i8($i817);
    call {:si_unique_call 175} {:cexpr "tmp___29"} boogie_si_record_i8($i818);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i819 := $trunc.i8.i1($i818);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb239:
    assume $i819 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p820 := $bitcast.ref.ref($p815);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i821 := PTR_ERR($p820);
    call {:si_unique_call 177} {:cexpr "tmp___28"} boogie_si_record_i64($i821);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i822 := $trunc.i64.i32($i821);
    call {:si_unique_call 178} {:cexpr "rv"} boogie_si_record_i32($i822);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.1, $p823);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i825 := $p2i.ref.i64($p824);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i826 := $ne.i64($i825, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.1, $p833);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p835 := $add.ref($add.ref($p834, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} device_remove_file($p835, dev_attr_bmCapabilities);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i681 := $i822;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p839 := $load.ref($M.1, $p838);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} usb_free_urb($p839);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p858 := $load.ref($M.1, $p857);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} usb_free_urb($p858);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.1, $p861);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} usb_free_urb($p862);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p866 := $load.ref($M.1, $p865);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} usb_free_urb($p866);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.1, $p869);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} usb_free_urb($p870);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p874 := $load.ref($M.1, $p873);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} usb_free_urb($p874);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.1, $p877);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} usb_free_urb($p878);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.1, $p881);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} usb_free_urb($p882);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p886 := $load.ref($M.1, $p885);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} usb_free_urb($p886);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.1, $p889);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} usb_free_urb($p890);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p894 := $load.ref($M.1, $p893);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} usb_free_urb($p894);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p898 := $load.ref($M.1, $p897);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} usb_free_urb($p898);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p902 := $load.ref($M.1, $p901);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} usb_free_urb($p902);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p905 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p906 := $load.ref($M.1, $p905);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} usb_free_urb($p906);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p910 := $load.ref($M.1, $p909);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} usb_free_urb($p910);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p914 := $load.ref($M.1, $p913);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} usb_free_urb($p914);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i620 := $i681;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i840 := 0;
    goto $bb250;

  $bb250:
    call $i841, $p843, $p844, $i845, $i846, $i840 := acm_probe_loop_$bb250($i32, $p490, $i841, $p843, $p844, $i845, $i846, $i840);
    goto $bb250_last;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i841 := $sext.i32.i64($i840);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref($i841, 8));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p844 := $load.ref($M.1, $p843);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} usb_free_urb($p844);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i845 := $add.i32($i840, 1);
    call {:si_unique_call 185} {:cexpr "i"} boogie_si_record_i32($i845);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i846 := $slt.i32($i845, $i32);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} acm_read_buffers_free($p490);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.1, $p847);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_free_urb($p848);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i602 := $i620;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} acm_write_buffers_free($p490);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i593 := $i602;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i849 := $sext.i32.i64($i501);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1096, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p851 := $load.ref($M.1, $p850);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1104, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i853 := $load.i64($M.1, $p852);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} usb_free_coherent($p26, $i849, $p851, $i853);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i587 := $i593;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} acm_release_minor($p490);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p854 := $bitcast.ref.ref($p490);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} kfree($p854);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i495 := $i587;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i30 := $i495;
    goto $bb3;

  $bb252:
    assume $i846 == 1;
    assume {:verifier.code 0} true;
    $i840 := $i845;
    goto $bb252_dummy;

  $bb243:
    assume $i826 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.1, $p827);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p828, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} device_remove_file($p829, dev_attr_wCountryCodes);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.1, $p830);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p831, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} device_remove_file($p832, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb236:
    assume $i781 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p355, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i783 := $load.i8($M.1, $p782);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i784 := $zext.i8.i32($i783);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i785 := $i784;
    goto $bb238;

  $bb223:
    assume $i723 == 1;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p358, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.1, $p724);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i726 := $zext.i8.i32($i725);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i727 := $add.i32($i726, $sub.i32(0, 4));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i728 := $sext.i32.i64($i727);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p729 := kmalloc($i728, 208);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p730 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p730, $p729);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p732 := $load.ref($M.1, $p731);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i733 := $p2i.ref.i64($p732);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i734 := $eq.i64($i733, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($p358, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i736 := $load.i8($M.1, $p735);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i737 := $zext.i8.i32($i736);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i738 := $add.i32($i737, $sub.i32(0, 4));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1120, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p739, $i738);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p358, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i741 := $load.i8($M.1, $p740);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i742 := $zext.i8.i32($i741);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i743 := $add.i32($i742, $sub.i32(0, 4));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i744 := $sext.i32.i64($i743);
    call {:si_unique_call 158} {:cexpr "__len"} boogie_si_record_i64($i744);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p746 := $load.ref($M.1, $p745);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p358, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p748 := $bitcast.ref.ref($p747);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 159} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p746, $p748, $i744, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p358, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i750 := $load.i8($M.1, $p749);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i751 := $zext.i8.i32($i750);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1124, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p752, $i751);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i754 := device_create_file($p753, dev_attr_wCountryCodes);
    call {:si_unique_call 161} {:cexpr "i"} boogie_si_record_i32($i754);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i755 := $slt.i32($i754, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i761 := device_create_file($p760, dev_attr_iCountryCodeRelDate);
    call {:si_unique_call 164} {:cexpr "i"} boogie_si_record_i32($i761);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i762 := $slt.i32($i761, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i762} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i762 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} device_remove_file($p763, dev_attr_wCountryCodes);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p765 := $load.ref($M.1, $p764);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} kfree($p765);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p766, $0.ref);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1120, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p767, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb229:
    assume $i755 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.1, $p756);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} kfree($p757);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p758, $0.ref);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(1120, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p759, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb225:
    assume $i734 == 1;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb220:
    assume $i721 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i681 := $sub.i32(0, 12);
    goto $bb212;

  $bb217:
    assume $i717 == 1;
    assume {:verifier.code 0} true;
    $i668 := $i716;
    goto $bb217_dummy;

  $bb214:
    assume $i683 == 1;
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p353, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i685 := $load.i8($M.1, $p684);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i686 := $zext.i8.i32($i685);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i687 := __create_pipe($p26, $i686);
    call {:si_unique_call 146} {:cexpr "tmp___23"} boogie_si_record_i32($i687);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p670, $mul.ref($i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p689 := $load.ref($M.1, $p688);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i690 := $or.i32($i687, 1073741824);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i692 := $load.i32($M.1, $p691);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p693 := $bitcast.ref.ref($p672);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p353, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i695 := $load.i8($M.1, $p694);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i696 := $zext.i8.i32($i695);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} usb_fill_int_urb($p689, $p26, $i690, $0.ref, $i692, acm_write_bulk, $p693, $i696);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb210:
    assume $i678 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} vslice_dummy_var_67 := dev_err.ref.ref($p679, .str.60);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i681 := $sub.i32(0, 12);
    goto $bb212;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb205:
    assume $i667 == 1;
    assume {:verifier.code 0} true;
    $i603 := $i666;
    goto $bb205_dummy;

  $bb202:
    assume $i639 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p641 := $load.ref($M.1, $p640);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(2548, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i643 := $load.i32($M.1, $p642);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p605, $mul.ref($i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p645 := $load.ref($M.1, $p644);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i647 := $load.i32($M.1, $p646);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p648 := $bitcast.ref.ref($p607);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3181, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i650 := $load.i8($M.1, $p649);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i651 := $zext.i8.i32($i650);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} usb_fill_int_urb($p623, $p641, $i643, $p645, $i647, acm_read_bulk_callback, $p648, $i651);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i625 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_66 := dev_err.ref.ref($p626, .str.59);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i620 := $sub.i32(0, 12);
    goto $bb197;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb195:
    assume $i617 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p618 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_65 := dev_err.ref.ref($p618, .str.58);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i620 := $sub.i32(0, 12);
    goto $bb197;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i599 == 1;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_64 := dev_err.ref.ref($p600, .str.57);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i602 := $sub.i32(0, 12);
    goto $bb191;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb185:
    assume $i590 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_63 := dev_err.ref.ref($p591, .str.56);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i593 := $sub.i32(0, 12);
    goto $bb187;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb181:
    assume $i584 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_62 := dev_err.ref.ref($p585, .str.55);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i587 := $sub.i32(0, 12);
    goto $bb183;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i572 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p354, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i574 := $load.i8($M.1, $p573);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3181, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p575, $i574);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i522 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3172, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i524 := $load.i32($M.1, $p523);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i525 := $and.i32($i524, $sub.i32(0, 3));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p490, $mul.ref(0, 3368)), $mul.ref(3172, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p526, $i525);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i497 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_59 := dev_err.ref.ref($p498, .str.49);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p500 := $bitcast.ref.ref($p490);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} kfree($p500);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb168:
    assume $i492 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vslice_dummy_var_58 := dev_err.ref.ref($p493, .str.48);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i495 := $sub.i32(0, 12);
    goto $bb170;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i486 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_57 := __dynamic_dev_dbg.ref.ref.ref($p11, $p487, .str.47);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb159:
    assume $i450 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p451, .str.3);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p452, .str.30);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p453, .str.5);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p454, .str.46);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p456 := $bitcast.ref.ref($p455);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i457 := $load.i24($M.6, $p456);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i458 := $and.i24($i457, $sub.i24(0, 262144));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i459 := $or.i24($i458, 1306);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p456, $i459);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p460, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i462 := $load.i8($M.7, $p461);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i64($i462);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i464 := $and.i64($i463, 1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i465 := ldv__builtin_expect($i464, 0);
    call {:si_unique_call 89} {:cexpr "tmp___12"} boogie_si_record_i64($i465);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i466 := $ne.i64($i465, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p469, $p470 := $p441, $p448;
    goto $bb164;

  $bb161:
    assume $i466 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_56 := __dynamic_dev_dbg.ref.ref.ref($p10, $p467, .str.46);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i425 == 1;
    goto $bb154;

  $bb144:
    assume $i398 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i399 := usb_interface_claimed($p392);
    call {:si_unique_call 82} {:cexpr "tmp___11"} boogie_si_record_i32($i399);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb146:
    assume $i400 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p401, .str.3);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p402, .str.30);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p403, .str.5);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p404, .str.45);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i407 := $load.i24($M.6, $p406);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i408 := $and.i24($i407, $sub.i24(0, 262144));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i409 := $or.i24($i408, 1287);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p406, $i409);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p410, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i412 := $load.i8($M.7, $p411);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i413 := $zext.i8.i64($i412);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i414 := $and.i64($i413, 1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i415 := ldv__builtin_expect($i414, 0);
    call {:si_unique_call 84} {:cexpr "tmp___10"} boogie_si_record_i64($i415);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb3;

  $bb148:
    assume $i416 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_55 := __dynamic_dev_dbg.ref.ref.ref($p9, $p417, .str.45);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume $i394 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p393);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i397 := $ne.i64($i395, $i396);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i397 == 1);
    goto $bb140;

  $bb141:
    assume $i397 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb129:
    assume $i366 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p38, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.1, $p367);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($p368, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.1, $p370);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i32($i371);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 10);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i373 == 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb131:
    assume $i373 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p374, .str.3);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p375, .str.30);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p376, .str.5);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p377, .str.44);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p379 := $bitcast.ref.ref($p378);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i380 := $load.i24($M.6, $p379);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i381 := $and.i24($i380, $sub.i24(0, 262144));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i382 := $or.i24($i381, 1272);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p379, $i382);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p383, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.7, $p384);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i64($i385);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i387 := $and.i64($i386, 1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i388 := ldv__builtin_expect($i387, 0);
    call {:si_unique_call 79} {:cexpr "tmp___9"} boogie_si_record_i64($i388);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i389 := $ne.i64($i388, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p392, $p393 := $p38, $p37;
    goto $bb137;

  $bb133:
    assume $i389 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vslice_dummy_var_54 := __dynamic_dev_dbg.ref.ref.ref($p8, $p390, .str.44);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb101:
    assume $i305 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_52 := dev_warn.ref.ref($p306, .str.42);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i308 := $or.i64($i28, 4);
    call {:si_unique_call 67} {:cexpr "quirks"} boogie_si_record_i64($i308);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p252, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.1, $p309);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($add.ref($p310, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i313 := $load.i8($M.1, $p312);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i313);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i245, $p246, $i247, $p248, $p249 := $i101, $p103, $i308, $p252, $p253;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p318, $p319, $p320, $i321 := $0.ref, $0.ref, $0.ref, 0;
    goto $bb106;

  $bb106:
    call $p322, $p323, $p324, $p325, $i326, $p328, $i329, $i330, $i334, $i335, $i338, $i339, $p336, $p337, $p331, $p332, $p333, $i340, $i341, $p318, $p319, $p320, $i321, $p342, $p343, $p344 := acm_probe_loop_$bb106($p248, $p322, $p323, $p324, $p325, $i326, $p328, $i329, $i330, $i334, $i335, $i338, $i339, $p336, $p337, $p331, $p332, $p333, $i340, $i341, $p318, $p319, $p320, $i321, $p342, $p343, $p344);
    goto $bb106_last;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p248, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.1, $p322);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.1, $p324);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i321);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p325, $mul.ref($i326, 72)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i329 := usb_endpoint_is_int_in($p328);
    call {:si_unique_call 70} {:cexpr "tmp___8"} boogie_si_record_i32($i329);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i330 == 1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i334 := usb_endpoint_is_bulk_out($p328);
    call {:si_unique_call 72} {:cexpr "tmp___7"} boogie_si_record_i32($i334);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i335 == 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i338 := usb_endpoint_is_bulk_in($p328);
    call {:si_unique_call 75} {:cexpr "tmp___6"} boogie_si_record_i32($i338);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i339 == 1);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb114:
    assume $i339 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p336, $p337 := $p320, $p328;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p331, $p332, $p333 := $p336, $p337, $p318;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i321, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32($i340);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i341 := $sle.i32($i340, 2);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p342, $p343, $p344 := $p331, $p332, $p333;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i346 := $eq.i64($i345, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb120, $bb122;

  $bb122:
    assume !($i346 == 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i347 := $p2i.ref.i64($p343);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i348 := $eq.i64($i347, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i348 == 1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p342);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i350 := $eq.i64($i349, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i350 == 1);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i351, $i352, $p353, $p354, $p355, $p356, $p357, $p358, $i359 := $i245, $i247, $p342, $p343, $p344, $p248, $p249, $p246, 1;
    goto $bb127;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb121;

  $bb117:
    assume $i341 == 1;
    assume {:verifier.code 0} true;
    $p318, $p319, $p320, $i321 := $p333, $p332, $p331, $i340;
    goto $bb117_dummy;

  $bb111:
    assume $i335 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p336, $p337 := $p328, $p319;
    goto $bb113;

  $bb108:
    assume $i330 == 1;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p331, $p332, $p333 := $p320, $p319, $p328;
    goto $bb110;

  $bb103:
    assume $i315 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_53 := dev_err.ref.ref($p316, .str.43);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb95:
    assume $i284 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p285, .str.3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p286, .str.30);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p287, .str.5);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p288, .str.41);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i291 := $load.i24($M.6, $p290);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i292 := $and.i24($i291, $sub.i24(0, 262144));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i293 := $or.i24($i292, 1231);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p290, $i293);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p294, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.7, $p295);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i64($i296);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i297, 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i299 := ldv__builtin_expect($i298, 0);
    call {:si_unique_call 64} {:cexpr "tmp___5"} boogie_si_record_i64($i299);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i299, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i300 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_51 := __dynamic_dev_dbg.ref.ref.ref($p7, $p301, .str.41);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p266, .str.3);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p267, .str.30);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p268, .str.5);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p269, .str.40);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i272 := $load.i24($M.6, $p271);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i273 := $and.i24($i272, $sub.i24(0, 262144));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i274 := $or.i24($i273, 1225);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p271, $i274);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p275, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.7, $p276);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i64($i277);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i279 := $and.i64($i278, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i280 := ldv__builtin_expect($i279, 0);
    call {:si_unique_call 61} {:cexpr "tmp___4"} boogie_si_record_i64($i280);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i281 := $ne.i64($i280, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb91:
    assume $i281 == 1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_50 := __dynamic_dev_dbg.ref.ref.ref($p6, $p282, .str.40);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb87;

  $bb68:
    assume $i192 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i193 := $sgt.i32($i102, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i193 == 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.1, $p218);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p219, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.1, $p221);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 3);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i224 == 1);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_48 := dev_warn.ref.ref($p243, .str.39);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i245, $p246, $i247, $p248, $p249 := $i101, $p103, $i28, $p0, $p0;
    goto $bb84;

  $bb79:
    assume $i224 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p225, .str.3);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p226, .str.30);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p227, .str.5);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p228, .str.38);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i231 := $load.i24($M.6, $p230);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i232 := $and.i24($i231, $sub.i24(0, 262144));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i233 := $or.i24($i232, 1212);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p230, $i233);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p234, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.7, $p235);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i64($i236);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i238 := $and.i64($i237, 1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i239 := ldv__builtin_expect($i238, 0);
    call {:si_unique_call 57} {:cexpr "tmp___3"} boogie_si_record_i64($i239);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb81:
    assume $i240 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_49 := __dynamic_dev_dbg.ref.ref.ref($p5, $p241, .str.38);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb70:
    assume $i193 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p194, .str.3);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p195, .str.30);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p196, .str.5);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p197, .str.37);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i200 := $load.i24($M.6, $p199);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i201 := $and.i24($i200, $sub.i24(0, 262144));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i202 := $or.i24($i201, 1203);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p199, $i202);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p203, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.7, $p204);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i64($i205);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i207 := $and.i64($i206, 1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i208 := ldv__builtin_expect($i207, 0);
    call {:si_unique_call 52} {:cexpr "tmp___2"} boogie_si_record_i64($i208);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i212 := $and.i64($i28, 16);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i213 == 1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p217 := usb_ifnum_to_if($p26, $i102);
    assume {:verifier.code 0} true;
    $i215, $p216 := $i102, $p217;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i250, $i251, $p252, $p253 := $i102, $i215, $p216, $p0;
    goto $bb85;

  $bb75:
    assume $i213 == 1;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p214 := usb_ifnum_to_if($p26, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i215, $p216 := $sub.i32(0, 1), $p214;
    goto $bb77;

  $bb72:
    assume $i209 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_47 := __dynamic_dev_dbg.ref.ref.ref($p4, $p210, .str.37);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb26:
    assume $i100 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p105, $p106, $p107, $i108, $i109, $i110 := $0.ref, $0.ref, $p99, $i98, $sub.i32(0, 1), 0;
    goto $bb29;

  $bb29:
    call $p111, $i112, $i113, $i114, $p115, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p143, $i144, $p145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $p157, $p158, $p159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $i168, $i169, $i170, $i171, $i172, $p173, $p174, $i175, $i176, $i177, $i178, $p137, $i138, $i139, $p140, $p141, $p117, $i118, $i119, $p120, $p121, $i180, $i181, $i182, $i183, $i184, $p185, $i186, $p105, $p106, $p107, $i108, $i109, $i110, $i187, $i188, $p189, $p190, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46 := acm_probe_loop_$bb29($p0, $p3, $i28, $p111, $i112, $i113, $i114, $p115, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p143, $i144, $p145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $p155, $p157, $p158, $p159, $p160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $i168, $i169, $i170, $i171, $i172, $p173, $p174, $i175, $i176, $i177, $i178, $p137, $i138, $i139, $p140, $p141, $p117, $i118, $i119, $p120, $p121, $i180, $i181, $i182, $i183, $i184, $p185, $i186, $p105, $p106, $p107, $i108, $i109, $i110, $i187, $i188, $p189, $p190, vslice_dummy_var_43, vslice_dummy_var_44, vslice_dummy_var_45, vslice_dummy_var_46);
    goto $bb29_last;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p107, $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p111);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 36);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p107, $mul.ref(2, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.1, $p122);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i124, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i124, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i124, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p157, .str.3);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p158, .str.30);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p159, .str.5);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p160, .str.36);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i163 := $load.i24($M.6, $p162);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i164 := $and.i24($i163, $sub.i24(0, 262144));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i165 := $or.i24($i164, 1193);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p162, $i165);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p166, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.7, $p167);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i170 := $and.i64($i169, 1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i171 := ldv__builtin_expect($i170, 0);
    call {:si_unique_call 46} {:cexpr "tmp___1"} boogie_si_record_i64($i171);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i110, $i109, $p106, $p105;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p117, $i118, $i119, $p120, $p121 := $p137, $i138, $i139, $p140, $p141;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.1, $p117);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i108, $i181);
    call {:si_unique_call 39} {:cexpr "buflen"} boogie_si_record_i32($i182);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.1, $p117);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i64($i183);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p117, $mul.ref($i184, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i186 := $sgt.i32($i182, 0);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i187, $i188, $p189, $p190 := $i118, $i119, $p120, $p121;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i101, $i102, $p103, $p104 := $i187, $i188, $p189, $p190;
    goto $bb28;

  $bb65:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    $p105, $p106, $p107, $i108, $i109, $i110 := $p121, $p120, $p185, $i182, $i119, $i118;
    goto $bb65_dummy;

  $bb62:
    assume $i172 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p107, $mul.ref(2, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.1, $p174);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.1, $p107);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p173, .str.36, $i176, $i178);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb42:
    assume $i128 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i110, $i109, $p107, $p105;
    goto $bb54;

  $bb40:
    assume $i127 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p105);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i110, $i109, $p106, $p107;
    goto $bb54;

  $bb51:
    assume $i133 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_44 := dev_err.ref.ref($p134, .str.34);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p117, $i118, $i119, $p120, $p121 := $p107, $i110, $i109, $p106, $p105;
    goto $bb33;

  $bb38:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i124, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb44;

  $bb45:
    assume $i129 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p107, $mul.ref(3, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.1, $p143);
    call {:si_unique_call 40} {:cexpr "ac_management_function"} boogie_si_record_i8($i144);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i144, $i109, $p106, $p105;
    goto $bb54;

  $bb36:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i124, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i130 == 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p107, $mul.ref(3, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.1, $p145);
    call {:si_unique_call 41} {:cexpr "call_management_function"} boogie_si_record_i8($i146);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p107, $mul.ref(4, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.1, $p147);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    call {:si_unique_call 42} {:cexpr "call_interface_num"} boogie_si_record_i32($i149);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i150 := $and.i64($i28, 8);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i110, $i149, $p106, $p105;
    goto $bb54;

  $bb55:
    assume $i151 == 1;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i146);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 3);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 3);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb57;

  $bb58:
    assume $i154 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_45 := dev_err.ref.ref($p155, .str.35);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb47:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i124, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb44;

  $bb49:
    assume $i131 == 1;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p137, $i138, $i139, $p140, $p141 := $p107, $i110, $i109, $p106, $p105;
    goto $bb54;

  $bb31:
    assume $i114 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_43 := dev_err.ref.ref($p115, .str.33);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p117, $i118, $i119, $p120, $p121 := $p107, $i110, $i109, $p106, $p105;
    goto $bb33;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_41 := dev_err.ref.ref($p96, .str.32);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb16;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.3);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.30);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.5);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p69, .str.31);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.6, $p71);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 1148);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p71, $i74);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.7, $p76);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 35} {:cexpr "tmp___0"} boogie_si_record_i64($i80);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.1, $p88);
    call {:si_unique_call 37} {:cexpr "buflen"} boogie_si_record_i32($i89);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i98, $p99 := $i89, $p95;
    goto $bb25;

  $bb21:
    assume $i81 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref($p2, $p82, .str.31);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} vslice_dummy_var_40 := dev_err.ref.ref($p42, .str.29);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p34 := usb_ifnum_to_if($p26, 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p35 := usb_ifnum_to_if($p26, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38, $p39 := 0, $p34, $p35, $0.ref;
    goto $bb7;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb252_dummy:
    assume false;
    return;

  $bb250_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  $bb217_dummy:
    assume false;
    return;

  $bb208_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  $bb205_dummy:
    assume false;
    return;

  $bb193_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  $bb117_dummy:
    assume false;
    return;

  $bb106_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  $bb65_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_138;
}



const acm_disconnect: ref;

axiom acm_disconnect == $sub.ref(0, 130812);

procedure acm_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr;



implementation acm_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i63: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i62: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p89: ref;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $p100: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $p108: ref;
  var $p111: ref;
  var $p112: ref;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $p123: ref;
  var $p124: ref;
  var $p127: ref;
  var $p128: ref;
  var $p131: ref;
  var $p132: ref;
  var $p135: ref;
  var $p136: ref;
  var $p139: ref;
  var $p140: ref;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $p148: ref;
  var $p151: ref;
  var $p152: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p2 := usb_get_intfdata($p0);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p4 := interface_to_usbdev($p0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.76);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.5);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.6);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1545);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 206} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p3);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} mutex_lock_nested($p25, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2872, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 1);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} __wake_up($p37, 3, 0, $0.ref);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} device_remove_file($p40, dev_attr_bmCapabilities);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} usb_set_intfdata($p42, $0.ref);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(16, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} usb_set_intfdata($p44, $0.ref);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} mutex_unlock($p45);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p47 := tty_port_tty_get($p46);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} stop_data_traffic($p3);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p50 := $M.8;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3164, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} tty_unregister_device($p50, $i52);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} usb_free_urb($p54);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} usb_free_urb($p58);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} usb_free_urb($p96);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} usb_free_urb($p100);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} usb_free_urb($p104);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} usb_free_urb($p108);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.1, $p111);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} usb_free_urb($p112);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.1, $p115);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} usb_free_urb($p116);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} usb_free_urb($p120);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.1, $p123);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} usb_free_urb($p124);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.1, $p127);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} usb_free_urb($p128);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.1, $p131);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} usb_free_urb($p132);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.1, $p135);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} usb_free_urb($p136);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.1, $p139);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} usb_free_urb($p140);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} usb_free_urb($p144);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} usb_free_urb($p148);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.1, $p151);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} usb_free_urb($p152);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2544, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} acm_write_buffers_free($p3);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3160, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i71);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1096, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1104, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.1, $p75);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} usb_free_coherent($p4, $i72, $p74, $i76);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} acm_read_buffers_free($p3);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p3);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(3172, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} tty_port_put($p92);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i84, $i85);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i86 == 1);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p89 := $p91;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} usb_driver_release_interface(acm_driver, $p89);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(16, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p89 := $p88;
    goto $bb30;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb21;

  $bb21:
    call $i63, $p65, $p66, $i67, $i68, $i69, $i62 := acm_disconnect_loop_$bb21($p3, $p59, $i63, $p65, $p66, $i67, $i68, $i69, $i62);
    goto $bb21_last;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref($i63, 8));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} usb_free_urb($p66);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i62, 1);
    call {:si_unique_call 225} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p59);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, $i67);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i62 := $i67;
    goto $bb23_dummy;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} tty_vhangup($p47);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} tty_kref_put($p47);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} device_remove_file($p33, dev_attr_wCountryCodes);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} device_remove_file($p36, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_72 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.6, .str.76);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;
}



const acm_suspend: ref;

axiom acm_suspend == $sub.ref(0, 131844);

procedure acm_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.10;



implementation acm_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p3, $i1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} spin_lock_irq($p6);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.9, $p7);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1024);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    call {:si_unique_call 249} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, $i20);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} spin_unlock_irq($p22);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} stop_data_traffic($p5);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2628, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} spin_unlock_irq($p14);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb5;
}



const acm_resume: ref;

axiom acm_resume == $sub.ref(0, 132876);

procedure acm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, assertsPassed, $CurrAddr;



implementation acm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i11: i32;
  var $p34: ref;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} spin_lock_irq($p3);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(688, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i14 := constant_test_bit(31, $p13);
    call {:si_unique_call 256} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} spin_unlock_irq($p34);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i18 := ldv_usb_submit_urb_29($p17, 32);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 258} {:cexpr "rv"} boogie_si_record_i32($i18);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(3184, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p20 := usb_get_from_anchor($p19);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p23 := $p20;
    goto $bb10;

  $bb10:
    call $p23, $p24, $p25, $p26, $p28, $i29, $i30, vslice_dummy_var_73 := acm_resume_loop_$bb10($p2, $p19, $p23, $p24, $p25, $p26, $p28, $i29, $i30, vslice_dummy_var_73);
    goto $bb10_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_73 := acm_start_wb($p2, $p26);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p28 := usb_get_from_anchor($p19);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p23 := $p28;
    goto $bb14_dummy;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i18, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i32 := acm_submit_read_urbs($p2, 32);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 263} {:cexpr "rv"} boogie_si_record_i32($i32);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb18;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb8;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const acm_reset_resume: ref;

axiom acm_reset_resume == $sub.ref(0, 133908);

procedure acm_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, assertsPassed, $CurrAddr;



implementation acm_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(688, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i5 := constant_test_bit(31, $p4);
    call {:si_unique_call 266} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i8 := acm_resume($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 269} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} tty_port_tty_hangup($p7, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 134940);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 135972);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const tty_port_tty_hangup: ref;

axiom tty_port_tty_hangup == $sub.ref(0, 137004);

procedure tty_port_tty_hangup($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation tty_port_tty_hangup($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "tty_port_tty_hangup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 138036);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 139068);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} ldv_spin_lock();
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} ldv_spin_lock_irq_4($p0);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_29: ref;

axiom ldv_usb_submit_urb_29 == $sub.ref(0, 140100);

procedure ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "ldv_usb_submit_urb_29:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_check_alloc_flags($i1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const usb_get_from_anchor: ref;

axiom usb_get_from_anchor == $sub.ref(0, 141132);

procedure usb_get_from_anchor($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_from_anchor($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p1 := external_alloc();
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const acm_start_wb: ref;

axiom acm_start_wb == $sub.ref(0, 142164);

procedure acm_start_wb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation acm_start_wb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2628, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2628, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i4);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p7);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p15, $i12);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, $i17);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, $p22);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i28 := ldv_usb_submit_urb_19($p27, 32);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 281} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(16, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_74 := dev_err.ref.ref.ref.i32($p32, .str.1, .str.2, $i28);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} acm_write_done($p0, $p1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const acm_submit_read_urbs: ref;

axiom acm_submit_read_urbs == $sub.ref(0, 143196);

procedure acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, assertsPassed;



implementation acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "acm_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2544, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i10, $i11, $i12, $i5 := acm_submit_read_urbs_loop_$bb4($p0, $i1, $p2, $i6, $i7, $i8, $i10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i6 := acm_submit_read_urb($p0, $i5, $i1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 286} {:cexpr "res"} boogie_si_record_i32($i6);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, 1);
    call {:si_unique_call 287} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, $i10);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb10_dummy;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb8;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 144228);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} ldv_spin_unlock();
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} ldv_spin_unlock_irq_7($p0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 145260);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 290} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_7: ref;

axiom ldv_spin_unlock_irq_7 == $sub.ref(0, 146292);

procedure ldv_spin_unlock_irq_7($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_7($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 147324);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



const acm_submit_read_urb: ref;

axiom acm_submit_read_urb == $sub.ref(0, 148356);

procedure acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, assertsPassed;



implementation acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i19: i64;
  var $p20: ref;
  var $i7: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "acm_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 293} {:cexpr "acm_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1768, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i5 := test_and_clear_bit($i3, $p4);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref($i8, 8));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i12 := ldv_usb_submit_urb_21($p11, $i2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 297} {:cexpr "res"} boogie_si_record_i32($i12);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1768, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} set_bit($i19, $p20);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(16, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_75 := dev_err.ref.ref.ref.i32($p17, .str.10, .str.11, $i12);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 149388);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 301} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 302} devirtbounce(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.11, $p2);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_submit_urb_21: ref;

axiom ldv_usb_submit_urb_21 == $sub.ref(0, 150420);

procedure ldv_usb_submit_urb_21($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_21($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "ldv_usb_submit_urb_21:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 151452);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 307} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 308} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 309} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 152484);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 314} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 153516);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const usb_submit_urb: ref;

axiom usb_submit_urb == $sub.ref(0, 154548);

procedure usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_submit_urb($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} {:cexpr "usb_submit_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 155580);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 320} __VERIFIER_error();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_19: ref;

axiom ldv_usb_submit_urb_19 == $sub.ref(0, 156612);

procedure ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_19($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "ldv_usb_submit_urb_19:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_check_alloc_flags($i1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 324} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const acm_write_done: ref;

axiom acm_write_done == $sub.ref(0, 157644);

procedure acm_write_done($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation acm_write_done($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2628, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2628, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i5);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} usb_autopm_put_interface_async($p8);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_put_interface_async: ref;

axiom usb_autopm_put_interface_async == $sub.ref(0, 158676);

procedure usb_autopm_put_interface_async($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface_async($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 159708);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 327} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 160740);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 328} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_4: ref;

axiom ldv_spin_lock_irq_4 == $sub.ref(0, 161772);

procedure ldv_spin_lock_irq_4($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_4($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} _raw_spin_lock_irq($p2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 162804);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    return;
}



const stop_data_traffic: ref;

axiom stop_data_traffic == $sub.ref(0, 163836);

procedure stop_data_traffic($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation stop_data_traffic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i31: i32;
  var $p39: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $p100: ref;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, .str.3);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p3, .str.77);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str.5);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.6);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.6, $p7);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1527);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p7, $i10);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, 0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.7, $p12);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 332} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1088, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} usb_kill_urb($p23);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} usb_kill_urb($p27);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} usb_kill_urb($p44);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} usb_kill_urb($p48);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} usb_kill_urb($p52);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} usb_kill_urb($p56);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} usb_kill_urb($p60);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} usb_kill_urb($p64);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} usb_kill_urb($p68);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_kill_urb($p72);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} usb_kill_urb($p76);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} usb_kill_urb($p80);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} usb_kill_urb($p84);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} usb_kill_urb($p88);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} usb_kill_urb($p92);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} usb_kill_urb($p96);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.1, $p99);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_kill_urb($p100);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2544, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2888, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_77 := cancel_work_sync($p39);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb11;

  $bb11:
    call $i32, $p34, $p35, $i36, $i37, $i38, $i31 := stop_data_traffic_loop_$bb11($p0, $p28, $i32, $p34, $p35, $i36, $i37, $i38, $i31);
    goto $bb11_last;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref($i32, 8));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} usb_kill_urb($p35);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i31, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p28);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i36);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb13_dummy;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_76 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p20, .str.6, .str.77);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 164868);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 355} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 165900);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 358} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32) returns ($r: i32);



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 361} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 166932);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 167964);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 364} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 365} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 168996);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 170028);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 171060);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 172092);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 368} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 173124);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 174156);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 175188);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p1 := external_alloc();
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 176220);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 177252);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 178284);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 179316);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    return;
}



const acm_write_buffers_free: ref;

axiom acm_write_buffers_free == $sub.ref(0, 180348);

procedure acm_write_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_write_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} usb_free_coherent($p3, $i8, $p10, $i12);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(0, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(8, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} usb_free_coherent($p3, $i16, $p18, $i20);
    $i21 := $add.i64(1, 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(0, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} usb_free_coherent($p3, $i25, $p27, $i29);
    $i30 := $add.i64($i21, 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(0, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(8, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} usb_free_coherent($p3, $i34, $p36, $i38);
    $i39 := $add.i64($i30, 1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(0, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(8, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.1, $p46);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} usb_free_coherent($p3, $i43, $p45, $i47);
    $i48 := $add.i64($i39, 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(8, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $p55);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} usb_free_coherent($p3, $i52, $p54, $i56);
    $i57 := $add.i64($i48, 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(0, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(8, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, $p64);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} usb_free_coherent($p3, $i61, $p63, $i65);
    $i66 := $add.i64($i57, 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(8, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.1, $p73);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} usb_free_coherent($p3, $i70, $p72, $i74);
    $i75 := $add.i64($i66, 1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(8, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p82);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} usb_free_coherent($p3, $i79, $p81, $i83);
    $i84 := $add.i64($i75, 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(0, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(8, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.1, $p91);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} usb_free_coherent($p3, $i88, $p90, $i92);
    $i93 := $add.i64($i84, 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(0, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(8, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.1, $p100);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} usb_free_coherent($p3, $i97, $p99, $i101);
    $i102 := $add.i64($i93, 1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.1, $p104);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i105);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(8, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.1, $p109);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} usb_free_coherent($p3, $i106, $p108, $i110);
    $i111 := $add.i64($i102, 1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.1, $p113);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(0, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(8, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.1, $p118);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} usb_free_coherent($p3, $i115, $p117, $i119);
    $i120 := $add.i64($i111, 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.1, $p122);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(0, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.1, $p125);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(8, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.1, $p127);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} usb_free_coherent($p3, $i124, $p126, $i128);
    $i129 := $add.i64($i120, 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.1, $p131);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.1, $p134);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.1, $p136);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} usb_free_coherent($p3, $i133, $p135, $i137);
    $i138 := $add.i64($i129, 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.1, $p140);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i141);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.1, $p143);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(8, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.1, $p145);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} usb_free_coherent($p3, $i142, $p144, $i146);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 181380);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 390} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    return;
}



const acm_read_buffers_free: ref;

axiom acm_read_buffers_free == $sub.ref(0, 182412);

procedure acm_read_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_read_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2544, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7 := acm_read_buffers_free_loop_$bb4($p0, $p3, $p4, $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7);
    goto $bb4_last;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1904, 1)), $mul.ref($i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1904, 1)), $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} usb_free_coherent($p3, $i10, $p15, $i20);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i7, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p4);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, $i21);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2056;
}



const usb_driver_release_interface: ref;

axiom usb_driver_release_interface == $sub.ref(0, 183444);

procedure usb_driver_release_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_driver_release_interface($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_put: ref;

axiom tty_port_put == $sub.ref(0, 184476);

procedure tty_port_put($p0: ref);
  free requires assertsPassed;



implementation tty_port_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 185508);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 186540);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p2 := external_alloc();
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 187572);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 188604);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 399} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 189636);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 403} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 405} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 190668);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 407} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 409} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_interface_claimed: ref;

axiom usb_interface_claimed == $sub.ref(0, 191700);

procedure usb_interface_claimed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interface_claimed($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(504, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 192732);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 193764);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 411} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_check_alloc_flags($i1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const acm_alloc_minor: ref;

axiom acm_alloc_minor == $sub.ref(0, 194796);

procedure acm_alloc_minor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12;



implementation acm_alloc_minor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.12, acm_table);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(1, 8)));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(2, 8)));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(3, 8)));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(4, 8)));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(5, 8)));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(6, 8)));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(7, 8)));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume {:branchcond $i28} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(8, 8)));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(9, 8)));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(10, 8)));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(11, 8)));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(12, 8)));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i4 := 12;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(13, 8)));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i4 := 13;
    assume {:branchcond $i46} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(14, 8)));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i4 := 14;
    assume {:branchcond $i49} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(15, 8)));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i4 := 15;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(16, 8)));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i4 := 16;
    assume {:branchcond $i55} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(17, 8)));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i4 := 17;
    assume {:branchcond $i58} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(18, 8)));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i4 := 18;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(19, 8)));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i4 := 19;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(20, 8)));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i4 := 20;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(21, 8)));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i4 := 21;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(22, 8)));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i4 := 22;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(23, 8)));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i4 := 23;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(24, 8)));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i4 := 24;
    assume {:branchcond $i79} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(25, 8)));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i4 := 25;
    assume {:branchcond $i82} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(26, 8)));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i4 := 26;
    assume {:branchcond $i85} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(27, 8)));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i4 := 27;
    assume {:branchcond $i88} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(28, 8)));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i4 := 28;
    assume {:branchcond $i91} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(29, 8)));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i4 := 29;
    assume {:branchcond $i94} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(30, 8)));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i4 := 30;
    assume {:branchcond $i97} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(31, 8)));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i4 := 31;
    assume {:branchcond $i100} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := 32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} mutex_unlock(acm_table_lock);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i5, 8));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p6, $p0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb6;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb4;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb4;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb4;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb4;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 195828);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} free_($p0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 196860);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 197892);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 198924);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 199956);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 200988);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    return;
}



const acm_softint: ref;

axiom acm_softint == $sub.ref(0, 202020);

procedure acm_softint($p0: ref);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 203052);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 204084);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 205116);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 206148);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 207180);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 208212);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 209244);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_anchor: ref;

axiom init_usb_anchor == $sub.ref(0, 210276);

procedure init_usb_anchor($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_usb_anchor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    call {:si_unique_call 421} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p3, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_7;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} INIT_LIST_HEAD($p4);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __init_waitqueue_head($p5, .str.62, $p1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_78 := spinlock_check($p6);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __raw_spin_lock_init($p10, .str.63, $p2);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_coherent_24: ref;

axiom ldv_usb_alloc_coherent_24 == $sub.ref(0, 211308);

procedure ldv_usb_alloc_coherent_24($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_24($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var vslice_dummy_var_79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "ldv_usb_alloc_coherent_24:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 427} {:cexpr "ldv_usb_alloc_coherent_24:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_check_alloc_flags($i2);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_79 := usb_alloc_coherent($p0, $i1, $i2, $p3);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const acm_write_buffers_alloc: ref;

axiom acm_write_buffers_alloc == $sub.ref(0, 212340);

procedure acm_write_buffers_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation acm_write_buffers_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p20: ref;
  var $i21: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $p3: ref;
  var $i4: i32;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p3, $i4 := $p1, 0;
    goto $bb1;

  $bb1:
    call $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $i35, $p36, $i37, $p3, $i4 := acm_write_buffers_alloc_loop_$bb1($p0, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $i35, $p36, $i37, $p3, $i4);
    goto $bb1_last;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p11 := ldv_usb_alloc_coherent_23($p6, $i9, 208, $p10);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p11);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i4, $p3;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i4, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p3, $mul.ref(1, 40));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i35, 15);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb15:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p3, $i4 := $p36, $i35;
    goto $bb15_dummy;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i17, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb13;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p18, $i17;
    goto $bb8;

  $bb8:
    call $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p20, $i21 := acm_write_buffers_alloc_loop_$bb8($p0, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p20, $i21);
    goto $bb8_last;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    call {:si_unique_call 431} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} usb_free_coherent($p25, $i28, $p30, $i32);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i22, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p20, $i21 := $p23, $i22;
    goto $bb10_dummy;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;
}



const ldv_usb_alloc_urb_25: ref;

axiom ldv_usb_alloc_urb_25 == $sub.ref(0, 213372);

procedure ldv_usb_alloc_urb_25($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_25($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "ldv_usb_alloc_urb_25:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 435} {:cexpr "ldv_usb_alloc_urb_25:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} ldv_check_alloc_flags($i1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_26: ref;

axiom ldv_usb_alloc_coherent_26 == $sub.ref(0, 214404);

procedure ldv_usb_alloc_coherent_26($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_26($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "ldv_usb_alloc_coherent_26:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 439} {:cexpr "ldv_usb_alloc_coherent_26:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ldv_check_alloc_flags($i2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_80 := usb_alloc_coherent($p0, $i1, $i2, $p3);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_27: ref;

axiom ldv_usb_alloc_urb_27 == $sub.ref(0, 215436);

procedure ldv_usb_alloc_urb_27($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_27($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "ldv_usb_alloc_urb_27:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 443} {:cexpr "ldv_usb_alloc_urb_27:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const acm_read_bulk_callback: ref;

axiom acm_read_bulk_callback == $sub.ref(0, 216468);

procedure acm_read_bulk_callback($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 217500);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 447} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 448} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i2);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i4);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p5);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p6);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $sub.i32(0, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 449} {:cexpr "usb_fill_int_urb:arg:__val"} boogie_si_record_i32($i7);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32(1, $i7);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(16, $i21);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i25);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 218532);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 451} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p3);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i4);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p5);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p6);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 219564);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 453} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_28: ref;

axiom ldv_usb_alloc_urb_28 == $sub.ref(0, 220596);

procedure ldv_usb_alloc_urb_28($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_28($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "ldv_usb_alloc_urb_28:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 455} {:cexpr "ldv_usb_alloc_urb_28:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_check_alloc_flags($i1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p2 := usb_alloc_urb($i0, $i1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const acm_write_bulk: ref;

axiom acm_write_bulk == $sub.ref(0, 221628);

procedure acm_write_bulk($p0: ref);



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 222660);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 223692);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 461} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} ldv_check_alloc_flags($i1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_81 := ldv_kmalloc_12($i0, $i1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const acm_ctrl_irq: ref;

axiom acm_ctrl_irq == $sub.ref(0, 224724);

procedure acm_ctrl_irq($p0: ref);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 225756);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acm_ctrl_msg: ref;

axiom acm_ctrl_msg == $sub.ref(0, 226788);

procedure acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i16;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i32;
  var $i10: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 467} {:cexpr "acm_ctrl_msg:arg:request"} boogie_si_record_i32($i1);
    call {:si_unique_call 468} {:cexpr "acm_ctrl_msg:arg:value"} boogie_si_record_i32($i2);
    call {:si_unique_call 469} {:cexpr "acm_ctrl_msg:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i8 := usb_autopm_get_interface($p7);
    call {:si_unique_call 471} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i13 := __create_pipe($p12, 0);
    call {:si_unique_call 473} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $sub.i32(0, 2147483648));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i1);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i2);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i4);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i35 := usb_control_msg($p15, $i16, $i19, 33, $i22, $i31, $p3, $i34, 5000);
    call {:si_unique_call 475} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.3);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.14);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p38, .str.5);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p39, .str.15);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.6, $p41);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 175);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p41, $i44);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p45, 0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.7, $p46);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 477} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} usb_autopm_put_interface($p57);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32(0, $i35);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i58 == 1);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i59 := $i35;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i10 := $i59;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i58 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb10;

  $bb5:
    assume $i51 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_82 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p5, $p54, .str.15, .str.14, $i1, $i2, $i4, $i35);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const usb_driver_claim_interface: ref;

axiom usb_driver_claim_interface == $sub.ref(0, 227820);

procedure usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 480} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 228852);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p1 := external_alloc();
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_port_register_device: ref;

axiom tty_port_register_device == $sub.ref(0, 229884);

procedure tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "tty_port_register_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p4 := external_alloc();
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 230916);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 231948);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const acm_release_minor: ref;

axiom acm_release_minor == $sub.ref(0, 232980);

procedure acm_release_minor($p0: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation acm_release_minor($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3164, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i3, 8));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, $0.ref);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} mutex_unlock(acm_table_lock);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 234012);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 489} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 490} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 235044);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 492} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 493} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 494} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 495} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 496} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 497} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 498} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 499} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 236076);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    return;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 237108);

procedure usb_mark_last_busy($p0: ref);



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 238140);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 239172);

procedure spin_lock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 240204);

procedure spin_unlock($p0: ref);



const ldv_usb_submit_urb_20: ref;

axiom ldv_usb_submit_urb_20 == $sub.ref(0, 241236);

procedure ldv_usb_submit_urb_20($p0: ref, $i1: i32) returns ($r: i32);



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 242268);

procedure ldv_spin_unlock_5($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 243300);

procedure _raw_spin_unlock($p0: ref);



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 244332);

procedure ldv_spin_lock_1($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 245364);

procedure _raw_spin_lock($p0: ref);



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 246396);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 247428);

procedure pm_runtime_mark_last_busy($p0: ref);



const ldv_kmalloc_12: ref;

axiom ldv_kmalloc_12 == $sub.ref(0, 248460);

procedure ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} {:cexpr "ldv_kmalloc_12:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 501} {:cexpr "ldv_kmalloc_12:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 249492);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.10;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} ldv_spin_unlock();
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 250524);

procedure schedule_work($p0: ref) returns ($r: i1);



const queue_work: ref;

axiom queue_work == $sub.ref(0, 251556);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 252588);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 253620);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 254652);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    return;
}



const usb_alloc_urb: ref;

axiom usb_alloc_urb == $sub.ref(0, 255684);

procedure usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_urb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} {:cexpr "usb_alloc_urb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 510} {:cexpr "usb_alloc_urb:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p2 := external_alloc();
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const acm_process_read_urb: ref;

axiom acm_process_read_urb == $sub.ref(0, 256716);

procedure acm_process_read_urb($p0: ref, $p1: ref);



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 257748);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 258780);

procedure tty_flip_buffer_push($p0: ref);



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 259812);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);



const usb_alloc_coherent: ref;

axiom usb_alloc_coherent == $sub.ref(0, 260844);

procedure usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_alloc_coherent($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "usb_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 513} {:cexpr "usb_alloc_coherent:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p4 := external_alloc();
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_alloc_coherent_23: ref;

axiom ldv_usb_alloc_coherent_23 == $sub.ref(0, 261876);

procedure ldv_usb_alloc_coherent_23($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_23($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var vslice_dummy_var_83: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} {:cexpr "ldv_usb_alloc_coherent_23:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 516} {:cexpr "ldv_usb_alloc_coherent_23:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} ldv_check_alloc_flags($i2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_83 := usb_alloc_coherent($p0, $i1, $i2, $p3);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 262908);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 263940);

procedure tty_port_tty_wakeup($p0: ref);



const free_: ref;

axiom free_ == $sub.ref(0, 264972);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 519} $free($p0);
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 266004);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 267036);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const acm_tty_install: ref;

axiom acm_tty_install == $sub.ref(0, 268068);

procedure acm_tty_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $CurrAddr;



implementation acm_tty_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i27: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.3);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.18);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.5);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.6);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.6, $p8);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 516);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p8, $i11);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 522} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(32, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p24 := acm_get_by_index($i23);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i28 := tty_standard_install($p0, $p1);
    call {:si_unique_call 526} {:cexpr "retval"} boogie_si_record_i32($i28);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $p24);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} tty_port_put($p32);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb6;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(8, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_84 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p20, .str.6, .str.18);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_open: ref;

axiom acm_tty_open == $sub.ref(0, 269100);

procedure acm_tty_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.9);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.5);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.6);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 539);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 530} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i26 := tty_port_open($p25, $p0, $p1);
    call {:si_unique_call 533} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(8, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.6, .str.9);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_close: ref;

axiom acm_tty_close == $sub.ref(0, 270132);

procedure acm_tty_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.3);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.8);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.5);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.6);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.6, $p11);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 690);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p11, $i14);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 536} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} tty_port_close($p26, $p0, $p1);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_86 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p24, .str.6, .str.8);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_cleanup: ref;

axiom acm_tty_cleanup == $sub.ref(0, 271164);

procedure acm_tty_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.4);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.5);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.6);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 676);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 541} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} tty_port_put($p25);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.6, .str.4);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_write: ref;

axiom acm_tty_write == $sub.ref(0, 272196);

procedure acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.1, assertsPassed;



implementation acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i1;
  var $i7: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} {:cexpr "acm_tty_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_spin_lock();
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i8 := acm_wb_alloc($p5);
    call {:si_unique_call 547} {:cexpr "wbn"} boogie_si_record_i32($i8);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 40));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i26 := $i2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 550} {:cexpr "__len"} boogie_si_record_i64($i27);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(0, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.1;
    cmdloc_dummy_var_9 := $M.1;
    call {:si_unique_call 551} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p29, $p1, $i27, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_10;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(16, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i26);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i33 := usb_autopm_get_interface_async($p32);
    call {:si_unique_call 553} {:cexpr "stat"} boogie_si_record_i32($i33);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3176, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i44 := acm_start_wb($p5, $p14);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 558} {:cexpr "stat"} boogie_si_record_i32($i44);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} spin_unlock_irqrestore($p45, $u0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(24, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3184, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} usb_anchor_urb($p41, $p42);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} spin_unlock_irqrestore($p36, $u0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} spin_unlock_irqrestore($p20, $u0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_write_room: ref;

axiom acm_tty_write_room == $sub.ref(0, 273228);

procedure acm_tty_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation acm_tty_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i4 := acm_wb_is_avail($p3);
    call {:si_unique_call 561} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const acm_tty_chars_in_buffer: ref;

axiom acm_tty_chars_in_buffer == $sub.ref(0, 274260);

procedure acm_tty_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation acm_tty_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2872, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i8 := acm_wb_is_avail($p3);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(16, $i8);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, $i11);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_ioctl: ref;

axiom acm_tty_ioctl == $sub.ref(0, 275292);

procedure acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.10, $CurrAddr;



implementation acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "acm_tty_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 565} {:cexpr "acm_tty_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 21597);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 21597);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 515);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i25 := get_serial_usage($p5, $p24);
    call {:si_unique_call 569} {:cexpr "rv"} boogie_si_record_i32($i25);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i14 := $i25;
    goto $bb15;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i19 := usb_autopm_get_interface($p18);
    call {:si_unique_call 567} {:cexpr "rv"} boogie_si_record_i32($i19);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i21 := wait_serial_change($p5, $i2);
    call {:si_unique_call 575} {:cexpr "rv"} boogie_si_record_i32($i21);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} usb_autopm_put_interface($p23);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb15;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb15;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i2);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i16 := set_serial_info($p5, $p15);
    call {:si_unique_call 571} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb15;

  $bb9:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i2);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i13 := get_serial_info($p5, $p12);
    call {:si_unique_call 573} {:cexpr "rv"} boogie_si_record_i32($i13);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb15;
}



const acm_tty_set_termios: ref;

axiom acm_tty_set_termios == $sub.ref(0, 276324);

procedure acm_tty_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i67: i32;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i24;
  var $i92: i24;
  var $i93: i24;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $p116: ref;
  var $p117: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 579} {:cexpr "newctrl"} boogie_si_record_i32($i9);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i10 := tty_get_baud_rate($p0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 64);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i16 := (if $i15 == 1 then 2 else 0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 256);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, $i35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 48);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, 8);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 2048);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(3168, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i56);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i9, 1);
    call {:si_unique_call 582} {:cexpr "newctrl"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i66, $i69);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2876, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p2);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i76 := memcmp($p74, $p75, 7);
    call {:si_unique_call 585} {:cexpr "tmp___1"} boogie_si_record_i32($i76);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i77 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i64(7, 63);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i78 == 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2876, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.1;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 587} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p83, $p84, 7, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p85, .str.3);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p86, .str.16);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p87, .str.5);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p88, .str.17);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i91 := $load.i24($M.6, $p90);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i92 := $and.i24($i91, $sub.i24(0, 262144));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i93 := $or.i24($i92, 1035);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p90, $i93);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p94, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.7, $p95);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i64($i96);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 589} {:cexpr "tmp___0"} boogie_si_record_i64($i99);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2876, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_90 := acm_ctrl_msg($p6, 32, 0, $p117, 7);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i100 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.1, $p104);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.1, $p109);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p103, .str.17, .str.16, $i105, $i108, $i111, $i114);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2876, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.1;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 586} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p80, $p81, 7, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p71, $i66);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_88 := acm_ctrl_msg($p6, 34, $i66, $0.ref, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.1, $p62);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i63);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i9, $sub.i32(0, 2));
    call {:si_unique_call 581} {:cexpr "newctrl"} boogie_si_record_i32($i65);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb24;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb11;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p49, 7);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, 6);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb11;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, 5);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 512);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 1 else 2);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1073741824);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 2 else 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i27, $i32);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb3;
}



const acm_tty_throttle: ref;

axiom acm_tty_throttle == $sub.ref(0, 277356);

procedure acm_tty_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10;



implementation acm_tty_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} spin_lock_irq($p4);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 9));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 8);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p5, $i8);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} spin_unlock_irq($p9);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    return;
}



const acm_tty_unthrottle: ref;

axiom acm_tty_unthrottle == $sub.ref(0, 278388);

procedure acm_tty_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, $CurrAddr, assertsPassed;



implementation acm_tty_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $i17: i1;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} spin_lock_irq($p4);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i8($i6, 2);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, 1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 595} {:cexpr "was_throttled"} boogie_si_record_i32($i9);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 5));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i12);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(3180, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 9));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i15);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} spin_unlock_irq($p16);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i9, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_91 := acm_submit_read_urbs($p3, 208);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const acm_tty_hangup: ref;

axiom acm_tty_hangup == $sub.ref(0, 279420);

procedure acm_tty_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.7);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.5);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.6);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 683);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} tty_port_hangup($p25);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_92 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.6, .str.7);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_break_ctl: ref;

axiom acm_tty_break_ctl == $sub.ref(0, 280452);

procedure acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 604} {:cexpr "acm_tty_break_ctl:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 65535 else 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i8 := acm_ctrl_msg($p5, 35, $i7, $0.ref, 0);
    call {:si_unique_call 606} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.3);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.12);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p12, .str.5);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p13, .str.13);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.6, $p15);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 805);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p15, $i18);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p20);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 608} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p28, .str.13, .str.12);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acm_tty_tiocmget: ref;

axiom acm_tty_tiocmget == $sub.ref(0, 281484);

procedure acm_tty_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_tty_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 2 else 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 4 else 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i8, $i13);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2968, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 256 else 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i14, $i19);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2968, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 128 else 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2968, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 64 else 0);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i26, $i31);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 32);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const acm_tty_tiocmset: ref;

axiom acm_tty_tiocmset == $sub.ref(0, 282516);

procedure acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} {:cexpr "acm_tty_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 611} {:cexpr "acm_tty_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1616, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    call {:si_unique_call 612} {:cexpr "newctrl"} boogie_si_record_i32($i7);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 2);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 4);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 2 else 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    call {:si_unique_call 613} {:cexpr "set"} boogie_si_record_i32($i14);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 2);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 4);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i20 := (if $i19 == 1 then 2 else 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    call {:si_unique_call 614} {:cexpr "clear"} boogie_si_record_i32($i21);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i22 := $xor.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $i7);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, $i14);
    call {:si_unique_call 615} {:cexpr "newctrl"} boogie_si_record_i32($i24);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i24);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, $i24);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i30 := acm_ctrl_msg($p5, 34, $i24, $0.ref, 0);
    call {:si_unique_call 617} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 283548);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 284580);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1752)), $mul.ref(1120, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 619} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 285612);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 286644);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 621} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_serial_info: ref;

axiom get_serial_info == $sub.ref(0, 287676);

procedure get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i5: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.1;
    call {:si_unique_call 623} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p6, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_18;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 8192);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i9);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2876, 1)), $mul.ref(0, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i13);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1048, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, 10);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, $i19);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 65535);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i31 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p33, $i32);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i36 := copy_to_user($p34, $p35, 72);
    call {:si_unique_call 625} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i32($i27, 10);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const set_serial_info: ref;

axiom set_serial_info == $sub.ref(0, 288708);

procedure set_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation set_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p39: ref;
  var $p41: ref;
  var $i37: i32;
  var $p43: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i5 := copy_from_user($p3, $p4, 72);
    call {:si_unique_call 628} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 10);
    call {:si_unique_call 629} {:cexpr "close_delay"} boogie_si_record_i32($i11);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 65535);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i20 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(704, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} mutex_lock_nested($p22, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i23 := capable(21);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 632} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1048, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, $i11);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $i20);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(704, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} mutex_unlock($p43);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1048, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $i11);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(24, 1)), $mul.ref(1052, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, $i20);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 95);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.1, $p16);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 10);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const wait_serial_change: ref;

axiom wait_serial_change == $sub.ref(0, 289740);

procedure wait_serial_change($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.16, $M.17, $M.18, $M.1, $M.19, $M.10, $CurrAddr;



implementation wait_serial_change($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i1;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i67: i32;
  var $i72: i1;
  var $i73: i32;
  var $i38: i32;
  var $i17: i32;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 638} {:cexpr "wait_serial_change:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p6 := get_current();
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p7, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, $p6);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p10, default_wake_function);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.17 := $store.ref($M.17, $p12, $0.ref);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p14, $0.ref);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i1, 448);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb5;

  $bb5:
    call $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $i57, $p58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $p68, $i69, $i70, $i71, $i67, $i72, $i73, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27 := wait_serial_change_loop_$bb5($p0, $i1, $p2, $p3, $p4, $p5, $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $i57, $p58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $p68, $i69, $i70, $i71, $i67, $i72, $i73, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27);
    goto $bb5_last;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} spin_lock_irq($p19);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3020, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.1;
    cmdloc_dummy_var_20 := $M.1;
    call {:si_unique_call 641} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p21, $p22, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_21;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p23);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.1;
    cmdloc_dummy_var_23 := $M.1;
    call {:si_unique_call 642} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p24, $p25, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_24;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3020, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.1;
    cmdloc_dummy_var_26 := $M.1;
    call {:si_unique_call 643} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p27, $p28, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_27;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} spin_unlock_irq($p29);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i1, 256);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i1, 64);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i1, 128);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} add_wait_queue($p55, $p2);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p5, 1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p56 := get_current();
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.19, $p5);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 647} $i59 := devirtbounce.2(0, $p58, $i57, $p58);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p5, $i59);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} schedule();
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} remove_wait_queue($p60, $p2);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2872, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p68 := get_current();
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i69 := signal_pending($p68);
    call {:si_unique_call 652} {:cexpr "tmp___5"} boogie_si_record_i32($i69);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $i18;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i67 := $i71;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i67, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i73 := $i67;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i38 := $i73;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i17 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb35:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i67;
    goto $bb35_dummy;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 512);
    goto $bb34;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i1, 64);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i66 := $i18;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 19);
    goto $bb31;

  $bb28:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i38 := $i66;
    goto $bb11;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i50, $i52);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i54 := $i18;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb21;

  $bb22:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i38 := $i54;
    goto $bb11;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i42, $i44);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i46 := $i18;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb15;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i38 := $i46;
    goto $bb11;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, $i35);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i37 := $i18;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb8;

  $bb9:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb11;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;
}



const get_serial_usage: ref;

axiom get_serial_usage == $sub.ref(0, 290772);

procedure get_serial_usage($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation get_serial_usage($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p2 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.1;
    call {:si_unique_call 654} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p3, 0, 80, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_29;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(4, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(8, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i10);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(12, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, $i14);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(24, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i18);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(32, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i22);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(28, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i26);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2976, 1)), $mul.ref(36, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i30);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i34 := copy_to_user($p32, $p33, 80);
    call {:si_unique_call 656} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 291804);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 659} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 660} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} might_fault();
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 663} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 667} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i21 := _copy_to_user($p0, $p1, $i20);
    call {:si_unique_call 669} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i12 := _copy_to_user($p0, $p1, $i11);
    call {:si_unique_call 665} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 292836);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 293868);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 294900);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 671} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 295932);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 296964);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p0 := devirtbounce.3(0, current_task);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 297996);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} {:cexpr "default_wake_function:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 676} {:cexpr "default_wake_function:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 299028);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 300060);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 301092);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 302124);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 303156);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(8, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.13, $p2);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 304188);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 305220);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 690} $i2 := devirtbounce.4(0, $p1, $i0);
    call {:si_unique_call 691} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 306252);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 695} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} might_fault();
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 698} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 702} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 704} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 700} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 307284);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 708} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 308316);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 309348);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    return;
}



const acm_wb_is_avail: ref;

axiom acm_wb_is_avail == $sub.ref(0, 310380);

procedure acm_wb_is_avail($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation acm_wb_is_avail($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p80: ref;
  var $i81: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} ldv_spin_lock();
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(16, $i4);
    call {:si_unique_call 713} {:cexpr "n"} boogie_si_record_i32($i5);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(1, 40)), $mul.ref(20, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i5, $i11);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(2, 40)), $mul.ref(20, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i12, $i16);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(3, 40)), $mul.ref(20, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i17, $i21);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(4, 40)), $mul.ref(20, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i22, $i26);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(5, 40)), $mul.ref(20, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, $i31);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(6, 40)), $mul.ref(20, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i32, $i36);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(7, 40)), $mul.ref(20, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i37, $i41);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(8, 40)), $mul.ref(20, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i42, $i46);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(9, 40)), $mul.ref(20, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i47, $i51);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(10, 40)), $mul.ref(20, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i52, $i56);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(11, 40)), $mul.ref(20, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i57, $i61);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(12, 40)), $mul.ref(20, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i62, $i66);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(13, 40)), $mul.ref(20, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i67, $i71);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(14, 40)), $mul.ref(20, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i72, $i76);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1)), $mul.ref(15, 40)), $mul.ref(20, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i77, $i81);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(2632, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const acm_wb_alloc: ref;

axiom acm_wb_alloc == $sub.ref(0, 311412);

procedure acm_wb_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation acm_wb_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i10: i32;
  var $p11: ref;
  var $i6: i32;
  var $p7: ref;
  var $p12: ref;
  var $i8: i32;
  var $i9: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb4;

  $bb4:
    call $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22 := acm_wb_alloc_loop_$bb4($p2, $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i15 := $srem.i32($i14, 16);
    call {:si_unique_call 715} {:cexpr "wbn"} boogie_si_record_i32($i15);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    call {:si_unique_call 716} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 15);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 40));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i10, $p11 := $i15, $p19;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i8, $i9 := $i15, $i16;
    goto $bb11_dummy;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i6, $p7 := $i10, $p11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const usb_autopm_get_interface_async: ref;

axiom usb_autopm_get_interface_async == $sub.ref(0, 312444);

procedure usb_autopm_get_interface_async($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface_async($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 717} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_anchor_urb: ref;

axiom usb_anchor_urb == $sub.ref(0, 313476);

procedure usb_anchor_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_anchor_urb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 314508);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 315540);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 719} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acm_get_by_index: ref;

axiom acm_get_by_index == $sub.ref(0, 316572);

procedure acm_get_by_index($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation acm_get_by_index($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p11: ref;
  var $p15: ref;
  var vslice_dummy_var_94: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} {:cexpr "acm_get_by_index:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} mutex_lock_nested(acm_table_lock, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref($i1, 8));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.12, $p2);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p15 := $p3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} mutex_unlock(acm_table_lock);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} mutex_lock_nested($p6, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2872, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(24, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_94 := tty_port_get($p12);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} mutex_unlock($p14);
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p15 := $p11;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3368)), $mul.ref(2704, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} mutex_unlock($p10);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb5;
}



const tty_standard_install: ref;

axiom tty_standard_install == $sub.ref(0, 317604);

procedure tty_standard_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_standard_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 729} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tty_port_get: ref;

axiom tty_port_get == $sub.ref(0, 318636);

procedure tty_port_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1064)), $mul.ref(1060, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i4 := kref_get_unless_zero($p3);
    call {:si_unique_call 731} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p6 := $p0;
    goto $bb5;
}



const kref_get_unless_zero: ref;

axiom kref_get_unless_zero == $sub.ref(0, 319668);

procedure kref_get_unless_zero($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kref_get_unless_zero($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i2 := atomic_add_unless($p1, 1, 0);
    call {:si_unique_call 733} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 320700);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 735} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 321732);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 739} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i3 := atomic_read($p0);
    call {:si_unique_call 741} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 743} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 745} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 747} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 749} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 322764);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 323796);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 751} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 752} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 753} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 754} $i4 := devirtbounce.5(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 755} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const acm_port_dtr_rts: ref;

axiom acm_port_dtr_rts == $sub.ref(0, 324828);

procedure acm_port_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation acm_port_dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} {:cexpr "acm_port_dtr_rts:arg:raise"} boogie_si_record_i32($i1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3368));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2972, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i5);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i7 := acm_ctrl_msg($p3, 34, $i5, $0.ref, 0);
    call {:si_unique_call 758} {:cexpr "res"} boogie_si_record_i32($i7);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(3172, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_95 := dev_err.ref.ref($p15, .str.26);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i5 := 3;
    goto $bb3;
}



const acm_port_shutdown: ref;

axiom acm_port_shutdown == $sub.ref(0, 325860);

procedure acm_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.10, $CurrAddr;



implementation acm_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i58: i32;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $p97: ref;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $p121: ref;
  var $p124: ref;
  var $p125: ref;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.3);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.27);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.5);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.6);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.6, $p9);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 644);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p9, $i12);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 762} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2632, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} spin_lock_irq($p24);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2632, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} spin_unlock_irq($p25);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} usb_autopm_get_interface_no_resume($p27);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i32 := $and.i8($i31, $sub.i8(0, 9));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, $i32);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} usb_autopm_put_interface($p34);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(3184, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p36 := usb_get_from_anchor($p35);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i38 == 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p39 := $p36;
    goto $bb7;

  $bb7:
    call $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48 := acm_port_shutdown_loop_$bb7($p2, $p35, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48);
    goto $bb7_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} usb_autopm_put_interface_async($p45);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p46 := usb_get_from_anchor($p35);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p39 := $p46;
    goto $bb11_dummy;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1088, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} usb_kill_urb($p50);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} usb_kill_urb($p54);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} usb_kill_urb($p69);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} usb_kill_urb($p73);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} usb_kill_urb($p77);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} usb_kill_urb($p81);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} usb_kill_urb($p85);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} usb_kill_urb($p89);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} usb_kill_urb($p93);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} usb_kill_urb($p97);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} usb_kill_urb($p101);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} usb_kill_urb($p105);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} usb_kill_urb($p109);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} usb_kill_urb($p113);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} usb_kill_urb($p117);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} usb_kill_urb($p121);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1128, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} usb_kill_urb($p125);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2544, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb19;

  $bb19:
    call $i59, $p61, $p62, $i63, $i64, $i65, $i58 := acm_port_shutdown_loop_$bb19($p2, $p55, $i59, $p61, $p62, $i63, $i64, $i65, $i58);
    goto $bb19_last;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1776, 1)), $mul.ref($i59, 8));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} usb_kill_urb($p62);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i58, 1);
    call {:si_unique_call 775} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p55);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, $i63);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i63;
    goto $bb21_dummy;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vslice_dummy_var_96 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.6, .str.27);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3971;
}



const acm_port_activate: ref;

axiom acm_port_activate == $sub.ref(0, 326892);

procedure acm_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation acm_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i8;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i73: i32;
  var $p81: ref;
  var $p82: ref;
  var $i55: i32;
  var $p83: ref;
  var $p84: ref;
  var $i34: i32;
  var $i29: i32;
  var $p85: ref;
  var $i86: i32;
  var $i69: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 24), 3368));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.3);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.24);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.5);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.6);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.6, $p10);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 569);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p10, $i13);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.7, $p15);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2704, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} mutex_lock_nested($p25, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2872, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i32 := usb_autopm_get_interface($p31);
    call {:si_unique_call 799} {:cexpr "retval"} boogie_si_record_i32($i32);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 1752)), $mul.ref(1296, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} set_bit(17, $p35);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i39, $sub.i8(0, 9));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i41 := $or.i8($i40, 8);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p38, $i41);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1088, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $p43);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1088, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i49 := ldv_usb_submit_urb_22($p48, 208);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 802} {:cexpr "retval"} boogie_si_record_i32($i49);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2552, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} spin_lock_irq($p56);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(3180, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i58, $sub.i8(0, 5));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i59);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(3180, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i62 := $and.i8($i61, $sub.i8(0, 9));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p60, $i62);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2552, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} spin_unlock_irq($p63);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i64 := acm_submit_read_urbs($p4, 208);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 808} {:cexpr "retval"} boogie_si_record_i32($i64);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} usb_autopm_put_interface($p67);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2704, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} mutex_unlock($p68);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2544, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1088, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} usb_kill_urb($p82);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i55 := $i64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} usb_autopm_put_interface($p84);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i34 := $i55;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(2704, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} mutex_unlock($p85);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i86 := usb_translate_errors($i29);
    call {:si_unique_call 797} {:cexpr "tmp___0"} boogie_si_record_i32($i86);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i69 := $i86;
    goto $bb20;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb24;

  $bb24:
    call $i74, $p76, $p77, $i78, $i79, $i80, $i73 := acm_port_activate_loop_$bb24($p3, $p70, $i74, $p76, $p77, $i78, $i79, $i80, $i73);
    goto $bb24_last;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1776, 1)), $mul.ref($i74, 8));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} usb_kill_urb($p77);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i73, 1);
    call {:si_unique_call 812} {:cexpr "i"} boogie_si_record_i32($i78);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p70);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i80 := $sgt.i32($i79, $i78);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i73 := $i78;
    goto $bb26_dummy;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_98 := dev_err.ref.ref.ref($p53, .str.25, .str.24);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i55 := $i49;
    goto $bb14;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb10;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_97 := __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.6, .str.24);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;
}



const acm_port_destruct: ref;

axiom acm_port_destruct == $sub.ref(0, 327924);

procedure acm_port_destruct($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $CurrAddr;



implementation acm_port_destruct($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3368));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.3);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.28);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.5);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.6);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.6, $p9);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 629);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p9, $i12);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} acm_release_minor($p3);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} usb_put_intf($p25);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1112, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} kfree($p27);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} kfree($p28);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_99 := __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.6, .str.28);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 328956);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_22: ref;

axiom ldv_usb_submit_urb_22 == $sub.ref(0, 329988);

procedure ldv_usb_submit_urb_22($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_22($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "ldv_usb_submit_urb_22:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} ldv_check_alloc_flags($i1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i2 := usb_submit_urb($p0, $i1);
    call {:si_unique_call 825} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const usb_translate_errors: ref;

axiom usb_translate_errors == $sub.ref(0, 331020);

procedure usb_translate_errors($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_translate_errors($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    call {:si_unique_call 826} {:cexpr "usb_translate_errors:arg:error_code"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb20;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb18;
}



const usb_autopm_get_interface_no_resume: ref;

axiom usb_autopm_get_interface_no_resume == $sub.ref(0, 332052);

procedure usb_autopm_get_interface_no_resume($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_get_interface_no_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    return;
}



const show_caps: ref;

axiom show_caps == $sub.ref(0, 333084);

procedure show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(3172, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.21, $p7);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i9 := sprintf.ref.ref.i32($p2, .str, $i8);
    call {:si_unique_call 829} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 334116);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const show_country_codes: ref;

axiom show_country_codes == $sub.ref(0, 335148);

procedure show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(1120, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.23, $p7);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    call {:si_unique_call 831} {:cexpr "__len"} boogie_si_record_i64($i9);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(1112, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.24, $p10);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.1;
    cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 832} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p2, $p11, $i9, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_32;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(1120, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.23, $p12);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const show_country_rel_date: ref;

axiom show_country_rel_date == $sub.ref(0, 336180);

procedure show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3368)), $mul.ref(1124, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.26, $p7);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i9 := sprintf.ref.ref.i32($p2, .str, $i8);
    call {:si_unique_call 835} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 337212);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 839} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p4 := calloc(1, $i0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} __VERIFIER_assume($i7);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 338244);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.27, $M.1, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p0 := ldv_zalloc(1560);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    return;
}



const ldv_tty_port_operations_3: ref;

axiom ldv_tty_port_operations_3 == $sub.ref(0, 339276);

procedure ldv_tty_port_operations_3();
  free requires assertsPassed;
  modifies $M.28, $M.1, $CurrAddr;



implementation ldv_tty_port_operations_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p0 := ldv_zalloc(1064);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_1: ref;

axiom ldv_initialize_tty_operations_1 == $sub.ref(0, 340308);

procedure ldv_initialize_tty_operations_1();
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.1, $CurrAddr;



implementation ldv_initialize_tty_operations_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p0 := ldv_zalloc(512);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p2 := ldv_zalloc(1752);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.30 := $p2;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 341340);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.10, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.40, $M.41, $M.28, $M.29, $M.30, $M.42, $M.12, $M.43, $M.44, $M.9, $M.46, $M.47, $M.27, $M.45, $M.62, $M.8, $M.97, $M.98, $M.99, $CurrAddr, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var vslice_dummy_var_100: i64;
  var vslice_dummy_var_101: i64;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i64;

  $bb0:
    call {:si_unique_call 846} $initialize();
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p1 := ldv_zalloc(1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p2 := ldv_zalloc(1416);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p4 := ldv_zalloc(48);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p6 := ldv_zalloc(1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p7 := ldv_zalloc(1416);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p9 := ldv_zalloc(48);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p11 := ldv_zalloc(44);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 856} $i13 := __VERIFIER_nondet_uint();
    call {:si_unique_call 857} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i13);
    call {:si_unique_call 858} {:cexpr "tmp___6"} boogie_si_record_i32($i13);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 861} {:cexpr "tmp___7"} boogie_si_record_i32($i14);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 862} $i15 := __VERIFIER_nondet_uint();
    call {:si_unique_call 863} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i15);
    call {:si_unique_call 864} {:cexpr "tmp___8"} boogie_si_record_i32($i15);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p16 := ldv_zalloc(184);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p18 := ldv_zalloc(1);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} $i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 868} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
    call {:si_unique_call 869} {:cexpr "tmp___11"} boogie_si_record_i32($i19);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 870} $i20 := __VERIFIER_nondet_uint();
    call {:si_unique_call 871} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i20);
    call {:si_unique_call 872} {:cexpr "tmp___12"} boogie_si_record_i32($i20);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 873} $i21 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 874} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i21);
    call {:si_unique_call 875} {:cexpr "tmp___13"} boogie_si_record_i64($i21);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p22 := ldv_zalloc(1752);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 879} {:cexpr "tmp___15"} boogie_si_record_i32($i24);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p25 := ldv_zalloc(32);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p27 := ldv_zalloc(48);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p29 := ldv_zalloc(1);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p30 := ldv_zalloc(1416);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ldv_initialize();
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.31;
    call {:si_unique_call 885} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p32, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.31 := cmdloc_dummy_var_34;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 888} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 889} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $p115, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i174, $i175, $p176, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $p267, $p268, $i269, $i270, $i271, $i272, $i273, $i274, $p275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117 := main_loop_$bb1($p0, $p1, $p3, $p5, $p6, $p8, $p10, $p12, $i13, $i14, $i15, $p17, $p18, $i19, $i20, $i21, $p23, $i24, $p26, $p28, $p29, $p31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $i79, $i80, $p81, $i82, $i83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $p115, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i174, $i175, $p176, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i220, $i221, $p222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $p239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $p267, $p268, $i269, $i270, $i271, $i272, $i273, $i274, $p275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i33, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i279 := $M.39;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb294:
    assume $i280 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} $i281 := __VERIFIER_nondet_int();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i281);
    call {:si_unique_call 1031} {:cexpr "tmp___27"} boogie_si_record_i32($i281);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_stop();
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb297:
    assume $i282 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i283 := $M.39;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb299:
    assume $i284 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} vslice_dummy_var_117 := show_country_codes($p31, $p28, $p29);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i228 := $M.38;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb238:
    assume $i229 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} $i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i230);
    call {:si_unique_call 1008} {:cexpr "tmp___26"} boogie_si_record_i32($i230);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_stop();
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb247:
    assume $i234 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i273 := $M.38;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 3);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb285:
    assume $i274 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p275 := $M.27;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i276 := acm_resume($p275);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.47 := $i276;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i276);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i277 := $M.47;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb287:
    assume $i278 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb289;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb245:
    assume $i233 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i265 := $M.38;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb279:
    assume $i266 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p267 := $M.27;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.31, $p268);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i270 := acm_suspend($p267, $i269);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.46 := $i270;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i270);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i271 := $M.46;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb281:
    assume $i272 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb243:
    assume $i232 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i251 := $M.38;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 3);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i258 := $M.38;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb273:
    assume $i259 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i260 := $M.45;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 0);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb275;

  $bb276:
    assume $i261 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p262 := $M.27;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} acm_disconnect($p262);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i263 := $M.35;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i264 := $sub.i32($i263, 1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.35 := $i264;
    call {:si_unique_call 1021} {:cexpr "ref_cnt"} boogie_si_record_i32($i264);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb267:
    assume $i252 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i253 := $M.45;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb269;

  $bb270:
    assume $i254 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p255 := $M.27;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} acm_disconnect($p255);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i256 := $M.35;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i257 := $sub.i32($i256, 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.35 := $i257;
    call {:si_unique_call 1018} {:cexpr "ref_cnt"} boogie_si_record_i32($i257);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb241:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i235 == 1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i245 := $M.38;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 3);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb261:
    assume $i246 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p247 := $M.27;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i248 := acm_reset_resume($p247);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.44 := $i248;
    call {:si_unique_call 1014} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i248);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i249 := $M.44;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb263:
    assume $i250 == 1;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb250:
    assume $i235 == 1;
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb249;

  $bb252:
    assume $i236 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i237 := $M.38;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb254:
    assume $i238 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p239 := $M.27;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i240 := acm_probe($p239, $p26);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.43 := $i240;
    call {:si_unique_call 1010} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i240);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i241 := $M.43;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb256:
    assume $i242 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i243 := $M.35;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i243, 1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.35 := $i244;
    call {:si_unique_call 1012} {:cexpr "ref_cnt"} boogie_si_record_i32($i244);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb258;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i33, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i195 := $M.37;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb199:
    assume $i196 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} $i197 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i197);
    call {:si_unique_call 989} {:cexpr "tmp___25"} boogie_si_record_i32($i197);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i197, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_stop();
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb206:
    assume $i200 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i225 := $M.37;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb232:
    assume $i226 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p227 := $M.28;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} acm_port_destruct($p227);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb204:
    assume $i199 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i220 := $M.37;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 2);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb229:
    assume $i221 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p222 := $M.28;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} acm_port_shutdown($p222);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i223 := $M.35;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i224 := $sub.i32($i223, 1);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.35 := $i224;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32($i224);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb202:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i197, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i201 == 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i211 := $M.37;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i214 := $M.37;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 3);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i217 := $M.37;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 2);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb226:
    assume $i218 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p219 := $M.28;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} acm_port_dtr_rts($p219, $i24);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb223:
    assume $i215 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p216 := $M.28;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} acm_port_dtr_rts($p216, $i24);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb220:
    assume $i212 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p213 := $M.28;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} acm_port_dtr_rts($p213, $i24);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb209:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i197, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb208;

  $bb211:
    assume $i202 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i203 := $M.37;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb213:
    assume $i204 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p205 := $M.28;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i206 := acm_port_activate($p205, $p23);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.42 := $i206;
    call {:si_unique_call 991} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i206);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i207 := $M.42;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb215:
    assume $i208 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i209 := $M.35;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i210 := $add.i32($i209, 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.35 := $i210;
    call {:si_unique_call 993} {:cexpr "ref_cnt"} boogie_si_record_i32($i210);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb217;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i178 := $M.36;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb169:
    assume $i179 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 969} $i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 970} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i180);
    call {:si_unique_call 971} {:cexpr "tmp___24"} boogie_si_record_i32($i180);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb174:
    assume $i182 == 1;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i188 := $M.36;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb187:
    assume $i189 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i190 := acm_init();
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.41 := $i190;
    call {:si_unique_call 976} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i190);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i191 := $M.41;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i193 := $M.41;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb192:
    assume $i194 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_check_final_state();
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb189:
    assume $i192 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.36 := 3;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_tty_port_operations_3();
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_initialize_tty_operations_1();
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb172:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb176;

  $bb177:
    assume $i183 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i184 := $M.36;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 3);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb179:
    assume $i185 == 1;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i186 := $M.35;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb181;

  $bb182:
    assume $i187 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} acm_exit();
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb3:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i56 := $M.34;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb45:
    assume $i57 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} $i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i58);
    call {:si_unique_call 911} {:cexpr "tmp___23"} boogie_si_record_i32($i58);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i58, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_stop();
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb56:
    assume $i63 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i170 := $M.34;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i174 := $M.34;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb163:
    assume $i175 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p176 := $M.30;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_116 := acm_tty_tiocmset($p176, $i13, $i15);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i171 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p172 := $M.30;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_115 := acm_tty_tiocmset($p172, $i13, $i15);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb54:
    assume $i62 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i162 := $M.34;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i166 := $M.34;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 2);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb157:
    assume $i167 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p168 := $M.30;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_114 := acm_tty_install($p17, $p168);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i163 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p164 := $M.30;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_113 := acm_tty_install($p17, $p164);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb52:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i58, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i64 == 1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i154 := $M.34;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i158 := $M.34;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 2);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb151:
    assume $i159 == 1;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p160 := $M.30;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_112 := acm_tty_tiocmget($p160);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i155 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p156 := $M.30;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_111 := acm_tty_tiocmget($p156);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb59:
    assume $i64 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i146 := $M.34;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i150 := $M.34;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 2);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb145:
    assume $i151 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p152 := $M.30;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_110 := acm_tty_chars_in_buffer($p152);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i147 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p148 := $M.30;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_109 := acm_tty_chars_in_buffer($p148);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb50:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i58, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i58, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i66 == 1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i138 := $M.34;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i142 := $M.34;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb139:
    assume $i143 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p144 := $M.30;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_108 := acm_tty_ioctl($p144, $i20, $i21);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i139 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p140 := $M.30;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_107 := acm_tty_ioctl($p140, $i20, $i21);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb63:
    assume $i66 == 1;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i132 := $M.34;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i135 := $M.34;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb133:
    assume $i136 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p137 := $M.30;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} acm_tty_set_termios($p137, $p12);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i133 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p134 := $M.30;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} acm_tty_set_termios($p134, $p12);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb61:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i58, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i67 == 1);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i124 := $M.34;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i128 := $M.34;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb127:
    assume $i129 == 1;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p130 := $M.30;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_106 := acm_tty_break_ctl($p130, $i14);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i125 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p126 := $M.30;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_105 := acm_tty_break_ctl($p126, $i14);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb65:
    assume $i67 == 1;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i116 := $M.34;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i120 := $M.34;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb121:
    assume $i121 == 1;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p122 := $M.30;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_104 := acm_tty_write_room($p122);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i117 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p118 := $M.30;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_103 := acm_tty_write_room($p118);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb48:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i58, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i70 == 1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i110 := $M.34;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i113 := $M.34;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb115:
    assume $i114 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p115 := $M.30;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} acm_tty_unthrottle($p115);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i111 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p112 := $M.30;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} acm_tty_unthrottle($p112);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i70 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i101 := $M.34;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 1);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb106:
    assume $i102 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p103 := $M.30;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p104 := $M.29;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i105 := acm_tty_open($p103, $p104);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.40 := $i105;
    call {:si_unique_call 929} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i105);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i106 := $M.40;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i107 == 1;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i108 := $M.35;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i108, 1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.35 := $i109;
    call {:si_unique_call 931} {:cexpr "ref_cnt"} boogie_si_record_i32($i109);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb69:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i71 == 1);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i97 := $M.34;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb103:
    assume $i98 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p99 := $M.30;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p100 := $M.29;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} acm_tty_close($p99, $p100);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb73:
    assume $i71 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i91 := $M.34;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i94 := $M.34;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 2);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb100:
    assume $i95 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p96 := $M.30;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} acm_tty_hangup($p96);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i92 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p93 := $M.30;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} acm_tty_hangup($p93);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb67:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i73 == 1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i85 := $M.34;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i88 := $M.34;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb94:
    assume $i89 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p90 := $M.30;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} acm_tty_throttle($p90);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i86 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p87 := $M.30;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} acm_tty_throttle($p87);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb77:
    assume $i73 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i79 := $M.34;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i82 := $M.34;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb88:
    assume $i83 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p84 := $M.30;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} acm_tty_cleanup($p84);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i80 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p81 := $M.30;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} acm_tty_cleanup($p81);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb75:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb58;

  $bb79:
    assume $i74 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i75 := $M.34;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i76 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p77 := $M.30;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vslice_dummy_var_102 := acm_tty_write($p77, $p18, $i19);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i49 := $M.33;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33:
    assume $i50 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} $i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i51);
    call {:si_unique_call 905} {:cexpr "tmp___22"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_stop();
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i52 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i53 := $M.33;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_101 := show_country_rel_date($p8, $p10, $p6);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb14:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i42 := $M.32;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 899} {:cexpr "tmp___21"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_stop();
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i46 := $M.32;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_100 := show_caps($p3, $p5, $p1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb32_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 896} {:cexpr "tmp___20"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 342372);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 343404);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const acm_exit: ref;

axiom acm_exit == $sub.ref(0, 344436);

procedure acm_exit();
  free requires assertsPassed;
  modifies $M.38;



implementation acm_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_usb_deregister_31(acm_driver);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p0 := $M.8;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_118 := tty_unregister_driver($p0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p2 := $M.8;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} put_tty_driver($p2);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    return;
}



const acm_init: ref;

axiom acm_init == $sub.ref(0, 345468);

procedure acm_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.1, $M.38, $M.45, $M.27, $CurrAddr;



implementation acm_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $i4: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p0 := alloc_tty_driver(32);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p1 := $M.8;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $M.8;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.21);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p7 := $M.8;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.22);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p9 := $M.8;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, 166);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p11 := $M.8;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p13 := $M.8;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, 3);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p15 := $M.8;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p16, 1);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p17 := $M.8;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p18, 12);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p19 := $M.8;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.1;
    cmdloc_dummy_var_36 := $M.1;
    call {:si_unique_call 1040} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p21, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_37;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p22 := $M.8;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 3261);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p25 := $M.8;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} tty_set_operations($p25, acm_ops);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p26 := $M.8;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i27 := tty_register_driver($p26);
    call {:si_unique_call 1043} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i30 := ldv_usb_register_driver_30(acm_driver, __this_module, .str.3);
    call {:si_unique_call 1046} {:cexpr "retval"} boogie_si_record_i32($i30);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_120 := printk.ref(.str.23);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p32 := $M.8;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_119 := tty_unregister_driver($p32);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p34 := $M.8;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} put_tty_driver($p34);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i4 := $i30;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p29 := $M.8;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} put_tty_driver($p29);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 346500);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 347532);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i3 := IS_ERR($p2);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1053} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 348564);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 349596);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 350628);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_30: ref;

axiom ldv_usb_register_driver_30 == $sub.ref(0, 351660);

procedure ldv_usb_register_driver_30($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.45, $M.27, $M.1, $CurrAddr;



implementation ldv_usb_register_driver_30($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1057} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1059} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_usb_driver_2();
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 352692);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1062} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 353724);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 354756);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1065} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1066} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 355788);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1068} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p3 := external_alloc();
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_deregister_31: ref;

axiom ldv_usb_deregister_31 == $sub.ref(0, 356820);

procedure ldv_usb_deregister_31($p0: ref);
  free requires assertsPassed;
  modifies $M.38;



implementation ldv_usb_deregister_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} usb_deregister($p0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 357852);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 358884);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 1} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 359916);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 360948);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 361980);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 363012);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 364044);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 365076);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 366108);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 367140);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 368172);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 369204);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 370236);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 371268);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 372300);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1075} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} __VERIFIER_assume($i4);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 373332);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 374364);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 375396);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 376428);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1079} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1081} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1082} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1084} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1085} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} __VERIFIER_assume($i7);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1087} __VERIFIER_assume($i11);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 377460);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 378492);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 379524);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 380556);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 381588);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 382620);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1090} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1091} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1092} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1093} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1095} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1096} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1097} __VERIFIER_assume($i7);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} __VERIFIER_assume($i11);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 383652);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 384684);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 385716);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 386748);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 387780);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 388812);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 389844);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 390876);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 391908);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1101} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} __VERIFIER_assume($i10);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 392940);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1103} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1104} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1105} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 393972);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1106} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1107} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1108} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 395004);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1110} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 396036);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 397068);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1111} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1112} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 398100);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 399132);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 400164);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1113} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1114} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p6 := malloc($i5);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.1;
    call {:si_unique_call 1118} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_39;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 401196);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 402228);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.30, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.10, $M.62, $M.1, $M.8, $M.97, $M.98, $M.12, $M.99;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1119} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.27 := $0.ref;
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1121} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1123} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1125} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1127} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1128} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1129} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1131} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1132} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1133} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1134} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1135} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1136} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.62 := $store.ref($M.62, dev_attr_iCountryCodeRelDate, .str.69);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_rel_date);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, dev_attr_wCountryCodes, .str.68);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_codes);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.62 := $store.ref($M.62, dev_attr_bmCapabilities, .str.67);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(32, 1)), show_caps);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, acm_port_ops, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), acm_port_dtr_rts);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), acm_port_shutdown);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), acm_port_activate);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), acm_port_destruct);
    $M.8 := $0.ref;
    $M.97 := $store.i16($M.97, acm_ids, 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(2, 1)), 6127);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(4, 1)), 28672);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(0, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(2, 1)), 2160);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(4, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(2, 1)), 3725);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(4, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(2, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(2, 1)), 3725);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(4, 1)), 13097);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1154);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(4, 1)), 515);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(4, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1947);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(4, 1)), 15);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(5, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(2, 1)), 2766);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(4, 1)), 5634);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(6, 32)), $mul.ref(24, 1)), 2);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2766);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(4, 1)), 5640);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(7, 32)), $mul.ref(24, 1)), 2);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2766);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(4, 1)), 5649);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(8, 32)), $mul.ref(24, 1)), 2);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(4, 1)), 28672);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(9, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(2, 1)), 2051);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(4, 1)), 12437);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(10, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(2, 1)), 1394);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(4, 1)), 4897);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(11, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1394);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(4, 1)), 4900);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(12, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1394);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(4, 1)), 4904);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(13, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(4, 1)), 25637);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(4, 1)), 11665);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(4, 1)), 11666);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(16, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(4, 1)), 11667);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(17, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(4, 1)), 11669);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(18, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(4, 1)), 11670);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(19, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(4, 1)), 11671);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(20, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(4, 1)), 11673);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(21, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(2, 1)), 8888);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(4, 1)), 11674);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(22, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(2, 1)), 1394);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(4, 1)), 4905);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(23, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(2, 1)), 1394);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(4, 1)), 4928);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(24, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(2, 1)), 1529);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(4, 1)), 16386);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(25, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(2, 1)), 7099);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(4, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(26, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(2, 1)), 5494);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(4, 1)), 945);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(27, 32)), $mul.ref(24, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(4, 1)), 1069);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(4, 1)), 1240);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(4, 1)), 1225);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(4, 1)), 1049);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(4, 1)), 1101);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(4, 1)), 1);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(4, 1)), 1141);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(4, 1)), 1288);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(4, 1)), 1048);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(4, 1)), 1061);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(4, 1)), 1158);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(38, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(4, 1)), 1247);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(39, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(4, 1)), 14);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(40, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(4, 1)), 1093);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(41, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(4, 1)), 1071);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(42, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(4, 1)), 1166);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(43, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(4, 1)), 1056);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(44, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(4, 1)), 1254);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(45, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(4, 1)), 1202);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(46, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(4, 1)), 308);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(47, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(4, 1)), 1134);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(48, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(4, 1)), 47);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(49, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(4, 1)), 136);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(50, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(4, 1)), 252);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(51, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(4, 1)), 66);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(52, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(4, 1)), 176);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(53, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(4, 1)), 171);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(4, 1)), 1153);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(55, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(4, 1)), 7);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(56, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(4, 1)), 113);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(57, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(4, 1)), 1264);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(58, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(4, 1)), 112);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(4, 1)), 233);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(60, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(4, 1)), 153);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(61, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(4, 1)), 296);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(62, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(4, 1)), 143);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(63, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(4, 1)), 160);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(64, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(4, 1)), 123);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(65, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(4, 1)), 148);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(66, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(4, 1)), 58);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(67, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(4, 1)), 233);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(68, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(4, 1)), 264);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(69, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(4, 1)), 501);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(70, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(4, 1)), 739);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(71, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(4, 1)), 376);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(72, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(4, 1)), 270);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(73, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(4, 1)), 729);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(74, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(4, 1)), 464);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(75, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(4, 1)), 547);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(76, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(4, 1)), 629);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(77, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(4, 1)), 620);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(78, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(4, 1)), 340);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(79, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(4, 1)), 1230);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(80, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(4, 1)), 468);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(81, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(4, 1)), 770);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(82, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(4, 1)), 821);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(83, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(2, 1)), 1057);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(4, 1)), 973);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(84, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(0, 1)), 899);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(2, 1)), 1255);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(4, 1)), 26193);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(85, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(2, 1)), 1003);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(4, 1)), 48);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(86, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(2, 1)), 1684);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(4, 1)), $sub.i16(0, 256));
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(87, 32)), $mul.ref(24, 1)), 8);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(2, 1)), 1240);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(4, 1)), 11);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(88, 32)), $mul.ref(24, 1)), 16);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(2, 1)), 1240);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(4, 1)), 130);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(89, 32)), $mul.ref(24, 1)), 32);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(0, 1)), 3);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(2, 1)), 1240);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(4, 1)), 131);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(90, 32)), $mul.ref(24, 1)), 32);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(91, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(15, 1)), 1);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(92, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(15, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(93, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(15, 1)), 3);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(94, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(15, 1)), 4);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(95, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(15, 1)), 5);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(96, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(0, 1)), 896);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(13, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(14, 1)), 2);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(15, 1)), 6);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(97, 32)), $mul.ref(24, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(0, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(4, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i16($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(8, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(10, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(11, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(12, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(13, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(14, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(15, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(16, 1)), 0);
    $M.97 := $store.i64($M.97, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3168)), $mul.ref(98, 32)), $mul.ref(24, 1)), 0);
    $M.98 := $store.ref($M.98, acm_driver, .str.3);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), acm_probe);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), acm_disconnect);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), acm_suspend);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), acm_resume);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), acm_reset_resume);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), acm_ids);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.98 := $store.i64($M.98, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.98 := $store.i32($M.98, $add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 6);
    $M.12 := $store.ref($M.12, acm_table, $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.12 := $store.ref($M.12, $add.ref($add.ref(acm_table, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.1 := $store.i32($M.1, acm_table_lock, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.19);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(acm_table_lock, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(acm_table_lock, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(112, 1)), acm_table_lock);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.20);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(acm_table_lock, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i8($M.1, .str.19, 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(4, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(5, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(6, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(7, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(14, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.19, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i8($M.1, .str.20, 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(5, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(6, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(7, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.99 := $store.i8($M.99, .str, 37);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, .str.21, 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.22, 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(4, 1)), 67);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(5, 1)), 77);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1137} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 403260);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 404292);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 405324);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 406356);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 407388);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1138} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 408420);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(default_wake_function, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 1139} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 1140} $i4 := default_wake_function($p2, arg1, arg2, $p3);
    $r := $i4;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.30, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.10, $M.62, $M.1, $M.8, $M.97, $M.98, $M.12, $M.99, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1141} __SMACK_static_init();
    call {:si_unique_call 1142} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.10, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.40, $M.41, $M.28, $M.29, $M.30, $M.42, $M.12, $M.43, $M.44, $M.9, $M.46, $M.47, $M.27, $M.45, $M.62, $M.8, $M.97, $M.98, $M.99, $CurrAddr, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation acm_probe_loop_$bb250(in_$i32: i32, in_$p490: ref, in_$i841: i64, in_$p843: ref, in_$p844: ref, in_$i845: i32, in_$i846: i1, in_$i840: i32) returns (out_$i841: i64, out_$p843: ref, out_$p844: ref, out_$i845: i32, out_$i846: i1, out_$i840: i32)
{

  entry:
    out_$i841, out_$p843, out_$p844, out_$i845, out_$i846, out_$i840 := in_$i841, in_$p843, in_$p844, in_$i845, in_$i846, in_$i840;
    goto $bb250, exit;

  $bb250:
    assume {:verifier.code 0} true;
    goto corral_source_split_1127;

  $bb252:
    assume out_$i846 == 1;
    assume {:verifier.code 0} true;
    out_$i840 := out_$i845;
    goto $bb252_dummy;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i846 := $slt.i32(out_$i845, in_$i32);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i845 := $add.i32(out_$i840, 1);
    call {:si_unique_call 185} {:cexpr "i"} boogie_si_record_i32(out_$i845);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} usb_free_urb(out_$p844);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p844 := $load.ref($M.1, out_$p843);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$p843 := $add.ref($add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i841, 8));
    goto corral_source_split_1130;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i841 := $sext.i32.i64(out_$i840);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb252_dummy:
    call {:si_unique_call 1} out_$i841, out_$p843, out_$p844, out_$i845, out_$i846, out_$i840 := acm_probe_loop_$bb250(in_$i32, in_$p490, out_$i841, out_$p843, out_$p844, out_$i845, out_$i846, out_$i840);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb250(in_$i32: i32, in_$p490: ref, in_$i841: i64, in_$p843: ref, in_$p844: ref, in_$i845: i32, in_$i846: i1, in_$i840: i32) returns (out_$i841: i64, out_$p843: ref, out_$p844: ref, out_$i845: i32, out_$i846: i1, out_$i840: i32);



implementation acm_probe_loop_$bb208(in_$p26: ref, in_$p353: ref, in_$p489: ref, in_$p490: ref, in_$p669: ref, in_$p670: ref, in_$i671: i64, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$p675: ref, in_$p676: ref, in_$i677: i64, in_$i678: i1, in_$i682: i32, in_$i683: i1, in_$p684: ref, in_$i685: i8, in_$i686: i32, in_$i687: i32, in_$p688: ref, in_$p689: ref, in_$i690: i32, in_$p691: ref, in_$i692: i32, in_$p693: ref, in_$p694: ref, in_$i695: i8, in_$i696: i32, in_$p697: ref, in_$i698: i8, in_$i699: i32, in_$i700: i32, in_$p701: ref, in_$p702: ref, in_$i703: i32, in_$p704: ref, in_$i705: i32, in_$p706: ref, in_$p707: ref, in_$p708: ref, in_$p709: ref, in_$i710: i32, in_$i711: i32, in_$p712: ref, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i716: i32, in_$i717: i1, in_$i668: i32) returns (out_$p669: ref, out_$p670: ref, out_$i671: i64, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$p675: ref, out_$p676: ref, out_$i677: i64, out_$i678: i1, out_$i682: i32, out_$i683: i1, out_$p684: ref, out_$i685: i8, out_$i686: i32, out_$i687: i32, out_$p688: ref, out_$p689: ref, out_$i690: i32, out_$p691: ref, out_$i692: i32, out_$p693: ref, out_$p694: ref, out_$i695: i8, out_$i696: i32, out_$p697: ref, out_$i698: i8, out_$i699: i32, out_$i700: i32, out_$p701: ref, out_$p702: ref, out_$i703: i32, out_$p704: ref, out_$i705: i32, out_$p706: ref, out_$p707: ref, out_$p708: ref, out_$p709: ref, out_$i710: i32, out_$i711: i32, out_$p712: ref, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i716: i32, out_$i717: i1, out_$i668: i32)
{

  entry:
    out_$p669, out_$p670, out_$i671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$p689, out_$i690, out_$p691, out_$i692, out_$p693, out_$p694, out_$i695, out_$i696, out_$p697, out_$i698, out_$i699, out_$i700, out_$p701, out_$p702, out_$i703, out_$p704, out_$i705, out_$p706, out_$p707, out_$p708, out_$p709, out_$i710, out_$i711, out_$p712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$i668 := in_$p669, in_$p670, in_$i671, in_$p672, in_$p673, in_$p674, in_$p675, in_$p676, in_$i677, in_$i678, in_$i682, in_$i683, in_$p684, in_$i685, in_$i686, in_$i687, in_$p688, in_$p689, in_$i690, in_$p691, in_$i692, in_$p693, in_$p694, in_$i695, in_$i696, in_$p697, in_$i698, in_$i699, in_$i700, in_$p701, in_$p702, in_$i703, in_$p704, in_$i705, in_$p706, in_$p707, in_$p708, in_$p709, in_$i710, in_$i711, in_$p712, in_$p713, in_$p714, in_$p715, in_$i716, in_$i717, in_$i668;
    goto $bb208, exit;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  $bb217:
    assume out_$i717 == 1;
    assume {:verifier.code 0} true;
    out_$i668 := out_$i716;
    goto $bb217_dummy;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i717 := $sle.i32(out_$i716, 15);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$i716 := $add.i32(out_$i668, 1);
    call {:si_unique_call 151} {:cexpr "i"} boogie_si_record_i32(out_$i716);
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p715, in_$p489);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p715 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(32, 1));
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p714, out_$i711);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p714 := $add.ref($add.ref(out_$p713, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p713 := $load.ref($M.1, out_$p712);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$p712 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$i711 := $or.i32(out_$i710, 4);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$i710 := $load.i32($M.1, out_$p709);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p709 := $add.ref($add.ref(out_$p708, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p708 := $load.ref($M.1, out_$p707);
    goto corral_source_split_943;

  $bb216:
    assume {:verifier.code 0} true;
    out_$p707 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} usb_fill_bulk_urb(out_$p702, in_$p26, out_$i703, $0.ref, out_$i705, acm_write_bulk, out_$p706);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} usb_fill_int_urb(out_$p689, in_$p26, out_$i690, $0.ref, out_$i692, acm_write_bulk, out_$p693, out_$i696);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i696 := $zext.i8.i32(out_$i695);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i695 := $load.i8($M.1, out_$p694);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$p694 := $add.ref($add.ref(in_$p353, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p693 := $bitcast.ref.ref(out_$p672);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i692 := $load.i32($M.1, out_$p691);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$i690 := $or.i32(out_$i687, 1073741824);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p689 := $load.ref($M.1, out_$p688);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p688 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} out_$i687 := __create_pipe(in_$p26, out_$i686);
    call {:si_unique_call 146} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i687);
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i686 := $zext.i8.i32(out_$i685);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i685 := $load.i8($M.1, out_$p684);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p684 := $add.ref($add.ref(in_$p353, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_915;

  $bb214:
    assume out_$i683 == 1;
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i683 := $ne.i32(out_$i682, 0);
    goto corral_source_split_912;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} out_$i682 := usb_endpoint_xfer_int(in_$p353);
    call {:si_unique_call 144} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i682);
    goto corral_source_split_911;

  $bb211:
    assume !(out_$i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i678 := $eq.i64(out_$i677, 0);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i677 := $p2i.ref.i64(out_$p676);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p676 := $load.ref($M.1, out_$p675);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p675 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p674, out_$p673);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$p674 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_897;

  SeqInstr_21:
    goto corral_source_split_896;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} out_$p673 := ldv_usb_alloc_urb_28(0, 208);
    goto SeqInstr_20;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p672 := $add.ref(out_$p670, $mul.ref(out_$i671, 40));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i671 := $sext.i32.i64(out_$i668);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$p670 := $bitcast.ref.ref(out_$p669);
    goto corral_source_split_893;

  $bb209:
    assume {:verifier.code 0} true;
    out_$p669 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(1128, 1));
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$p706 := $bitcast.ref.ref(out_$p672);
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$i705 := $load.i32($M.1, out_$p704);
    goto corral_source_split_939;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    out_$p704 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    out_$i703 := $or.i32(out_$i700, $sub.i32(0, 1073741824));
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p702 := $load.ref($M.1, out_$p701);
    goto corral_source_split_936;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$p701 := $add.ref($add.ref(out_$p670, $mul.ref(out_$i671, 40)), $mul.ref(24, 1));
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} out_$i700 := __create_pipe(in_$p26, out_$i699);
    call {:si_unique_call 149} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i700);
    goto corral_source_split_934;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i699 := $zext.i8.i32(out_$i698);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i698 := $load.i8($M.1, out_$p697);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p697 := $add.ref($add.ref(in_$p353, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_931;

  $bb215:
    assume !(out_$i683 == 1);
    goto corral_source_split_930;

  $bb217_dummy:
    call {:si_unique_call 1} out_$p669, out_$p670, out_$i671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$p689, out_$i690, out_$p691, out_$i692, out_$p693, out_$p694, out_$i695, out_$i696, out_$p697, out_$i698, out_$i699, out_$i700, out_$p701, out_$p702, out_$i703, out_$p704, out_$i705, out_$p706, out_$p707, out_$p708, out_$p709, out_$i710, out_$i711, out_$p712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$i668 := acm_probe_loop_$bb208(in_$p26, in_$p353, in_$p489, in_$p490, out_$p669, out_$p670, out_$i671, out_$p672, out_$p673, out_$p674, out_$p675, out_$p676, out_$i677, out_$i678, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$p689, out_$i690, out_$p691, out_$i692, out_$p693, out_$p694, out_$i695, out_$i696, out_$p697, out_$i698, out_$i699, out_$i700, out_$p701, out_$p702, out_$i703, out_$p704, out_$i705, out_$p706, out_$p707, out_$p708, out_$p709, out_$i710, out_$i711, out_$p712, out_$p713, out_$p714, out_$p715, out_$i716, out_$i717, out_$i668);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb208(in_$p26: ref, in_$p353: ref, in_$p489: ref, in_$p490: ref, in_$p669: ref, in_$p670: ref, in_$i671: i64, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$p675: ref, in_$p676: ref, in_$i677: i64, in_$i678: i1, in_$i682: i32, in_$i683: i1, in_$p684: ref, in_$i685: i8, in_$i686: i32, in_$i687: i32, in_$p688: ref, in_$p689: ref, in_$i690: i32, in_$p691: ref, in_$i692: i32, in_$p693: ref, in_$p694: ref, in_$i695: i8, in_$i696: i32, in_$p697: ref, in_$i698: i8, in_$i699: i32, in_$i700: i32, in_$p701: ref, in_$p702: ref, in_$i703: i32, in_$p704: ref, in_$i705: i32, in_$p706: ref, in_$p707: ref, in_$p708: ref, in_$p709: ref, in_$i710: i32, in_$i711: i32, in_$p712: ref, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i716: i32, in_$i717: i1, in_$i668: i32) returns (out_$p669: ref, out_$p670: ref, out_$i671: i64, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$p675: ref, out_$p676: ref, out_$i677: i64, out_$i678: i1, out_$i682: i32, out_$i683: i1, out_$p684: ref, out_$i685: i8, out_$i686: i32, out_$i687: i32, out_$p688: ref, out_$p689: ref, out_$i690: i32, out_$p691: ref, out_$i692: i32, out_$p693: ref, out_$p694: ref, out_$i695: i8, out_$i696: i32, out_$p697: ref, out_$i698: i8, out_$i699: i32, out_$i700: i32, out_$p701: ref, out_$p702: ref, out_$i703: i32, out_$p704: ref, out_$i705: i32, out_$p706: ref, out_$p707: ref, out_$p708: ref, out_$p709: ref, out_$i710: i32, out_$i711: i32, out_$p712: ref, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i716: i32, out_$i717: i1, out_$i668: i32);
  modifies $M.1, assertsPassed;



implementation acm_probe_loop_$bb193(in_$i32: i32, in_$p489: ref, in_$p490: ref, in_$i505: i32, in_$p604: ref, in_$p605: ref, in_$i606: i64, in_$p607: ref, in_$p608: ref, in_$p609: ref, in_$i610: i64, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$p615: ref, in_$i616: i64, in_$i617: i1, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$i624: i64, in_$i625: i1, in_$p628: ref, in_$i629: i32, in_$i630: i32, in_$p631: ref, in_$p632: ref, in_$i633: i64, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i8, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$i643: i32, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$i647: i32, in_$p648: ref, in_$p649: ref, in_$i650: i8, in_$i651: i32, in_$p652: ref, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$p660: ref, in_$i661: i64, in_$p663: ref, in_$i664: i64, in_$p665: ref, in_$i666: i32, in_$i667: i1, in_$i603: i32) returns (out_$p604: ref, out_$p605: ref, out_$i606: i64, out_$p607: ref, out_$p608: ref, out_$p609: ref, out_$i610: i64, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$p615: ref, out_$i616: i64, out_$i617: i1, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$i624: i64, out_$i625: i1, out_$p628: ref, out_$i629: i32, out_$i630: i32, out_$p631: ref, out_$p632: ref, out_$i633: i64, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i8, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$i643: i32, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$i647: i32, out_$p648: ref, out_$p649: ref, out_$i650: i8, out_$i651: i32, out_$p652: ref, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$p660: ref, out_$i661: i64, out_$p663: ref, out_$i664: i64, out_$p665: ref, out_$i666: i32, out_$i667: i1, out_$i603: i32)
{

  entry:
    out_$p604, out_$p605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$p614, out_$p615, out_$i616, out_$i617, out_$p621, out_$p622, out_$p623, out_$i624, out_$i625, out_$p628, out_$i629, out_$i630, out_$p631, out_$p632, out_$i633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p641, out_$p642, out_$i643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$p649, out_$i650, out_$i651, out_$p652, out_$p653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$i659, out_$p660, out_$i661, out_$p663, out_$i664, out_$p665, out_$i666, out_$i667, out_$i603 := in_$p604, in_$p605, in_$i606, in_$p607, in_$p608, in_$p609, in_$i610, in_$p611, in_$p612, in_$p613, in_$p614, in_$p615, in_$i616, in_$i617, in_$p621, in_$p622, in_$p623, in_$i624, in_$i625, in_$p628, in_$i629, in_$i630, in_$p631, in_$p632, in_$i633, in_$p634, in_$p635, in_$p636, in_$i637, in_$i638, in_$i639, in_$p640, in_$p641, in_$p642, in_$i643, in_$p644, in_$p645, in_$p646, in_$i647, in_$p648, in_$p649, in_$i650, in_$i651, in_$p652, in_$p653, in_$p654, in_$i655, in_$p656, in_$p657, in_$p658, in_$i659, in_$p660, in_$i661, in_$p663, in_$i664, in_$p665, in_$i666, in_$i667, in_$i603;
    goto $bb193, exit;

  $bb193:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  $bb205:
    assume out_$i667 == 1;
    assume {:verifier.code 0} true;
    out_$i603 := out_$i666;
    goto $bb205_dummy;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i667 := $slt.i32(out_$i666, in_$i32);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i666 := $add.i32(out_$i603, 1);
    call {:si_unique_call 139} {:cexpr "i"} boogie_si_record_i32(out_$i666);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __set_bit(out_$i664, out_$p665);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(1768, 1));
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i664 := $sext.i32.i64(out_$i603);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p663, out_$p623);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p663 := $add.ref($add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i661, 8));
    goto corral_source_split_882;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i661 := $sext.i32.i64(out_$i603);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} usb_fill_bulk_urb(out_$p623, out_$p653, out_$i655, out_$p657, out_$i659, acm_read_bulk_callback, out_$p660);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} usb_fill_int_urb(out_$p623, out_$p641, out_$i643, out_$p645, out_$i647, acm_read_bulk_callback, out_$p648, out_$i651);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i651 := $zext.i8.i32(out_$i650);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i650 := $load.i8($M.1, out_$p649);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(3181, 1));
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p648 := $bitcast.ref.ref(out_$p607);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i647 := $load.i32($M.1, out_$p646);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p645 := $load.ref($M.1, out_$p644);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$i643 := $load.i32($M.1, out_$p642);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p642 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(2548, 1));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$p641 := $load.ref($M.1, out_$p640);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p640 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_856;

  $bb202:
    assume out_$i639 == 1;
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$i639 := $ne.i32(out_$i638, 0);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i638 := $zext.i8.i32(out_$i637);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i637 := $load.i8($M.1, out_$p636);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p636 := $add.ref(out_$p635, $mul.ref(3172, 1));
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p635 := $bitcast.ref.ref(in_$p490);
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p634, out_$i633);
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref(out_$p623, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i633 := $load.i64($M.1, out_$p632);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(16, 1));
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p631, out_$i630);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p631 := $add.ref($add.ref(out_$p623, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i630 := $or.i32(out_$i629, 4);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i629 := $load.i32($M.1, out_$p628);
    goto corral_source_split_841;

  $bb201:
    assume {:verifier.code 0} true;
    out_$p628 := $add.ref($add.ref(out_$p623, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_840;

  $bb200:
    assume !(out_$i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i625 := $eq.i64(out_$i624, 0);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i624 := $p2i.ref.i64(out_$p623);
    goto corral_source_split_833;

  SeqInstr_18:
    goto corral_source_split_832;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} out_$p623 := ldv_usb_alloc_urb_27(0, 208);
    goto SeqInstr_17;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p622, in_$p489);
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(32, 1));
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p621, out_$i603);
    goto corral_source_split_829;

  $bb198:
    assume {:verifier.code 0} true;
    out_$p621 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(24, 1));
    goto corral_source_split_828;

  $bb196:
    assume !(out_$i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i617 := $eq.i64(out_$i616, 0);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i616 := $p2i.ref.i64(out_$p615);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$p615 := $load.ref($M.1, out_$p614);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$p614 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p613, out_$p612);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_815;

  SeqInstr_15:
    goto corral_source_split_814;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_$p612 := ldv_usb_alloc_coherent_26(out_$p609, out_$i610, 208, out_$p611);
    goto SeqInstr_14;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$p611 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(16, 1));
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i610 := $sext.i32.i64(in_$i505);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p609 := $load.ref($M.1, out_$p608);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$p608 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p607 := $add.ref(out_$p605, $mul.ref(out_$i606, 40));
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i606 := $sext.i32.i64(out_$i603);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p605 := $bitcast.ref.ref(out_$p604);
    goto corral_source_split_807;

  $bb194:
    assume {:verifier.code 0} true;
    out_$p604 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(1904, 1));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p660 := $bitcast.ref.ref(out_$p607);
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i659 := $load.i32($M.1, out_$p658);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$p658 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p657 := $load.ref($M.1, out_$p656);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref(out_$p605, $mul.ref(out_$i606, 40)), $mul.ref(8, 1));
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i655 := $load.i32($M.1, out_$p654);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(2548, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p653 := $load.ref($M.1, out_$p652);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref($add.ref(in_$p490, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_871;

  $bb203:
    assume !(out_$i639 == 1);
    goto corral_source_split_870;

  $bb205_dummy:
    call {:si_unique_call 1} out_$p604, out_$p605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$p614, out_$p615, out_$i616, out_$i617, out_$p621, out_$p622, out_$p623, out_$i624, out_$i625, out_$p628, out_$i629, out_$i630, out_$p631, out_$p632, out_$i633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p641, out_$p642, out_$i643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$p649, out_$i650, out_$i651, out_$p652, out_$p653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$i659, out_$p660, out_$i661, out_$p663, out_$i664, out_$p665, out_$i666, out_$i667, out_$i603 := acm_probe_loop_$bb193(in_$i32, in_$p489, in_$p490, in_$i505, out_$p604, out_$p605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$p614, out_$p615, out_$i616, out_$i617, out_$p621, out_$p622, out_$p623, out_$i624, out_$i625, out_$p628, out_$i629, out_$i630, out_$p631, out_$p632, out_$i633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$p640, out_$p641, out_$p642, out_$i643, out_$p644, out_$p645, out_$p646, out_$i647, out_$p648, out_$p649, out_$i650, out_$i651, out_$p652, out_$p653, out_$p654, out_$i655, out_$p656, out_$p657, out_$p658, out_$i659, out_$p660, out_$i661, out_$p663, out_$i664, out_$p665, out_$i666, out_$i667, out_$i603);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb193(in_$i32: i32, in_$p489: ref, in_$p490: ref, in_$i505: i32, in_$p604: ref, in_$p605: ref, in_$i606: i64, in_$p607: ref, in_$p608: ref, in_$p609: ref, in_$i610: i64, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$p615: ref, in_$i616: i64, in_$i617: i1, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$i624: i64, in_$i625: i1, in_$p628: ref, in_$i629: i32, in_$i630: i32, in_$p631: ref, in_$p632: ref, in_$i633: i64, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i8, in_$i638: i32, in_$i639: i1, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$i643: i32, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$i647: i32, in_$p648: ref, in_$p649: ref, in_$i650: i8, in_$i651: i32, in_$p652: ref, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$p660: ref, in_$i661: i64, in_$p663: ref, in_$i664: i64, in_$p665: ref, in_$i666: i32, in_$i667: i1, in_$i603: i32) returns (out_$p604: ref, out_$p605: ref, out_$i606: i64, out_$p607: ref, out_$p608: ref, out_$p609: ref, out_$i610: i64, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$p615: ref, out_$i616: i64, out_$i617: i1, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$i624: i64, out_$i625: i1, out_$p628: ref, out_$i629: i32, out_$i630: i32, out_$p631: ref, out_$p632: ref, out_$i633: i64, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i8, out_$i638: i32, out_$i639: i1, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$i643: i32, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$i647: i32, out_$p648: ref, out_$p649: ref, out_$i650: i8, out_$i651: i32, out_$p652: ref, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$p660: ref, out_$i661: i64, out_$p663: ref, out_$i664: i64, out_$p665: ref, out_$i666: i32, out_$i667: i1, out_$i603: i32);
  modifies $M.1, assertsPassed;



implementation acm_probe_loop_$bb106(in_$p248: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$p325: ref, in_$i326: i64, in_$p328: ref, in_$i329: i32, in_$i330: i1, in_$i334: i32, in_$i335: i1, in_$i338: i32, in_$i339: i1, in_$p336: ref, in_$p337: ref, in_$p331: ref, in_$p332: ref, in_$p333: ref, in_$i340: i32, in_$i341: i1, in_$p318: ref, in_$p319: ref, in_$p320: ref, in_$i321: i32, in_$p342: ref, in_$p343: ref, in_$p344: ref) returns (out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$p325: ref, out_$i326: i64, out_$p328: ref, out_$i329: i32, out_$i330: i1, out_$i334: i32, out_$i335: i1, out_$i338: i32, out_$i339: i1, out_$p336: ref, out_$p337: ref, out_$p331: ref, out_$p332: ref, out_$p333: ref, out_$i340: i32, out_$i341: i1, out_$p318: ref, out_$p319: ref, out_$p320: ref, out_$i321: i32, out_$p342: ref, out_$p343: ref, out_$p344: ref)
{

  entry:
    out_$p322, out_$p323, out_$p324, out_$p325, out_$i326, out_$p328, out_$i329, out_$i330, out_$i334, out_$i335, out_$i338, out_$i339, out_$p336, out_$p337, out_$p331, out_$p332, out_$p333, out_$i340, out_$i341, out_$p318, out_$p319, out_$p320, out_$i321, out_$p342, out_$p343, out_$p344 := in_$p322, in_$p323, in_$p324, in_$p325, in_$i326, in_$p328, in_$i329, in_$i330, in_$i334, in_$i335, in_$i338, in_$i339, in_$p336, in_$p337, in_$p331, in_$p332, in_$p333, in_$i340, in_$i341, in_$p318, in_$p319, in_$p320, in_$i321, in_$p342, in_$p343, in_$p344;
    goto $bb106, exit;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  $bb117:
    assume out_$i341 == 1;
    assume {:verifier.code 0} true;
    out_$p318, out_$p319, out_$p320, out_$i321 := out_$p333, out_$p332, out_$p331, out_$i340;
    goto $bb117_dummy;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$p342, out_$p343, out_$p344 := out_$p331, out_$p332, out_$p333;
    assume true;
    goto $bb117;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i341 := $sle.i32(out_$i340, 2);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i321, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32(out_$i340);
    goto corral_source_split_432;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p331, out_$p332, out_$p333 := out_$p336, out_$p337, out_$p318;
    goto $bb110;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p331, out_$p332, out_$p333 := out_$p320, out_$p319, out_$p328;
    goto $bb110;

  $bb108:
    assume out_$i330 == 1;
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i330 := $ne.i32(out_$i329, 0);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_$i329 := usb_endpoint_is_int_in(out_$p328);
    call {:si_unique_call 70} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i329);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$p328 := $add.ref($add.ref(out_$p325, $mul.ref(out_$i326, 72)), $mul.ref(0, 1));
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i321);
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$p325 := $load.ref($M.1, out_$p324);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref($add.ref(out_$p323, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p323 := $load.ref($M.1, out_$p322);
    goto corral_source_split_416;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p322 := $add.ref($add.ref(in_$p248, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p336, out_$p337 := out_$p320, out_$p328;
    goto $bb113;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$p336, out_$p337 := out_$p328, out_$p319;
    goto $bb113;

  $bb111:
    assume out_$i335 == 1;
    goto corral_source_split_435;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i335 := $ne.i32(out_$i334, 0);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} out_$i334 := usb_endpoint_is_bulk_out(out_$p328);
    call {:si_unique_call 72} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_428;

  $bb109:
    assume !(out_$i330 == 1);
    goto corral_source_split_427;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume out_$i339 == 1;
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$i339 := $ne.i32(out_$i338, 0);
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} out_$i338 := usb_endpoint_is_bulk_in(out_$p328);
    call {:si_unique_call 75} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i338);
    goto corral_source_split_438;

  $bb112:
    assume !(out_$i335 == 1);
    goto corral_source_split_437;

  $bb117_dummy:
    call {:si_unique_call 1} out_$p322, out_$p323, out_$p324, out_$p325, out_$i326, out_$p328, out_$i329, out_$i330, out_$i334, out_$i335, out_$i338, out_$i339, out_$p336, out_$p337, out_$p331, out_$p332, out_$p333, out_$i340, out_$i341, out_$p318, out_$p319, out_$p320, out_$i321, out_$p342, out_$p343, out_$p344 := acm_probe_loop_$bb106(in_$p248, out_$p322, out_$p323, out_$p324, out_$p325, out_$i326, out_$p328, out_$i329, out_$i330, out_$i334, out_$i335, out_$i338, out_$i339, out_$p336, out_$p337, out_$p331, out_$p332, out_$p333, out_$i340, out_$i341, out_$p318, out_$p319, out_$p320, out_$i321, out_$p342, out_$p343, out_$p344);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb106(in_$p248: ref, in_$p322: ref, in_$p323: ref, in_$p324: ref, in_$p325: ref, in_$i326: i64, in_$p328: ref, in_$i329: i32, in_$i330: i1, in_$i334: i32, in_$i335: i1, in_$i338: i32, in_$i339: i1, in_$p336: ref, in_$p337: ref, in_$p331: ref, in_$p332: ref, in_$p333: ref, in_$i340: i32, in_$i341: i1, in_$p318: ref, in_$p319: ref, in_$p320: ref, in_$i321: i32, in_$p342: ref, in_$p343: ref, in_$p344: ref) returns (out_$p322: ref, out_$p323: ref, out_$p324: ref, out_$p325: ref, out_$i326: i64, out_$p328: ref, out_$i329: i32, out_$i330: i1, out_$i334: i32, out_$i335: i1, out_$i338: i32, out_$i339: i1, out_$p336: ref, out_$p337: ref, out_$p331: ref, out_$p332: ref, out_$p333: ref, out_$i340: i32, out_$i341: i1, out_$p318: ref, out_$p319: ref, out_$p320: ref, out_$i321: i32, out_$p342: ref, out_$p343: ref, out_$p344: ref);



implementation acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i28: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p122: ref, in_$i123: i8, in_$i124: i32, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p143: ref, in_$i144: i8, in_$p145: ref, in_$i146: i8, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$i151: i1, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i24, in_$i164: i24, in_$i165: i24, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$p137: ref, in_$i138: i8, in_$i139: i32, in_$p140: ref, in_$p141: ref, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$i180: i8, in_$i181: i32, in_$i182: i32, in_$i183: i8, in_$i184: i64, in_$p185: ref, in_$i186: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i8, in_$i187: i8, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32) returns (out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p122: ref, out_$i123: i8, out_$i124: i32, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p143: ref, out_$i144: i8, out_$p145: ref, out_$i146: i8, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$i151: i1, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i24, out_$i164: i24, out_$i165: i24, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$p137: ref, out_$i138: i8, out_$i139: i32, out_$p140: ref, out_$p141: ref, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$i180: i8, out_$i181: i32, out_$i182: i32, out_$i183: i8, out_$i184: i64, out_$p185: ref, out_$i186: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i8, out_$i187: i8, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32)
{

  entry:
    out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i187, out_$i188, out_$p189, out_$p190, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46 := in_$p111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p143, in_$i144, in_$p145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p166, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p173, in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p137, in_$i138, in_$i139, in_$p140, in_$p141, in_$p117, in_$i118, in_$i119, in_$p120, in_$p121, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$p185, in_$i186, in_$p105, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i187, in_$i188, in_$p189, in_$p190, in_vslice_dummy_var_43, in_vslice_dummy_var_44, in_vslice_dummy_var_45, in_vslice_dummy_var_46;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  $bb65:
    assume out_$i186 == 1;
    assume {:verifier.code 0} true;
    out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110 := out_$p121, out_$p120, out_$p185, out_$i182, out_$i119, out_$i118;
    goto $bb65_dummy;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i187, out_$i188, out_$p189, out_$p190 := out_$i118, out_$i119, out_$p120, out_$p121;
    assume true;
    goto $bb65;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i186 := $sgt.i32(out_$i182, 0);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref(out_$p117, $mul.ref(out_$i184, 1));
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i184 := $zext.i8.i64(out_$i183);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i8($M.1, out_$p117);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i182 := $sub.i32(out_$i108, out_$i181);
    call {:si_unique_call 39} {:cexpr "buflen"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i181 := $zext.i8.i32(out_$i180);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i8($M.1, out_$p117);
    goto corral_source_split_150;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$p117, out_$i118, out_$i119, out_$p120, out_$p121 := out_$p137, out_$i138, out_$i139, out_$p140, out_$p141;
    goto $bb33;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p117, out_$i118, out_$i119, out_$p120, out_$p121 := out_$p107, out_$i110, out_$i109, out_$p106, out_$p105;
    goto $bb33;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p117, out_$i118, out_$i119, out_$p120, out_$p121 := out_$p107, out_$i110, out_$i109, out_$p106, out_$p105;
    goto $bb33;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_vslice_dummy_var_43 := dev_err.ref.ref(out_$p115, .str.33);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_146;

  $bb31:
    assume out_$i114 == 1;
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i32(out_$i113, 36);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.1, out_$p111);
    goto corral_source_split_141;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(out_$p107, $mul.ref(1, 1));
    goto corral_source_split_140;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_vslice_dummy_var_44 := dev_err.ref.ref(out_$p134, .str.34);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_184;

  $bb51:
    assume out_$i133 == 1;
    goto corral_source_split_183;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i64(out_$i132, 0);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i132 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_162;

  $bb40:
    assume out_$i127 == 1;
    goto corral_source_split_161;

  $bb39:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i124, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb37:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i124, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i124, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i8.i32(out_$i123);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i8($M.1, out_$p122);
    goto corral_source_split_159;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p107, $mul.ref(2, 1));
    goto corral_source_split_158;

  $bb32:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i110, out_$i109, out_$p106, out_$p105;
    goto $bb54;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i110, out_$i109, out_$p107, out_$p105;
    goto $bb54;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i110, out_$i109, out_$p106, out_$p107;
    goto $bb54;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i144, out_$i109, out_$p106, out_$p105;
    goto $bb54;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i110, out_$i149, out_$p106, out_$p105;
    goto $bb54;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$p137, out_$i138, out_$i139, out_$p140, out_$p141 := out_$p107, out_$i110, out_$i109, out_$p106, out_$p105;
    goto $bb54;

  $bb49:
    assume out_$i131 == 1;
    goto corral_source_split_181;

  $bb47:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i124, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb36:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i124, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_vslice_dummy_var_45 := dev_err.ref.ref(out_$p155, .str.35);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_197;

  $bb58:
    assume out_$i154 == 1;
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 3);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i153 := $and.i32(out_$i152, 3);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i8.i32(out_$i146);
    goto corral_source_split_192;

  $bb55:
    assume out_$i151 == 1;
    goto corral_source_split_191;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i64(out_$i150, 0);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i150 := $and.i64(in_$i28, 8);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    call {:si_unique_call 42} {:cexpr "call_interface_num"} boogie_si_record_i32(out_$i149);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.1, out_$p147);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref(out_$p107, $mul.ref(4, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i8($M.1, out_$p145);
    call {:si_unique_call 41} {:cexpr "call_management_function"} boogie_si_record_i8(out_$i146);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref(out_$p107, $mul.ref(3, 1));
    goto corral_source_split_173;

  $bb48:
    assume !(out_$i130 == 1);
    goto corral_source_split_172;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i154 == 1);
    goto $bb57;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i8($M.1, out_$p143);
    call {:si_unique_call 40} {:cexpr "ac_management_function"} boogie_si_record_i8(out_$i144);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p107, $mul.ref(3, 1));
    goto corral_source_split_169;

  $bb45:
    assume out_$i129 == 1;
    goto corral_source_split_168;

  $bb38:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i124, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  $bb52:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  $bb42:
    assume out_$i128 == 1;
    goto corral_source_split_165;

  $bb41:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i124, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb63:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_vslice_dummy_var_46 := __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p3, out_$p173, .str.36, out_$i176, out_$i178);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i8.i32(out_$i177);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i8($M.1, out_$p107);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.1, out_$p174);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p107, $mul.ref(2, 1));
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_224;

  $bb62:
    assume out_$i172 == 1;
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i64(out_$i171, 0);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} out_$i171 := ldv__builtin_expect(out_$i170, 0);
    call {:si_unique_call 46} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i171);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i170 := $and.i64(out_$i169, 1);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i8.i64(out_$i168);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i8($M.7, out_$p167);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p166, 0);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, out_$p162, out_$i165);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i165 := $or.i24(out_$i164, 1193);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i164 := $and.i24(out_$i163, $sub.i24(0, 262144));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i24($M.6, out_$p162);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p162 := $bitcast.ref.ref(out_$p161);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p160, .str.36);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p159, .str.5);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p158, .str.30);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p157, .str.3);
    goto corral_source_split_201;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_200;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i129 == 1);
    goto $bb44;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb44;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i187, out_$i188, out_$p189, out_$p190, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46 := acm_probe_loop_$bb29(in_$p0, in_$p3, in_$i28, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p143, out_$i144, out_$p145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p137, out_$i138, out_$i139, out_$p140, out_$p141, out_$p117, out_$i118, out_$i119, out_$p120, out_$p121, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$p185, out_$i186, out_$p105, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i187, out_$i188, out_$p189, out_$p190, out_vslice_dummy_var_43, out_vslice_dummy_var_44, out_vslice_dummy_var_45, out_vslice_dummy_var_46);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i28: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p122: ref, in_$i123: i8, in_$i124: i32, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i64, in_$i133: i1, in_$p134: ref, in_$p143: ref, in_$i144: i8, in_$p145: ref, in_$i146: i8, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i64, in_$i151: i1, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i163: i24, in_$i164: i24, in_$i165: i24, in_$p166: ref, in_$p167: ref, in_$i168: i8, in_$i169: i64, in_$i170: i64, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i8, in_$i178: i32, in_$p137: ref, in_$i138: i8, in_$i139: i32, in_$p140: ref, in_$p141: ref, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$i180: i8, in_$i181: i32, in_$i182: i32, in_$i183: i8, in_$i184: i64, in_$p185: ref, in_$i186: i1, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i110: i8, in_$i187: i8, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32) returns (out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p122: ref, out_$i123: i8, out_$i124: i32, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i64, out_$i133: i1, out_$p134: ref, out_$p143: ref, out_$i144: i8, out_$p145: ref, out_$i146: i8, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i64, out_$i151: i1, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i163: i24, out_$i164: i24, out_$i165: i24, out_$p166: ref, out_$p167: ref, out_$i168: i8, out_$i169: i64, out_$i170: i64, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i8, out_$i178: i32, out_$p137: ref, out_$i138: i8, out_$i139: i32, out_$p140: ref, out_$p141: ref, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$i180: i8, out_$i181: i32, out_$i182: i32, out_$i183: i8, out_$i184: i64, out_$p185: ref, out_$i186: i1, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i110: i8, out_$i187: i8, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32);
  modifies $M.7, $M.6, $M.5, $M.4, $M.3, $M.2;



implementation acm_disconnect_loop_$bb21(in_$p3: ref, in_$p59: ref, in_$i63: i64, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i62: i32) returns (out_$i63: i64, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i62: i32)
{

  entry:
    out_$i63, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i62 := in_$i63, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i62;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;

  $bb23:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := out_$i67;
    goto $bb23_dummy;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i68, out_$i67);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, in_$p59);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i62, 1);
    call {:si_unique_call 225} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} usb_free_urb(out_$p66);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.1, out_$p65);
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i63, 8));
    goto corral_source_split_1300;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i63, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i62 := acm_disconnect_loop_$bb21(in_$p3, in_$p59, out_$i63, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i62);
    return;

  exit:
    return;
}



procedure acm_disconnect_loop_$bb21(in_$p3: ref, in_$p59: ref, in_$i63: i64, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i62: i32) returns (out_$i63: i64, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i62: i32);



implementation acm_resume_loop_$bb10(in_$p2: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_vslice_dummy_var_73: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_vslice_dummy_var_73: i32)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_73 := in_$p23, in_$p24, in_$p25, in_$p26, in_$p28, in_$i29, in_$i30, in_vslice_dummy_var_73;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$p23 := out_$p28;
    goto $bb14_dummy;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i29, 0);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} out_$p28 := usb_get_from_anchor(in_$p19);
    goto corral_source_split_1480;

  SeqInstr_30:
    goto corral_source_split_1479;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_vslice_dummy_var_73 := acm_start_wb(in_$p2, out_$p26);
    goto SeqInstr_29;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.1, out_$p24);
    goto corral_source_split_1477;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1476;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_73 := acm_resume_loop_$bb10(in_$p2, in_$p19, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure acm_resume_loop_$bb10(in_$p2: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_vslice_dummy_var_73: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_vslice_dummy_var_73: i32);
  modifies $M.1, assertsPassed;



implementation acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  $bb10:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb10_dummy;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i11, out_$i10);
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.1, in_$p2);
    goto corral_source_split_1595;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i5, 1);
    call {:si_unique_call 287} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_1594;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_1588;

  SeqInstr_45:
    call {:si_unique_call 286} {:cexpr "res"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1587;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} out_$i6 := acm_submit_read_urb(in_$p0, out_$i5, in_$i1);
    goto SeqInstr_44;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := acm_submit_read_urbs_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32);
  modifies $CurrAddr, assertsPassed;



implementation stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p28: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i31: i32)
{

  entry:
    out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31 := in_$i32, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  $bb13:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i36;
    goto $bb13_dummy;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, out_$i36);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.1, in_$p28);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i31, 1);
    call {:si_unique_call 338} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} usb_kill_urb(out_$p35);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i32, 8));
    goto corral_source_split_1763;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i31);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31 := stop_data_traffic_loop_$bb11(in_$p0, in_$p28, out_$i32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i31);
    return;

  exit:
    return;
}



procedure stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p28: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i31: i32);



implementation acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p14, in_$p15, in_$i16, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2056;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i21;
    goto $bb6_dummy;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, out_$i21);
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, in_$p4);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i7, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} usb_free_coherent(in_$p3, out_$i10, out_$p15, out_$i20);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.1, out_$p19);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(1904, 1)), $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(1904, 1)), $mul.ref(out_$i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.1, out_$p8);
    goto corral_source_split_2059;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3156, 1));
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := acm_read_buffers_free_loop_$bb4(in_$p0, in_$p3, in_$p4, out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32);



implementation acm_write_buffers_alloc_loop_$bb8(in_$p0: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p20: ref, in_$i21: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p20: ref, out_$i21: i32)
{

  entry:
    out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21 := in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p20, in_$i21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  $bb10:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$i21 := out_$p23, out_$i22;
    goto $bb10_dummy;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i22, 0);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} usb_free_coherent(out_$p25, out_$i28, out_$p30, out_$i32);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.1, out_$p29);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, out_$p26);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.1, out_$p24);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2377;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 431} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21 := acm_write_buffers_alloc_loop_$bb8(in_$p0, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21);
    return;

  exit:
    return;
}



procedure acm_write_buffers_alloc_loop_$bb8(in_$p0: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p20: ref, in_$i21: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p20: ref, out_$i21: i32);



implementation acm_write_buffers_alloc_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i35: i32, in_$p36: ref, in_$i37: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i35: i32, out_$p36: ref, out_$i37: i1, out_$p3: ref, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i35, in_$p36, in_$i37, in_$p3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  $bb15:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p3, out_$i4 := out_$p36, out_$i35;
    goto $bb15_dummy;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$i37 := $sle.i32(out_$i35, 15);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p3, $mul.ref(1, 40));
    goto corral_source_split_2395;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i4, 1);
    call {:si_unique_call 433} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2394;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i17, out_$p18 := out_$i4, out_$p3;
    assume true;
    goto $bb4;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p12, out_$p11);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  SeqInstr_69:
    goto corral_source_split_2361;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_$p11 := ldv_usb_alloc_coherent_23(out_$p6, out_$i9, 208, out_$p10);
    goto SeqInstr_68;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i8);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.1, out_$p7);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3152, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.1, out_$p5);
    goto corral_source_split_2356;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4 := acm_write_buffers_alloc_loop_$bb1(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4);
    return;

  exit:
    return;
}



procedure acm_write_buffers_alloc_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i35: i32, in_$p36: ref, in_$i37: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i35: i32, out_$p36: ref, out_$i37: i1, out_$p3: ref, out_$i4: i32);
  modifies $M.1, assertsPassed;



implementation wait_serial_change_loop_$bb5(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i1, in_$i64: i64, in_$i65: i1, in_$i66: i32, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i67: i32, in_$i72: i1, in_$i73: i32, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i1, out_$i64: i64, out_$i65: i1, out_$i66: i32, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i67: i32, out_$i72: i1, out_$i73: i32, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8)
{

  entry:
    out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$i67, out_$i72, out_$i73, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := in_$i18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$p58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p68, in_$i69, in_$i70, in_$i71, in_$i67, in_$i72, in_$i73, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  $bb35:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i67;
    goto $bb35_dummy;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i67;
    assume true;
    goto $bb35;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i67, 0);
    goto corral_source_split_3503;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i71;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i67 := $sub.i32(0, 19);
    goto $bb31;

  $bb29:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i18;
    assume true;
    goto $bb29;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i64(in_$i1, 64);
    goto corral_source_split_3492;

  $bb26:
    assume out_$i63 == 1;
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i8.i1(out_$i62);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.1, out_$p61);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(2872, 1));
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} remove_wait_queue(out_$p60, in_$p2);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_3485;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} schedule();
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, in_$p5, out_$i59);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p56, $mul.ref(0, 10656)), $mul.ref(0, 1));
    call {:si_unique_call 647} out_$i59 := devirtbounce.2(0, out_$p58, out_$i57, out_$p58);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.19, in_$p5);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_$p56 := get_current();
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, in_$p5, 1);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} add_wait_queue(out_$p55, in_$p2);
    goto corral_source_split_3477;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3064, 1));
    goto corral_source_split_3476;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb21;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i18;
    assume true;
    goto $bb23;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i50, out_$i52);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.1, out_$p51);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3468;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_3465;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i64(in_$i1, 128);
    goto corral_source_split_3464;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb15;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i18;
    assume true;
    goto $bb17;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i42, out_$i44);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.1, out_$p43);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.1, out_$p41);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3456;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_3453;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(in_$i1, 64);
    goto corral_source_split_3452;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb8;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i18;
    assume true;
    goto $bb10;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i33, out_$i35);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.1, out_$p34);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.1, out_$p32);
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3442;

  $bb6:
    assume out_$i31 == 1;
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(in_$i1, 256);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} spin_unlock_irq(out_$p29);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_25 := $M.1;
    out_cmdloc_dummy_var_26 := $M.1;
    call {:si_unique_call 643} out_cmdloc_dummy_var_27 := $memcpy.i8(out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_$p27, out_$p28, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_27;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3020, 1));
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_22 := $M.1;
    out_cmdloc_dummy_var_23 := $M.1;
    call {:si_unique_call 642} out_cmdloc_dummy_var_24 := $memcpy.i8(out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_$p24, out_$p25, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_24;
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(2976, 1));
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_19 := $M.1;
    out_cmdloc_dummy_var_20 := $M.1;
    call {:si_unique_call 641} out_cmdloc_dummy_var_21 := $memcpy.i8(out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_$p21, out_$p22, 44, $zext.i32.i64(4), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_21;
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(3020, 1));
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} spin_lock_irq(out_$p19);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3368)), $mul.ref(2552, 1));
    goto corral_source_split_3422;

  $bb33:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := out_$i18;
    goto $bb34;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i71 := $sub.i32(0, 512);
    goto $bb34;

  $bb32:
    assume out_$i70 == 1;
    goto corral_source_split_3505;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} out_$i69 := signal_pending(out_$p68);
    call {:si_unique_call 652} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$p68 := get_current();
    goto corral_source_split_3496;

  $bb27:
    assume !(out_$i63 == 1);
    goto corral_source_split_3495;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$i67, out_$i72, out_$i73, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27 := wait_serial_change_loop_$bb5(in_$p0, in_$i1, in_$p2, in_$p3, in_$p4, in_$p5, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$i69, out_$i70, out_$i71, out_$i67, out_$i72, out_$i73, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27);
    return;

  exit:
    return;
}



procedure wait_serial_change_loop_$bb5(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i1, in_$i64: i64, in_$i65: i1, in_$i66: i32, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i67: i32, in_$i72: i1, in_$i73: i32, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8) returns (out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i1, out_$i64: i64, out_$i65: i1, out_$i66: i32, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i67: i32, out_$i72: i1, out_$i73: i32, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8);
  modifies $M.19, $M.10, $M.1;



implementation acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := in_$i10, in_$p11, in_$i8, in_$i9, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i15, out_$i16;
    goto $bb11_dummy;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i15, out_$p19;
    assume true;
    goto $bb11;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.1, out_$p20);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p2, $mul.ref(out_$i18, 40));
    goto corral_source_split_3751;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3750;

  $bb9:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, 15);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i9, 1);
    call {:si_unique_call 716} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i15 := $srem.i32(out_$i14, 16);
    call {:si_unique_call 715} {:cexpr "wbn"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3744;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, 1);
    goto corral_source_split_3743;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := acm_wb_alloc_loop_$bb4(in_$p2, out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1);



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 749} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_3847;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_3846;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 747} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 745} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3837;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_3836;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation acm_port_shutdown_loop_$bb7(in_$p2: ref, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1)
{

  entry:
    out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48 := in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$p39 := out_$p46;
    goto $bb11_dummy;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_3955;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} out_$p46 := usb_get_from_anchor(in_$p35);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} usb_autopm_put_interface_async(out_$p45);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_3951;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(8, 1));
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p43, 0);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_3946;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3945;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48 := acm_port_shutdown_loop_$bb7(in_$p2, in_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure acm_port_shutdown_loop_$bb7(in_$p2: ref, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1) returns (out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1);
  modifies $M.1;



implementation acm_port_shutdown_loop_$bb19(in_$p2: ref, in_$p55: ref, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i58: i32) returns (out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i58: i32)
{

  entry:
    out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i58 := in_$i59, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i58;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3971;

  $bb21:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i63;
    goto $bb21_dummy;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i64, out_$i63);
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.1, in_$p55);
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i58, 1);
    call {:si_unique_call 775} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} usb_kill_urb(out_$p62);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i59, 8));
    goto corral_source_split_3974;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i58);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i58 := acm_port_shutdown_loop_$bb19(in_$p2, in_$p55, out_$i59, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i58);
    return;

  exit:
    return;
}



procedure acm_port_shutdown_loop_$bb19(in_$p2: ref, in_$p55: ref, in_$i59: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i58: i32) returns (out_$i59: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i58: i32);



implementation acm_port_activate_loop_$bb24(in_$p3: ref, in_$p70: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i73: i32) returns (out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i73: i32)
{

  entry:
    out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i73 := in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i73;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;

  $bb26:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := out_$i78;
    goto $bb26_dummy;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i80 := $sgt.i32(out_$i79, out_$i78);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.1, in_$p70);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i73, 1);
    call {:si_unique_call 812} {:cexpr "i"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} usb_kill_urb(out_$p77);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.1, out_$p76);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 24), 3368)), $mul.ref(1776, 1)), $mul.ref(out_$i74, 8));
    goto corral_source_split_4157;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i73);
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i73 := acm_port_activate_loop_$bb24(in_$p3, in_$p70, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i73);
    return;

  exit:
    return;
}



procedure acm_port_activate_loop_$bb24(in_$p3: ref, in_$p70: ref, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i73: i32) returns (out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i73: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i64) returns (out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i64)
{

  entry:
    out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$p118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$p140, in_$i142, in_$i143, in_$p144, in_$i146, in_$i147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$p168, in_$i170, in_$i171, in_$p172, in_$i174, in_$i175, in_$p176, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$p213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$p222, in_$i223, in_$i224, in_$i225, in_$i226, in_$p227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$p239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$p247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$i266, in_$p267, in_$p268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$p275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} out_$i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i33);
    call {:si_unique_call 896} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i33);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_vslice_dummy_var_100 := show_caps(in_$p3, in_$p5, in_$p1);
    goto corral_source_split_4372;

  $bb25:
    assume out_$i47 == 1;
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$i46 := $M.32;
    goto corral_source_split_4368;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_4367;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 899} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i43 == 1;
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i42 := $M.32;
    goto corral_source_split_4362;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_4361;

  $bb14:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i33, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i33, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_stop();
    goto corral_source_split_4375;

  $bb24:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} out_vslice_dummy_var_101 := show_country_rel_date(in_$p8, in_$p10, in_$p6);
    goto corral_source_split_4384;

  $bb38:
    assume out_$i54 == 1;
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i53 := $M.33;
    goto corral_source_split_4380;

  $bb36:
    assume out_$i52 == 1;
    goto corral_source_split_4379;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} out_$i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i51);
    call {:si_unique_call 905} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i51);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i50 == 1;
    goto corral_source_split_4377;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i49 := $M.33;
    goto corral_source_split_4354;

  $bb16:
    assume out_$i40 == 1;
    goto corral_source_split_4353;

  $bb15:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i33, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_stop();
    goto corral_source_split_4387;

  $bb37:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4454;

  SeqInstr_105:
    goto corral_source_split_4453;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} out_vslice_dummy_var_102 := acm_tty_write(out_$p77, in_$p18, in_$i19);
    goto SeqInstr_104;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$p77 := $M.30;
    goto corral_source_split_4452;

  $bb81:
    assume out_$i76 == 1;
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 2);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i75 := $M.34;
    goto corral_source_split_4448;

  $bb79:
    assume out_$i74 == 1;
    goto corral_source_split_4447;

  $bb75:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb67:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb48:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 909} out_$i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 910} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i58);
    call {:si_unique_call 911} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i58);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i57 == 1;
    goto corral_source_split_4389;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i56 := $M.34;
    goto corral_source_split_4358;

  $bb17:
    assume !(out_$i40 == 1);
    goto corral_source_split_4357;

  $bb89:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} acm_tty_cleanup(out_$p84);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$p84 := $M.30;
    goto corral_source_split_4465;

  $bb88:
    assume out_$i83 == 1;
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 2);
    goto corral_source_split_4462;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i82 := $M.34;
    goto corral_source_split_4461;

  $bb86:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} acm_tty_cleanup(out_$p81);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$p81 := $M.30;
    goto corral_source_split_4457;

  $bb85:
    assume out_$i80 == 1;
    goto corral_source_split_4456;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 1);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i79 := $M.34;
    goto corral_source_split_4440;

  $bb77:
    assume out_$i73 == 1;
    goto corral_source_split_4439;

  $bb76:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb95:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} acm_tty_throttle(out_$p90);
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$p90 := $M.30;
    goto corral_source_split_4478;

  $bb94:
    assume out_$i89 == 1;
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 2);
    goto corral_source_split_4475;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i88 := $M.34;
    goto corral_source_split_4474;

  $bb92:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4472;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} acm_tty_throttle(out_$p87);
    goto corral_source_split_4471;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$p87 := $M.30;
    goto corral_source_split_4470;

  $bb91:
    assume out_$i86 == 1;
    goto corral_source_split_4469;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 1);
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i85 := $M.34;
    goto corral_source_split_4444;

  $bb78:
    assume !(out_$i73 == 1);
    goto corral_source_split_4443;

  $bb101:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} acm_tty_hangup(out_$p96);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p96 := $M.30;
    goto corral_source_split_4491;

  $bb100:
    assume out_$i95 == 1;
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 2);
    goto corral_source_split_4488;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i94 := $M.34;
    goto corral_source_split_4487;

  $bb98:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} acm_tty_hangup(out_$p93);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    out_$p93 := $M.30;
    goto corral_source_split_4483;

  $bb97:
    assume out_$i92 == 1;
    goto corral_source_split_4482;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_4433;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i91 := $M.34;
    goto corral_source_split_4432;

  $bb73:
    assume out_$i71 == 1;
    goto corral_source_split_4431;

  $bb69:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb68:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i58, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb104:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} acm_tty_close(out_$p99, out_$p100);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$p100 := $M.29;
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$p99 := $M.30;
    goto corral_source_split_4496;

  $bb103:
    assume out_$i98 == 1;
    goto corral_source_split_4495;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i97 := $M.34;
    goto corral_source_split_4436;

  $bb74:
    assume !(out_$i71 == 1);
    goto corral_source_split_4435;

  $bb107:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.35 := out_$i109;
    call {:si_unique_call 931} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i109 := $add.i32(out_$i108, 1);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i108 := $M.35;
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 930} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4510;

  $bb108:
    assume out_$i107 == 1;
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 0);
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i106 := $M.40;
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.40 := out_$i105;
    call {:si_unique_call 929} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i105 := acm_tty_open(out_$p103, out_$p104);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$p104 := $M.29;
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$p103 := $M.30;
    goto corral_source_split_4502;

  $bb106:
    assume out_$i102 == 1;
    goto corral_source_split_4501;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 1);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i101 := $M.34;
    goto corral_source_split_4424;

  $bb71:
    assume out_$i70 == 1;
    goto corral_source_split_4423;

  $bb70:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb116:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4526;

  SeqInstr_111:
    goto corral_source_split_4525;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} acm_tty_unthrottle(out_$p115);
    goto SeqInstr_110;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$p115 := $M.30;
    goto corral_source_split_4524;

  $bb115:
    assume out_$i114 == 1;
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_4521;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i113 := $M.34;
    goto corral_source_split_4520;

  $bb113:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  SeqInstr_108:
    goto corral_source_split_4517;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} acm_tty_unthrottle(out_$p112);
    goto SeqInstr_107;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$p112 := $M.30;
    goto corral_source_split_4516;

  $bb112:
    assume out_$i111 == 1;
    goto corral_source_split_4515;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i110 := $M.34;
    goto corral_source_split_4428;

  $bb72:
    assume !(out_$i70 == 1);
    goto corral_source_split_4427;

  $bb122:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_104 := acm_tty_write_room(out_$p122);
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    out_$p122 := $M.30;
    goto corral_source_split_4537;

  $bb121:
    assume out_$i121 == 1;
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 2);
    goto corral_source_split_4534;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i120 := $M.34;
    goto corral_source_split_4533;

  $bb119:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_103 := acm_tty_write_room(out_$p118);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$p118 := $M.30;
    goto corral_source_split_4529;

  $bb118:
    assume out_$i117 == 1;
    goto corral_source_split_4528;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 1);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i116 := $M.34;
    goto corral_source_split_4416;

  $bb65:
    assume out_$i67 == 1;
    goto corral_source_split_4415;

  $bb61:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i58, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb50:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i58, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb49:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb128:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_106 := acm_tty_break_ctl(out_$p130, in_$i14);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$p130 := $M.30;
    goto corral_source_split_4550;

  $bb127:
    assume out_$i129 == 1;
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 2);
    goto corral_source_split_4547;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i128 := $M.34;
    goto corral_source_split_4546;

  $bb125:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_105 := acm_tty_break_ctl(out_$p126, in_$i14);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p126 := $M.30;
    goto corral_source_split_4542;

  $bb124:
    assume out_$i125 == 1;
    goto corral_source_split_4541;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 1);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i124 := $M.34;
    goto corral_source_split_4420;

  $bb66:
    assume !(out_$i67 == 1);
    goto corral_source_split_4419;

  $bb134:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} acm_tty_set_termios(out_$p137, in_$p12);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$p137 := $M.30;
    goto corral_source_split_4563;

  $bb133:
    assume out_$i136 == 1;
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_4560;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i135 := $M.34;
    goto corral_source_split_4559;

  $bb131:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} acm_tty_set_termios(out_$p134, in_$p12);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$p134 := $M.30;
    goto corral_source_split_4555;

  $bb130:
    assume out_$i133 == 1;
    goto corral_source_split_4554;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i132 := $M.34;
    goto corral_source_split_4408;

  $bb63:
    assume out_$i66 == 1;
    goto corral_source_split_4407;

  $bb62:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i58, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb140:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_vslice_dummy_var_108 := acm_tty_ioctl(out_$p144, in_$i20, in_$i21);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$p144 := $M.30;
    goto corral_source_split_4576;

  $bb139:
    assume out_$i143 == 1;
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_4573;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i142 := $M.34;
    goto corral_source_split_4572;

  $bb137:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4570;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_107 := acm_tty_ioctl(out_$p140, in_$i20, in_$i21);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$p140 := $M.30;
    goto corral_source_split_4568;

  $bb136:
    assume out_$i139 == 1;
    goto corral_source_split_4567;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 1);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i138 := $M.34;
    goto corral_source_split_4412;

  $bb64:
    assume !(out_$i66 == 1);
    goto corral_source_split_4411;

  $bb146:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_110 := acm_tty_chars_in_buffer(out_$p152);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p152 := $M.30;
    goto corral_source_split_4589;

  $bb145:
    assume out_$i151 == 1;
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 2);
    goto corral_source_split_4586;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i150 := $M.34;
    goto corral_source_split_4585;

  $bb143:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_109 := acm_tty_chars_in_buffer(out_$p148);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$p148 := $M.30;
    goto corral_source_split_4581;

  $bb142:
    assume out_$i147 == 1;
    goto corral_source_split_4580;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i146 := $M.34;
    goto corral_source_split_4400;

  $bb59:
    assume out_$i64 == 1;
    goto corral_source_split_4399;

  $bb52:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i58, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb51:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i58, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb152:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_112 := acm_tty_tiocmget(out_$p160);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p160 := $M.30;
    goto corral_source_split_4602;

  $bb151:
    assume out_$i159 == 1;
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 2);
    goto corral_source_split_4599;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i158 := $M.34;
    goto corral_source_split_4598;

  $bb149:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_111 := acm_tty_tiocmget(out_$p156);
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$p156 := $M.30;
    goto corral_source_split_4594;

  $bb148:
    assume out_$i155 == 1;
    goto corral_source_split_4593;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i154 := $M.34;
    goto corral_source_split_4404;

  $bb60:
    assume !(out_$i64 == 1);
    goto corral_source_split_4403;

  $bb158:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_114 := acm_tty_install(in_$p17, out_$p168);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$p168 := $M.30;
    goto corral_source_split_4615;

  $bb157:
    assume out_$i167 == 1;
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 2);
    goto corral_source_split_4612;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i166 := $M.34;
    goto corral_source_split_4611;

  $bb155:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_113 := acm_tty_install(in_$p17, out_$p164);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    out_$p164 := $M.30;
    goto corral_source_split_4607;

  $bb154:
    assume out_$i163 == 1;
    goto corral_source_split_4606;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 1);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$i162 := $M.34;
    goto corral_source_split_4392;

  $bb54:
    assume out_$i62 == 1;
    goto corral_source_split_4391;

  $bb53:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb164:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_116 := acm_tty_tiocmset(out_$p176, in_$i13, in_$i15);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$p176 := $M.30;
    goto corral_source_split_4628;

  $bb163:
    assume out_$i175 == 1;
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_4625;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i174 := $M.34;
    goto corral_source_split_4624;

  $bb161:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_115 := acm_tty_tiocmset(out_$p172, in_$i13, in_$i15);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$p172 := $M.30;
    goto corral_source_split_4620;

  $bb160:
    assume out_$i171 == 1;
    goto corral_source_split_4619;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i170 := $M.34;
    goto corral_source_split_4396;

  $bb56:
    assume out_$i63 == 1;
    goto corral_source_split_4395;

  $bb55:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_stop();
    goto corral_source_split_4632;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb58;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb58;

  $bb170:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb180:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb181;

  $bb183:
    assume {:verifier.code 0} true;
    assume !(out_$i187 == 1);
    goto $bb181;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 0);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i186 := $M.35;
    goto corral_source_split_4645;

  $bb179:
    assume out_$i185 == 1;
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 3);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i184 := $M.36;
    goto corral_source_split_4641;

  $bb177:
    assume out_$i183 == 1;
    goto corral_source_split_4640;

  $bb172:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_4634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 969} out_$i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 970} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i180);
    call {:si_unique_call 971} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i180);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume out_$i179 == 1;
    goto corral_source_split_4634;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i178 := $M.36;
    goto corral_source_split_4346;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_4345;

  $bb5:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i33, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i33, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb188:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb193:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_4671;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i193 := $M.41;
    goto corral_source_split_4670;

  $bb190:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 984} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_initialize_tty_operations_1();
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} ldv_tty_port_operations_3();
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 978} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4662;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.36 := 3;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4661;

  $bb189:
    assume out_$i192 == 1;
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 0);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$i191 := $M.41;
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.41 := out_$i190;
    call {:si_unique_call 976} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} out_$i190 := acm_init();
    goto corral_source_split_4655;

  $bb187:
    assume out_$i189 == 1;
    goto corral_source_split_4654;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i188 := $M.36;
    goto corral_source_split_4637;

  $bb174:
    assume out_$i182 == 1;
    goto corral_source_split_4636;

  $bb173:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_stop();
    goto corral_source_split_4676;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(out_$i182 == 1);
    goto $bb176;

  $bb178:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb176;

  $bb200:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb214:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb216:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.35 := out_$i210;
    call {:si_unique_call 993} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i210 := $add.i32(out_$i209, 1);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i209 := $M.35;
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 992} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4704;

  $bb215:
    assume out_$i208 == 1;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 0);
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i207 := $M.42;
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.42 := out_$i206;
    call {:si_unique_call 991} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_4699;

  SeqInstr_114:
    goto corral_source_split_4698;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_$i206 := acm_port_activate(out_$p205, in_$p23);
    goto SeqInstr_113;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$p205 := $M.28;
    goto corral_source_split_4697;

  $bb213:
    assume out_$i204 == 1;
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i203 := $M.37;
    goto corral_source_split_4693;

  $bb211:
    assume out_$i202 == 1;
    goto corral_source_split_4692;

  $bb209:
    assume out_$i201 == 1;
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i197, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb202:
    assume out_$i198 == 1;
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i197, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i197, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_4678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} out_$i197 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i197);
    call {:si_unique_call 989} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i197);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb199:
    assume out_$i196 == 1;
    goto corral_source_split_4678;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i196 := $ne.i32(out_$i195, 0);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i195 := $M.37;
    goto corral_source_split_4350;

  $bb13:
    assume !(out_$i38 == 1);
    goto corral_source_split_4349;

  $bb227:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} acm_port_dtr_rts(out_$p219, in_$i24);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$p219 := $M.28;
    goto corral_source_split_4726;

  $bb226:
    assume out_$i218 == 1;
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 2);
    goto corral_source_split_4723;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i217 := $M.37;
    goto corral_source_split_4722;

  $bb224:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} acm_port_dtr_rts(out_$p216, in_$i24);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$p216 := $M.28;
    goto corral_source_split_4718;

  $bb223:
    assume out_$i215 == 1;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 3);
    goto corral_source_split_4715;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i214 := $M.37;
    goto corral_source_split_4714;

  $bb221:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} acm_port_dtr_rts(out_$p213, in_$i24);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p213 := $M.28;
    goto corral_source_split_4710;

  $bb220:
    assume out_$i212 == 1;
    goto corral_source_split_4709;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 1);
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$i211 := $M.37;
    goto corral_source_split_4689;

  $bb210:
    assume !(out_$i201 == 1);
    goto corral_source_split_4688;

  $bb230:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $M.35 := out_$i224;
    call {:si_unique_call 1002} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$i224 := $sub.i32(out_$i223, 1);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$i223 := $M.35;
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} acm_port_shutdown(out_$p222);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p222 := $M.28;
    goto corral_source_split_4731;

  $bb229:
    assume out_$i221 == 1;
    goto corral_source_split_4730;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 2);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$i220 := $M.37;
    goto corral_source_split_4681;

  $bb204:
    assume out_$i199 == 1;
    goto corral_source_split_4680;

  $bb203:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb233:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} acm_port_destruct(out_$p227);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$p227 := $M.28;
    goto corral_source_split_4739;

  $bb232:
    assume out_$i226 == 1;
    goto corral_source_split_4738;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 1);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i225 := $M.37;
    goto corral_source_split_4685;

  $bb206:
    assume out_$i200 == 1;
    goto corral_source_split_4684;

  $bb205:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i197, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_stop();
    goto corral_source_split_4743;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i200 == 1);
    goto $bb208;

  $bb212:
    assume {:verifier.code 0} true;
    assume !(out_$i202 == 1);
    goto $bb208;

  $bb239:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.35 := out_$i244;
    call {:si_unique_call 1012} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    out_$i244 := $add.i32(out_$i243, 1);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$i243 := $M.35;
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4775;

  $bb256:
    assume out_$i242 == 1;
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 0);
    goto corral_source_split_4772;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    out_$i241 := $M.43;
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.43 := out_$i240;
    call {:si_unique_call 1010} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_4770;

  SeqInstr_117:
    goto corral_source_split_4769;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} out_$i240 := acm_probe(out_$p239, in_$p26);
    goto SeqInstr_116;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$p239 := $M.27;
    goto corral_source_split_4768;

  $bb254:
    assume out_$i238 == 1;
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$i237 := $M.38;
    goto corral_source_split_4764;

  $bb252:
    assume out_$i236 == 1;
    goto corral_source_split_4763;

  $bb250:
    assume out_$i235 == 1;
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb241:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb240:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i230, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_4745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} out_$i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 1007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i230);
    call {:si_unique_call 1008} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i230);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb238:
    assume out_$i229 == 1;
    goto corral_source_split_4745;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i32(out_$i228, 0);
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    out_$i228 := $M.38;
    goto corral_source_split_4338;

  $bb7:
    assume out_$i36 == 1;
    goto corral_source_split_4337;

  $bb6:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb262:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb264:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4788;

  $bb263:
    assume out_$i250 == 1;
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 0);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$i249 := $M.44;
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.44 := out_$i248;
    call {:si_unique_call 1014} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_4783;

  SeqInstr_120:
    goto corral_source_split_4782;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_$i248 := acm_reset_resume(out_$p247);
    goto SeqInstr_119;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p247 := $M.27;
    goto corral_source_split_4781;

  $bb261:
    assume out_$i246 == 1;
    goto corral_source_split_4780;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 3);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i245 := $M.38;
    goto corral_source_split_4760;

  $bb251:
    assume !(out_$i235 == 1);
    goto corral_source_split_4759;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.35 := out_$i264;
    call {:si_unique_call 1021} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i264 := $sub.i32(out_$i263, 1);
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$i263 := $M.35;
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} acm_disconnect(out_$p262);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$p262 := $M.27;
    goto corral_source_split_4810;

  $bb276:
    assume out_$i261 == 1;
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 0);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i260 := $M.45;
    goto corral_source_split_4806;

  $bb273:
    assume out_$i259 == 1;
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 2);
    goto corral_source_split_4803;

  $bb272:
    assume {:verifier.code 0} true;
    out_$i258 := $M.38;
    goto corral_source_split_4802;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.35 := out_$i257;
    call {:si_unique_call 1018} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i257 := $sub.i32(out_$i256, 1);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i256 := $M.35;
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} acm_disconnect(out_$p255);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$p255 := $M.27;
    goto corral_source_split_4795;

  $bb270:
    assume out_$i254 == 1;
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 0);
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i253 := $M.45;
    goto corral_source_split_4791;

  $bb267:
    assume out_$i252 == 1;
    goto corral_source_split_4790;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 3);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    out_$i251 := $M.38;
    goto corral_source_split_4748;

  $bb243:
    assume out_$i232 == 1;
    goto corral_source_split_4747;

  $bb242:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i230, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb268:
    assume {:verifier.code 0} true;
    assume !(out_$i252 == 1);
    goto $bb269;

  $bb271:
    assume {:verifier.code 0} true;
    assume !(out_$i254 == 1);
    goto $bb269;

  $bb274:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb275;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb275;

  $bb280:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb282:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_4827;

  $bb281:
    assume out_$i272 == 1;
    goto corral_source_split_4826;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 0);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i271 := $M.46;
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.46 := out_$i270;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i270);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_$i270 := acm_suspend(out_$p267, out_$i269);
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.31, out_$p268);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$p267 := $M.27;
    goto corral_source_split_4818;

  $bb279:
    assume out_$i266 == 1;
    goto corral_source_split_4817;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i265 := $M.38;
    goto corral_source_split_4752;

  $bb245:
    assume out_$i233 == 1;
    goto corral_source_split_4751;

  $bb244:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i233 := $slt.i32(out_$i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb286:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb288:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4837;

  $bb287:
    assume out_$i278 == 1;
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 0);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i277 := $M.47;
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.47 := out_$i276;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i276);
    goto corral_source_split_4832;

  SeqInstr_123:
    goto corral_source_split_4831;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} out_$i276 := acm_resume(out_$p275);
    goto SeqInstr_122;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$p275 := $M.27;
    goto corral_source_split_4830;

  $bb285:
    assume out_$i274 == 1;
    goto corral_source_split_4829;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 3);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i273 := $M.38;
    goto corral_source_split_4756;

  $bb247:
    assume out_$i234 == 1;
    goto corral_source_split_4755;

  $bb246:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i230, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_stop();
    goto corral_source_split_4839;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb248:
    assume {:verifier.code 0} true;
    assume !(out_$i234 == 1);
    goto $bb249;

  $bb253:
    assume {:verifier.code 0} true;
    assume !(out_$i236 == 1);
    goto $bb249;

  $bb295:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb300:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} out_vslice_dummy_var_117 := show_country_codes(in_$p31, in_$p28, in_$p29);
    goto corral_source_split_4848;

  $bb299:
    assume out_$i284 == 1;
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i283 := $M.39;
    goto corral_source_split_4844;

  $bb297:
    assume out_$i282 == 1;
    goto corral_source_split_4843;

  $bb296:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_4841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} out_$i281 := __VERIFIER_nondet_int();
    call {:si_unique_call 1030} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i281);
    call {:si_unique_call 1031} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i281);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb294:
    assume out_$i280 == 1;
    goto corral_source_split_4841;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$i280 := $ne.i32(out_$i279, 0);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$i279 := $M.39;
    goto corral_source_split_4342;

  $bb9:
    assume out_$i37 == 1;
    goto corral_source_split_4341;

  $bb8:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i33, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_stop();
    goto corral_source_split_4851;

  $bb298:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_stop();
    goto corral_source_split_4853;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb11;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117 := main_loop_$bb1(in_$p0, in_$p1, in_$p3, in_$p5, in_$p6, in_$p8, in_$p10, in_$p12, in_$i13, in_$i14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$p26, in_$p28, in_$p29, in_$p31, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$p239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i32, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i64) returns (out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i32, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i64);
  modifies $M.32, $M.33, $M.34, $M.10, $M.1, assertsPassed, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.35, $M.40, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.29, $M.30, $M.28, $M.37, $M.39, $M.36, $M.41, $M.8, $M.38, $M.45, $M.27, $M.42, $M.12, $M.43, $M.44, $M.46, $M.9, $M.47;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


