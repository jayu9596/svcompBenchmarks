var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: i32;

var $M.3: ref;

var $M.4: i8;

var $M.9: i32;

var $M.10: i32;

var $M.11: [ref]i8;

var $M.12: i8;

var $M.13: [ref]i64;

var $M.17: [ref]i64;

var $M.18: [ref]i64;

var $M.19: [ref]i64;

var $M.20: i32;

var $M.21: i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: [ref]i32;

var $M.25: ref;

var $M.26: [ref]i64;

var $M.27: i8;

var $M.28: i32;

var $M.29: [ref]i8;

var $M.30: [ref]i64;

var $M.31: [ref]i8;

var $M.32: [ref]i64;

var $M.33: [ref]i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i8;

var $M.37: [ref]i64;

var $M.44: [ref]i64;

var $M.45: i32;

var $M.46: [ref]i32;

var $M.47: [ref]i64;

var $M.49: [ref]i64;

var $M.50: [ref]i32;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i32;

var $M.54: [ref]i64;

var $M.55: [ref]i64;

var $M.56: [ref]i8;

var $M.57: [ref]i64;

var $M.58: [ref]i8;

var $M.59: [ref]i64;

var $M.61: [ref]i64;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i64;

var $M.66: [ref]i8;

var $M.67: [ref]i16;

var $M.68: [ref]i8;

var $M.69: [ref]i64;

var $M.70: [ref]i8;

var $M.71: [ref]i64;

var $M.73: [ref]i64;

var $M.74: [ref]i8;

var $M.75: [ref]i64;

var $M.76: [ref]i8;

var $M.78: [ref]i64;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i64;

var $M.85: i32;

var $M.86: i32;

var $M.87: [ref]i32;

var $M.88: [ref]i32;

var $M.89: [ref]i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]ref;

var $M.129: [ref]ref;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: i32;

var $M.137: i32;

var $M.138: i32;

var $M.139: i32;

var $M.140: i32;

var $M.141: i32;

var $M.142: i32;

var $M.143: i32;

var $M.144: i32;

var $M.145: i32;

var $M.146: i32;

var $M.147: i16;

var $M.148: i32;

var $M.149: i32;

var $M.150: i32;

var $M.151: i32;

var $M.160: [ref]i8;

var $M.179: [ref]i32;

var $M.180: [ref]i32;

var $M.181: [ref]i32;

var $M.182: [ref]i32;

var $M.183: [ref]i32;

var $M.184: [ref]i32;

var $M.185: [ref]i64;

var $M.186: [ref]i8;

var $M.187: [ref]i8;

var $M.188: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 934299);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const nvme_io_timeout: ref;

axiom nvme_io_timeout == $sub.ref(0, 1025);

const nvme_meta_noop: ref;

axiom nvme_meta_noop == $sub.ref(0, 2377);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0, 3416);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 4444);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 5472);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 6500);

const ldv_linux_kernel_locking_spinlock_spin_queue_lock_of_request_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_queue_lock_of_request_queue == $sub.ref(0, 7528);

const ldv_linux_kernel_locking_spinlock_spin_q_lock_of_nvme_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_q_lock_of_nvme_queue == $sub.ref(0, 8556);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 9584);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 10612);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 11640);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 12668);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 13696);

const ldv_linux_kernel_locking_spinlock_spin_dev_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_dev_list_lock == $sub.ref(0, 14724);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 15752);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 16777);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 17805);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 18833);

const sg_version_num: ref;

axiom sg_version_num == $sub.ref(0, 19861);

const nvme_fops: ref;

axiom nvme_fops == $sub.ref(0, 20989);

const nvme_mq_ops: ref;

axiom nvme_mq_ops == $sub.ref(0, 22077);

const nvme_mq_admin_ops: ref;

axiom nvme_mq_admin_ops == $sub.ref(0, 23165);

const use_threaded_interrupts: ref;

axiom use_threaded_interrupts == $sub.ref(0, 24193);

const shutdown_timeout: ref;

axiom shutdown_timeout == $sub.ref(0, 25218);

const nvme_instance_ida: ref;

axiom nvme_instance_ida == $sub.ref(0, 26362);

const dev_list: ref;

axiom dev_list == $sub.ref(0, 27402);

const dev_list_lock: ref;

axiom dev_list_lock == $sub.ref(0, 28498);

const nvme_dev_fops: ref;

axiom nvme_dev_fops == $sub.ref(0, 29762);

const nvme_kthread_wait: ref;

axiom nvme_kthread_wait == $sub.ref(0, 30874);

const nvme_thread: ref;

axiom nvme_thread == $sub.ref(0, 31906);

const nvme_char_major: ref;

axiom nvme_char_major == $sub.ref(0, 32934);

const nvme_class: ref;

axiom nvme_class == $sub.ref(0, 33966);

const nvme_workq: ref;

axiom nvme_workq == $sub.ref(0, 34998);

const nvme_major: ref;

axiom nvme_major == $sub.ref(0, 36026);

const nvme_dev_pm_ops: ref;

axiom nvme_dev_pm_ops == $sub.ref(0, 37234);

const nvme_err_handler: ref;

axiom nvme_err_handler == $sub.ref(0, 38306);

const {:count 2} nvme_id_table: ref;

axiom nvme_id_table == $sub.ref(0, 39394);

const nvme_driver: ref;

axiom nvme_driver == $sub.ref(0, 40730);

const admin_timeout: ref;

axiom admin_timeout == $sub.ref(0, 41755);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 42780);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 43805);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 44830);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 45858);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 46898);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 47938);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 48978);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 50018);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 51058);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 52098);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 53138);

const {:count 2} __mod_pci__nvme_id_table_device_table: ref;

axiom __mod_pci__nvme_id_table_device_table == $sub.ref(0, 54226);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 55254);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 56282);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 57310);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 58338);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 59366);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 60394);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 61422);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 62448);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 63476);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 64504);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 65532);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 66560);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 67588);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 68616);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 69644);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 70672);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 71700);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 72728);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 73756);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 74784);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 75812);

const {:count 5} .str.5: ref;

axiom .str.5 == $sub.ref(0, 76841);

const {:count 26} .str.28: ref;

axiom .str.28 == $sub.ref(0, 77891);

const {:count 35} .str.17: ref;

axiom .str.17 == $sub.ref(0, 78950);

const {:count 37} .str.18: ref;

axiom .str.18 == $sub.ref(0, 80011);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 81066);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 44} .str.27: ref;

axiom .str.27 == $sub.ref(0, 82134);

const {:count 16} .str.21: ref;

axiom .str.21 == $sub.ref(0, 83174);

const {:count 7} .str.22: ref;

axiom .str.22 == $sub.ref(0, 84205);

const {:count 33} .str.23: ref;

axiom .str.23 == $sub.ref(0, 85262);

const {:count 15} .str.25: ref;

axiom .str.25 == $sub.ref(0, 86301);

const {:count 6} .str.26: ref;

axiom .str.26 == $sub.ref(0, 87331);

const {:count 31} .str.24: ref;

axiom .str.24 == $sub.ref(0, 88386);

const debug_locks: ref;

axiom debug_locks == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 23} .str.20: ref;

axiom .str.20 == $sub.ref(0, 89433);

const {:count 21} .str.15: ref;

axiom .str.15 == $sub.ref(0, 90478);

const {:count 37} .str.9: ref;

axiom .str.9 == $sub.ref(0, 91539);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 34} .str.10: ref;

axiom .str.10 == $sub.ref(0, 92597);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 93640);

const {:count 19} .str.44: ref;

axiom .str.44 == $sub.ref(0, 94683);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 33} .str.47: ref;

axiom .str.47 == $sub.ref(0, 95740);

const {:count 10} .str.49: ref;

axiom .str.49 == $sub.ref(0, 96774);

const {:count 30} .str.11: ref;

axiom .str.11 == $sub.ref(0, 97828);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 98873);

const {:count 46} .str.13: ref;

axiom .str.13 == $sub.ref(0, 99943);

const t10_pi_type3_crc: ref;

axiom t10_pi_type3_crc == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const t10_pi_type1_crc: ref;

axiom t10_pi_type1_crc == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const .str: ref;

axiom .str == $sub.ref(0, 100993);

const {:count 10} .str.31: ref;

axiom .str.31 == $sub.ref(0, 102027);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 103076);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 104132);

const {:count 37} .str.33: ref;

axiom .str.33 == $sub.ref(0, 105193);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 106242);

const {:count 55} .str.29: ref;

axiom .str.29 == $sub.ref(0, 107321);

const {:count 76} .str.30: ref;

axiom .str.30 == $sub.ref(0, 108421);

const {:count 14} .str.45: ref;

axiom .str.45 == $sub.ref(0, 109459);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 110496);

const {:count 25} .str.34: ref;

axiom .str.34 == $sub.ref(0, 111545);

const {:count 40} .str.35: ref;

axiom .str.35 == $sub.ref(0, 112609);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 28} .str.3: ref;

axiom .str.3 == $sub.ref(0, 113661);

const {:count 41} .str.4: ref;

axiom .str.4 == $sub.ref(0, 114726);

const {:count 14} .str.14: ref;

axiom .str.14 == $sub.ref(0, 115764);

const {:count 29} .str.16: ref;

axiom .str.16 == $sub.ref(0, 116817);

const {:count 23} .str.37: ref;

axiom .str.37 == $sub.ref(0, 117864);

const {:count 41} .str.38: ref;

axiom .str.38 == $sub.ref(0, 118929);

const {:count 24} .str.39: ref;

axiom .str.39 == $sub.ref(0, 119977);

const {:count 30} .str.40: ref;

axiom .str.40 == $sub.ref(0, 121031);

const {:count 26} .str.41: ref;

axiom .str.41 == $sub.ref(0, 122081);

const {:count 45} .str.48: ref;

axiom .str.48 == $sub.ref(0, 123150);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 5} .str.51: ref;

axiom .str.51 == $sub.ref(0, 124179);

const {:count 9} .str.50: ref;

axiom .str.50 == $sub.ref(0, 125212);

const {:count 19} .str.6: ref;

axiom .str.6 == $sub.ref(0, 126255);

const {:count 11} .str.7: ref;

axiom .str.7 == $sub.ref(0, 127290);

const {:count 3} .str.8: ref;

axiom .str.8 == $sub.ref(0, 128317);

const .str.2: ref;

axiom .str.2 == $sub.ref(0, 129342);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 130374);

const {:count 3} .str.1.118: ref;

axiom .str.1.118 == $sub.ref(0, 131401);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 132439);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 133467);

const nvme_noop_generate: ref;

axiom nvme_noop_generate == $sub.ref(0, 134499);

procedure nvme_noop_generate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_noop_generate($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const nvme_noop_verify: ref;

axiom nvme_noop_verify == $sub.ref(0, 135531);

procedure nvme_noop_verify($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_noop_verify($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 136563);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const nvme_probe: ref;

axiom nvme_probe == $sub.ref(0, 137595);

procedure nvme_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, assertsPassed;



implementation nvme_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i1;
  var $i79: i8;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $i61: i32;
  var $i58: i32;
  var $p103: ref;
  var $p104: ref;
  var $i26: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i14: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_144: ref;
  var vslice_dummy_var_145: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i7 := dev_to_node($p6);
    call {:si_unique_call 5} {:cexpr "node"} boogie_si_record_i32($i7);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p10 := kzalloc_node(880, 208, $i7);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i16 := cpumask_weight($p15);
    call {:si_unique_call 9} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i18 := $mul.i64($i17, 8);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p19 := kzalloc_node($i18, 208, $i7);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p19);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i28 := cpumask_weight($p27);
    call {:si_unique_call 15} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 8);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p32 := kzalloc_node($i31, 208, $i7);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p32);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} INIT_LIST_HEAD($p39);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, nvme_reset_failed_dev);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} __init_work($p41, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 137438953408);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(616, 1)), $mul.ref(0, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p3);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 19} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p45, $p46, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(616, 1)), $mul.ref(32, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} lockdep_init_map($p48, .str.43, $p2, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(616, 1)), $mul.ref(8, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} INIT_LIST_HEAD($p50);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(616, 1)), $mul.ref(24, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, nvme_reset_workfn);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p53 := pci_dev_get($p0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p11);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} pci_set_drvdata($p0, $p55);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i56 := nvme_set_instance($p11);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 25} {:cexpr "result"} boogie_si_record_i32($i56);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i59 := nvme_setup_prp_pools($p11);
    call {:si_unique_call 28} {:cexpr "result"} boogie_si_record_i32($i59);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} kref_init($p62);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p63 := $M.1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i65 := $M.2;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 20);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i66, $i68);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p11);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p73 := device_create.ref.ref.i32.ref.ref.i32($p63, $p64, $i69, $p70, .str.22, $i72);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(600, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p73);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(600, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i78 := IS_ERR($p77);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i8($i78);
    call {:si_unique_call 33} {:cexpr "tmp___5"} boogie_si_record_i8($i79);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(600, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_144 := get_device($p87);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} __init_work($p89, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, 137438953408);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p5);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 40} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p93, $p94, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1)), $mul.ref(32, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} lockdep_init_map($p96, .str.44, $p4, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1)), $mul.ref(8, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} INIT_LIST_HEAD($p98);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1)), $mul.ref(24, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, nvme_async_probe);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(696, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_145 := schedule_work($p101);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb23:
    assume $i80 == 1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(600, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i84 := PTR_ERR($p83);
    call {:si_unique_call 35} {:cexpr "tmp___4"} boogie_si_record_i64($i84);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 36} {:cexpr "result"} boogie_si_record_i32($i85);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} nvme_release_prp_pools($p11);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i61 := $i85;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} nvme_release_instance($p11);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i58 := $i61;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} pci_dev_put($p104);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i26 := $i58;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} kfree($p107);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} kfree($p110);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p11);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} kfree($p111);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i14 := $i26;
    goto $bb6;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i60 == 1;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb21;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    goto $bb17;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} set_dev_node($p9, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_remove: ref;

axiom nvme_remove == $sub.ref(0, 138627);

procedure nvme_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.3, $M.23, assertsPassed, $M.29, $M.32, $M.17, $M.19, $M.18, $M.22, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, $M.13, $M.36;



implementation nvme_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var vslice_dummy_var_146: i1;
  var vslice_dummy_var_147: i1;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} list_del_init($p3);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} pci_set_drvdata($p0, $0.ref);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 880)), $mul.ref(696, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_146 := flush_work($p4);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_147 := flush_work($p6);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} nvme_dev_shutdown($p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} nvme_dev_remove($p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} nvme_dev_remove_admin($p2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p8 := $M.1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 20);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $i12);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} device_destroy($p8, $i13);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} nvme_free_queues($p2, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} nvme_release_prp_pools($p2);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_148 := kref_put($p14, nvme_free_dev);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const nvme_shutdown: ref;

axiom nvme_shutdown == $sub.ref(0, 139659);

procedure nvme_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation nvme_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} nvme_dev_shutdown($p2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 140691);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nvme_dev_shutdown: ref;

axiom nvme_dev_shutdown == $sub.ref(0, 141723);

procedure nvme_dev_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation nvme_dev_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $i17: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i31: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} nvme_dev_list_remove($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 3);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} nvme_disable_io_queues($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_149 := nvme_shutdown_ctrl($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} nvme_disable_queue($p0, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} nvme_dev_unmap($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    call {:si_unique_call 72} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i29, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb18;

  $bb18:
    call $p32, $p33, $i34, $p35, $p36, $i37, $i38, $i31 := nvme_dev_shutdown_loop_$bb18($p0, $p32, $p33, $i34, $p35, $p36, $i37, $i38, $i31);
    goto $bb18_last;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i31);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 8));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} nvme_clear_queue($p36);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i31, 1);
    call {:si_unique_call 74} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i38 := $sge.i32($i37, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i37;
    goto $bb20_dummy;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    call {:si_unique_call 65} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i16 := $sge.i32($i15, 0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb9;

  $bb9:
    call $p18, $p19, $i20, $p21, $p22, $i24, $i25, $i17, vslice_dummy_var_150 := nvme_dev_shutdown_loop_$bb9($p0, $p18, $p19, $i20, $p21, $p22, $i24, $i25, $i17, vslice_dummy_var_150);
    goto $bb9_last;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 8));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vslice_dummy_var_150 := nvme_suspend_queue($p22);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i17, 1);
    call {:si_unique_call 70} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i24, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb11_dummy;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} nvme_freeze_queues($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i9 := readl($p8);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 64} {:cexpr "csts"} boogie_si_record_i32($i9);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_225;
}



const nvme_dev_list_remove: ref;

axiom nvme_dev_list_remove == $sub.ref(0, 142755);

procedure nvme_dev_list_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.21, assertsPassed;



implementation nvme_dev_list_remove($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} list_del_init($p1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i2 := list_empty(dev_list);
    call {:si_unique_call 78} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_151 := kthread_stop($p13);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p4 := $M.3;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i6 := IS_ERR_OR_NULL($p5);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 80} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p11 := $M.3;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.3 := $0.ref;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const nvme_freeze_queues: ref;

axiom nvme_freeze_queues == $sub.ref(0, 143787);

procedure nvme_freeze_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation nvme_freeze_queues($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p28, $p29, $p30, $p31, $i32, $i33, $p10 := nvme_freeze_queues_loop_$bb4($i8, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p28, $p29, $p30, $p31, $i32, $i33, $p10);
    goto $bb4_last;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} blk_mq_freeze_queue_start($p12);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_spin_lock_140($p16);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} queue_flag_set(2, $p18);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_spin_unlock_141($p22);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} blk_mq_cancel_requeue_work($p24);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} blk_mq_stop_hw_queues($p26);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, $i8);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i33 == 1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p29;
    goto $bb6_dummy;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_304;
}



const readl: ref;

axiom readl == $sub.ref(0, 144819);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 89} $i2 := devirtbounce(0, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 90} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const nvme_suspend_queue: ref;

axiom nvme_suspend_queue == $sub.ref(0, 145851);

procedure nvme_suspend_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, assertsPassed;



implementation nvme_suspend_queue($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i7: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} ldv_spin_lock_irq_105($p1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i64($i13);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref($i14, 8)), $mul.ref(0, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 93} {:cexpr "vector"} boogie_si_record_i32($i17);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i22);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $sub.i16(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} ldv_spin_unlock_irq_106($p27);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} vslice_dummy_var_152 := irq_set_affinity_hint($i17, $0.ref);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ldv_free_irq_116($i17, $p29);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} ldv_spin_unlock_irq_106($p6);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const nvme_disable_io_queues: ref;

axiom nvme_disable_io_queues == $sub.ref(0, 146883);

procedure nvme_disable_io_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.19, $M.18, $CurrAddr, $M.29, $M.32, $M.3, $M.9, $M.31, $M.21, $M.11, $M.13, assertsPassed, $M.20, $M.10, $M.23, $M.22, $M.36;



implementation nvme_disable_io_queues($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i28: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $i38: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i1;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p1 := $alloc($mul.ref(104, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __init_kthread_worker($p1, .str.21, $p2);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 101} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p4, $p5, 104, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p9 := kthread_create_on_node.ref.ref.i32.ref.i32(kthread_worker_fn, $p6, $sub.i32(0, 1), .str.22, $i8);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i11 := IS_ERR($p10);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p9);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i18 := IS_ERR($p17);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 107} {:cexpr "tmp___2"} boogie_si_record_i8($i19);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} atomic_set($p32, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 1);
    call {:si_unique_call 113} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} nvme_wait_dq($p3, $p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_155 := kthread_stop($p9);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb22;

  $bb22:
    call $p39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p49, $p50, $p51, $p53, $p55, $p56, $p59, $p62, $p63, $p64, $p66, $i68, $i69, $i38, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_154 := nvme_disable_io_queues_loop_$bb22($p0, $p3, $p39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p49, $p50, $p51, $p53, $p55, $p56, $p59, $p62, $p63, $p64, $p66, $i68, $i69, $i38, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_154);
    goto $bb22_last;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i38);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 8));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i44 := nvme_suspend_queue($p43);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 115} {:cexpr "tmp___3"} boogie_si_record_i32($i44);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p46 := nvme_get_dq($p3);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(56, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p46);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(32, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p51);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 118} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p56, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} INIT_LIST_HEAD($p59);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, nvme_del_queue_start);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_154 := queue_kthread_work($p64, $p66);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i38, 1);
    call {:si_unique_call 116} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i68;
    goto $bb28_dummy;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} dev_err.ref.ref($p23, .str.23);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    call {:si_unique_call 109} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb12;

  $bb12:
    call $i29, $i30, $i28 := nvme_disable_io_queues_loop_$bb12($p0, $i29, $i30, $i28);
    goto $bb12_last;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} nvme_disable_queue($p0, $i28);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    call {:si_unique_call 111} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb14_dummy;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_153 := wake_up_process($p9);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;
}



const nvme_shutdown_ctrl: ref;

axiom nvme_shutdown_ctrl == $sub.ref(0, 147915);

procedure nvme_shutdown_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_shutdown_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 49153));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 16384);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} writel($i10, $p14);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i15 := $M.4;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 250);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, jiffies);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i18, $i19);
    call {:si_unique_call 124} {:cexpr "timeout"} boogie_si_record_i64($i20);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i25 := readl($p24);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 126} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 12);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 8);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p28, $i29, $i30, $i32, $i33, $i34, $p38, $p39, $p40, $i41, $i42, $i43 := nvme_shutdown_ctrl_loop_$bb4($i20, $p21, $p28, $i29, $i30, $i32, $i33, $i34, $p38, $p39, $p40, $i41, $i42, $i43);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} msleep(100);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p28 := get_current();
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i29 := fatal_signal_pending($p28);
    call {:si_unique_call 130} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, jiffies);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64($i20, $i32);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i33, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p21);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i41 := readl($p40);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 133} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 12);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 8);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb13_dummy;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} dev_err.ref.ref($p37, .str.27);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 19);
    goto $bb8;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 4);
    goto $bb8;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nvme_disable_queue: ref;

axiom nvme_disable_queue == $sub.ref(0, 148947);

procedure nvme_disable_queue($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.9, $M.31, $M.21, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_disable_queue($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i16;
  var $i19: i32;
  var $i20: i16;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "nvme_disable_queue:arg:qid"} boogie_si_record_i32($i1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 8));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i9 := nvme_suspend_queue($p6);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i1, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_spin_lock_irq_105($p33);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_158 := nvme_process_cq($p6);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} ldv_spin_unlock_irq_106($p35);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} blk_mq_freeze_queue_start($p32);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i16 := readl($p15);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 138} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_156 := adapter_delete_sq($p0, $i20);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_157 := adapter_delete_cq($p0, $i24);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_dev_unmap: ref;

axiom nvme_dev_unmap == $sub.ref(0, 149979);

procedure nvme_dev_unmap($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, assertsPassed;



implementation nvme_dev_unmap($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(2522, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(2522, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i31 := pci_is_enabled($p30);
    call {:si_unique_call 150} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} pci_disable_device($p34);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_iounmap_137($p25);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} pci_release_regions($p28);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} pci_disable_msix($p18);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} pci_disable_msi($p9);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_clear_queue: ref;

axiom nvme_clear_queue == $sub.ref(0, 151011);

procedure nvme_clear_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation nvme_clear_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} ldv_spin_lock_irq_105($p3);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} ldv_spin_unlock_irq_106($p11);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1080)), $mul.ref(632, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} blk_mq_tag_busy_iter($p2, nvme_cancel_queue_ios, $p10);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_irq_105: ref;

axiom ldv_spin_lock_irq_105 == $sub.ref(0, 152043);

procedure ldv_spin_lock_irq_105($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_lock_irq_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} spin_lock_irq($p0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const nvme_cancel_queue_ios: ref;

axiom nvme_cancel_queue_ios == $sub.ref(0, 153075);

procedure nvme_cancel_queue_ios($p0: ref, $p1: ref, $p2: ref, $i3: i1);



const blk_mq_tag_busy_iter: ref;

axiom blk_mq_tag_busy_iter == $sub.ref(0, 154107);

procedure blk_mq_tag_busy_iter($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation blk_mq_tag_busy_iter($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_106: ref;

axiom ldv_spin_unlock_irq_106 == $sub.ref(0, 155139);

procedure ldv_spin_unlock_irq_106($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_irq_106($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue();
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} spin_unlock_irq($p0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue == $sub.ref(0, 156171);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} ldv_assume($i5);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 161} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_q_lock_of_nvme_queue"} boogie_si_record_i32(1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 157203);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} _raw_spin_unlock_irq($p2);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 158235);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 159267);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} __VERIFIER_error();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 160299);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const blk_mq_request_started: ref;

axiom blk_mq_request_started == $sub.ref(0, 161331);

procedure blk_mq_request_started($p0: ref) returns ($r: i32);



const blk_mq_rq_to_pdu: ref;

axiom blk_mq_rq_to_pdu == $sub.ref(0, 162363);

procedure blk_mq_rq_to_pdu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_rq_to_pdu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(368, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 163395);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 164427);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;
}



const cancel_cmd_info: ref;

axiom cancel_cmd_info == $sub.ref(0, 165459);

procedure cancel_cmd_info($p0: ref, $p1: ref) returns ($r: ref);



const special_completion: ref;

axiom special_completion == $sub.ref(0, 166491);

procedure special_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation special_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $sub.i64(0, 2401263026318605556));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $sub.i64(0, 2401263026318605552));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, $sub.i64(0, 2401263026318605548));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} dev_warn.ref.ref.ref($p26, .str.19, $p1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i18 := __le16_to_cpup($p17);
    call {:si_unique_call 171} {:cexpr "tmp___0"} boogie_si_record_i16($i18);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i18);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} dev_warn.ref.ref.i32.i32($p20, .str.18, $i23, $i24);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i8 := __le16_to_cpup($p7);
    call {:si_unique_call 168} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i8);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} dev_warn.ref.ref.i32.i32($p10, .str.17, $i13, $i14);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 167523);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue == $sub.ref(0, 168555);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} ldv_assume($i5);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 176} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_q_lock_of_nvme_queue"} boogie_si_record_i32(2);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 169587);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} _raw_spin_lock_irq($p2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 170619);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 171651);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} __VERIFIER_error();
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 172683);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 173715);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_137: ref;

axiom ldv_iounmap_137 == $sub.ref(0, 174747);

procedure ldv_iounmap_137($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_iounmap_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 175779);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    return;
}



const pci_is_enabled: ref;

axiom pci_is_enabled == $sub.ref(0, 176811);

procedure pci_is_enabled($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_is_enabled($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(2536, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i2 := atomic_read($p1);
    call {:si_unique_call 182} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 177843);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 178875);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 179907);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    call {:si_unique_call 184} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 180939);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 1} true;
    call {:si_unique_call 186} __VERIFIER_error();
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const adapter_delete_sq: ref;

axiom adapter_delete_sq == $sub.ref(0, 181971);

procedure adapter_delete_sq($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation adapter_delete_sq($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "adapter_delete_sq:arg:sqid"} boogie_si_record_i16($i1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i4 := adapter_delete_queue($p0, 0, $i3);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const adapter_delete_cq: ref;

axiom adapter_delete_cq == $sub.ref(0, 183003);

procedure adapter_delete_cq($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation adapter_delete_cq($p0: ref, $i1: i16) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} {:cexpr "adapter_delete_cq:arg:cqid"} boogie_si_record_i16($i1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i4 := adapter_delete_queue($p0, 4, $i3);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const blk_mq_freeze_queue_start: ref;

axiom blk_mq_freeze_queue_start == $sub.ref(0, 184035);

procedure blk_mq_freeze_queue_start($p0: ref);
  free requires assertsPassed;



implementation blk_mq_freeze_queue_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;
}



const nvme_process_cq: ref;

axiom nvme_process_cq == $sub.ref(0, 185067);

procedure nvme_process_cq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation nvme_process_cq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $i6: i8;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i24: i16;
  var $i25: i16;
  var $i20: i16;
  var $i21: i16;
  var $i22: i16;
  var $i23: i16;
  var $p26: ref;
  var $i27: i16;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i16;
  var $i41: i16;
  var $i42: i16;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $i69: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    call {:si_unique_call 195} {:cexpr "head"} boogie_si_record_i16($i4);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i16($i6);
    call {:si_unique_call 196} {:cexpr "phase"} boogie_si_record_i16($i7);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i4);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 16));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 197} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p12, $p13, 16, $zext.i32.i64(4), 1 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i7);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i17, $i18);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i4, $i7;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i7, $i4;
    goto $bb4;

  $bb4:
    call $i24, $i25, $i22, $i23, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16 := nvme_process_cq_loop_$bb4($p0, $p1, $p2, $p8, $p12, $p14, $i24, $i25, $i22, $i23, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(156, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i23);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    call {:si_unique_call 198} {:cexpr "head"} boogie_si_record_i16($i31);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, $i35);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41, $i42 := $i31, $i22;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p47 := nvme_finish_cmd($p0, $i45, $p46);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.11, $p1);
    call {:si_unique_call 201} devirtbounce.1($p48, $p0, $p47, $p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p8);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i64($i41);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 16));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 202} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p12, $p52, 16, $zext.i32.i64(4), 1 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p14);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i42);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i55, $i56);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i41, $i42;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i22, $i23 := $i42, $i41;
    goto $bb11_dummy;

  $bb5:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i24, $i25;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i20);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, $i61);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i20);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(144, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 880)), $mul.ref(548, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p73, $mul.ref($i78, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} writel($i70, $p79);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i20);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i16.i8($i21);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, $i81);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(165, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i69 := 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb12:
    assume $i62 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i21);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i16($i65);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i63, $i67);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb14;

  $bb15:
    assume $i68 == 1;
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb17;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i22);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    call {:si_unique_call 199} {:cexpr "phase"} boogie_si_record_i16($i40);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i41, $i42 := 0, $i40;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 186099);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const nvme_finish_cmd: ref;

axiom nvme_finish_cmd == $sub.ref(0, 187131);

procedure nvme_finish_cmd($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.11, $M.0;



implementation nvme_finish_cmd($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "nvme_finish_cmd:arg:tag"} boogie_si_record_i32($i1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $p3 := get_cmd_from_tag($p0, $i1);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i1, $i6);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, special_completion);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $i2p.i64.ref($sub.i64(0, 2401263026318605552)));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p8 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p2, $p12);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p2, special_completion);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($sub.i64(0, 2401263026318605548));
    goto $bb3;
}



const writel: ref;

axiom writel == $sub.ref(0, 188163);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 207} devirtbounce.2(0, $i0, $p2);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    return;
}



const get_cmd_from_tag: ref;

axiom get_cmd_from_tag == $sub.ref(0, 189195);

procedure get_cmd_from_tag($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cmd_from_tag($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "get_cmd_from_tag:arg:tag"} boogie_si_record_i32($i1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1080)), $mul.ref(632, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p6 := blk_mq_tag_to_rq($p5, $i1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p7 := blk_mq_rq_to_pdu($p6);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const blk_mq_tag_to_rq: ref;

axiom blk_mq_tag_to_rq == $sub.ref(0, 190227);

procedure blk_mq_tag_to_rq($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_tag_to_rq($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "blk_mq_tag_to_rq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p2 := external_alloc();
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 191259);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const adapter_delete_queue: ref;

axiom adapter_delete_queue == $sub.ref(0, 192291);

procedure adapter_delete_queue($p0: ref, $i1: i8, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation adapter_delete_queue($p0: ref, $i1: i8, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 216} {:cexpr "adapter_delete_queue:arg:opcode"} boogie_si_record_i8($i1);
    call {:si_unique_call 217} {:cexpr "adapter_delete_queue:arg:id"} boogie_si_record_i16($i2);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 218} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p4, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i2);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i11 := nvme_submit_admin_cmd($p0, $p3, $0.ref);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 193323);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const nvme_submit_admin_cmd: ref;

axiom nvme_submit_admin_cmd == $sub.ref(0, 194355);

procedure nvme_submit_admin_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_submit_admin_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i3 := $M.12;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 250);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i6 := __nvme_submit_admin_cmd($p0, $p1, $p2, $i5);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const __nvme_submit_admin_cmd: ref;

axiom __nvme_submit_admin_cmd == $sub.ref(0, 195387);

procedure __nvme_submit_admin_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation __nvme_submit_admin_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i15: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "__nvme_submit_admin_cmd:arg:timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p6 := blk_mq_alloc_request($p5, 1, 208, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i8 := IS_ERR($p7);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 226} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i15 := nvme_submit_sync_cmd($p6, $p1, $p2, $i3);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 230} {:cexpr "res"} boogie_si_record_i32($i15);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} blk_mq_free_request($p6);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i12 := PTR_ERR($p11);
    call {:si_unique_call 228} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const blk_mq_alloc_request: ref;

axiom blk_mq_alloc_request == $sub.ref(0, 196419);

procedure blk_mq_alloc_request($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_alloc_request($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "blk_mq_alloc_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 233} {:cexpr "blk_mq_alloc_request:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 234} {:cexpr "blk_mq_alloc_request:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p4 := external_alloc();
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 197451);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 237} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 198483);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_submit_sync_cmd: ref;

axiom nvme_submit_sync_cmd == $sub.ref(0, 199515);

procedure nvme_submit_sync_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_submit_sync_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 242} {:cexpr "nvme_submit_sync_cmd:arg:timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p6 := blk_mq_rq_to_pdu($p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p10 := get_current();
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $sub.i32(0, 4));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(256, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i15);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} nvme_set_info($p7, $p19, sync_completion);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p20 := get_current();
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, 2);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p34 := get_current();
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.13, $p5);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 248} $i37 := devirtbounce.3(0, $p36, $i35, $p36);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.13 := $store.i64($M.13, $p5, $i37);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_159 := nvme_submit_cmd($p9, $p1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} schedule();
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p2);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i42);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const blk_mq_free_request: ref;

axiom blk_mq_free_request == $sub.ref(0, 200547);

procedure blk_mq_free_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_free_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 201579);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 258} $p3 := devirtbounce.4(0, current_task);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sync_completion: ref;

axiom sync_completion == $sub.ref(0, 202611);

procedure sync_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sync_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i5 := __le32_to_cpup($p4);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i8 := __le16_to_cpup($p7);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 1);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_160 := wake_up_process($p13);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    return;
}



const nvme_set_info: ref;

axiom nvme_set_info == $sub.ref(0, 203643);

procedure nvme_set_info($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_set_info($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p7 := blk_mq_rq_from_pdu($p6);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} blk_mq_start_request($p7);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    return;
}



const __xchg_wrong_size: ref;

axiom __xchg_wrong_size == $sub.ref(0, 204675);

procedure __xchg_wrong_size();



const nvme_submit_cmd: ref;

axiom nvme_submit_cmd == $sub.ref(0, 205707);

procedure nvme_submit_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, assertsPassed;



implementation nvme_submit_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p2);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i3 := __nvme_submit_cmd($p0, $p1);
    call {:si_unique_call 271} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} ldv_spin_unlock_irqrestore_99($p4, $u1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 206739);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98 == $sub.ref(0, 207771);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const __nvme_submit_cmd: ref;

axiom __nvme_submit_cmd == $sub.ref(0, 208803);

procedure __nvme_submit_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __nvme_submit_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i18: i16;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(158, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    call {:si_unique_call 275} {:cexpr "tail"} boogie_si_record_i16($i3);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i64($i3);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 276} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p8, $p9, 64, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i3);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 277} {:cexpr "tail"} boogie_si_record_i16($i12);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, $i16);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(144, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} writel($i19, $p22);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(158, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i18);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;
}



const ldv_spin_unlock_irqrestore_99: ref;

axiom ldv_spin_unlock_irqrestore_99 == $sub.ref(0, 209835);

procedure ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} {:cexpr "ldv_spin_unlock_irqrestore_99:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 210867);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 211899);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 212931);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_rq_from_pdu: ref;

axiom blk_mq_rq_from_pdu == $sub.ref(0, 213963);

procedure blk_mq_rq_from_pdu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_rq_from_pdu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 368), 368));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const blk_mq_start_request: ref;

axiom blk_mq_start_request == $sub.ref(0, 214995);

procedure blk_mq_start_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_start_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    return;
}



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 216027);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __le32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 217059);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 218091);

procedure __bad_percpu_size();



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 219123);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 220155);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 288} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 221187);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    return;
}



const fatal_signal_pending: ref;

axiom fatal_signal_pending == $sub.ref(0, 222219);

procedure fatal_signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fatal_signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i1 := signal_pending($p0);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i3 := __fatal_signal_pending($p0);
    call {:si_unique_call 293} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 223251);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 224283);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 297} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __fatal_signal_pending: ref;

axiom __fatal_signal_pending == $sub.ref(0, 225315);

procedure __fatal_signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __fatal_signal_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 10680)), $mul.ref(2840, 1)), $mul.ref(16, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i3 := sigismember($p2, 9);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const sigismember: ref;

axiom sigismember == $sub.ref(0, 226347);

procedure sigismember($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sigismember($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "sigismember:arg:_sig"} boogie_si_record_i32($i1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 303} {:cexpr "sig"} boogie_si_record_i64($i3);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i3);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i6, $i8);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 227379);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10680)), $mul.ref(8, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 228411);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 309} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 229443);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 311} $i2 := devirtbounce.5(0, $p1, $i0);
    call {:si_unique_call 312} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_kthread_worker: ref;

axiom __init_kthread_worker == $sub.ref(0, 230475);

procedure __init_kthread_worker($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_kthread_worker($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    return;
}



const kthread_worker_fn: ref;

axiom kthread_worker_fn == $sub.ref(0, 231507);

procedure kthread_worker_fn($p0: ref) returns ($r: i32);



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 232539);

procedure kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $p4 := external_alloc();
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



procedure kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $p4 := external_alloc();
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 233571);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    return;
}



const nvme_get_dq: ref;

axiom nvme_get_dq == $sub.ref(0, 234603);

procedure nvme_get_dq($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_get_dq($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} atomic_inc($p1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 235635);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    return;
}



const nvme_del_queue_start: ref;

axiom nvme_del_queue_start == $sub.ref(0, 236667);

procedure nvme_del_queue_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, assertsPassed;



implementation nvme_del_queue_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 168), 240));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i3 := nvme_delete_sq($p2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} nvme_del_queue_end($p2);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const queue_kthread_work: ref;

axiom queue_kthread_work == $sub.ref(0, 237699);

procedure queue_kthread_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_kthread_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 323} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nvme_wait_dq: ref;

axiom nvme_wait_dq == $sub.ref(0, 238731);

procedure nvme_wait_dq($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.19, $M.18, $M.29, $M.32, $M.3, $CurrAddr, $M.9, $M.31, $M.21, $M.11, $M.13, assertsPassed, $M.20, $M.10, $M.23, $M.22, $M.36;



implementation nvme_wait_dq($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p5 := get_current();
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    call {:si_unique_call 328} devirtbounce.6(0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p7, $p8, $p21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36 := nvme_wait_dq_loop_$bb1($p0, $p2, $p7, $p8, $p21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $p34, $i35, $i36);
    goto $bb1_last;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p2, 130);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p21 := get_current();
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.17, $p2);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 331} $i24 := devirtbounce.3(0, $p23, $i22, $p23);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p2, $i24);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i26 := atomic_read($p25);
    call {:si_unique_call 339} {:cexpr "tmp___4"} boogie_si_record_i32($i26);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i28 := $M.12;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 250);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i32 := schedule_timeout($i31);
    call {:si_unique_call 343} {:cexpr "tmp___11"} boogie_si_record_i64($i32);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p34 := get_current();
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i35 := fatal_signal_pending($p34);
    call {:si_unique_call 346} {:cexpr "tmp___13"} boogie_si_record_i32($i35);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb16:
    assume $i36 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p37 := get_current();
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p3, 0);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p51 := get_current();
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.18, $p3);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 349} $i54 := devirtbounce.3(0, $p53, $i52, $p53);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p3, $i54);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i59 := readq($p58);
    call {:si_unique_call 353} {:cexpr "tmp___10"} boogie_si_record_i64($i59);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_161 := nvme_disable_ctrl($p1, $i59);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} nvme_clear_queue($p63);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} flush_kthread_worker($p65);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} nvme_disable_queue($p1, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p66 := get_current();
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, 2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p4, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p80 := get_current();
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.19, $p4);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p80, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 364} $i83 := devirtbounce.3(0, $p82, $i81, $p82);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p4, $i83);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p7 := get_current();
    goto corral_source_split_1332;
}



const kthread_stop: ref;

axiom kthread_stop == $sub.ref(0, 239763);

procedure kthread_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kthread_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 372} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 240795);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 375} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 376} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const readq: ref;

axiom readq == $sub.ref(0, 241827);

procedure readq($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation readq($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 377} $i2 := devirtbounce.7(0, $p1);
    call {:si_unique_call 378} {:cexpr "ret"} boogie_si_record_i64($i2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nvme_disable_ctrl: ref;

axiom nvme_disable_ctrl == $sub.ref(0, 242859);

procedure nvme_disable_ctrl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_disable_ctrl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "nvme_disable_ctrl:arg:cap"} boogie_si_record_i64($i1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 49153));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 2));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} writel($i11, $p15);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i16 := nvme_wait_ready($p0, $i1, 0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 382} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const flush_kthread_worker: ref;

axiom flush_kthread_worker == $sub.ref(0, 243891);

procedure flush_kthread_worker($p0: ref);
  free requires assertsPassed;



implementation flush_kthread_worker($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    return;
}



const nvme_wait_ready: ref;

axiom nvme_wait_ready == $sub.ref(0, 244923);

procedure nvme_wait_ready($p0: ref, $i1: i64, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_wait_ready($p0: ref, $i1: i64, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "nvme_wait_ready:arg:cap"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 384} {:cexpr "nvme_wait_ready:arg:enabled"} boogie_si_record_i1($i2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 385} {:cexpr "bit"} boogie_si_record_i32($i5);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i1, 24);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 255);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 250);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i10 := $udiv.i64($i9, 2);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i10, $i11);
    call {:si_unique_call 386} {:cexpr "timeout"} boogie_si_record_i64($i12);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i17 := readl($p16);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 388} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, $i5);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p20, $i21, $i22, $i24, $i25, $i26, $p32, $p33, $p34, $i35, $i36, $i37 := nvme_wait_ready_loop_$bb4($i5, $i12, $p13, $p20, $i21, $i22, $i24, $i25, $i26, $p32, $p33, $p34, $i35, $i36, $i37);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} msleep(100);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p20 := get_current();
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i21 := fatal_signal_pending($p20);
    call {:si_unique_call 392} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, jiffies);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i12, $i24);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i26 := $slt.i64($i25, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p13);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i35 := readl($p34);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 395} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, $i5);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb13_dummy;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i3);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p31 := (if $i30 == 1 then .str.25 else .str.26);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} dev_err.ref.ref.ref($p29, .str.24, $p31);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 19);
    goto $bb8;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 4);
    goto $bb8;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nvme_delete_sq: ref;

axiom nvme_delete_sq == $sub.ref(0, 245955);

procedure nvme_delete_sq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, assertsPassed;



implementation nvme_delete_sq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i1 := adapter_async_del_queue($p0, 0, nvme_del_sq_work_handler);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const nvme_del_queue_end: ref;

axiom nvme_del_queue_end == $sub.ref(0, 246987);

procedure nvme_del_queue_end($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_del_queue_end($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(56, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} nvme_put_dq($p4);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    return;
}



const nvme_put_dq: ref;

axiom nvme_put_dq == $sub.ref(0, 248019);

procedure nvme_put_dq($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_put_dq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} atomic_dec($p1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} vslice_dummy_var_162 := wake_up_process($p7);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 249051);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} ldv_linux_usb_dev_atomic_dec($p0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_dec: ref;

axiom ldv_linux_usb_dev_atomic_dec == $sub.ref(0, 250083);

procedure ldv_linux_usb_dev_atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    return;
}



const nvme_del_sq_work_handler: ref;

axiom nvme_del_sq_work_handler == $sub.ref(0, 251115);

procedure nvme_del_sq_work_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, assertsPassed;



implementation nvme_del_sq_work_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 168), 240));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 168), 240)), $mul.ref(168, 1)), $mul.ref(52, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 402} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} nvme_del_queue_end($p2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i7 := nvme_delete_cq($p2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 404} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const adapter_async_del_queue: ref;

axiom adapter_async_del_queue == $sub.ref(0, 252147);

procedure adapter_async_del_queue($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, assertsPassed;



implementation adapter_async_del_queue($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 407} {:cexpr "adapter_async_del_queue:arg:opcode"} boogie_si_record_i8($i1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 408} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p4, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i1);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(162, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i9);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 409} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p15, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} INIT_LIST_HEAD($p18);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(168, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i25 := $M.12;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i27 := $mul.i32($i26, 250);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i28 := nvme_submit_admin_async_cmd($p23, $p3, $p24, $i27);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const nvme_submit_admin_async_cmd: ref;

axiom nvme_submit_admin_async_cmd == $sub.ref(0, 253179);

procedure nvme_submit_admin_async_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, assertsPassed;



implementation nvme_submit_admin_async_cmd($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "nvme_submit_admin_async_cmd:arg:timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p9 := blk_mq_alloc_request($p8, 1, 208, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i11 := IS_ERR($p10);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i3);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p19 := blk_mq_rq_to_pdu($p9);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p9);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} nvme_set_info($p20, $p22, async_completion);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 4));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 368)), $mul.ref(256, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i26);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i30 := nvme_submit_cmd($p6, $p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 422} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i17 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i15 := PTR_ERR($p14);
    call {:si_unique_call 418} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const async_completion: ref;

axiom async_completion == $sub.ref(0, 254211);

procedure async_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation async_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_163: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i5 := __le32_to_cpup($p4);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i8 := __le16_to_cpup($p7);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_163 := queue_kthread_work($p13, $p14);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} blk_mq_free_hctx_request($p17, $p19);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_free_hctx_request: ref;

axiom blk_mq_free_hctx_request == $sub.ref(0, 255243);

procedure blk_mq_free_hctx_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation blk_mq_free_hctx_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const nvme_delete_cq: ref;

axiom nvme_delete_cq == $sub.ref(0, 256275);

procedure nvme_delete_cq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, assertsPassed;



implementation nvme_delete_cq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i1 := adapter_async_del_queue($p0, 4, nvme_del_cq_work_handler);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 429} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const nvme_del_cq_work_handler: ref;

axiom nvme_del_cq_work_handler == $sub.ref(0, 257307);

procedure nvme_del_cq_work_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_del_cq_work_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 168), 240));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} nvme_del_queue_end($p2);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 258339);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 259371);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    return;
}



const irq_set_affinity_hint: ref;

axiom irq_set_affinity_hint == $sub.ref(0, 260403);

procedure irq_set_affinity_hint($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_affinity_hint($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 432} {:cexpr "irq_set_affinity_hint:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 433} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_free_irq_116: ref;

axiom ldv_free_irq_116 == $sub.ref(0, 261435);

procedure ldv_free_irq_116($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_116($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "ldv_free_irq_116:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} free_irq($i0, $p1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 262467);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq: ref;

axiom ldv_free_irq == $sub.ref(0, 263499);

procedure ldv_free_irq($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_free_irq($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "ldv_free_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 440} {:cexpr "ldv_free_irq:arg:ldv_6_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} ldv_dispatch_irq_deregister_6_1($i1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_irq_deregister_6_1: ref;

axiom ldv_dispatch_irq_deregister_6_1 == $sub.ref(0, 264531);

procedure ldv_dispatch_irq_deregister_6_1($i0: i32);
  free requires assertsPassed;



implementation ldv_dispatch_irq_deregister_6_1($i0: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "ldv_dispatch_irq_deregister_6_1:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i1 := ldv_undef_int();
    call {:si_unique_call 444} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 265563);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_spin_lock_140: ref;

axiom ldv_spin_lock_140 == $sub.ref(0, 266595);

procedure ldv_spin_lock_140($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_spin_lock_140($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} spin_lock($p0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const queue_flag_set: ref;

axiom queue_flag_set == $sub.ref(0, 267627);

procedure queue_flag_set($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "queue_flag_set:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} queue_lockdep_assert_held($p1);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __set_bit($i2, $p3);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_141: ref;

axiom ldv_spin_unlock_141 == $sub.ref(0, 268659);

procedure ldv_spin_unlock_141($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_spin_unlock_141($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} spin_unlock($p0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const blk_mq_cancel_requeue_work: ref;

axiom blk_mq_cancel_requeue_work == $sub.ref(0, 269691);

procedure blk_mq_cancel_requeue_work($p0: ref);
  free requires assertsPassed;



implementation blk_mq_cancel_requeue_work($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_stop_hw_queues: ref;

axiom blk_mq_stop_hw_queues == $sub.ref(0, 270723);

procedure blk_mq_stop_hw_queues($p0: ref);
  free requires assertsPassed;



implementation blk_mq_stop_hw_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue == $sub.ref(0, 271755);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue();
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i0 := $M.20;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i3 := $M.20;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_assume($i5);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 457} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_queue_lock_of_request_queue"} boogie_si_record_i32(1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 272787);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} _raw_spin_unlock($p2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 273819);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    return;
}



const queue_lockdep_assert_held: ref;

axiom queue_lockdep_assert_held == $sub.ref(0, 274851);

procedure queue_lockdep_assert_held($p0: ref);
  free requires assertsPassed;



implementation queue_lockdep_assert_held($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var vslice_dummy_var_164: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, debug_locks);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 462} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_164 := ldv__builtin_expect($i23, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} warn_slowpath_null(.str.20, 529);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i12 := lock_is_held($p11);
    call {:si_unique_call 460} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 275883);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 466} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 276915);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 277947);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue == $sub.ref(0, 278979);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue();
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i0 := $M.20;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i3 := $M.20;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} ldv_assume($i5);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 472} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_queue_lock_of_request_queue"} boogie_si_record_i32(2);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 280011);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} _raw_spin_lock($p2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 281043);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_126: ref;

axiom ldv_spin_lock_126 == $sub.ref(0, 282075);

procedure ldv_spin_lock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_spin_lock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} ldv_linux_kernel_locking_spinlock_spin_lock_dev_list_lock();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} spin_lock($p0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 283107);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __list_del_entry($p0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} INIT_LIST_HEAD($p0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 284139);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const IS_ERR_OR_NULL: ref;

axiom IS_ERR_OR_NULL == $sub.ref(0, 285171);

procedure IS_ERR_OR_NULL($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR_OR_NULL($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i3: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i64($i4, 18446744073709547520);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 479} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i3, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const ldv_spin_unlock_127: ref;

axiom ldv_spin_unlock_127 == $sub.ref(0, 286203);

procedure ldv_spin_unlock_127($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_spin_unlock_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_linux_kernel_locking_spinlock_spin_unlock_dev_list_lock();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} spin_unlock($p0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_dev_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_dev_list_lock == $sub.ref(0, 287235);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_dev_list_lock();
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_dev_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i0 := $M.21;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i3 := $M.21;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ldv_assume($i5);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 484} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_dev_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 288267);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_dev_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_dev_list_lock == $sub.ref(0, 289299);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_dev_list_lock();
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_dev_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i0 := $M.21;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i3 := $M.21;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} ldv_assume($i5);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 487} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_dev_list_lock"} boogie_si_record_i32(2);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 290331);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 291363);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 292395);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 489} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 490} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_dev_remove: ref;

axiom nvme_dev_remove == $sub.ref(0, 293427);

procedure nvme_dev_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.22, assertsPassed;



implementation nvme_dev_remove($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p37, $p38, $p39, $p40, $i41, $i42, $p10 := nvme_dev_remove_loop_$bb4($i8, $p11, $p12, $p13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $p35, $p37, $p38, $p39, $p40, $i41, $i42, $p10);
    goto $bb4_last;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1744)), $mul.ref(1680, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i30 := constant_test_bit(5, $p29);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i8);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p38;
    goto $bb15_dummy;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} blk_mq_abort_requeue_list($p33);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ldv_blk_cleanup_queue_143($p35);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_del_gendisk_142($p26);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} blk_integrity_unregister($p24);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1887;
}



const nvme_dev_remove_admin: ref;

axiom nvme_dev_remove_admin == $sub.ref(0, 294459);

procedure nvme_dev_remove_admin($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation nvme_dev_remove_admin($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i8 := constant_test_bit(5, $p7);
    call {:si_unique_call 498} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} ldv_blk_cleanup_queue_125($p11);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} blk_mq_free_tag_set($p12);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 295491);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    return;
}



const nvme_free_queues: ref;

axiom nvme_free_queues == $sub.ref(0, 296523);

procedure nvme_free_queues($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_free_queues($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} {:cexpr "nvme_free_queues:arg:lowest"} boogie_si_record_i32($i1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    call {:si_unique_call 503} {:cexpr "i"} boogie_si_record_i32($i4);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, $i1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p19, $i20, $i21, $i6 := nvme_free_queues_loop_$bb4($p0, $i1, $p7, $p8, $i9, $p10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p19, $i20, $i21, $i6);
    goto $bb4_last;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 8));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i6);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 8));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} nvme_free_queue($p11);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i6, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, $i1);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;
}



const nvme_release_prp_pools: ref;

axiom nvme_release_prp_pools == $sub.ref(0, 297555);

procedure nvme_release_prp_pools($p0: ref);
  free requires assertsPassed;



implementation nvme_release_prp_pools($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} dma_pool_destroy($p2);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(520, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} dma_pool_destroy($p4);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    return;
}



const nvme_free_dev: ref;

axiom nvme_free_dev == $sub.ref(0, 298587);

procedure nvme_free_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed, $M.22;



implementation nvme_free_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 592), 880));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(504, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} pci_dev_put($p4);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(600, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} put_device($p6);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} nvme_free_namespaces($p2);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} nvme_release_instance($p2);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(32, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} blk_mq_free_tag_set($p7);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(24, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} blk_put_queue($p9);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(16, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} kfree($p12);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 592), 880)), $mul.ref(560, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} kfree($p15);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} kfree($p16);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 299619);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 518} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 300651);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_165: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 520} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 522} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} vslice_dummy_var_165 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 526} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 527} devirtbounce.9($p2, $p0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} warn_slowpath_null(.str.15, 71);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 301683);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i2 := ldv_linux_usb_dev_atomic_sub_and_test($i0, $p1);
    call {:si_unique_call 530} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_sub_and_test: ref;

axiom ldv_linux_usb_dev_atomic_sub_and_test == $sub.ref(0, 302715);

procedure ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} {:cexpr "ldv_linux_usb_dev_atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i0);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const pci_dev_put: ref;

axiom pci_dev_put == $sub.ref(0, 303747);

procedure pci_dev_put($p0: ref);
  free requires assertsPassed;



implementation pci_dev_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 304779);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    return;
}



const nvme_free_namespaces: ref;

axiom nvme_free_namespaces == $sub.ref(0, 305811);

procedure nvme_free_namespaces($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed, $M.22;



implementation nvme_free_namespaces($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p7, $p3;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p24, $p25, $p27, $i28, $i29, $p14, $p15 := nvme_free_namespaces_loop_$bb4($i12, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p24, $p25, $p27, $i28, $i29, $p14, $p15);
    goto $bb4_last;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} list_del($p16);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_put_disk_150($p21);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p15);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} kfree($p22);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i12);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p25, $p14;
    goto $bb6_dummy;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;
}



const nvme_release_instance: ref;

axiom nvme_release_instance == $sub.ref(0, 306843);

procedure nvme_release_instance($p0: ref);
  free requires assertsPassed;
  modifies $M.21, assertsPassed;



implementation nvme_release_instance($p0: ref)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ida_remove(nvme_instance_ida, $i2);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const blk_mq_free_tag_set: ref;

axiom blk_mq_free_tag_set == $sub.ref(0, 307875);

procedure blk_mq_free_tag_set($p0: ref);
  free requires assertsPassed;



implementation blk_mq_free_tag_set($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    return;
}



const blk_put_queue: ref;

axiom blk_put_queue == $sub.ref(0, 308907);

procedure blk_put_queue($p0: ref);
  free requires assertsPassed;



implementation blk_put_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 309939);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} free_($p0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 310971);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 541} $free($p0);
    return;
}



const ida_remove: ref;

axiom ida_remove == $sub.ref(0, 312003);

procedure ida_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation ida_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} {:cexpr "ida_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 313035);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    return;
}



const ldv_put_disk_150: ref;

axiom ldv_put_disk_150 == $sub.ref(0, 314067);

procedure ldv_put_disk_150($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_put_disk_150($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_linux_block_genhd_put_disk($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} put_disk($p0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_put_disk: ref;

axiom ldv_linux_block_genhd_put_disk == $sub.ref(0, 315099);

procedure ldv_linux_block_genhd_put_disk($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_block_genhd_put_disk($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} ldv_assert_linux_block_genhd__free_before_allocation($i5);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 546} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 316131);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_block_genhd__free_before_allocation: ref;

axiom ldv_assert_linux_block_genhd__free_before_allocation == $sub.ref(0, 317163);

procedure ldv_assert_linux_block_genhd__free_before_allocation($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__free_before_allocation($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "ldv_assert_linux_block_genhd__free_before_allocation:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} __VERIFIER_error();
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_pool_destroy: ref;

axiom dma_pool_destroy == $sub.ref(0, 318195);

procedure dma_pool_destroy($p0: ref);
  free requires assertsPassed;



implementation dma_pool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    return;
}



const nvme_free_queue: ref;

axiom nvme_free_queue == $sub.ref(0, 319227);

procedure nvme_free_queue($p0: ref);
  free requires assertsPassed;



implementation nvme_free_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 16);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} dma_free_attrs($p2, $i6, $p9, $i11, $0.ref);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i64($i15);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 64);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} dma_free_attrs($p13, $i17, $p20, $i22, $0.ref);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} kfree($p23);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 320259);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_166: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 553} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p5 := get_dma_ops($p0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i6 := arch_local_save_flags();
    call {:si_unique_call 556} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 558} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 559} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 561} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_166 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 565} devirtbounce.10($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} warn_slowpath_null(.str.9, 166);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 321291);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 567} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 322323);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 569} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 571} $i7 := devirtbounce.12(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 572} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 570} devirtbounce.11(0, .str.10, 804, 12);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 323355);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 324387);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 575} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    return;
}



const ldv_blk_cleanup_queue_125: ref;

axiom ldv_blk_cleanup_queue_125 == $sub.ref(0, 325419);

procedure ldv_blk_cleanup_queue_125($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_blk_cleanup_queue_125($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv_linux_block_queue_blk_cleanup_queue();
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} blk_cleanup_queue($p0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_blk_cleanup_queue: ref;

axiom ldv_linux_block_queue_blk_cleanup_queue == $sub.ref(0, 326451);

procedure ldv_linux_block_queue_blk_cleanup_queue();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_block_queue_blk_cleanup_queue()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ldv_assert_linux_block_queue__use_before_allocation($i2);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 579} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const blk_cleanup_queue: ref;

axiom blk_cleanup_queue == $sub.ref(0, 327483);

procedure blk_cleanup_queue($p0: ref);
  free requires assertsPassed;



implementation blk_cleanup_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_block_queue__use_before_allocation: ref;

axiom ldv_assert_linux_block_queue__use_before_allocation == $sub.ref(0, 328515);

procedure ldv_assert_linux_block_queue__use_before_allocation($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__use_before_allocation($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "ldv_assert_linux_block_queue__use_before_allocation:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} __VERIFIER_error();
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const blk_integrity_unregister: ref;

axiom blk_integrity_unregister == $sub.ref(0, 329547);

procedure blk_integrity_unregister($p0: ref);
  free requires assertsPassed;



implementation blk_integrity_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_gendisk_142: ref;

axiom ldv_del_gendisk_142 == $sub.ref(0, 330579);

procedure ldv_del_gendisk_142($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_del_gendisk_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} ldv_linux_block_genhd_del_gendisk();
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} del_gendisk($p0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const blk_mq_abort_requeue_list: ref;

axiom blk_mq_abort_requeue_list == $sub.ref(0, 331611);

procedure blk_mq_abort_requeue_list($p0: ref);
  free requires assertsPassed;



implementation blk_mq_abort_requeue_list($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    return;
}



const ldv_blk_cleanup_queue_143: ref;

axiom ldv_blk_cleanup_queue_143 == $sub.ref(0, 332643);

procedure ldv_blk_cleanup_queue_143($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_blk_cleanup_queue_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} ldv_linux_block_queue_blk_cleanup_queue();
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} blk_cleanup_queue($p0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_del_gendisk: ref;

axiom ldv_linux_block_genhd_del_gendisk == $sub.ref(0, 333675);

procedure ldv_linux_block_genhd_del_gendisk();
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_block_genhd_del_gendisk()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_assert_linux_block_genhd__delete_before_add($i2);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 587} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const del_gendisk: ref;

axiom del_gendisk == $sub.ref(0, 334707);

procedure del_gendisk($p0: ref);
  free requires assertsPassed;



implementation del_gendisk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_block_genhd__delete_before_add: ref;

axiom ldv_assert_linux_block_genhd__delete_before_add == $sub.ref(0, 335739);

procedure ldv_assert_linux_block_genhd__delete_before_add($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__delete_before_add($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "ldv_assert_linux_block_genhd__delete_before_add:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} __VERIFIER_error();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 336771);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    return;
}



const dev_to_node: ref;

axiom dev_to_node == $sub.ref(0, 337803);

procedure dev_to_node($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_to_node($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1144, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const set_dev_node: ref;

axiom set_dev_node == $sub.ref(0, 338835);

procedure set_dev_node($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_dev_node($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "set_dev_node:arg:node"} boogie_si_record_i32($i1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1144, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc_node: ref;

axiom kzalloc_node == $sub.ref(0, 339867);

procedure kzalloc_node($i0: i64, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation kzalloc_node($i0: i64, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "kzalloc_node:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 592} {:cexpr "kzalloc_node:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 593} {:cexpr "kzalloc_node:arg:node"} boogie_si_record_i32($i2);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} ldv_check_alloc_flags($i1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p3 := ldv_zalloc_unknown_size();
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_after_alloc($p3);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 340899);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 598} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nvme_reset_failed_dev: ref;

axiom nvme_reset_failed_dev == $sub.ref(0, 341931);

procedure nvme_reset_failed_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.22, $M.36;



implementation nvme_reset_failed_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 616), 880));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} nvme_dev_reset($p2);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 342963);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 343995);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    return;
}



const nvme_reset_workfn: ref;

axiom nvme_reset_workfn == $sub.ref(0, 345027);

procedure nvme_reset_workfn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation nvme_reset_workfn($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 616), 880)), $mul.ref(608, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    call {:si_unique_call 602} devirtbounce.13($p4, $p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const pci_dev_get: ref;

axiom pci_dev_get == $sub.ref(0, 346059);

procedure pci_dev_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_dev_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p1 := external_alloc();
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nvme_set_instance: ref;

axiom nvme_set_instance == $sub.ref(0, 347091);

procedure nvme_set_instance($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr, assertsPassed;



implementation nvme_set_instance($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i2 := ida_pre_get(nvme_instance_ida, 208);
    call {:si_unique_call 606} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5, $i7, $i8, $i9 := nvme_set_instance_loop_$bb4($p1, $i4, $i5, $i7, $i8, $i9);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i7 := ida_get_new(nvme_instance_ida, $p1);
    call {:si_unique_call 611} {:cexpr "error"} boogie_si_record_i32($i7);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 11));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.24, $p1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb12:
    assume $i10 == 1;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb8;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i4 := ida_pre_get(nvme_instance_ida, 208);
    call {:si_unique_call 608} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb7_dummy;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb8;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const nvme_setup_prp_pools: ref;

axiom nvme_setup_prp_pools == $sub.ref(0, 348123);

procedure nvme_setup_prp_pools($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_setup_prp_pools($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p4 := dma_pool_create(.str.45, $p3, 4096, 4096, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p11 := dma_pool_create(.str.46, $p3, 256, 256, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(520, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(520, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} dma_pool_destroy($p18);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 349155);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} atomic_set($p1, 1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 350187);

procedure device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p5 := external_alloc();
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 351219);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p1 := external_alloc();
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nvme_async_probe: ref;

axiom nvme_async_probe == $sub.ref(0, 352251);

procedure nvme_async_probe($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation nvme_async_probe($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_167: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 696), 880));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i3 := nvme_dev_start($p2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 621} {:cexpr "result"} boogie_si_record_i32($i3);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 696), 880)), $mul.ref(536, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} nvme_set_irq_hints($p2);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 696), 880)), $mul.ref(616, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i12 := work_busy($p11);
    call {:si_unique_call 623} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 696), 880)), $mul.ref(608, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, nvme_reset_failed_dev);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p15 := $M.25;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 696), 880)), $mul.ref(616, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_167 := queue_work($p15, $p16);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i8 := nvme_dev_add($p2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 625} {:cexpr "result"} boogie_si_record_i32($i8);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb7;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 353283);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i2 := queue_work($p1, $p0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 629} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 354315);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 355347);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nvme_dev_start: ref;

axiom nvme_dev_start == $sub.ref(0, 356379);

procedure nvme_dev_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation nvme_dev_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i55: i32;
  var $i7: i32;
  var $i4: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i2 := nvme_dev_map($p0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 637} {:cexpr "result"} boogie_si_record_i32($i2);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i5 := nvme_configure_admin_queue($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 639} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i8 := list_empty(dev_list);
    call {:si_unique_call 643} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} list_add($p17, dev_list);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i16);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __might_sleep(.str, 2849, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p27 := $M.3;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p42 := $M.3;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i44 := IS_ERR_OR_NULL($p43);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 655} {:cexpr "tmp___6"} boogie_si_record_i8($i45);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} nvme_init_queue($p58, 0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i59 := nvme_alloc_admin_tags($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 670} {:cexpr "result"} boogie_si_record_i32($i59);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i61 := nvme_setup_io_queues($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 672} {:cexpr "result"} boogie_si_record_i32($i61);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} nvme_set_irq_hints($p0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i4 := $i61;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb48:
    assume $i62 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} nvme_dev_remove_admin($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i55 := $i61;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} nvme_disable_queue($p0, 0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} nvme_dev_list_remove($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i7 := $i55;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} nvme_dev_unmap($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i60 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i55 := $i59;
    goto $bb43;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i46 == 1;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p47 := $M.3;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 4);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb43;

  $bb40:
    assume $i49 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p50 := $M.3;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i52 := PTR_ERR($p51);
    call {:si_unique_call 664} {:cexpr "tmp___5"} boogie_si_record_i64($i52);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    call {:si_unique_call 665} {:cexpr "result"} boogie_si_record_i32($i53);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb42;

  $bb24:
    assume $i29 == 1;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} INIT_LIST_HEAD($p30);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i32 := prepare_to_wait_event(nvme_kthread_wait, $p1, 130);
    call {:si_unique_call 658} {:cexpr "tmp___4"} boogie_si_record_i64($i32);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p33 := $M.3;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i35 == 1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i36 := $i32;
    goto $bb29;

  $bb29:
    call $i36, $i37, $i38, $p39, $i40, $i41 := nvme_dev_start_loop_$bb29($p1, $i36, $i37, $i38, $p39, $i40, $i41);
    goto $bb29_last;

  $bb32:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} schedule();
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i38 := prepare_to_wait_event(nvme_kthread_wait, $p1, 130);
    call {:si_unique_call 662} {:cexpr "tmp___4"} boogie_si_record_i64($i38);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p39 := $M.3;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb36;

  $bb36:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i38;
    goto $bb36_dummy;

  $bb30:
    assume $i41 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} finish_wait(nvme_kthread_wait, $p1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume $i37 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb27;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p19 := kthread_create_on_node.ref.ref.i32.ref(nvme_kthread, $0.ref, $sub.i32(0, 1), .str.5);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i21 := IS_ERR($p20);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 650} {:cexpr "tmp___2"} boogie_si_record_i8($i22);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $M.3 := $p19;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __wake_up(nvme_kthread_wait, 3, 0, $0.ref);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_168 := wake_up_process($p19);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb19;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p10 := $M.3;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i12 := IS_ERR_OR_NULL($p11);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 645} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb14;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.3 := $0.ref;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb13;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb7;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb36_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;
}



const nvme_dev_add: ref;

axiom nvme_dev_add == $sub.ref(0, 357411);

procedure nvme_dev_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.23, $M.29, $M.13, $M.31, $M.22, assertsPassed, $M.9;



implementation nvme_dev_add($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i64;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $p130: ref;
  var $i131: i32;
  var $p133: ref;
  var $p135: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i1;
  var $i144: i32;
  var $i145: i1;
  var $i143: i32;
  var $i17: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i8 := readq($p7);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i8, 48);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 15);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 12);
    call {:si_unique_call 678} {:cexpr "shift"} boogie_si_record_i32($i12);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p14 := dma_alloc_attrs($p13, 4096, $p1, 208, $0.ref);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.26, $p1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i19 := nvme_identify($p0, 0, 1, $i18);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 681} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p14);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(516, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i28 := __le32_to_cpup($p27);
    call {:si_unique_call 685} {:cexpr "nn"} boogie_si_record_i32($i28);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(520, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i30 := __le16_to_cpup($p29);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(258, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i16($i33);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(870, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i37);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(525, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(873, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(259, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    call {:si_unique_call 687} {:cexpr "_min1"} boogie_si_record_i32($i45);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 8);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i47 := 8;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i48);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(788, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(4, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 688} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p51, $p53, 20, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(808, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(24, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 689} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p55, $p57, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(848, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(64, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 690} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p59, $p61, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(77, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p3);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref(15, 4));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 156467334);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.26, $p1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} dma_free_attrs($p104, 4096, $p14, $i105, $0.ref);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, nvme_mq_ops);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32($i109, 1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i110);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i113 := $M.27;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i115 := $mul.i32($i114, 250);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(28, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i115);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i121 := dev_to_node($p120);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i121);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(544, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    call {:si_unique_call 695} {:cexpr "__min1"} boogie_si_record_i32($i125);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i125, 10240);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i126 == 1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i127 := 10240;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i127, $sub.i32(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(12, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i128);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i131 := nvme_cmd_size($p0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(20, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i131);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(40, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $p0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i140 := blk_mq_alloc_tag_set($p139);
    call {:si_unique_call 698} {:cexpr "tmp___0"} boogie_si_record_i32($i140);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i142 := $ule.i32(1, $i28);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb32:
    assume $i142 == 1;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i143 := 1;
    goto $bb35;

  $bb35:
    call $i144, $i145, $i143 := nvme_dev_add_loop_$bb35($p0, $i28, $i144, $i145, $i143);
    goto $bb35_last;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} nvme_alloc_ns($p0, $i143);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i143, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32($i144);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i145 := $ule.i32($i144, $i28);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i145 == 1);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i143 := $i144;
    goto $bb37_dummy;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i141 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb26:
    assume $i126 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i127 := $i125;
    goto $bb28;

  $bb14:
    assume $i76 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(3072, 1)), $mul.ref(3, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb16;

  $bb17:
    assume $i81 == 1;
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(3072, 1)), $mul.ref(3, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, $i12);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i87 := $shl.i32(1, $i86);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(860, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(860, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i12, $sub.i32(0, 9));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i92 := $lshr.i32($i90, $i91);
    call {:si_unique_call 691} {:cexpr "max_hw_sectors"} boogie_si_record_i32($i92);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i95 == 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $i92);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i95 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    call {:si_unique_call 692} {:cexpr "_min2___0"} boogie_si_record_i32($i97);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i98 := $ult.i32($i92, $i97);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i98 == 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i99 := $i97;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i98 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i99 := $i92;
    goto $bb23;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(77, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, $i12);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, $sub.i32(0, 9));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32(1, $i70);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} dev_err.ref.ref.i32($p21, .str.47, $i19);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.26, $p1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} dma_free_attrs($p24, 4096, $p14, $i25, $0.ref);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;
}



const nvme_set_irq_hints: ref;

axiom nvme_set_irq_hints == $sub.ref(0, 358443);

procedure nvme_set_irq_hints($p0: ref);
  free requires assertsPassed;



implementation nvme_set_irq_hints($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i4: i32;
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p20, $i21, $p22, $p23, $p24, $p25, $i27, $i28, $i29, $i4, vslice_dummy_var_169 := nvme_set_irq_hints_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $i17, $i18, $p20, $i21, $p22, $p23, $p24, $p25, $i27, $i28, $i29, $i4, vslice_dummy_var_169);
    goto $bb4_last;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 8));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i18 := $sext.i16.i64($i17);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i18, 8)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1080)), $mul.ref(544, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_169 := irq_set_affinity_hint($i21, $p25);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i4, 1);
    call {:si_unique_call 701} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p1);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i27, $i28);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;
}



const work_busy: ref;

axiom work_busy == $sub.ref(0, 359475);

procedure work_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation work_busy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 704} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 360507);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 706} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p5 := get_dma_ops($p0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 708} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 710} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 712} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 713} $p20 := devirtbounce.14($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const nvme_identify: ref;

axiom nvme_identify == $sub.ref(0, 361539);

procedure nvme_identify($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_identify($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 716} {:cexpr "nvme_identify:arg:nsid"} boogie_si_record_i32($i1);
    call {:si_unique_call 717} {:cexpr "nvme_identify:arg:cns"} boogie_si_record_i32($i2);
    call {:si_unique_call 718} {:cexpr "nvme_identify:arg:dma_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 719} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p5, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 6);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i1);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i3);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i2);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i18 := nvme_submit_admin_cmd($p0, $p4, $0.ref);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 721} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const nvme_cmd_size: ref;

axiom nvme_cmd_size == $sub.ref(0, 362571);

procedure nvme_cmd_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_cmd_size($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i1 := $add.i32(32, 72);
    call {:si_unique_call 722} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 2);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i5 := nvme_npages($i4, $p0);
    call {:si_unique_call 724} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 8);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i1, $i8);
    call {:si_unique_call 725} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 80);
    call {:si_unique_call 726} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const blk_mq_alloc_tag_set: ref;

axiom blk_mq_alloc_tag_set == $sub.ref(0, 363603);

procedure blk_mq_alloc_tag_set($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_mq_alloc_tag_set($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_alloc_ns: ref;

axiom nvme_alloc_ns == $sub.ref(0, 364635);

procedure nvme_alloc_ns($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.29, $M.31, $M.22, assertsPassed, $CurrAddr, $M.13, $M.9;



implementation nvme_alloc_ns($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "nvme_alloc_ns:arg:nsid"} boogie_si_record_i32($i1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i5 := dev_to_node($p4);
    call {:si_unique_call 731} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p6 := kzalloc_node(72, 208, $i5);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p11 := blk_mq_init_queue($p10);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i16 := IS_ERR($p15);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 735} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} queue_flag_set_unlocked(8, $p20);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} queue_flag_set_unlocked(12, $p22);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} queue_flag_set_unlocked(22, $p24);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 3704)), $mul.ref(1984, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p6);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p30 := alloc_disk_node(0, $i5);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p30);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 9);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} list_add_tail($p36, $p37);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32(1, $i41);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} blk_queue_logical_block_size($p39, $i45);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(860, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(873, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i68 := $M.28;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(0, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(4, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(1656, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, nvme_fops);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p6);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(1664, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p75);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(600, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(1688, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p78);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(1680, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 64);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p30, $mul.ref(0, 1744)), $mul.ref(12, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_170 := sprintf.ref.ref.i32.i32($p82, .str.49, $i84, $i1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} set_capacity($p30, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_171 := nvme_revalidate_disk($p87);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} ldv_add_disk_132($p90);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i93 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_172 := revalidate_disk($p95);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} blk_queue_flush($p67, 12288);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(860, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i60 := $lshr.i32($i59, 9);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} blk_queue_chunk_sectors($p57, $i60);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(856, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} blk_queue_max_hw_sectors($p50, $i52);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_blk_cleanup_queue_133($p98);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p7);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} kfree($p99);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const blk_mq_init_queue: ref;

axiom blk_mq_init_queue == $sub.ref(0, 365667);

procedure blk_mq_init_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation blk_mq_init_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p1 := external_alloc();
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const queue_flag_set_unlocked: ref;

axiom queue_flag_set_unlocked == $sub.ref(0, 366699);

procedure queue_flag_set_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_set_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} {:cexpr "queue_flag_set_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __set_bit($i2, $p3);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    return;
}



const alloc_disk_node: ref;

axiom alloc_disk_node == $sub.ref(0, 367731);

procedure alloc_disk_node($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk_node($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "alloc_disk_node:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 756} {:cexpr "alloc_disk_node:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p2 := external_alloc();
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 368763);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} __list_add($p0, $p3, $p1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_logical_block_size: ref;

axiom blk_queue_logical_block_size == $sub.ref(0, 369795);

procedure blk_queue_logical_block_size($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation blk_queue_logical_block_size($p0: ref, $i1: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} {:cexpr "blk_queue_logical_block_size:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_max_hw_sectors: ref;

axiom blk_queue_max_hw_sectors == $sub.ref(0, 370827);

procedure blk_queue_max_hw_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_max_hw_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} {:cexpr "blk_queue_max_hw_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_chunk_sectors: ref;

axiom blk_queue_chunk_sectors == $sub.ref(0, 371859);

procedure blk_queue_chunk_sectors($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_chunk_sectors($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} {:cexpr "blk_queue_chunk_sectors:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    return;
}



const blk_queue_flush: ref;

axiom blk_queue_flush == $sub.ref(0, 372891);

procedure blk_queue_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation blk_queue_flush($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "blk_queue_flush:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 373923);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const set_capacity: ref;

axiom set_capacity == $sub.ref(0, 374955);

procedure set_capacity($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation set_capacity($p0: ref, $i1: i64)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} {:cexpr "set_capacity:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    return;
}



const nvme_revalidate_disk: ref;

axiom nvme_revalidate_disk == $sub.ref(0, 375987);

procedure nvme_revalidate_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.31, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_revalidate_disk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i64;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i16;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p10 := dma_alloc_attrs($p9, 4096, $p1, 208, $0.ref);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.30, $p1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i20 := nvme_identify($p6, $i18, 0, $i19);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 768} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 771} {:cexpr "old_ms"} boogie_si_record_i32($i29);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.29, $p30);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 15);
    call {:si_unique_call 772} {:cexpr "lbaf"} boogie_si_record_i32($i33);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i34, 4)), $mul.ref(2, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.29, $p37);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i33);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i41, 4)), $mul.ref(0, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.29, $p44);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32(1, $i53);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    call {:si_unique_call 773} {:cexpr "bs"} boogie_si_record_i16($i55);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 8);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i58 == 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i63);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i55);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} blk_queue_logical_block_size($p90, $i92);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(8, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.29, $p109);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i111 == 1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i120 := __le64_to_cpup($p119);
    call {:si_unique_call 783} {:cexpr "tmp___2"} boogie_si_record_i64($i120);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i122, $sub.i32(0, 9));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i125 := $shl.i64($i120, $i124);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} set_capacity($p0, $i125);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(868, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 4);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p11);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.30, $p1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} dma_free_attrs($p133, 4096, $p134, $i135, $0.ref);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb51:
    assume $i130 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} nvme_config_discard($p4);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i114 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} set_capacity($p0, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb43;

  $bb32:
    assume $i95 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb34;

  $bb35:
    assume $i99 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1680, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 16);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb34;

  $bb37:
    assume $i103 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.29, $p104);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 16);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb34;

  $bb39:
    assume $i108 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} nvme_init_integrity($p4);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb14:
    assume $i67 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, $i63);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i70 == 1);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, $i29);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i73 == 1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(1664, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i76 := queue_logical_block_size($p75);
    call {:si_unique_call 776} {:cexpr "tmp___1"} boogie_si_record_i16($i76);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i55);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i76);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i77, $i78);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i82 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.29, $p83);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 16);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb27;

  $bb28:
    assume $i87 == 1;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} blk_integrity_unregister($p0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} blk_integrity_unregister($p0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} blk_integrity_unregister($p0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb17;

  $bb11:
    assume $i58 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref(0, 4096)), $mul.ref(29, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.29, $p59);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 7);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb13;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 9);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} dev_warn.ref.ref.i32($p24, .str.13, $i26);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p11);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.29;
    call {:si_unique_call 770} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p27, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.29 := cmdloc_dummy_var_38;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} dev_warn.ref.ref.ref($p16, .str.11, .str.12);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_add_disk_132: ref;

axiom ldv_add_disk_132 == $sub.ref(0, 377019);

procedure ldv_add_disk_132($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_add_disk_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_linux_block_genhd_add_disk();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} add_disk($p0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const revalidate_disk: ref;

axiom revalidate_disk == $sub.ref(0, 378051);

procedure revalidate_disk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation revalidate_disk($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 1} true;
    call {:si_unique_call 789} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 790} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_blk_cleanup_queue_133: ref;

axiom ldv_blk_cleanup_queue_133 == $sub.ref(0, 379083);

procedure ldv_blk_cleanup_queue_133($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_blk_cleanup_queue_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_linux_block_queue_blk_cleanup_queue();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} blk_cleanup_queue($p0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_add_disk: ref;

axiom ldv_linux_block_genhd_add_disk == $sub.ref(0, 380115);

procedure ldv_linux_block_genhd_add_disk();
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_block_genhd_add_disk()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_assert_linux_block_genhd__use_before_allocation($i2);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 794} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(2);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const add_disk: ref;

axiom add_disk == $sub.ref(0, 381147);

procedure add_disk($p0: ref);
  free requires assertsPassed;



implementation add_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_block_genhd__use_before_allocation: ref;

axiom ldv_assert_linux_block_genhd__use_before_allocation == $sub.ref(0, 382179);

procedure ldv_assert_linux_block_genhd__use_before_allocation($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__use_before_allocation($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "ldv_assert_linux_block_genhd__use_before_allocation:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} __VERIFIER_error();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const queue_logical_block_size: ref;

axiom queue_logical_block_size == $sub.ref(0, 383211);

procedure queue_logical_block_size($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation queue_logical_block_size($p0: ref) returns ($r: i16)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 512;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(64, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(64, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 797} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;
}



const nvme_init_integrity: ref;

axiom nvme_init_integrity == $sub.ref(0, 384243);

procedure nvme_init_integrity($p0: ref);
  free requires assertsPassed;
  modifies $M.31, $M.0, $CurrAddr;



implementation nvme_init_integrity($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p1 := $alloc($mul.ref(328, $zext.i32.i64(1)));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.31;
    cmdloc_dummy_var_46 := $M.31;
    call {:si_unique_call 801} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p13, nvme_meta_noop, 328, $zext.i32.i64(8), 0 == 1);
    $M.31 := cmdloc_dummy_var_47;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(18, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.31 := $store.i16($M.31, $p17, $i16);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_173 := blk_integrity_register($p19, $p1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} blk_queue_max_integrity_segments($p22, 1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.31;
    cmdloc_dummy_var_43 := $M.31;
    call {:si_unique_call 800} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p12, t10_pi_type1_crc, 328, $zext.i32.i64(8), 0 == 1);
    $M.31 := cmdloc_dummy_var_44;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.31;
    cmdloc_dummy_var_40 := $M.31;
    call {:si_unique_call 799} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p11, t10_pi_type3_crc, 328, $zext.i32.i64(8), 0 == 1);
    $M.31 := cmdloc_dummy_var_41;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const __le64_to_cpup: ref;

axiom __le64_to_cpup == $sub.ref(0, 385275);

procedure __le64_to_cpup($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation __le64_to_cpup($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.29, $p0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_config_discard: ref;

axiom nvme_config_discard == $sub.ref(0, 386307);

procedure nvme_config_discard($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_config_discard($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i3 := queue_logical_block_size($p2);
    call {:si_unique_call 805} {:cexpr "tmp"} boogie_si_record_i16($i3);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    call {:si_unique_call 806} {:cexpr "logical_block_size"} boogie_si_record_i32($i4);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(73, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(60, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i4);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(56, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i4);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(48, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $sub.i32(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} queue_flag_set_unlocked(14, $p22);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    return;
}



const blk_integrity_register: ref;

axiom blk_integrity_register == $sub.ref(0, 387339);

procedure blk_integrity_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_integrity_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 808} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_queue_max_integrity_segments: ref;

axiom blk_queue_max_integrity_segments == $sub.ref(0, 388371);

procedure blk_queue_max_integrity_segments($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation blk_queue_max_integrity_segments($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} {:cexpr "blk_queue_max_integrity_segments:arg:segs"} boogie_si_record_i32($i1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(68, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i2);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 389403);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    return;
}



const nvme_npages: ref;

axiom nvme_npages == $sub.ref(0, 390435);

procedure nvme_npages($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_npages($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} {:cexpr "nvme_npages:arg:size"} boogie_si_record_i32($i0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, $i3);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, $i6);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i32($i8, $i10);
    call {:si_unique_call 812} {:cexpr "nprps"} boogie_si_record_i32($i11);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 8);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 4087);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i64($i14, 4088);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 391467);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1152, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1152, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 392499);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 817} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 816} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 393531);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 819} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 394563);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1160, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 821} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 822} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const nvme_dev_map: ref;

axiom nvme_dev_map == $sub.ref(0, 395595);

procedure nvme_dev_map($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.10, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.23, $M.22, $M.36;



implementation nvme_dev_map($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i40: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i22: i32;
  var $i13: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i3 := pci_enable_device_mem($p2);
    call {:si_unique_call 824} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} pci_set_master($p2);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i11 := pci_select_bars($p2, 512);
    call {:si_unique_call 827} {:cexpr "bars"} boogie_si_record_i32($i11);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i14 := pci_request_selected_regions($p2, $i11, .str.5);
    call {:si_unique_call 830} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i17 := dma_set_mask_and_coherent($p16, $sub.i64(0, 1));
    call {:si_unique_call 832} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p27 := ioremap($i26, 8192);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p27);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i38 := readl($p37);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 838} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $sub.i32(0, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i52 := readq($p51);
    call {:si_unique_call 843} {:cexpr "tmp___5"} boogie_si_record_i64($i52);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 65535);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    call {:si_unique_call 844} {:cexpr "__min1"} boogie_si_record_i32($i55);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 1024);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i56 == 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i57 := 1024;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(544, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i64($i52, 32);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i64.i32($i59);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 15);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32(1, $i61);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(548, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(4096, 4));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(496, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb32:
    assume $i56 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    goto $bb34;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i46 := pci_enable_msix($p2, $p45, 1);
    call {:si_unique_call 841} {:cexpr "result"} boogie_si_record_i32($i46);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i47 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i40 := $i46;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_iounmap_136($p71);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $0.ref);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i22 := $i40;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} pci_release_regions($p2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} pci_disable_device($p2);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 19);
    goto $bb24;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb16;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i20 := dma_set_mask_and_coherent($p19, 4294967295);
    call {:si_unique_call 834} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb16;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const nvme_configure_admin_queue: ref;

axiom nvme_configure_admin_queue == $sub.ref(0, 396627);

procedure nvme_configure_admin_queue($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_configure_admin_queue($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i79: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i5 := readq($p4);
    call {:si_unique_call 846} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i5, 48);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 12);
    call {:si_unique_call 847} {:cexpr "dev_page_min"} boogie_si_record_i32($i9);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i64($i5, 52);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 12);
    call {:si_unique_call 848} {:cexpr "dev_page_max"} boogie_si_record_i32($i13);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(12, $i9);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32(12, $i13);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i27 := 12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i28 := nvme_disable_ctrl($p0, $i5);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 852} {:cexpr "result"} boogie_si_record_i32($i28);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $p38 := $p32;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $sub.i32(0, 1));
    call {:si_unique_call 854} {:cexpr "aqa"} boogie_si_record_i32($i42);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 16);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    call {:si_unique_call 855} {:cexpr "aqa"} boogie_si_record_i32($i44);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i45 := $shl.i32(1, $i27);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i27, 12);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 7);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i49, $i51);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 4587520);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 56)), $mul.ref(36, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} writel($i44, $p64);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} writeq($i66, $p70);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} writeq($i72, $p76);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i77 := nvme_enable_ctrl($p0, $i5);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    call {:si_unique_call 860} {:cexpr "result"} boogie_si_record_i32($i77);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p38, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i83 := queue_request_irq($p0, $p38, $p82);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 863} {:cexpr "result"} boogie_si_record_i32($i83);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i20 := $i83;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb21:
    assume $i84 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i79 := $i83;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} nvme_free_queues($p0, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i20 := $i79;
    goto $bb3;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i79 := $i77;
    goto $bb19;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p35 := nvme_alloc_queue($p0, 0, 64);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $p35;
    goto $bb16;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i20 := $i28;
    goto $bb3;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i13);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, 12);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} _dev_info.ref.ref.i32.i32($p24, .str.30, $i25, $i26);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i27 := $i13;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i9);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32(1, 12);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} dev_err.ref.ref.i32.i32($p17, .str.29, $i18, $i19);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 397659);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} __list_add($p0, $p1, $p3);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    return;
}



const nvme_kthread: ref;

axiom nvme_kthread == $sub.ref(0, 398691);

procedure nvme_kthread($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.21, $M.29, $M.3, $M.9, $M.11, $CurrAddr, assertsPassed, $M.31, $M.20, $M.13, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_kthread($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i57: i32;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p29: ref;
  var $p30: ref;
  var $i91: i64;
  var $i93: i1;
  var $i94: i8;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var vslice_dummy_var_174: i1;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p2, $p3, $p16, $i17, $p18, $i19, $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, $p85, $p86, $p88, $i89, $i90, $p29, $p30, $i91, $i93, $i94, $i95, $i96, $i97, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176 := nvme_kthread_loop_$bb1($p1, $p2, $p3, $p16, $i17, $p18, $i19, $p20, $p21, $p23, $p24, $p26, $i27, $i28, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, $p85, $p86, $p88, $i89, $i90, $p29, $p30, $i91, $i93, $i94, $i95, $i96, $i97, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176);
    goto $bb1_last;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i8($i93);
    call {:si_unique_call 867} {:cexpr "tmp___9"} boogie_si_record_i8($i94);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb54:
    assume $i97 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p2 := get_current();
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p1, 1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p16 := get_current();
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.32, $p1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 870} $i19 := devirtbounce.3(0, $p18, $i17, $p18);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p1, $i19);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, dev_list);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $p2i.ref.i64(dev_list));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i91 := round_jiffies_relative(250);
    call {:si_unique_call 896} {:cexpr "tmp___8"} boogie_si_record_i64($i91);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_176 := schedule_timeout($i91);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840_dummy;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p29, $p30 := $p20, $p24;
    goto $bb13;

  $bb13:
    call $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, $p85, $p86, $p88, $i89, $i90, $p29, $p30, vslice_dummy_var_174, vslice_dummy_var_175 := nvme_kthread_loop_$bb13($p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $p50, $p51, $p52, $p54, $i55, $i56, $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, $p85, $p86, $p88, $i89, $i90, $p29, $p30, vslice_dummy_var_174, vslice_dummy_var_175);
    goto $bb13_last;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i35 := readl($p34);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 880} {:cexpr "tmp___6"} boogie_si_record_i32($i35);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i56 := $ult.i32(0, $i55);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p30, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, $p2i.ref.i64(dev_list));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i90 == 1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb48:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $p29, $p30 := $p30, $p86;
    goto $bb48_dummy;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb25:
    call $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, vslice_dummy_var_175 := nvme_kthread_loop_$bb25($p54, $p58, $p59, $i60, $p61, $p62, $i63, $i64, $p65, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p80, $i81, $i82, $i83, $i57, $p29, vslice_dummy_var_175);
    goto $bb25_last;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i57);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 8));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_spin_lock_irq_105($p65);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_175 := nvme_process_cq($p62);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i57, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_spin_unlock_irq_106($p80);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i57, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p54);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i81, $i82);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i83 == 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb45:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i81;
    goto $bb45_dummy;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i67 == 1;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    call $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79 := nvme_kthread_loop_$bb34($i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $p75, $p76, $i77, $i78, $i79, $p29);
    goto $bb34_last;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i79 == 1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb42:
    assume $i79 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i68 := nvme_submit_async_admin_req($p29);
    call {:si_unique_call 892} {:cexpr "tmp___7"} boogie_si_record_i32($i68);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 1);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i74);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i67 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb40_dummy;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i39 := work_busy($p38);
    call {:si_unique_call 882} {:cexpr "tmp___4"} boogie_si_record_i32($i39);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} list_del_init($p41);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i46 := readl($p45);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 885} {:cexpr "tmp___5"} boogie_si_record_i32($i46);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} dev_warn.ref.ref.i32($p49, .str.33, $i46);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, nvme_reset_failed_dev);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p51 := $M.25;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_174 := queue_work($p51, $p52);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i95 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb53;

  $bb40_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3807;

  $bb45_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  $bb48_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3840_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i93 := kthread_should_stop();
    goto corral_source_split_3697;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 399723);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 899} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 400755);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 901} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 401787);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 903} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 904} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 402819);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    return;
}



const nvme_init_queue: ref;

axiom nvme_init_queue == $sub.ref(0, 403851);

procedure nvme_init_queue($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $M.9, assertsPassed;



implementation nvme_init_queue($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "nvme_init_queue:arg:qid"} boogie_si_record_i16($i1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_spin_lock_irq_105($p4);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(158, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(496, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(548, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i10, $i12);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref($i15, 4));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(144, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i64($i22);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i24 := $mul.i64($i23, 16);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 907} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p20, 0, $i24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_spin_unlock_irq_106($p29);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const nvme_alloc_admin_tags: ref;

axiom nvme_alloc_admin_tags == $sub.ref(0, 404883);

procedure nvme_alloc_admin_tags($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, assertsPassed;



implementation nvme_alloc_admin_tags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} blk_mq_unfreeze_queue($p50);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, nvme_mq_admin_ops);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(12, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 63);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 250);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(28, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i13);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i19 := dev_to_node($p18);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i19);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i22 := nvme_cmd_size($p0);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(20, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(40, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i29 := blk_mq_alloc_tag_set($p28);
    call {:si_unique_call 912} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p33 := blk_mq_init_queue($p32);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p33);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i38 := IS_ERR($p37);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 916} {:cexpr "tmp___0"} boogie_si_record_i8($i39);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i44 := blk_get_queue($p43);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 919} {:cexpr "tmp___1"} boogie_si_record_i8($i45);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} nvme_dev_remove_admin($p0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 19);
    goto $bb5;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb12;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} blk_mq_free_tag_set($p41);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb5;

  $bb3:
    assume $i30 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb5;
}



const nvme_setup_io_queues: ref;

axiom nvme_setup_io_queues == $sub.ref(0, 405915);

procedure nvme_setup_io_queues($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, assertsPassed, $M.9, $M.13, $M.36, $M.11, $M.20;



implementation nvme_setup_io_queues($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i33: i32;
  var $i31: i32;
  var $i32: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i63: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i81: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i82: i32;
  var $i80: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i7 := cpumask_weight($p6);
    call {:si_unique_call 922} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i8 := set_queue_count($p0, $i7);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 924} {:cexpr "result"} boogie_si_record_i32($i8);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, $i7);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i13 := db_bar_size($p0, $i12);
    call {:si_unique_call 926} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 927} {:cexpr "size"} boogie_si_record_i32($i14);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 8192);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i53 := $i12;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p3);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} ldv_free_irq_135($i57, $p58);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32(0, $i53);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i74 := pci_enable_msix_range($p5, $p73, 1, $i53);
    call {:si_unique_call 939} {:cexpr "vecs"} boogie_si_record_i32($i74);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i74;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(540, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i97 := queue_request_irq($p0, $p3, $p96);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    call {:si_unique_call 944} {:cexpr "result"} boogie_si_record_i32($i97);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i93, 1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} nvme_free_queues($p0, $i99);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} nvme_create_io_queues($p0);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i98 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} nvme_free_queues($p0, 1);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i10 := $i97;
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i75 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i53, 32);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i76 == 1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i77 := 32;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i78 := pci_enable_msi_range($p5, 1, $i77);
    call {:si_unique_call 941} {:cexpr "vecs"} boogie_si_record_i32($i78);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32(0, $i78);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i93 := $i80;
    goto $bb49;

  $bb41:
    assume $i81 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb44;

  $bb44:
    call $p83, $i84, $i85, $p86, $p87, $i88, $p90, $i91, $i92, $i82 := nvme_setup_io_queues_loop_$bb44($p0, $p5, $i78, $p83, $i84, $i85, $p86, $p87, $i88, $p90, $i91, $i92, $i82);
    goto $bb44_last;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i82, $i84);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i82);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p87, $mul.ref($i88, 8)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i85);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i82, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32($i91);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, $i78);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i92 == 1);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb46:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i91;
    goto $bb46_dummy;

  $bb38:
    assume $i79 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i80 := 1;
    goto $bb40;

  $bb35:
    assume $i76 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i77 := $i53;
    goto $bb37;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb28;

  $bb28:
    call $i64, $p65, $p66, $i67, $p69, $i70, $i71, $i63 := nvme_setup_io_queues_loop_$bb28($p0, $i53, $i64, $p65, $p66, $i67, $p69, $i70, $i71, $i63);
    goto $bb28_last;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i63);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 8)), $mul.ref(4, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, $i64);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i63, 1);
    call {:si_unique_call 937} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, $i53);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i63 := $i70;
    goto $bb30_dummy;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} pci_disable_msix($p5);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ldv_iounmap_134($p18);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i14);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p24 := ioremap($i22, $i23);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i31 := $i12;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i32 := $i12;
    goto $bb13;

  $bb13:
    call $i33, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p42, $i43, $i44 := nvme_setup_io_queues_loop_$bb13($p0, $p21, $p26, $p27, $i33, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p42, $i43, $i44);
    goto $bb13_last;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i32, 1);
    call {:si_unique_call 930} {:cexpr "nr_io_queues"} boogie_si_record_i32($i34);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i36 := db_bar_size($p0, $i34);
    call {:si_unique_call 932} {:cexpr "tmp___2"} boogie_si_record_i64($i36);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 933} {:cexpr "size"} boogie_si_record_i32($i37);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p21);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i37);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p40 := ioremap($i38, $i39);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p40);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p27);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    assume true;
    goto $bb14, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb20_dummy;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i31 := $i33;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(4096, 4));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(496, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p48);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(496, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(144, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p51);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i53 := $i31;
    goto $bb21;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb11;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb46_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  $bb20_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;
}



const set_queue_count: ref;

axiom set_queue_count == $sub.ref(0, 406947);

procedure set_queue_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation set_queue_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 949} {:cexpr "set_queue_count:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 16);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i3, $i5);
    call {:si_unique_call 950} {:cexpr "q_count"} boogie_si_record_i32($i6);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i7 := nvme_set_features($p0, 7, $i6, 0, $p2);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    call {:si_unique_call 952} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i7, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.33, $p2);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 65535);
    call {:si_unique_call 954} {:cexpr "_min1"} boogie_si_record_i32($i15);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.33, $p2);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i16, 16);
    call {:si_unique_call 955} {:cexpr "_min2"} boogie_si_record_i32($i17);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i15, $i17);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} dev_err.ref.ref.i32($p13, .str.42, $i7);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const db_bar_size: ref;

axiom db_bar_size == $sub.ref(0, 407979);

procedure db_bar_size($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation db_bar_size($p0: ref, $i1: i32) returns ($r: i64)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} {:cexpr "db_bar_size:arg:nr_io_queues"} boogie_si_record_i32($i1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(548, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i2, $i4);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 512);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 8);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ldv_iounmap_134: ref;

axiom ldv_iounmap_134 == $sub.ref(0, 409011);

procedure ldv_iounmap_134($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_iounmap_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 410043);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 959} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_free_irq_135: ref;

axiom ldv_free_irq_135 == $sub.ref(0, 411075);

procedure ldv_free_irq_135($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_135($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "ldv_free_irq_135:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} free_irq($i0, $p1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 412107);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 964} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 965} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 966} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 967} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 413139);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 969} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const queue_request_irq: ref;

axiom queue_request_irq == $sub.ref(0, 414171);

procedure queue_request_irq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation queue_request_irq($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i64($i19);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref($i20, 8)), $mul.ref(0, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i25 := ldv_request_irq_122($i23, nvme_irq, 128, $p2, $p24);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 975} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i9 := $sext.i16.i64($i8);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref($i9, 8)), $mul.ref(0, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i14 := ldv_request_threaded_irq_121($i12, nvme_irq_check, nvme_irq, 128, $p2, $p13);
    call {:si_unique_call 973} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const nvme_create_io_queues: ref;

axiom nvme_create_io_queues == $sub.ref(0, 415203);

procedure nvme_create_io_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $CurrAddr, $M.13, assertsPassed, $M.36, $M.11, $M.20;



implementation nvme_create_io_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i6: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 976} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(540, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i2, $i4);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 978} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i16, $i19);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i21 := $i16;
    goto $bb16;

  $bb16:
    call $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i21 := nvme_create_io_queues_loop_$bb16($p0, $p17, $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i21);
    goto $bb16_last;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i21);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 8));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i27 := nvme_create_queue($p26, $i21);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i21, 1);
    call {:si_unique_call 982} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p17);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i29, $i31);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i29;
    goto $bb22_dummy;

  $bb18:
    assume $i28 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb4;

  $bb4:
    call $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i14, $i6 := nvme_create_io_queues_loop_$bb4($p0, $p3, $p7, $i8, $p9, $i10, $i11, $i12, $i13, $i14, $i6);
    goto $bb4_last;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(544, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p9 := nvme_alloc_queue($p0, $i6, $i8);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i6, 1);
    call {:si_unique_call 979} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p3);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i12, $i13);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;
}



const nvme_alloc_queue: ref;

axiom nvme_alloc_queue == $sub.ref(0, 416235);

procedure nvme_alloc_queue($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_alloc_queue($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $p56: ref;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $p11: ref;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 984} {:cexpr "nvme_alloc_queue:arg:qid"} boogie_si_record_i32($i1);
    call {:si_unique_call 985} {:cexpr "nvme_alloc_queue:arg:depth"} boogie_si_record_i32($i2);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p7 := kzalloc(240, 208);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i12, 16);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $p15 := dma_zalloc_coherent($p6, $i13, $p14, 208);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p15);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i2);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i23 := $mul.i64($i22, 64);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p25 := dma_alloc_attrs($p6, $i23, $p24, 208, $0.ref);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p25);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p6);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_177 := snprintf.ref.i64.ref.i32.i32($p35, 24, .str.31, $i37, $i1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_178 := spinlock_check($p39);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __raw_spin_lock_init($p43, .str.32, $p3);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(496, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(548, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i50 := $mul.i32($i1, $i49);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, 2);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p47, $mul.ref($i52, 4));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(144, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(162, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i57);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p64, $mul.ref($i65, 8));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p7);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i2);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i68 := $mul.i64($i67, 16);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} dma_free_attrs($p6, $i68, $p71, $i73, $0.ref);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p8);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} kfree($p74);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const nvme_create_queue: ref;

axiom nvme_create_queue == $sub.ref(0, 417267);

procedure nvme_create_queue($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $CurrAddr, $M.13, assertsPassed, $M.36, $M.11, $M.20;



implementation nvme_create_queue($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i20: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i14: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} {:cexpr "nvme_create_queue:arg:qid"} boogie_si_record_i32($i1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 65535);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i7);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i12 := adapter_alloc_cq($p3, $i11, $p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 996} {:cexpr "result"} boogie_si_record_i32($i12);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i1);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i18 := adapter_alloc_sq($p3, $i17, $p0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    call {:si_unique_call 998} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(16, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i23 := queue_request_irq($p3, $p0, $p22);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    call {:si_unique_call 1001} {:cexpr "result"} boogie_si_record_i32($i23);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i1);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} nvme_init_queue($p0, $i27);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_180 := adapter_delete_sq($p3, $i30);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_179 := adapter_delete_cq($p3, $i34);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb3;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb7;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const adapter_alloc_cq: ref;

axiom adapter_alloc_cq == $sub.ref(0, 418299);

procedure adapter_alloc_cq($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation adapter_alloc_cq($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 1005} {:cexpr "adapter_alloc_cq:arg:qid"} boogie_si_record_i16($i1);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 1006} cmdloc_dummy_var_51 := $memset.i8(cmdloc_dummy_var_50, $p4, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 5);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(136, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i9);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i20);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16(3);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i24);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(46, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i29);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i33 := nvme_submit_admin_cmd($p0, $p3, $0.ref);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 1008} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const adapter_alloc_sq: ref;

axiom adapter_alloc_sq == $sub.ref(0, 419331);

procedure adapter_alloc_sq($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation adapter_alloc_sq($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 1010} {:cexpr "adapter_alloc_sq:arg:qid"} boogie_si_record_i16($i1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 1011} cmdloc_dummy_var_53 := $memset.i8(cmdloc_dummy_var_52, $p4, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i9);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i20);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16(5);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i24);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 64)), $mul.ref(46, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i31 := nvme_submit_admin_cmd($p0, $p3, $0.ref);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1013} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 420363);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1015} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 421395);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1018} {:cexpr "dma_zalloc_coherent:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_check_alloc_flags($i3);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p4 := ldv_malloc_unknown_size();
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 422427);

procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 423459);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 424491);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 425523);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 426555);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i0 := ldv_undef_int();
    call {:si_unique_call 1025} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p2 := external_allocated_data();
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ldv_assume($i5);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i6 := ldv_is_err($p2);
    call {:si_unique_call 1029} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ldv_assume($i8);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 427587);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p0 := external_alloc();
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 428619);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 429651);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 430683);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i1 := $M.35;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 431715);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} __VERIFIER_error();
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 432747);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 433779);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1041} __VERIFIER_error();
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 434811);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1043} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_check_alloc_flags($i1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p2 := ldv_zalloc($i0);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ldv_after_alloc($p2);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 435843);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 436875);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 437907);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 1050} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i2 := ldv_undef_int();
    call {:si_unique_call 1052} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p4 := calloc($i0, $i1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} ldv_assume($i7);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i8 := ldv_is_err($p4);
    call {:si_unique_call 1056} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_assume($i10);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const nvme_irq_check: ref;

axiom nvme_irq_check == $sub.ref(0, 438939);

procedure nvme_irq_check($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_irq_check($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1059} {:cexpr "nvme_irq_check:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(120, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i64($i7);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 16));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 1060} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p10, $p11, 16, $zext.i32.i64(4), 1 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(164, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i15, $i18);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;
}



const nvme_irq: ref;

axiom nvme_irq == $sub.ref(0, 439971);

procedure nvme_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation nvme_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} {:cexpr "nvme_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_spin_lock_107($p3);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_181 := nvme_process_cq($p2);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(165, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1064} {:cexpr "result"} boogie_si_record_i32($i9);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(165, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} ldv_spin_unlock_108($p11);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_request_threaded_irq_121: ref;

axiom ldv_request_threaded_irq_121 == $sub.ref(0, 441003);

procedure ldv_request_threaded_irq_121($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_request_threaded_irq_121($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} {:cexpr "ldv_request_threaded_irq_121:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1067} {:cexpr "ldv_request_threaded_irq_121:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i6 := request_threaded_irq($i0, $p1, $p2, $i3, $p4, $p5);
    call {:si_unique_call 1069} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i7 := ldv_request_threaded_irq($i6, $i0, $p1, $p2, $i3, $p4, $p5);
    call {:si_unique_call 1071} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_request_irq_122: ref;

axiom ldv_request_irq_122 == $sub.ref(0, 442035);

procedure ldv_request_irq_122($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_request_irq_122($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} {:cexpr "ldv_request_irq_122:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1073} {:cexpr "ldv_request_irq_122:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1075} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i6 := ldv_request_irq($i5, $i0, $p1, $i2, $p3, $p4);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    call {:si_unique_call 1077} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 443067);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1079} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i5 := ldv_request_threaded_irq_97($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_request_irq: ref;

axiom ldv_request_irq == $sub.ref(0, 444099);

procedure ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} {:cexpr "ldv_request_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1083} {:cexpr "ldv_request_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1084} {:cexpr "ldv_request_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i6 := ldv_undef_int();
    call {:si_unique_call 1086} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i0, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} ldv_assume($i11);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_assume($i9);
    call {:si_unique_call 1088} {:cexpr "ldv_request_irq:arg:ldv_8_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_dispatch_irq_register_8_2($i1, $p2, $0.ref, $p5);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_irq_register_8_2: ref;

axiom ldv_dispatch_irq_register_8_2 == $sub.ref(0, 445131);

procedure ldv_dispatch_irq_register_8_2($i0: i32, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_dispatch_irq_register_8_2($i0: i32, $p1: ref, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} {:cexpr "ldv_dispatch_irq_register_8_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i4 := ldv_undef_int();
    call {:si_unique_call 1093} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p13 := ldv_xmalloc(40);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p2);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p3);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p14);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_interrupt_interrupt_instance_2($p19);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p6 := ldv_xmalloc(40);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p3);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} ldv_interrupt_interrupt_instance_1($p12);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 446163);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p1 := malloc($i0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ldv_assume($i4);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1102} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_assume($i7);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_interrupt_interrupt_instance_1: ref;

axiom ldv_interrupt_interrupt_instance_1 == $sub.ref(0, 447195);

procedure ldv_interrupt_interrupt_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.36, $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_interrupt_interrupt_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u2, $u3, $u4, $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ldv_switch_to_interrupt_context();
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i17 := ldv_interrupt_instance_handler_1_5($p15, $i13, $p14);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 1108} {:cexpr "ldv_1_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_switch_to_process_context();
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i18 := ldv_undef_int();
    call {:si_unique_call 1111} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i17, 2);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} ldv_assume($i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_assume($i21);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_interrupt_instance_thread_1_3($p16, $i13, $p14);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1104} {:cexpr "ldv_1_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} ldv_free($p12);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_interrupt_interrupt_instance_2: ref;

axiom ldv_interrupt_interrupt_instance_2 == $sub.ref(0, 448227);

procedure ldv_interrupt_interrupt_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr, $M.9, $M.11, $M.20, assertsPassed;



implementation ldv_interrupt_interrupt_instance_2($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u2, $u3, $u4, $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} ldv_switch_to_interrupt_context();
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i17 := ldv_interrupt_instance_handler_2_5($p15, $i13, $p14);
    call {:si_unique_call 1119} {:cexpr "ldv_2_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_switch_to_process_context();
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i18 := ldv_undef_int();
    call {:si_unique_call 1122} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i17, 2);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_assume($i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_assume($i21);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ldv_interrupt_instance_thread_2_3($p16, $i13, $p14);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1115} {:cexpr "ldv_2_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_free($p12);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 449259);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} free_($p0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    return;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 450291);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1127} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_handler_2_5: ref;

axiom ldv_interrupt_instance_handler_2_5 == $sub.ref(0, 451323);

procedure ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_interrupt_instance_handler_2_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} {:cexpr "ldv_interrupt_instance_handler_2_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i3 := nvme_irq_check($i1, $p2);
    call {:si_unique_call 1130} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 452355);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1131} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_thread_2_3: ref;

axiom ldv_interrupt_instance_thread_2_3 == $sub.ref(0, 453387);

procedure ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_interrupt_instance_thread_2_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} {:cexpr "ldv_interrupt_instance_thread_2_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1133} vslice_dummy_var_182 := devirtbounce.15($p0, $i1, $p2);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_interrupt_instance_handler_1_5: ref;

axiom ldv_interrupt_instance_handler_1_5 == $sub.ref(0, 454419);

procedure ldv_interrupt_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_interrupt_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} {:cexpr "ldv_interrupt_instance_handler_1_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i3 := nvme_irq($i1, $p2);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 1136} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const ldv_interrupt_instance_thread_1_3: ref;

axiom ldv_interrupt_instance_thread_1_3 == $sub.ref(0, 455451);

procedure ldv_interrupt_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation ldv_interrupt_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} {:cexpr "ldv_interrupt_instance_thread_1_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1138} vslice_dummy_var_183 := devirtbounce.15($p0, $i1, $p2);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 456483);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1139} $r := $malloc($i0);
    return;
}



const ldv_request_threaded_irq_97: ref;

axiom ldv_request_threaded_irq_97 == $sub.ref(0, 457515);

procedure ldv_request_threaded_irq_97($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_request_threaded_irq_97($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} {:cexpr "ldv_request_threaded_irq_97:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1141} {:cexpr "ldv_request_threaded_irq_97:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i6 := request_threaded_irq($i0, $p1, $p2, $i3, $p4, $p5);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i7 := ldv_request_threaded_irq($i6, $i0, $p1, $p2, $i3, $p4, $p5);
    call {:si_unique_call 1145} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 458547);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1146} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1147} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1149} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_request_threaded_irq: ref;

axiom ldv_request_threaded_irq == $sub.ref(0, 459579);

procedure ldv_request_threaded_irq($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_request_threaded_irq($i0: i32, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} {:cexpr "ldv_request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1151} {:cexpr "ldv_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1152} {:cexpr "ldv_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i7 := ldv_undef_int();
    call {:si_unique_call 1154} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i0, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_assume($i12);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_assume($i10);
    call {:si_unique_call 1156} {:cexpr "ldv_request_threaded_irq:arg:ldv_10_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_lock_107: ref;

axiom ldv_spin_lock_107 == $sub.ref(0, 460611);

procedure ldv_spin_lock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_lock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} ldv_linux_kernel_locking_spinlock_spin_lock_q_lock_of_nvme_queue();
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} spin_lock($p0);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_108: ref;

axiom ldv_spin_unlock_108 == $sub.ref(0, 461643);

procedure ldv_spin_unlock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_linux_kernel_locking_spinlock_spin_unlock_q_lock_of_nvme_queue();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} spin_unlock($p0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 462675);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p0 := ldv_undef_ptr();
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    call {:si_unique_call 1163} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 463707);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const nvme_set_features: ref;

axiom nvme_set_features == $sub.ref(0, 464739);

procedure nvme_set_features($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_set_features($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 1167} {:cexpr "nvme_set_features:arg:fid"} boogie_si_record_i32($i1);
    call {:si_unique_call 1168} {:cexpr "nvme_set_features:arg:dword11"} boogie_si_record_i32($i2);
    call {:si_unique_call 1169} {:cexpr "nvme_set_features:arg:dma_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1170} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p6, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 9);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i3);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i19 := nvme_submit_admin_cmd($p0, $p5, $p4);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 1172} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const blk_get_queue: ref;

axiom blk_get_queue == $sub.ref(0, 465771);

procedure blk_get_queue($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation blk_get_queue($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1173} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1174} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_mq_unfreeze_queue: ref;

axiom blk_mq_unfreeze_queue == $sub.ref(0, 466803);

procedure blk_mq_unfreeze_queue($p0: ref);
  free requires assertsPassed;



implementation blk_mq_unfreeze_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    return;
}



const nvme_submit_async_admin_req: ref;

axiom nvme_submit_async_admin_req == $sub.ref(0, 467835);

procedure nvme_submit_async_admin_req($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_submit_async_admin_req($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i15: i32;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p1 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p7 := blk_mq_alloc_request($p6, 1, 32, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i9 := IS_ERR($p8);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1178} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i17, 17179869184);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p20 := blk_mq_rq_to_pdu($p7);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p7);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} nvme_set_info($p21, $p22, async_req_completion);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 1183} cmdloc_dummy_var_60 := $memset.i8(cmdloc_dummy_var_59, $p23, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 12);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(256, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(2, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i29);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i33 := __nvme_submit_cmd($p4, $p1);
    call {:si_unique_call 1185} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i15 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i13 := PTR_ERR($p12);
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const round_jiffies_relative: ref;

axiom round_jiffies_relative == $sub.ref(0, 468867);

procedure round_jiffies_relative($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies_relative($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1186} {:cexpr "round_jiffies_relative:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1188} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kthread_should_stop: ref;

axiom kthread_should_stop == $sub.ref(0, 469899);

procedure kthread_should_stop() returns ($r: i1);
  free requires assertsPassed;



implementation kthread_should_stop() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1189} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1190} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const async_req_completion: ref;

axiom async_req_completion == $sub.ref(0, 470931);

procedure async_req_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation async_req_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i5 := __le32_to_cpup($p4);
    call {:si_unique_call 1192} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i7 := __le16_to_cpup($p6);
    call {:si_unique_call 1194} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i8, 1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 1195} {:cexpr "status"} boogie_si_record_i16($i10);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i10);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 7);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i10);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} blk_mq_free_hctx_request($p30, $p3);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} dev_warn.ref.ref.i32($p28, .str.36, $i5);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i21);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 471963);

procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    return;
}



const writeq: ref;

axiom writeq == $sub.ref(0, 472995);

procedure writeq($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation writeq($i0: i64, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "writeq:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1199} devirtbounce.16(0, $i0, $p2);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    return;
}



const nvme_enable_ctrl: ref;

axiom nvme_enable_ctrl == $sub.ref(0, 474027);

procedure nvme_enable_ctrl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_enable_ctrl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} {:cexpr "nvme_enable_ctrl:arg:cap"} boogie_si_record_i64($i1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 49153));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 1);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(552, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} writel($i11, $p15);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i16 := nvme_wait_ready($p0, $i1, 1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const pci_enable_device_mem: ref;

axiom pci_enable_device_mem == $sub.ref(0, 475059);

procedure pci_enable_device_mem($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device_mem($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1204} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 476091);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    return;
}



const pci_select_bars: ref;

axiom pci_select_bars == $sub.ref(0, 477123);

procedure pci_select_bars($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pci_select_bars($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1206} {:cexpr "pci_select_bars:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1207} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1208} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_request_selected_regions: ref;

axiom pci_request_selected_regions == $sub.ref(0, 478155);

procedure pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} {:cexpr "pci_request_selected_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_set_mask_and_coherent: ref;

axiom dma_set_mask_and_coherent == $sub.ref(0, 479187);

procedure dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} {:cexpr "dma_set_mask_and_coherent:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i2 := dma_set_mask($p0, $i1);
    call {:si_unique_call 1214} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_184 := dma_set_coherent_mask($p0, $i1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_enable_msix: ref;

axiom pci_enable_msix == $sub.ref(0, 480219);

procedure pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1216} {:cexpr "pci_enable_msix:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1217} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_iounmap_136: ref;

axiom ldv_iounmap_136 == $sub.ref(0, 481251);

procedure ldv_iounmap_136($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_iounmap_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 482283);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1220} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1221} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 483315);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 1225} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1160, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 484347);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1226} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1227} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_pool_create: ref;

axiom dma_pool_create == $sub.ref(0, 485379);

procedure dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} {:cexpr "dma_pool_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1230} {:cexpr "dma_pool_create:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1231} {:cexpr "dma_pool_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p5 := external_alloc();
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ida_pre_get: ref;

axiom ida_pre_get == $sub.ref(0, 486411);

procedure ida_pre_get($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ida_pre_get($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1233} {:cexpr "ida_pre_get:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1234} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ida_get_new: ref;

axiom ida_get_new == $sub.ref(0, 487443);

procedure ida_get_new($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ida_get_new($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i2 := ida_get_new_above($p0, 0, $p1);
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ida_get_new_above: ref;

axiom ida_get_new_above == $sub.ref(0, 488475);

procedure ida_get_new_above($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ida_get_new_above($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1238} {:cexpr "ida_get_new_above:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1239} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nvme_dev_reset: ref;

axiom nvme_dev_reset == $sub.ref(0, 489507);

procedure nvme_dev_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.22, $M.36;



implementation nvme_dev_reset($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} nvme_dev_shutdown($p0);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i1 := nvme_dev_resume($p0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    call {:si_unique_call 1243} {:cexpr "tmp___3"} boogie_si_record_i32($i1);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} dev_warn.ref.ref($p5, .str.34);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} kref_get($p6);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p10 := kthread_create_on_node.ref.ref.i32.ref.i32(nvme_remove_dead_ctrl, $p7, $sub.i32(0, 1), .str.22, $i9);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i12 := IS_ERR($p11);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1248} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p10);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i19 := IS_ERR($p18);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1251} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} dev_err.ref.ref($p24, .str.35);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_186 := kref_put($p25, nvme_free_dev);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_185 := wake_up_process($p10);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const nvme_dev_resume: ref;

axiom nvme_dev_resume == $sub.ref(0, 490539);

procedure nvme_dev_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation nvme_dev_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i3: i32;
  var vslice_dummy_var_187: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i1 := nvme_dev_start($p0);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    call {:si_unique_call 1255} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(536, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 1);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} nvme_unfreeze_queues($p0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} nvme_set_irq_hints($p0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, nvme_remove_disks);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p8 := $M.25;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_187 := queue_work($p8, $p9);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 491571);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_188: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 1262} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1263} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1265} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} vslice_dummy_var_188 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1266} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1268} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1271} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} warn_slowpath_null(.str.15, 47);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nvme_remove_dead_ctrl: ref;

axiom nvme_remove_dead_ctrl == $sub.ref(0, 492603);

procedure nvme_remove_dead_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation nvme_remove_dead_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p4 := pci_get_drvdata($p3);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_189 := kref_put($p7, nvme_free_dev);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} pci_stop_and_remove_bus_device_locked($p3);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_stop_and_remove_bus_device_locked: ref;

axiom pci_stop_and_remove_bus_device_locked == $sub.ref(0, 493635);

procedure pci_stop_and_remove_bus_device_locked($p0: ref);
  free requires assertsPassed;



implementation pci_stop_and_remove_bus_device_locked($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 494667);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
    call {:si_unique_call 1278} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_add_return: ref;

axiom ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 495699);

procedure ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const nvme_remove_disks: ref;

axiom nvme_remove_disks == $sub.ref(0, 496731);

procedure nvme_remove_disks($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.22, assertsPassed;



implementation nvme_remove_disks($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 616), 880));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} nvme_free_queues($p2, 1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} nvme_dev_remove($p2);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const nvme_unfreeze_queues: ref;

axiom nvme_unfreeze_queues == $sub.ref(0, 497763);

procedure nvme_unfreeze_queues($p0: ref);
  free requires assertsPassed;



implementation nvme_unfreeze_queues($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $i24, $i25, $p10 := nvme_unfreeze_queues_loop_$bb4($i8, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $i24, $i25, $p10);
    goto $bb4_last;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} queue_flag_clear_unlocked(2, $p12);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} blk_mq_unfreeze_queue($p14);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} blk_mq_start_stopped_hw_queues($p16, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} blk_mq_kick_requeue_list($p18);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i8);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5202;
}



const queue_flag_clear_unlocked: ref;

axiom queue_flag_clear_unlocked == $sub.ref(0, 498795);

procedure queue_flag_clear_unlocked($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation queue_flag_clear_unlocked($i0: i32, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} {:cexpr "queue_flag_clear_unlocked:arg:flag"} boogie_si_record_i32($i0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __clear_bit($i2, $p3);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_start_stopped_hw_queues: ref;

axiom blk_mq_start_stopped_hw_queues == $sub.ref(0, 499827);

procedure blk_mq_start_stopped_hw_queues($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation blk_mq_start_stopped_hw_queues($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} {:cexpr "blk_mq_start_stopped_hw_queues:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    return;
}



const blk_mq_kick_requeue_list: ref;

axiom blk_mq_kick_requeue_list == $sub.ref(0, 500859);

procedure blk_mq_kick_requeue_list($p0: ref);
  free requires assertsPassed;



implementation blk_mq_kick_requeue_list($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 501891);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1290} devirtbounce.8(0, $p1, $i0, $p1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    return;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 502923);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 1293} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 503955);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1294} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1295} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1296} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_zalloc_unknown_size: ref;

axiom ldv_zalloc_unknown_size == $sub.ref(0, 504987);

procedure ldv_zalloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_zalloc_unknown_size() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p0 := ldv_calloc_unknown_size();
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_calloc_unknown_size: ref;

axiom ldv_calloc_unknown_size == $sub.ref(0, 506019);

procedure ldv_calloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_calloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i0 := ldv_undef_int();
    call {:si_unique_call 1299} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p2 := external_allocated_data();
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 1301} cmdloc_dummy_var_62 := $memset.i8(cmdloc_dummy_var_61, $p2, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} ldv_assume($i5);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i6 := ldv_is_err($p2);
    call {:si_unique_call 1304} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} ldv_assume($i8);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const nvme_reset_notify: ref;

axiom nvme_reset_notify == $sub.ref(0, 507051);

procedure nvme_reset_notify($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation nvme_reset_notify($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1306} {:cexpr "nvme_reset_notify:arg:prepare"} boogie_si_record_i1($i1);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p3 := pci_get_drvdata($p0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} vslice_dummy_var_190 := nvme_dev_resume($p4);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} nvme_dev_shutdown($p4);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const nvme_suspend: ref;

axiom nvme_suspend == $sub.ref(0, 508083);

procedure nvme_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation nvme_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} nvme_dev_shutdown($p4);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const nvme_resume: ref;

axiom nvme_resume == $sub.ref(0, 509115);

procedure nvme_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation nvme_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_191: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 152), 2976));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p3 := pci_get_drvdata($p2);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i5 := nvme_dev_resume($p4);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i8 := work_busy($p7);
    call {:si_unique_call 1316} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, nvme_reset_failed_dev);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p11 := $M.25;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_191 := queue_work($p11, $p12);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const nvme_dev_ioctl: ref;

axiom nvme_dev_ioctl == $sub.ref(0, 510147);

procedure nvme_dev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_dev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} {:cexpr "nvme_dev_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1319} {:cexpr "nvme_dev_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, $sub.i32(0, 1069003199));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, $sub.i32(0, 1069003197));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 25);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(576, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i13 := list_empty($p12);
    call {:si_unique_call 1323} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i2);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i20 := nvme_user_cmd($p5, $p18, $p19);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 1325} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb10;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 25);
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i2);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i9 := nvme_user_cmd($p5, $0.ref, $p8);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    call {:si_unique_call 1321} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb10;

  SeqInstr_631:
    assume !assertsPassed;
    return;
}



const nvme_dev_open: ref;

axiom nvme_dev_open == $sub.ref(0, 511179);

procedure nvme_dev_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed;



implementation nvme_dev_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p8: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i2 := iminor($p0);
    call {:si_unique_call 1327} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, dev_list);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $p2i.ref.i64(dev_list));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $p12, $p24, $p25, $p26, $p27, $i28, $i29, $p8 := nvme_dev_open_loop_$bb4($i2, $p9, $i10, $i11, $p12, $p24, $p25, $p26, $p27, $i28, $i29, $p8);
    goto $bb4_last;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i2);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $p2i.ref.i64(dev_list));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p25;
    goto $bb16_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i19 := kref_get_unless_zero($p18);
    call {:si_unique_call 1331} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p12);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb10;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 19);
    goto $bb10;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 11);
    goto $bb10;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5344;
}



const nvme_dev_release: ref;

axiom nvme_dev_release == $sub.ref(0, 512211);

procedure nvme_dev_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation nvme_dev_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_192 := kref_put($p5, nvme_free_dev);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 513243);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(76, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kref_get_unless_zero: ref;

axiom kref_get_unless_zero == $sub.ref(0, 514275);

procedure kref_get_unless_zero($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_get_unless_zero($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i2 := atomic_add_unless($p1, 1, 0);
    call {:si_unique_call 1334} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 515307);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 1336} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 1338} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 516339);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 1340} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i3 := atomic_read($p0);
    call {:si_unique_call 1342} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1344} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 1346} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1348} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1350} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 517371);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1352} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 1353} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1354} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1355} $i10 := devirtbounce.19(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 1356} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 518403);

procedure __cmpxchg_wrong_size();



const nvme_user_cmd: ref;

axiom nvme_user_cmd == $sub.ref(0, 519435);

procedure nvme_user_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_user_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $i119: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i120: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i1;
  var $i135: i8;
  var $i136: i1;
  var $p137: ref;
  var $i138: i64;
  var $i139: i32;
  var $p141: ref;
  var $i142: i32;
  var $i140: i32;
  var $p144: ref;
  var $i145: i32;
  var $i143: i32;
  var $i127: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i10: i32;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p3 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i5 := capable(21);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1364} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i13 := copy_from_user($p11, $p12, 72);
    call {:si_unique_call 1366} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1367} cmdloc_dummy_var_64 := $memset.i8(cmdloc_dummy_var_63, $p15, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i17);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(1, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i22);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 64)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i32);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 64)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i38);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 4));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i44);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(1, 4));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i50);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(2, 4));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i56);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p64, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(3, 4));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i62);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(4, 4));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i68);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(60, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(5, 4));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i74);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    call {:si_unique_call 1368} {:cexpr "length"} boogie_si_record_i32($i80);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i111, $p112 := $i80, $u6;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i115 == 1);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i121 := $M.12;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i123 := $mul.i32($i122, 250);
    call {:si_unique_call 1379} {:cexpr "timeout"} boogie_si_record_i32($i123);
    assume {:verifier.code 0} true;
    $i120 := $i123;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i111, $i125);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i126 == 1);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i129 == 1);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i145 := __nvme_submit_admin_cmd($p0, $p4, $p144, $i120);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 1384} {:cexpr "status"} boogie_si_record_i32($i145);
    assume {:verifier.code 0} true;
    $i143 := $i145;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i127 := $i143;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i153 := $sge.i32($i127, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i161 := $i127;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i10 := $i161;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb32:
    assume $i153 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i158 := copy_to_user($p155, $p157, 4);
    call {:si_unique_call 1394} {:cexpr "tmp___7"} boogie_si_record_i64($i158);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    $i160 := $i127;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i161 := $i160;
    goto $bb37;

  $bb34:
    assume $i159 == 1;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i160 := $sub.i32(0, 14);
    goto $bb36;

  $bb29:
    assume $i148 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} nvme_unmap_user_pages($p0, $i152, $p112);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} nvme_free_iod($p0, $p112);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i129 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p132 := blk_mq_alloc_request($p131, 1, 208, 0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i134 := IS_ERR($p133);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i8($i134);
    call {:si_unique_call 1382} {:cexpr "tmp___6"} boogie_si_record_i8($i135);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i8.i1($i135);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i136 == 1);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(68, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i142 := nvme_submit_sync_cmd($p132, $p4, $p141, $i120);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    call {:si_unique_call 1389} {:cexpr "status"} boogie_si_record_i32($i142);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} blk_mq_free_request($p132);
    assume {:verifier.code 0} true;
    $i140 := $i142;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i143 := $i140;
    goto $bb28;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i136 == 1;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p132);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i138 := PTR_ERR($p137);
    call {:si_unique_call 1386} {:cexpr "tmp___5"} boogie_si_record_i64($i138);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i64.i32($i138);
    call {:si_unique_call 1387} {:cexpr "status"} boogie_si_record_i32($i139);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb27;

  $bb20:
    assume $i126 == 1;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i127 := $sub.i32(0, 12);
    goto $bb22;

  $bb17:
    assume $i115 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i118 := msecs_to_jiffies($i117);
    call {:si_unique_call 1377} {:cexpr "tmp___4"} boogie_si_record_i64($i118);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    call {:si_unique_call 1378} {:cexpr "timeout"} boogie_si_record_i32($i119);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb19;

  $bb11:
    assume $i83 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p90 := nvme_map_user_pages($p0, $i87, $i89, $i80);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i92 := IS_ERR($p91);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    call {:si_unique_call 1371} {:cexpr "tmp___3"} boogie_si_record_i8($i93);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i93);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i98 := nvme_setup_prps($p0, $p90, $i80, 208);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 1375} {:cexpr "length"} boogie_si_record_i32($i98);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p90, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p105, $i102);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p90, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p110, $i107);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i111, $p112 := $i98, $p90;
    goto $bb16;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i94 == 1;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p90);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i96 := PTR_ERR($p95);
    call {:si_unique_call 1373} {:cexpr "tmp___2"} boogie_si_record_i64($i96);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i32($i96);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i10 := $i97;
    goto $bb6;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb6;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 13);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 520467);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1395} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1396} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1397} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 521499);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} might_fault();
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1401} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1405} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i18 := _copy_from_user($p0, $p1, $i17);
    call {:si_unique_call 1407} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i9 := _copy_from_user($p0, $p1, $i8);
    call {:si_unique_call 1403} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const nvme_map_user_pages: ref;

axiom nvme_map_user_pages == $sub.ref(0, 522531);

procedure nvme_map_user_pages($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation nvme_map_user_pages($p0: ref, $i1: i32, $i2: i64, $i3: i32) returns ($r: ref)
{
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i53: i32;
  var $i37: i32;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i29: i32;
  var $i30: i32;
  var $i67: i1;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i68: i32;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} {:cexpr "nvme_map_user_pages:arg:write"} boogie_si_record_i32($i1);
    call {:si_unique_call 1410} {:cexpr "nvme_map_user_pages:arg:addr"} boogie_si_record_i64($i2);
    call {:si_unique_call 1411} {:cexpr "nvme_map_user_pages:arg:length"} boogie_si_record_i32($i3);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i2, 3);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i3, 1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 2147479550);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i2);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4095);
    call {:si_unique_call 1414} {:cexpr "offset"} boogie_si_record_i32($i14);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i3);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 4095);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i17, 4096);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1415} {:cexpr "count"} boogie_si_record_i32($i19);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p21 := kcalloc($i20, 8, 208);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i27 := get_user_pages_fast($i2, $i19, 1, $p22);
    call {:si_unique_call 1419} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i19);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p31 := __nvme_alloc_iod($i19, $i3, $p0, 0, 208);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} sg_init_table($p35, $i19);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32(0, $i19);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i37 := 0;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i37);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $sub.i64(0, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p35, $mul.ref($i55, 40));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} sg_mark_end($p56);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i19);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i1, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i62 := (if $i61 == 1 then 1 else 2);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i63 := dma_map_sg_attrs($p60, $p35, $i19, $i62, $0.ref);
    call {:si_unique_call 1428} {:cexpr "nents"} boogie_si_record_i32($i63);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p22);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} kfree($p65);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p8 := $p31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb29:
    assume $i64 == 1;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p31);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} kfree($p66);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i29, $i30 := $sub.i32(0, 12), $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32(0, $i30);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p22);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} kfree($p74);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i29);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p76 := ERR_PTR($i75);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p8 := $p76;
    goto $bb3;

  $bb33:
    assume $i67 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb36;

  $bb36:
    call $i69, $p70, $p71, $i72, $i73, $i68 := nvme_map_user_pages_loop_$bb36($p22, $i30, $i69, $p70, $p71, $i72, $i73, $i68);
    goto $bb36_last;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p22, $mul.ref($i69, 8));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} put_page($p71);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i68, 1);
    call {:si_unique_call 1432} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, $i30);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i68 := $i72;
    goto $bb38_dummy;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := $i14, $i3, 0;
    goto $bb21;

  $bb21:
    call $i41, $i42, $p43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i38, $i39, $i40, $i53 := nvme_map_user_pages_loop_$bb21($i19, $p22, $p35, $i41, $i42, $p43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i38, $i39, $i40, $i53);
    goto $bb21_last;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(4096, $i38);
    call {:si_unique_call 1422} {:cexpr "__min2"} boogie_si_record_i32($i41);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i40);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p35, $mul.ref($i42, 40));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i40);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p22, $mul.ref($i44, 8));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32($i39, $i41);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i48 := $i41;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} sg_set_page($p43, $p46, $i48, $i38);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i39, $i38);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i49, 4096);
    call {:si_unique_call 1424} {:cexpr "length"} boogie_si_record_i32($i50);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i40, 1);
    call {:si_unique_call 1425} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, $i19);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i53 := $i51;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i37 := $i53;
    goto $bb20;

  $bb26:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := 0, $i50, $i51;
    goto $bb26_dummy;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    goto $bb25;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i29, $i30 := $sub.i32(0, 12), $i19;
    goto $bb13;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i29, $i30 := $sub.i32(0, 14), $i27;
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p25 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p8 := $p25;
    goto $bb3;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p11 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p8 := $p11;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p6 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;
}



const nvme_setup_prps: ref;

axiom nvme_setup_prps == $sub.ref(0, 523563);

procedure nvme_setup_prps($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_setup_prps($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p43: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i32;
  var $i96: i1;
  var $i97: i1;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $i110: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1436} {:cexpr "nvme_setup_prps:arg:total_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1437} {:cexpr "nvme_setup_prps:arg:gfp"} boogie_si_record_i32($i3);
    call {:si_unique_call 1438} {:cexpr "nvme_setup_prps:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1439} {:cexpr "dma_len"} boogie_si_record_i32($i8);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    call {:si_unique_call 1440} {:cexpr "dma_addr"} boogie_si_record_i64($i10);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 4095);
    call {:si_unique_call 1441} {:cexpr "offset"} boogie_si_record_i32($i12);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $p13 := iod_list($p1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1443} {:cexpr "page_size"} boogie_si_record_i32($i15);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i12, $i15);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i2, $i16);
    call {:si_unique_call 1444} {:cexpr "length"} boogie_si_record_i32($i17);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i12, $i15);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i8, $i20);
    call {:si_unique_call 1445} {:cexpr "dma_len"} boogie_si_record_i32($i21);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p29 := sg_next($p6);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    call {:si_unique_call 1448} {:cexpr "dma_addr"} boogie_si_record_i64($i31);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 1449} {:cexpr "dma_len"} boogie_si_record_i32($i33);
    assume {:verifier.code 0} true;
    $p26, $i27, $i28 := $p29, $i33, $i31;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i34 := $ule.i32($i17, $i15);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i17, $i15);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i36, 1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i38 := $udiv.i32($i37, $i15);
    call {:si_unique_call 1450} {:cexpr "nprps"} boogie_si_record_i32($i38);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i39 := $sle.i32($i38, 32);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 1);
    assume {:verifier.code 0} true;
    $p43 := $p45;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $p47 := ldv_dma_pool_alloc_102($p43, $i3, $p4);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p47);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.37, $p4);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p57, $i58, $i59, $i60, $p61, $i62 := $p26, $i17, $i27, $i28, $p47, 0;
    goto $bb17;

  $bb17:
    call $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $p109, $i110, $p98, $i99, $i100 := nvme_setup_prps_loop_$bb17($p1, $i3, $p4, $p13, $i15, $p43, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $p71, $i72, $p73, $i74, $i75, $p76, $i77, $p78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $p109, $i110, $p98, $i99, $i100);
    goto $bb17_last;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i32($i15, 3);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i62, $i63);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $p87, $i88 := $p61, $i62;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    call {:si_unique_call 1454} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i88);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p87, $mul.ref($i90, 8));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, $i60);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i59, $i15);
    call {:si_unique_call 1455} {:cexpr "dma_len"} boogie_si_record_i32($i92);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i15);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i60, $i93);
    call {:si_unique_call 1456} {:cexpr "dma_addr"} boogie_si_record_i64($i94);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i58, $i15);
    call {:si_unique_call 1457} {:cexpr "length"} boogie_si_record_i32($i95);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i96 := $sle.i32($i95, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i97 := $sgt.i32($i92, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i92, 0);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 1459} {:cexpr "tmp___4"} boogie_si_record_i64($i104);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p106 := sg_next($p57);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    call {:si_unique_call 1462} {:cexpr "dma_addr"} boogie_si_record_i64($i108);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p106, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    call {:si_unique_call 1463} {:cexpr "dma_len"} boogie_si_record_i32($i110);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p98, $i99, $i100 := $p106, $i110, $i108;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p57, $i58, $i59, $i60, $p61, $i62 := $p98, $i95, $i99, $i100, $p87, $i89;
    goto corral_source_split_5936_dummy;

  $bb32:
    assume $i105 == 1;
    call {:si_unique_call 1460} devirtbounce.11(0, .str, 657, 12);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb28:
    assume $i97 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p98, $i99, $i100 := $p57, $i92, $i94;
    goto $bb30;

  $bb24:
    assume $i96 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $p65 := ldv_dma_pool_alloc_103($p43, $i3, $p4);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i69 := $i58;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    call {:si_unique_call 1453} {:cexpr "tmp___2"} boogie_si_record_i32($i72);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i75);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i72);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p13, $mul.ref($i77, 8));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p65);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i62);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, $sub.i64(0, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p61, $mul.ref($i80, 8));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i82);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.37, $p4);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i62);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, $sub.i64(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p61, $mul.ref($i85, 8));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i83);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p87, $i88 := $p65, 1;
    goto $bb23;

  $bb20:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i2, $i69);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i19 := $i70;
    goto $bb3;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i28);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $sub.i32(0, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i2, $i17);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $i15);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i19 := $i54;
    goto $bb3;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(520, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p43 := $p41;
    goto $bb13;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i28);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb3;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i15, $i12);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i10, $i24);
    call {:si_unique_call 1446} {:cexpr "dma_addr"} boogie_si_record_i64($i25);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p26, $i27, $i28 := $p5, $i21, $i25;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb3;

  corral_source_split_5936_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5885;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 524595);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1464} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1465} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1466} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_unmap_user_pages: ref;

axiom nvme_unmap_user_pages == $sub.ref(0, 525627);

procedure nvme_unmap_user_pages($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation nvme_unmap_user_pages($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} {:cexpr "nvme_unmap_user_pages:arg:write"} boogie_si_record_i32($i1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i1, 0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i11 := (if $i10 == 1 then 1 else 2);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} dma_unmap_sg_attrs($p5, $p7, $i9, $i11, $0.ref);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i13);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb4;

  $bb4:
    call $p16, $p17, $i18, $p19, $p20, $i21, $i22, $i23, $i15 := nvme_unmap_user_pages_loop_$bb4($p2, $p12, $p16, $p17, $i18, $p19, $p20, $i21, $i22, $i23, $i15);
    goto $bb4_last;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 40));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p20 := sg_page($p19);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} put_page($p20);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i15, 1);
    call {:si_unique_call 1471} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p12);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, $i22);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;
}



const nvme_free_iod: ref;

axiom nvme_free_iod == $sub.ref(0, 526659);

procedure nvme_free_iod($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nvme_free_iod($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i19: i64;
  var $i20: i32;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(864, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i3, 8);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    call {:si_unique_call 1472} {:cexpr "last_prp"} boogie_si_record_i32($i5);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p6 := iod_list($p1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    call {:si_unique_call 1474} {:cexpr "prp_dma"} boogie_si_record_i64($i8);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i17);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i33 := iod_should_kfree($p1);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 1480} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} kfree($p36);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i8, 0;
    goto $bb7;

  $bb7:
    call $i21, $p22, $p23, $i24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i19, $i20 := nvme_free_iod_loop_$bb7($p0, $i5, $p6, $p16, $i21, $p22, $p23, $i24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i19, $i20);
    goto $bb7_last;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p6, $mul.ref($i21, 8));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i5);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 8));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    call {:si_unique_call 1476} {:cexpr "next_prp_dma"} boogie_si_record_i64($i26);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p23);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} dma_pool_free($p28, $p29, $i19);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i20, 1);
    call {:si_unique_call 1478} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p16);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i26, $i30;
    goto $bb9_dummy;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(520, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p6);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} dma_pool_free($p13, $p15, $i8);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 527691);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} might_fault();
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1485} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1489} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 1491} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 1487} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 528723);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 529755);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1493} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 530787);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    return;
}



const iod_list: ref;

axiom iod_list == $sub.ref(0, 531819);

procedure iod_list($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iod_list($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref($i4, 8));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dma_pool_free: ref;

axiom dma_pool_free == $sub.ref(0, 532851);

procedure dma_pool_free($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dma_pool_free($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} {:cexpr "dma_pool_free:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    return;
}



const iod_should_kfree: ref;

axiom iod_should_kfree == $sub.ref(0, 533883);

procedure iod_should_kfree($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation iod_should_kfree($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 1);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dma_unmap_sg_attrs: ref;

axiom dma_unmap_sg_attrs == $sub.ref(0, 534915);

procedure dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} {:cexpr "dma_unmap_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1498} {:cexpr "dma_unmap_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p5 := get_dma_ops($p0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 1501} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1503} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} debug_dma_unmap_sg($p0, $p1, $i2, $i3);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1506} devirtbounce.21($p17, $p0, $p1, $i2, $i3, $p4);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1504} devirtbounce.11(0, .str.4, 65, 12);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 535947);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1508} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1511} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb4:
    assume $i14 == 1;
    call {:si_unique_call 1512} devirtbounce.11(0, .str.3, 99, 12);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1509} devirtbounce.11(0, .str.3, 98, 12);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 536979);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 538011);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 2);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const debug_dma_unmap_sg: ref;

axiom debug_dma_unmap_sg == $sub.ref(0, 539043);

procedure debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation debug_dma_unmap_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} {:cexpr "debug_dma_unmap_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1515} {:cexpr "debug_dma_unmap_sg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 540075);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p1 := external_alloc();
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_dma_pool_alloc_102: ref;

axiom ldv_dma_pool_alloc_102 == $sub.ref(0, 541107);

procedure ldv_dma_pool_alloc_102($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_102($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} {:cexpr "ldv_dma_pool_alloc_102:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_check_alloc_flags($i1);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_103: ref;

axiom ldv_dma_pool_alloc_103 == $sub.ref(0, 542139);

procedure ldv_dma_pool_alloc_103($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_103($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} {:cexpr "ldv_dma_pool_alloc_103:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} ldv_check_alloc_flags($i1);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 543171);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 544203);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1526} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1527} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_check_alloc_flags($i2);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_after_alloc($p3);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const get_user_pages_fast: ref;

axiom get_user_pages_fast == $sub.ref(0, 545235);

procedure get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1531} {:cexpr "get_user_pages_fast:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1532} {:cexpr "get_user_pages_fast:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1533} {:cexpr "get_user_pages_fast:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1534} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1535} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __nvme_alloc_iod: ref;

axiom __nvme_alloc_iod == $sub.ref(0, 546267);

procedure __nvme_alloc_iod($i0: i32, $i1: i32, $p2: ref, $i3: i64, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation __nvme_alloc_iod($i0: i32, $i1: i32, $p2: ref, $i3: i64, $i4: i32) returns ($r: ref)
{
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} {:cexpr "__nvme_alloc_iod:arg:nseg"} boogie_si_record_i32($i0);
    call {:si_unique_call 1537} {:cexpr "__nvme_alloc_iod:arg:bytes"} boogie_si_record_i32($i1);
    call {:si_unique_call 1538} {:cexpr "__nvme_alloc_iod:arg:priv"} boogie_si_record_i64($i3);
    call {:si_unique_call 1539} {:cexpr "__nvme_alloc_iod:arg:gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $i5 := nvme_npages($i1, $p2);
    call {:si_unique_call 1541} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i7, 5);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i6, $i8);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 9);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 8);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p12 := kmalloc($i11, $i4);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} iod_init($p13, $i1, $i0, $i3);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_679:
    assume !assertsPassed;
    return;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 547299);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    return;
}



const sg_set_page: ref;

axiom sg_set_page == $sub.ref(0, 548331);

procedure sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} {:cexpr "sg_set_page:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1546} {:cexpr "sg_set_page:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} sg_assign_page($p0, $p1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i2);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    return;
}



const sg_mark_end: ref;

axiom sg_mark_end == $sub.ref(0, 549363);

procedure sg_mark_end($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_mark_end($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1549} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, 2);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, $sub.i64(0, 2));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1550} devirtbounce.11(0, .str.3, 168, 12);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const dma_map_sg_attrs: ref;

axiom dma_map_sg_attrs == $sub.ref(0, 550395);

procedure dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dma_map_sg_attrs($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i1;
  var $p7: ref;
  var $i8: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} {:cexpr "dma_map_sg_attrs:arg:nents"} boogie_si_record_i32($i2);
    call {:si_unique_call 1552} {:cexpr "dma_map_sg_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p5 := get_dma_ops($p0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i2);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i15 := valid_dma_direction($i3);
    call {:si_unique_call 1559} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1561} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1563} $i23 := devirtbounce.22($p22, $p0, $p1, $i2, $i3, $p4);
    call {:si_unique_call 1564} {:cexpr "ents"} boogie_si_record_i32($i23);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} debug_dma_map_sg($p0, $p1, $i2, $i23, $i3);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 1562} devirtbounce.11(0, .str.4, 52, 12);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p1, 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8 := dma_map_sg_attrs_loop_$bb4($i2, $p9, $p10, $i11, $i12, $p13, $i14, $p7, $i8);
    goto $bb4_last;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p9 := sg_virt($p7);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} kmemcheck_mark_initialized($p9, $i11);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i8, 1);
    call {:si_unique_call 1556} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p13 := sg_next($p7);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i2);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p13, $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6218;
}



const sg_virt: ref;

axiom sg_virt == $sub.ref(0, 551427);

procedure sg_virt($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_virt($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p1 := sg_page($p0);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p2 := lowmem_page_address($p1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 552459);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_map_sg: ref;

axiom debug_dma_map_sg == $sub.ref(0, 553491);

procedure debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation debug_dma_map_sg($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} {:cexpr "debug_dma_map_sg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1570} {:cexpr "debug_dma_map_sg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1571} {:cexpr "debug_dma_map_sg:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 554523);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sg_assign_page: ref;

axiom sg_assign_page == $sub.ref(0, 555555);

procedure sg_assign_page($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sg_assign_page($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    call {:si_unique_call 1572} {:cexpr "page_link"} boogie_si_record_i64($i4);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 3);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1574} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 2271560481);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1577} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1580} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i4, $i26);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i25 == 1;
    call {:si_unique_call 1581} devirtbounce.11(0, .str.3, 68, 12);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb4:
    assume $i18 == 1;
    call {:si_unique_call 1578} devirtbounce.11(0, .str.3, 67, 12);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1575} devirtbounce.11(0, .str.3, 65, 12);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 556587);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1583} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_check_alloc_flags($i1);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_after_alloc($p2);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;
}



const iod_init: ref;

axiom iod_init == $sub.ref(0, 557619);

procedure iod_init($p0: ref, $i1: i32, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation iod_init($p0: ref, $i1: i32, $i2: i32, $i3: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} {:cexpr "iod_init:arg:nbytes"} boogie_si_record_i32($i1);
    call {:si_unique_call 1588} {:cexpr "iod_init:arg:nseg"} boogie_si_record_i32($i2);
    call {:si_unique_call 1589} {:cexpr "iod_init:arg:private"} boogie_si_record_i64($i3);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i3);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i2, 40);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 72);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $sub.i32(0, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 558651);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 559683);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 560715);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    return;
}



const nvme_admin_queue_rq: ref;

axiom nvme_admin_queue_rq == $sub.ref(0, 561747);

procedure nvme_admin_queue_rq($p0: ref, $p1: ref) returns ($r: i32);



const blk_mq_map_queue: ref;

axiom blk_mq_map_queue == $sub.ref(0, 562779);

procedure blk_mq_map_queue($p0: ref, $i1: i32) returns ($r: ref);



const nvme_timeout: ref;

axiom nvme_timeout == $sub.ref(0, 563811);

procedure nvme_timeout($p0: ref, $i1: i1) returns ($r: i32);



const nvme_admin_init_hctx: ref;

axiom nvme_admin_init_hctx == $sub.ref(0, 564843);

procedure nvme_admin_init_hctx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const nvme_exit_hctx: ref;

axiom nvme_exit_hctx == $sub.ref(0, 565875);

procedure nvme_exit_hctx($p0: ref, $i1: i32);



const nvme_admin_init_request: ref;

axiom nvme_admin_init_request == $sub.ref(0, 566907);

procedure nvme_admin_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);



const nvme_abort_req: ref;

axiom nvme_abort_req == $sub.ref(0, 567939);

procedure nvme_abort_req($p0: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109 == $sub.ref(0, 568971);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p0: ref);



const ldv_spin_unlock_irqrestore_110: ref;

axiom ldv_spin_unlock_irqrestore_110 == $sub.ref(0, 570003);

procedure ldv_spin_unlock_irqrestore_110($p0: ref, $i1: i64);



const abort_completion: ref;

axiom abort_completion == $sub.ref(0, 571035);

procedure abort_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation abort_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $i5 := __le16_to_cpup($p4);
    call {:si_unique_call 1595} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i32($i6, 1);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    call {:si_unique_call 1596} {:cexpr "status"} boogie_si_record_i16($i8);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i10 := __le32_to_cpup($p9);
    call {:si_unique_call 1598} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} blk_mq_free_hctx_request($p12, $p3);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i8);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} dev_warn.ref.ref.i32.i32($p14, .str.41, $i15, $i10);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 880)), $mul.ref(870, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 880)), $mul.ref(870, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i22);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    return;
}



const nvme_queue_rq: ref;

axiom nvme_queue_rq == $sub.ref(0, 572067);

procedure nvme_queue_rq($p0: ref, $p1: ref) returns ($r: i32);



const nvme_init_hctx: ref;

axiom nvme_init_hctx == $sub.ref(0, 573099);

procedure nvme_init_hctx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const nvme_init_request: ref;

axiom nvme_init_request == $sub.ref(0, 574131);

procedure nvme_init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);



const blk_integrity_rq: ref;

axiom blk_integrity_rq == $sub.ref(0, 575163);

procedure blk_integrity_rq($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation blk_integrity_rq($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2048);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const blk_mq_complete_request: ref;

axiom blk_mq_complete_request == $sub.ref(0, 576195);

procedure blk_mq_complete_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_complete_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    return;
}



const nvme_alloc_iod: ref;

axiom nvme_alloc_iod == $sub.ref(0, 577227);

procedure nvme_alloc_iod($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);



const ldv_dma_pool_alloc_104: ref;

axiom ldv_dma_pool_alloc_104 == $sub.ref(0, 578259);

procedure ldv_dma_pool_alloc_104($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);



const blk_rq_map_sg: ref;

axiom blk_rq_map_sg == $sub.ref(0, 579291);

procedure blk_rq_map_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 580323);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(92, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const blk_rq_count_integrity_sg: ref;

axiom blk_rq_count_integrity_sg == $sub.ref(0, 581355);

procedure blk_rq_count_integrity_sg($p0: ref, $p1: ref) returns ($r: i32);



const blk_rq_map_integrity_sg: ref;

axiom blk_rq_map_integrity_sg == $sub.ref(0, 582387);

procedure blk_rq_map_integrity_sg($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const nvme_dif_prep: ref;

axiom nvme_dif_prep == $sub.ref(0, 583419);

procedure nvme_dif_prep($i0: i32, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_dif_prep($i0: i32, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} {:cexpr "nvme_dif_prep:arg:p"} boogie_si_record_i32($i0);
    call {:si_unique_call 1602} {:cexpr "nvme_dif_prep:arg:v"} boogie_si_record_i32($i1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i5 := __fswab32($i4);
    call {:si_unique_call 1604} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $i1);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i7 := __fswab32($i0);
    call {:si_unique_call 1606} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_dif_remap: ref;

axiom nvme_dif_remap == $sub.ref(0, 584451);

procedure nvme_dif_remap($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_dif_remap($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i59: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p15 := bio_integrity($p14);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p22 := kmap_atomic($p21);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p22, $mul.ref($i27, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i31 := bip_get_seed($p15);
    call {:si_unique_call 1610} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 1611} {:cexpr "virt"} boogie_si_record_i32($i32);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $i33 := blk_rq_pos($p0);
    call {:si_unique_call 1613} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i34 := nvme_block_nr($p6, $i33);
    call {:si_unique_call 1615} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 1616} {:cexpr "phys"} boogie_si_record_i32($i35);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i36 := blk_rq_bytes($p0);
    call {:si_unique_call 1618} {:cexpr "tmp___3"} boogie_si_record_i32($i36);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i36, $i38);
    call {:si_unique_call 1619} {:cexpr "nlb"} boogie_si_record_i32($i39);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 328)), $mul.ref(18, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    call {:si_unique_call 1620} {:cexpr "ts"} boogie_si_record_i32($i46);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i47 := $ult.i32(0, $i39);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1(0);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} __kunmap_atomic($p28);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __compiletime_assert_538();
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i48, $i49, $i50, $p51 := $i32, $i35, 0, $p28;
    goto $bb17;

  $bb17:
    call $p52, $i53, $p54, $i55, $i56, $i57, $i58, $i48, $i49, $i50, $p51 := nvme_dif_remap_loop_$bb17($p1, $i39, $i46, $p52, $i53, $p54, $i55, $i56, $i57, $i58, $i48, $i49, $i50, $p51);
    goto $bb17_last;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    call {:si_unique_call 1621} devirtbounce.23($p1, $i49, $i48, $p52);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i46);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p51, $mul.ref($i53, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i50, 1);
    call {:si_unique_call 1622} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i48, 1);
    call {:si_unique_call 1623} {:cexpr "virt"} boogie_si_record_i32($i56);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i49, 1);
    call {:si_unique_call 1624} {:cexpr "phys"} boogie_si_record_i32($i57);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i58 := $ult.i32($i55, $i39);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i48, $i49, $i50, $p51 := $i56, $i57, $i55, $p54;
    goto $bb19_dummy;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;
}



const req_completion: ref;

axiom req_completion == $sub.ref(0, 585483);

procedure req_completion($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, assertsPassed;



implementation req_completion($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p4 := iod_get_private($p3);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p6 := blk_mq_rq_to_pdu($p5);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $i9 := __le16_to_cpup($p8);
    call {:si_unique_call 1630} {:cexpr "tmp___1"} boogie_si_record_i16($i9);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 1);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 1631} {:cexpr "status"} boogie_si_record_i16($i12);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1633} {:cexpr "tmp___3"} boogie_si_record_i64($i17);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(260, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} nvme_free_iod($p102, $p3);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} blk_mq_complete_request($p5);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 1);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i80 := (if $i79 == 1 then 1 else 2);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} dma_unmap_sg_attrs($p70, $p72, $i74, $i80, $0.ref);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i81 := blk_integrity_rq($p5);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    call {:si_unique_call 1644} {:cexpr "tmp___4"} boogie_si_record_i8($i82);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i83 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i32($i96);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i100 := (if $i99 == 1 then 1 else 2);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} dma_unmap_sg_attrs($p92, $p94, 1, $i100, $0.ref);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i87 == 1;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} nvme_dif_remap($p5, nvme_dif_complete);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(8, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i12);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} dev_warn.ref.ref.i32($p61, .str.48, $i62);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i12);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16384);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i12);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i51 := nvme_error_status($i50);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(260, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 14);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, jiffies);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(208, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i26, $i28);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i33 := $ult.i64($i29, $i32);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb5;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} blk_mq_requeue_request($p5);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p37);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $i41 := constant_test_bit(2, $p40);
    call {:si_unique_call 1637} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} ldv_spin_unlock_irqrestore_101($p48, $u1);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} blk_mq_kick_requeue_list($p44);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_685:
    assume !assertsPassed;
    return;
}



const nvme_submit_discard: ref;

axiom nvme_submit_discard == $sub.ref(0, 586515);

procedure nvme_submit_discard($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const nvme_submit_flush: ref;

axiom nvme_submit_flush == $sub.ref(0, 587547);

procedure nvme_submit_flush($p0: ref, $p1: ref, $i2: i32);



const nvme_submit_iod: ref;

axiom nvme_submit_iod == $sub.ref(0, 588579);

procedure nvme_submit_iod($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const iod_get_private: ref;

axiom iod_get_private == $sub.ref(0, 589611);

procedure iod_get_private($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iod_get_private($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, $sub.i64(0, 2));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const blk_rq_pos: ref;

axiom blk_rq_pos == $sub.ref(0, 590643);

procedure blk_rq_pos($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation blk_rq_pos($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(96, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nvme_block_nr: ref;

axiom nvme_block_nr == $sub.ref(0, 591675);

procedure nvme_block_nr($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation nvme_block_nr($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} {:cexpr "nvme_block_nr:arg:sector"} boogie_si_record_i64($i1);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 9));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i1, $i5);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const blk_mq_requeue_request: ref;

axiom blk_mq_requeue_request == $sub.ref(0, 592707);

procedure blk_mq_requeue_request($p0: ref);
  free requires assertsPassed;



implementation blk_mq_requeue_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100 == $sub.ref(0, 593739);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_linux_kernel_locking_spinlock_spin_lock_queue_lock_of_request_queue();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_101: ref;

axiom ldv_spin_unlock_irqrestore_101 == $sub.ref(0, 594771);

procedure ldv_spin_unlock_irqrestore_101($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.20, assertsPassed;



implementation ldv_spin_unlock_irqrestore_101($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} {:cexpr "ldv_spin_unlock_irqrestore_101:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_linux_kernel_locking_spinlock_spin_unlock_queue_lock_of_request_queue();
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const nvme_error_status: ref;

axiom nvme_error_status == $sub.ref(0, 595803);

procedure nvme_error_status($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_error_status($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} {:cexpr "nvme_error_status:arg:status"} boogie_si_record_i16($i0);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2047);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 2047);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 129);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 28);
    goto $bb10;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb10;
}



const nvme_dif_complete: ref;

axiom nvme_dif_complete == $sub.ref(0, 596835);

procedure nvme_dif_complete($i0: i32, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_dif_complete($i0: i32, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} {:cexpr "nvme_dif_complete:arg:p"} boogie_si_record_i32($i0);
    call {:si_unique_call 1657} {:cexpr "nvme_dif_complete:arg:v"} boogie_si_record_i32($i1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i5 := __fswab32($i4);
    call {:si_unique_call 1659} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $i0);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $i7 := __fswab32($i1);
    call {:si_unique_call 1661} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 597867);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $i1 := llvm.bswap.i32($i0);
    call {:si_unique_call 1664} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const llvm.bswap.i32: ref;

axiom llvm.bswap.i32 == $sub.ref(0, 598899);

procedure llvm.bswap.i32($i0: i32) returns ($r: i32);



const bio_integrity: ref;

axiom bio_integrity == $sub.ref(0, 599931);

procedure bio_integrity($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bio_integrity($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2048);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 600963);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} pagefault_disable();
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p1 := lowmem_page_address($p0);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const bip_get_seed: ref;

axiom bip_get_seed == $sub.ref(0, 601995);

procedure bip_get_seed($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation bip_get_seed($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __compiletime_assert_538: ref;

axiom __compiletime_assert_538 == $sub.ref(0, 603027);

procedure __compiletime_assert_538();
  free requires assertsPassed;



implementation __compiletime_assert_538()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    return;
}



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 604059);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} pagefault_enable();
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    return;
}



const pagefault_enable: ref;

axiom pagefault_enable == $sub.ref(0, 605091);

procedure pagefault_enable();
  free requires assertsPassed;



implementation pagefault_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} devirtbounce.6(0);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} __preempt_count_sub(1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 606123);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 1679} devirtbounce.25(0, __preempt_count, $i9, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 1678} devirtbounce.24(0, __preempt_count, __preempt_count);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 1677} devirtbounce.24(0, __preempt_count, __preempt_count);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const pagefault_disable: ref;

axiom pagefault_disable == $sub.ref(0, 607155);

procedure pagefault_disable();
  free requires assertsPassed;



implementation pagefault_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} __preempt_count_add(1);
    call {:si_unique_call 1685} devirtbounce.6(0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 608187);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32(0, 1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i6 == 1);
    call {:si_unique_call 1695} devirtbounce.25(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i6 == 1;
    call {:si_unique_call 1694} devirtbounce.24(0, __preempt_count, __preempt_count);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i5 == 1;
    call {:si_unique_call 1693} devirtbounce.24(0, __preempt_count, __preempt_count);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const nvme_open: ref;

axiom nvme_open == $sub.ref(0, 609219);

procedure nvme_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, assertsPassed, $M.0;



implementation nvme_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} {:cexpr "nvme_open:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(592, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i13 := kref_get_unless_zero($p12);
    call {:si_unique_call 1703} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const nvme_release: ref;

axiom nvme_release == $sub.ref(0, 610251);

procedure nvme_release($p0: ref, $i1: i32);



const nvme_ioctl: ref;

axiom nvme_ioctl == $sub.ref(0, 611283);

procedure nvme_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, $M.11, $M.51, $M.53, $M.54, $M.52, assertsPassed, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.29, $M.32, $M.3, $M.67, $M.31, $M.21, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} {:cexpr "nvme_ioctl:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 1706} {:cexpr "nvme_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 1707} {:cexpr "nvme_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 20032);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, $sub.i32(0, 1069003199));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, $sub.i32(0, 1069003197));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 1076907586);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 8834);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 8837);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 25);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb21:
    assume $i14 == 1;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p30 := $i2p.i64.ref($i3);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $i31 := nvme_sg_io($p8, $p30);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    call {:si_unique_call 1717} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i17 := $i31;
    goto $bb26;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $i2p.i64.ref($i3);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $i29 := nvme_sg_get_version_num($p28);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    call {:si_unique_call 1715} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i17 := $i29;
    goto $bb26;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i3);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} $i27 := nvme_submit_io($p8, $p26);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1713} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i17 := $i27;
    goto $bb26;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i3);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i25 := nvme_user_cmd($p23, $p8, $p24);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    call {:si_unique_call 1711} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i17 := $i25;
    goto $bb26;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i3);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i21 := nvme_user_cmd($p19, $0.ref, $p20);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    call {:si_unique_call 1709} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb26;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb26;
}



const nvme_compat_ioctl: ref;

axiom nvme_compat_ioctl == $sub.ref(0, 612315);

procedure nvme_compat_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);



const nvme_getgeo: ref;

axiom nvme_getgeo == $sub.ref(0, 613347);

procedure nvme_getgeo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_getgeo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i16;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 64);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 32);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $i6 := get_capacity($p5);
    call {:si_unique_call 1719} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i64($i6, 11);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i16($i7);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i8);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const get_capacity: ref;

axiom get_capacity == $sub.ref(0, 614379);

procedure get_capacity($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation get_capacity($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1744)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nvme_submit_io: ref;

axiom nvme_submit_io == $sub.ref(0, 615411);

procedure nvme_submit_io($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_submit_io($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i16;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $i120: i1;
  var $i121: i8;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i32;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $p157: ref;
  var $i158: i64;
  var $p159: ref;
  var $i160: i64;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $i166: i1;
  var $i167: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $i143: i32;
  var $i144: i32;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i16;
  var $i197: i32;
  var $i198: i32;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i204: i32;
  var $i203: i32;
  var $i205: i1;
  var $i206: i1;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $p226: ref;
  var $i227: i32;
  var $i228: i64;
  var $p229: ref;
  var $i230: i64;
  var $p231: ref;
  var $i232: i64;
  var $p235: ref;
  var $i236: i32;
  var $i237: i64;
  var $i238: i1;
  var $i239: i64;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i215: i32;
  var $i216: i32;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i64;
  var $p126: ref;
  var $i127: i32;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i32;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $i260: i8;
  var $i261: i32;
  var $i262: i32;
  var $i11: i32;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $i9 := copy_from_user($p7, $p8, 48);
    call {:si_unique_call 1724} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i15, $i17);
    call {:si_unique_call 1725} {:cexpr "length"} boogie_si_record_i32($i18);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i22, $i24);
    call {:si_unique_call 1726} {:cexpr "meta_len"} boogie_si_record_i32($i25);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 5);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $p52 := nvme_map_user_pages($p6, $i49, $i51, $i18);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i54 := IS_ERR($p53);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1729} {:cexpr "tmp___1"} boogie_si_record_i8($i55);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 1732} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p60, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i62);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(1, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 64)), $mul.ref(1, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i67);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i72);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i77);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i82);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(2, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref(50, 1));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i87);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i92);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i97);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i102);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(42, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 64)), $mul.ref(62, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, $i107);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i25, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $p180, $p181 := $0.ref, $u3;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i182 := nvme_setup_prps($p6, $p52, $i18, 208);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    call {:si_unique_call 1750} {:cexpr "tmp___6"} boogie_si_record_i32($i182);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p52, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i186 := $load.i64($M.0, $p185);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p189, $i186);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p52, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i191 := $load.i64($M.0, $p190);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p194, $i191);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.0, $p195);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i196);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i201 := $shl.i32($i198, $i200);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i182, $i201);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i202 == 1);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i204 := nvme_submit_io_cmd($p6, $p0, $p3, $0.ref);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    call {:si_unique_call 1752} {:cexpr "status"} boogie_si_record_i32($i204);
    assume {:verifier.code 0} true;
    $i203 := $i204;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i25, 0);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p126, $i127 := $p180, $i203;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.0, $p253);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i255, 1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} nvme_unmap_user_pages($p6, $i256, $p52);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} nvme_free_iod($p6, $p52);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p126);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i11 := $i127;
    goto $bb3;

  $bb79:
    assume $i258 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.0, $p259);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32($i260);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i262 := $and.i32($i261, 1);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} nvme_unmap_user_pages($p6, $i262, $p126);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} nvme_free_iod($p6, $p126);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb59:
    assume $i205 == 1;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i203, 0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i251 := $zext.i32.i64($i25);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.44, $p4);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} dma_free_attrs($p250, $i251, $p181, $i252, $0.ref);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb61:
    assume $i206 == 1;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb63;

  $bb64:
    assume $i211 == 1;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p180, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32(0, $i213);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb66:
    assume $i214 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i215, $i216 := 0, 0;
    goto $bb69;

  $bb69:
    call $p217, $p218, $i219, $p220, $p221, $p222, $i223, $p226, $i227, $i228, $p229, $i230, $p231, $i232, $p235, $i236, $i237, $i238, $i239, $p242, $i243, $i244, $i245, $i246, $i247, $i215, $i216, cmdloc_dummy_var_70, cmdloc_dummy_var_71, cmdloc_dummy_var_72 := nvme_submit_io_loop_$bb69($p180, $p181, $p212, $p217, $p218, $i219, $p220, $p221, $p222, $i223, $p226, $i227, $i228, $p229, $i230, $p231, $i232, $p235, $i236, $i237, $i238, $i239, $p242, $i243, $i244, $i245, $i246, $i247, $i215, $i216, cmdloc_dummy_var_70, cmdloc_dummy_var_71, cmdloc_dummy_var_72);
    goto $bb69_last;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p180, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i219 := $sext.i32.i64($i216);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p218, $mul.ref($i219, 40));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p221 := sg_page($p220);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p222 := kmap_atomic($p221);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i216);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i223, 40)), $mul.ref(16, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i228 := $zext.i32.i64($i227);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($p222, $mul.ref($i228, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i230 := $sext.i32.i64($i215);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p181, $mul.ref($i230, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i216);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i232, 40)), $mul.ref(20, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i237 := $zext.i32.i64($i236);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 1755} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p229, $p231, $i237, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i238 := $trunc.i8.i1(0);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __kunmap_atomic($p229);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i216);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i239, 40)), $mul.ref(20, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i215, $i243);
    call {:si_unique_call 1758} {:cexpr "meta_offset___0"} boogie_si_record_i32($i244);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i245 := $add.i32($i216, 1);
    call {:si_unique_call 1759} {:cexpr "i"} boogie_si_record_i32($i245);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.0, $p212);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i247 := $slt.i32($i245, $i246);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i247 == 1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb74:
    assume $i247 == 1;
    assume {:verifier.code 0} true;
    $i215, $i216 := $i244, $i245;
    goto $bb74_dummy;

  $bb71:
    assume $i238 == 1;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __compiletime_assert_1788();
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i202 == 1;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32(0, 12);
    goto $bb58;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p116);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $p118 := nvme_map_user_pages($p6, $i115, $i117, $i25);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $i120 := IS_ERR($p119);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i8($i120);
    call {:si_unique_call 1735} {:cexpr "tmp___3"} boogie_si_record_i8($i121);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i121);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i131 := $zext.i32.i64($i25);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $p132 := dma_alloc_attrs($p130, $i131, $p4, 208, $0.ref);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i134 := $eq.i64($i133, 0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 1);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.44, $p4);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, $i176);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p180, $p181 := $p118, $p132;
    goto $bb55;

  $bb41:
    assume $i139 == 1;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32(0, $i141);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb43:
    assume $i142 == 1;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i143, $i144 := 0, 0;
    goto $bb46;

  $bb46:
    call $p145, $p146, $i147, $p148, $p149, $p150, $i151, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $i172, $i173, $i174, $i175, $i143, $i144, cmdloc_dummy_var_67, cmdloc_dummy_var_68, cmdloc_dummy_var_69 := nvme_submit_io_loop_$bb46($p118, $p132, $p140, $p145, $p146, $i147, $p148, $p149, $p150, $i151, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $p163, $i164, $i165, $i166, $i167, $p170, $i171, $i172, $i173, $i174, $i175, $i143, $i144, cmdloc_dummy_var_67, cmdloc_dummy_var_68, cmdloc_dummy_var_69);
    goto $bb46_last;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i144);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p146, $mul.ref($i147, 40));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $p149 := sg_page($p148);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} $p150 := kmap_atomic($p149);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i144);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i151, 40)), $mul.ref(16, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i155);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p150, $mul.ref($i156, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i143);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p132, $mul.ref($i158, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i144);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i160, 40)), $mul.ref(20, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i165 := $zext.i32.i64($i164);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 1744} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p159, $p157, $i165, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i8.i1(0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __kunmap_atomic($p157);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i144);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref($i167, 40)), $mul.ref(20, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i143, $i171);
    call {:si_unique_call 1747} {:cexpr "meta_offset"} boogie_si_record_i32($i172);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i144, 1);
    call {:si_unique_call 1748} {:cexpr "i"} boogie_si_record_i32($i173);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p140);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i173, $i174);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i175 == 1);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    $i143, $i144 := $i172, $i173;
    goto $bb51_dummy;

  $bb48:
    assume $i166 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} __compiletime_assert_1762();
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb38:
    assume $i134 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p126, $i127 := $p118, $sub.i32(0, 12);
    goto $bb36;

  $bb34:
    assume $i122 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p118);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $i124 := PTR_ERR($p123);
    call {:si_unique_call 1737} {:cexpr "tmp___2"} boogie_si_record_i64($i124);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i64.i32($i124);
    call {:si_unique_call 1738} {:cexpr "status"} boogie_si_record_i32($i125);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p126, $i127 := $0.ref, $i125;
    goto $bb36;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p52);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} $i58 := PTR_ERR($p57);
    call {:si_unique_call 1731} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i11 := $i59;
    goto $bb3;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 3);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i30 == 1);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb74_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7153;

  $bb51_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7062;
}



const nvme_sg_get_version_num: ref;

axiom nvme_sg_get_version_num == $sub.ref(0, 616443);

procedure nvme_sg_get_version_num($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation nvme_sg_get_version_num($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} might_fault();
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i1 := $M.45;
    call {:si_unique_call 1764} {:cexpr "__pu_val"} boogie_si_record_i32($i1);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1765} $i4 := devirtbounce.26(0, $i1, $p0);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    call {:si_unique_call 1766} {:cexpr "__ret_pu"} boogie_si_record_i32($i4);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;
}



const nvme_sg_io: ref;

axiom nvme_sg_io == $sub.ref(0, 617475);

procedure nvme_sg_io($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.51, $M.53, $M.54, $M.52, $M.82, $M.83, $M.84, $M.46, $M.13, $M.76, $M.66, $M.63, $M.29, $M.32, $M.3, $M.67, $M.31, $M.21, $M.9, $M.11, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_sg_io($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i3 := capable(21);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1773} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i11 := copy_from_user($p9, $p10, 88);
    call {:si_unique_call 1775} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 83);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 16);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $i20 := nvme_scsi_translate($p0, $p2);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    call {:si_unique_call 1777} {:cexpr "retcode"} boogie_si_record_i32($i20);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i20, 0);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i20;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} $i26 := copy_to_user($p24, $p25, 88);
    call {:si_unique_call 1779} {:cexpr "tmp___2"} boogie_si_record_i64($i26);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb6;

  $bb20:
    assume $i22 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb22;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i8 := $i20;
    goto $bb6;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 13);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const nvme_scsi_translate: ref;

axiom nvme_scsi_translate == $sub.ref(0, 618507);

procedure nvme_scsi_translate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.51, $M.53, $M.54, $M.52, $CurrAddr, $M.82, $M.83, $M.84, $M.46, $M.13, $M.76, $M.66, $M.63, $M.29, $M.32, $M.3, $M.67, $M.31, $M.21, $M.9, $M.11, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_scsi_translate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i49: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i14 := copy_from_user($p8, $p10, $i13);
    call {:si_unique_call 1782} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i16 := nvme_trans_status_code($p1, 0);
    call {:si_unique_call 1784} {:cexpr "retcode"} boogie_si_record_i32($i16);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 1785} {:cexpr "opcode"} boogie_si_record_i32($i20);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 8);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, 40);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 168);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 136);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 10);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i20, 42);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i20, 170);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i20, 138);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i20, 18);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i20, 77);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i20, 21);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i20, 85);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i20, 26);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i20, 90);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i20, 37);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i20, 158);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i20, 160);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i20, 3);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i20, 162);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i20, 181);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i20, 27);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i20, 53);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i20, 4);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i20, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i20, 59);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i20, 66);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i90 := nvme_trans_completion($p1, 2, 5, 32, 0);
    call {:si_unique_call 1821} {:cexpr "retcode"} boogie_si_record_i32($i90);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i49 := $i90;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i7 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb111:
    assume $i46 == 1;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i89 := nvme_trans_unmap($p0, $p1, $p88);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    call {:si_unique_call 1817} {:cexpr "retcode"} boogie_si_record_i32($i89);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i49 := $i89;
    goto $bb116;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i45 == 1;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p2);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $i87 := nvme_trans_write_buffer($p0, $p1, $p86);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    call {:si_unique_call 1815} {:cexpr "retcode"} boogie_si_record_i32($i87);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i49 := $i87;
    goto $bb116;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i44 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i85 := nvme_trans_test_unit_ready($p0, $p1, $p84);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    call {:si_unique_call 1813} {:cexpr "retcode"} boogie_si_record_i32($i85);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i49 := $i85;
    goto $bb116;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i43 == 1;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p2);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i83 := nvme_trans_format_unit($p0, $p1, $p82);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    call {:si_unique_call 1811} {:cexpr "retcode"} boogie_si_record_i32($i83);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i49 := $i83;
    goto $bb116;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i42 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i81 := nvme_trans_synchronize_cache($p0, $p1, $p80);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    call {:si_unique_call 1809} {:cexpr "retcode"} boogie_si_record_i32($i81);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i49 := $i81;
    goto $bb116;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i41 == 1;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} $i79 := nvme_trans_start_stop($p0, $p1, $p78);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    call {:si_unique_call 1807} {:cexpr "retcode"} boogie_si_record_i32($i79);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i49 := $i79;
    goto $bb116;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb87:
    assume $i40 == 1;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $i77 := nvme_trans_security_protocol($p0, $p1, $p76);
    call {:si_unique_call 1805} {:cexpr "retcode"} boogie_si_record_i32($i77);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i49 := $i77;
    goto $bb116;

  $bb83:
    assume $i39 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb79:
    assume $i38 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p2);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $i75 := nvme_trans_request_sense($p0, $p1, $p74);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    call {:si_unique_call 1803} {:cexpr "retcode"} boogie_si_record_i32($i75);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i49 := $i75;
    goto $bb116;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i37 == 1;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p2);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i73 := nvme_trans_report_luns($p0, $p1, $p72);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    call {:si_unique_call 1801} {:cexpr "retcode"} boogie_si_record_i32($i73);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i49 := $i73;
    goto $bb116;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i36 == 1;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 158);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb117:
    assume $i65 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 16);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb119;

  $bb120:
    assume $i69 == 1;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i71 := nvme_trans_read_capacity($p0, $p1, $p70);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    call {:si_unique_call 1819} {:cexpr "retcode"} boogie_si_record_i32($i71);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i49 := $i71;
    goto $bb116;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i35 == 1;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $i61 := nvme_trans_read_capacity($p0, $p1, $p60);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    call {:si_unique_call 1799} {:cexpr "retcode"} boogie_si_record_i32($i61);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i49 := $i61;
    goto $bb116;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i34 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p2);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i59 := nvme_trans_mode_sense($p0, $p1, $p58);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    call {:si_unique_call 1797} {:cexpr "retcode"} boogie_si_record_i32($i59);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i49 := $i59;
    goto $bb116;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i33 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb55:
    assume $i32 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p2);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $i57 := nvme_trans_mode_select($p0, $p1, $p56);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    call {:si_unique_call 1795} {:cexpr "retcode"} boogie_si_record_i32($i57);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i49 := $i57;
    goto $bb116;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i31 == 1;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume $i30 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} $i55 := nvme_trans_log_sense($p0, $p1, $p54);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    call {:si_unique_call 1793} {:cexpr "retcode"} boogie_si_record_i32($i55);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i49 := $i55;
    goto $bb116;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i29 == 1;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} $i53 := nvme_trans_inquiry($p0, $p1, $p52);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    call {:si_unique_call 1791} {:cexpr "retcode"} boogie_si_record_i32($i53);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i49 := $i53;
    goto $bb116;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i28 == 1;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $i51 := nvme_trans_io($p0, $p1, 1, $p50);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    call {:si_unique_call 1789} {:cexpr "retcode"} boogie_si_record_i32($i51);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb116;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i26 == 1;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i25 == 1;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i48 := nvme_trans_io($p0, $p1, 0, $p47);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    call {:si_unique_call 1787} {:cexpr "retcode"} boogie_si_record_i32($i48);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb116;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 90);
    goto $bb3;
}



const nvme_trans_status_code: ref;

axiom nvme_trans_status_code == $sub.ref(0, 619539);

procedure nvme_trans_status_code($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_trans_status_code($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i8;
  var $i41: i8;
  var $i42: i8;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} {:cexpr "nvme_trans_status_code:arg:nvme_sc"} boogie_si_record_i32($i1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 2047);
    call {:si_unique_call 1823} {:cexpr "nvme_sc"} boogie_si_record_i32($i4);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 4);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 5);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 6);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 7);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, 8);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 9);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i4, 10);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, 11);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, 128);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i4, 129);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i4, 130);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i4, 266);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i4, 384);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i4, 640);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i4, 641);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i4, 642);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i4, 643);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i4, 644);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i4, 645);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i4, 646);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i4, 3);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i4, 12);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i4, 256);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i4, 257);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i4, 258);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i4, 259);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i4, 260);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i4, 261);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i4, 262);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i4, 263);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i4, 264);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i4, 265);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 5, 2;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i42);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i41);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i40);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i52 := nvme_trans_completion($p0, $i45, $i47, $i49, $i51);
    call {:si_unique_call 1825} {:cexpr "res"} boogie_si_record_i32($i52);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i3 := $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb141:
    assume $i39 == 1;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb137:
    assume $i38 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb133:
    assume $i37 == 1;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb129:
    assume $i36 == 1;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb125:
    assume $i35 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb121:
    assume $i34 == 1;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb117:
    assume $i33 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb113:
    assume $i32 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb109:
    assume $i31 == 1;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb105:
    assume $i30 == 1;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb101:
    assume $i29 == 1;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb97:
    assume $i28 == 1;
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb93:
    assume $i27 == 1;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 9, 32, 5, 2;
    goto $bb146;

  $bb89:
    assume $i26 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 29, 14, 2;
    goto $bb146;

  $bb85:
    assume $i25 == 1;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 3, 16, 3, 2;
    goto $bb146;

  $bb81:
    assume $i24 == 1;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 2, 16, 3, 2;
    goto $bb146;

  $bb77:
    assume $i23 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 1, 16, 3, 2;
    goto $bb146;

  $bb73:
    assume $i22 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 17, 3, 2;
    goto $bb146;

  $bb69:
    assume $i21 == 1;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 3, 3, 2;
    goto $bb146;

  $bb65:
    assume $i20 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 36, 5, 2;
    goto $bb146;

  $bb61:
    assume $i19 == 1;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 1, 49, 5, 2;
    goto $bb146;

  $bb57:
    assume $i18 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 4, 2, 2;
    goto $bb146;

  $bb53:
    assume $i17 == 1;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 3, 2;
    goto $bb146;

  $bb49:
    assume $i16 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 33, 5, 2;
    goto $bb146;

  $bb45:
    assume $i15 == 1;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 9, 32, 5, 2;
    goto $bb146;

  $bb41:
    assume $i14 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 11, 64;
    goto $bb146;

  $bb37:
    assume $i13 == 1;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 11, 64;
    goto $bb146;

  $bb33:
    assume $i12 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 11, 64;
    goto $bb146;

  $bb29:
    assume $i11 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 11, 64;
    goto $bb146;

  $bb25:
    assume $i10 == 1;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 68, 4, 2;
    goto $bb146;

  $bb21:
    assume $i9 == 1;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 8, 11, 11, 64;
    goto $bb146;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 3, 2;
    goto $bb146;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 36, 5, 2;
    goto $bb146;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 32, 5, 2;
    goto $bb146;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := 0, 0, 0, 0;
    goto $bb146;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const nvme_trans_io: ref;

axiom nvme_trans_io == $sub.ref(0, 620571);

procedure nvme_trans_io($p0: ref, $p1: ref, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.46, $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_trans_io($p0: ref, $p1: ref, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $i33: i32;
  var $i34: i64;
  var $i60: i64;
  var $i32: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $i61: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $i23: i32;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1828} {:cexpr "nvme_trans_io:arg:is_write"} boogie_si_record_i8($i2);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p3);
    call {:si_unique_call 1829} {:cexpr "opcode"} boogie_si_record_i8($i6);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 10);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i6);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i6);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 42);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i6);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 40);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i6);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 170);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i6);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 168);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i6);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 138);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i6);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 136);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i43 := $i23;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb29:
    assume $i22 == 1;
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} nvme_trans_get_io_cdb16($p3, $p4);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i27 == 1);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    call {:si_unique_call 1834} {:cexpr "sum_iov_len"} boogie_si_record_i64($i64);
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    call {:si_unique_call 1841} {:cexpr "_min1"} boogie_si_record_i64($i67);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i68 := $ult.i64($i67, $i61);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i68 == 1);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i69 := $i61;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.46, $p70);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i74 := $shl.i32($i71, $i73);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i69, $i75);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.46, $p77);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i2);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $i82 := nvme_trans_do_nvme_io($p0, $p1, $p4, $i81);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    call {:si_unique_call 1843} {:cexpr "res"} boogie_si_record_i32($i82);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i23 := $i82;
    goto $bb35;

  $bb64:
    assume $i83 == 1;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i79 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb35;

  $bb58:
    assume $i76 == 1;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb35;

  $bb55:
    assume $i68 == 1;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb57;

  $bb37:
    assume $i27 == 1;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32(0, $i30);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i32 := 0;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i61 := $i32;
    goto $bb54;

  $bb39:
    assume $i31 == 1;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i33, $i34 := 0, 0;
    goto $bb42;

  $bb42:
    call $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p44, $i45, $i46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i33, $i34, $i60 := nvme_trans_io_loop_$bb42($p0, $p1, $p5, $p28, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p44, $i45, $i46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i33, $i34, $i60);
    goto $bb42_last;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i33);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i39 := $mul.i64($i38, 16);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p37, $mul.ref($i39, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i41 := copy_from_user($p35, $p40, 16);
    call {:si_unique_call 1836} {:cexpr "not_copied"} boogie_si_record_i64($i41);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i34, $i45);
    call {:si_unique_call 1837} {:cexpr "sum_iov_len"} boogie_si_record_i64($i46);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32(1, $i50);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i53 := $urem.i64($i48, $i52);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i33, 1);
    call {:si_unique_call 1840} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p28);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i56, $i58);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i60 := $i46;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i32 := $i60;
    goto $bb41;

  $bb51:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34 := $i56, $i46;
    goto $bb51_dummy;

  $bb48:
    assume $i54 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i55 := nvme_trans_completion($p1, 2, 5, 38, 0);
    call {:si_unique_call 1839} {:cexpr "res"} boogie_si_record_i32($i55);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i23 := $i55;
    goto $bb35;

  $bb44:
    assume $i42 == 1;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 14);
    goto $bb46;

  $bb25:
    assume $i20 == 1;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} nvme_trans_get_io_cdb12($p3, $p4);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} nvme_trans_get_io_cdb10($p3, $p4);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} nvme_trans_get_io_cdb6($p3, $p4);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb51_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7701;
}



const nvme_trans_inquiry: ref;

axiom nvme_trans_inquiry == $sub.ref(0, 621603);

procedure nvme_trans_inquiry($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.76, $M.29, $M.32, $M.3, assertsPassed, $CurrAddr, $M.13, $M.31, $M.21, $M.9, $M.11, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_trans_inquiry($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i28: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i42: i32;
  var $i30: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 1844} {:cexpr "evpd"} boogie_si_record_i8($i7);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 1845} {:cexpr "page_code"} boogie_si_record_i8($i9);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 8);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i13, $i16);
    call {:si_unique_call 1846} {:cexpr "alloc_len"} boogie_si_record_i32($i17);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $p19 := kmalloc($i18, 208);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i7);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i9);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i9);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 128);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i9);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 131);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i9);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 134);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i9);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 177);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i47 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1864} {:cexpr "res"} boogie_si_record_i32($i47);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i42 := $i47;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} kfree($p19);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i22 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb27:
    assume $i40 == 1;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} $i46 := nvme_trans_bdev_char_page($p0, $p1, $i17);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    call {:si_unique_call 1862} {:cexpr "res"} boogie_si_record_i32($i46);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i42 := $i46;
    goto $bb32;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} $i45 := nvme_trans_ext_inq_page($p0, $p1, $i17);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    call {:si_unique_call 1860} {:cexpr "res"} boogie_si_record_i32($i45);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    goto $bb32;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} $i44 := nvme_trans_device_id_page($p0, $p1, $p19, $i17);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    call {:si_unique_call 1858} {:cexpr "res"} boogie_si_record_i32($i44);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i42 := $i44;
    goto $bb32;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i43 := nvme_trans_unit_serial_page($p0, $p1, $p19, $i17);
    call {:si_unique_call 1856} {:cexpr "res"} boogie_si_record_i32($i43);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb32;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i41 := nvme_trans_supported_vpd_pages($p0, $p1, $p19, $i17);
    call {:si_unique_call 1854} {:cexpr "res"} boogie_si_record_i32($i41);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb32;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i9);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i29 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1851} {:cexpr "res"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb10;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $i27 := nvme_trans_standard_inquiry_page($p0, $p1, $p19, $i17);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    call {:si_unique_call 1849} {:cexpr "res"} boogie_si_record_i32($i27);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb9;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const nvme_trans_log_sense: ref;

axiom nvme_trans_log_sense == $sub.ref(0, 622635);

procedure nvme_trans_log_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_log_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i40: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 1865} {:cexpr "sp"} boogie_si_record_i8($i4);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 1868} {:cexpr "pc"} boogie_si_record_i8($i10);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 63);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1869} {:cexpr "page_code"} boogie_si_record_i8($i13);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i14, 6);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 1870} {:cexpr "pc"} boogie_si_record_i8($i16);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 1);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 8);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i25 := $sext.i16.i32($i24);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i16($i27);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i29 := $sext.i16.i32($i28);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i25, $i29);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    call {:si_unique_call 1873} {:cexpr "alloc_len"} boogie_si_record_i16($i31);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i13);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i13);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 47);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i13);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 13);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} $i45 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1881} {:cexpr "res"} boogie_si_record_i32($i45);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i31);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} $i44 := nvme_trans_log_temperature($p0, $p1, $i43);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    call {:si_unique_call 1879} {:cexpr "res"} boogie_si_record_i32($i44);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb21;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i31);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} $i42 := nvme_trans_log_info_exceptions($p0, $p1, $i41);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    call {:si_unique_call 1877} {:cexpr "res"} boogie_si_record_i32($i42);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i40 := $i42;
    goto $bb21;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i31);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i39 := nvme_trans_log_supp_pages($p0, $p1, $i38);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    call {:si_unique_call 1875} {:cexpr "res"} boogie_si_record_i32($i39);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb21;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $i19 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1872} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i7 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1867} {:cexpr "res"} boogie_si_record_i32($i7);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const nvme_trans_mode_select: ref;

axiom nvme_trans_mode_select == $sub.ref(0, 623667);

procedure nvme_trans_mode_select($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.0, $M.67, $CurrAddr, assertsPassed, $M.13, $M.9;



implementation nvme_trans_mode_select($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i16;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i19: i8;
  var $i20: i16;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 1882} {:cexpr "page_format"} boogie_si_record_i8($i4);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 1883} {:cexpr "page_format"} boogie_si_record_i8($i7);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 1884} {:cexpr "save_pages"} boogie_si_record_i8($i9);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 1885} {:cexpr "save_pages"} boogie_si_record_i8($i12);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p2);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 21);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 8);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i25);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i16($i28);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i30 := $sext.i16.i32($i29);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i26, $i30);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    call {:si_unique_call 1887} {:cexpr "parm_list_len"} boogie_si_record_i16($i32);
    assume {:verifier.code 0} true;
    $i19, $i20 := 1, $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i20);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i20);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i7);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i12);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i19);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} $i43 := nvme_trans_modesel_data($p0, $p1, $p2, $i36, $i38, $i40, $i42);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    call {:si_unique_call 1889} {:cexpr "res"} boogie_si_record_i32($i43);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb6;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i16($i17);
    call {:si_unique_call 1886} {:cexpr "parm_list_len"} boogie_si_record_i16($i18);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $i18;
    goto $bb3;
}



const nvme_trans_mode_sense: ref;

axiom nvme_trans_mode_sense == $sub.ref(0, 624699);

procedure nvme_trans_mode_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_mode_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i16;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i9: i16;
  var $i10: i8;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i52: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 26);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, 8);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i15);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i16($i18);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i32($i19);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, $i20);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    call {:si_unique_call 1891} {:cexpr "alloc_len"} boogie_si_record_i16($i22);
    assume {:verifier.code 0} true;
    $i9, $i10 := $i22, 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 192);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    call {:si_unique_call 1892} {:cexpr "pc"} boogie_si_record_i8($i27);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 63);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 1895} {:cexpr "page_code"} boogie_si_record_i8($i36);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 8);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i36);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 10);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i36);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 26);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i36);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 28);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i36);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 63);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} $i73 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1907} {:cexpr "res"} boogie_si_record_i32($i73);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i52 := $i73;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i31 := $i52;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i9);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i10);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i72 := nvme_trans_mode_page_create($p0, $p1, $p2, $i69, $i71, nvme_trans_fill_all_pages, 84);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    call {:si_unique_call 1905} {:cexpr "res"} boogie_si_record_i32($i72);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i52 := $i72;
    goto $bb29;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i9);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i10);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} $i67 := nvme_trans_mode_page_create($p0, $p1, $p2, $i64, $i66, nvme_trans_fill_inf_exc_page, 12);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    call {:si_unique_call 1903} {:cexpr "res"} boogie_si_record_i32($i67);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i52 := $i67;
    goto $bb29;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i9);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i10);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} $i62 := nvme_trans_mode_page_create($p0, $p1, $p2, $i59, $i61, nvme_trans_fill_pow_cnd_page, 40);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    call {:si_unique_call 1901} {:cexpr "res"} boogie_si_record_i32($i62);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i52 := $i62;
    goto $bb29;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i9);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i10);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i57 := nvme_trans_mode_page_create($p0, $p1, $p2, $i54, $i56, nvme_trans_fill_control_page, 12);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    call {:si_unique_call 1899} {:cexpr "res"} boogie_si_record_i32($i57);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i52 := $i57;
    goto $bb29;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i9);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i10);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i51 := nvme_trans_mode_page_create($p0, $p1, $p2, $i48, $i50, nvme_trans_fill_caching_page, 20);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    call {:si_unique_call 1897} {:cexpr "res"} boogie_si_record_i32($i51);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb29;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i30 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1894} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i16($i7);
    call {:si_unique_call 1890} {:cexpr "alloc_len"} boogie_si_record_i16($i8);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i8, 0;
    goto $bb3;
}



const nvme_trans_read_capacity: ref;

axiom nvme_trans_read_capacity == $sub.ref(0, 625731);

procedure nvme_trans_read_capacity($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.63, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_read_capacity($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i9: i1;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $i59: i8;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i32;
  var $i51: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p2);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 158);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i9);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 1909} {:cexpr "cdb16"} boogie_si_record_i8($i15);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i36, $i37 := 8, 8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $p41 := dma_alloc_attrs($p40, 4096, $p3, 208, $0.ref);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.47, $p3);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i48 := nvme_identify($p5, $i46, 0, $i47);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    call {:si_unique_call 1913} {:cexpr "nvme_sc"} boogie_si_record_i32($i48);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i49 := nvme_trans_status_code($p1, $i48);
    call {:si_unique_call 1915} {:cexpr "res"} boogie_si_record_i32($i49);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i48, 0);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p41);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i37);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} $p55 := kzalloc($i54, 208);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i15);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} nvme_trans_fill_read_cap($p55, $p53, $i59);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i60 := $ult.i32($i36, $i37);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i61 := $i37;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i63 := nvme_trans_copy_to_user($p1, $p55, $i62);
    call {:si_unique_call 1920} {:cexpr "res"} boogie_si_record_i32($i63);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} kfree($p55);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i51 := $i63;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.47, $p3);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} dma_free_attrs($p66, 4096, $p41, $i67, $0.ref);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i44 := $i51;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i61 := $i36;
    goto $bb23;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 12);
    goto $bb13;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i51 := $i48;
    goto $bb13;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb13;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref(10, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 24);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref(11, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 16);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i21, $i25);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref(12, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 8);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i26, $i30);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref(13, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i31, $i34);
    call {:si_unique_call 1910} {:cexpr "alloc_len"} boogie_si_record_i32($i35);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i35, 32;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 16);
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;
}



const nvme_trans_report_luns: ref;

axiom nvme_trans_report_luns == $sub.ref(0, 626763);

procedure nvme_trans_report_luns($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_report_luns($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i58: i8;
  var $i59: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i32;
  var $i42: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i31: i32;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(6, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 24);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 16);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, $i15);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 8);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, $i20);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref(9, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i21, $i24);
    call {:si_unique_call 1925} {:cexpr "alloc_len"} boogie_si_record_i32($i25);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    call {:si_unique_call 1926} {:cexpr "select_report"} boogie_si_record_i8($i27);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i28, 2);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $p35 := dma_alloc_attrs($p34, 4096, $p3, 208, $0.ref);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.49, $p3);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} $i39 := nvme_identify($p7, 0, 1, $i38);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    call {:si_unique_call 1931} {:cexpr "nvme_sc"} boogie_si_record_i32($i39);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $i40 := nvme_trans_status_code($p1, $i39);
    call {:si_unique_call 1933} {:cexpr "res"} boogie_si_record_i32($i40);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i39, 0);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p35);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 4096)), $mul.ref(516, 1));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.50, $p45);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i46, 8);
    call {:si_unique_call 1935} {:cexpr "ll_length"} boogie_si_record_i32($i47);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 8);
    call {:si_unique_call 1936} {:cexpr "resp_size"} boogie_si_record_i32($i48);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i25, $i48);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i48);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p52 := kzalloc($i51, 208);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p44, $mul.ref(0, 4096)), $mul.ref(516, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.50, $p55);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32(0, $i56);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i71 := __fswab32($i47);
    call {:si_unique_call 1946} {:cexpr "tmp___1"} boogie_si_record_i32($i71);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i71);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p4);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 1947} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p52, $p72, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i73 := $ult.i32($i25, $i48);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i73 == 1);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i74 := $i48;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $i76 := nvme_trans_copy_to_user($p1, $p52, $i75);
    call {:si_unique_call 1949} {:cexpr "res"} boogie_si_record_i32($i76);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} kfree($p52);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i42 := $i76;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.49, $p3);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} dma_free_attrs($p79, 4096, $p35, $i80, $0.ref);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb29:
    assume $i73 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i74 := $i25;
    goto $bb31;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i58, $i59 := 8, 0;
    goto $bb23;

  $bb23:
    call $i60, $i61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i58, $i59, cmdloc_dummy_var_73, cmdloc_dummy_var_74, cmdloc_dummy_var_75 := nvme_trans_report_luns_loop_$bb23($p5, $p52, $p55, $i60, $i61, $i62, $p63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i58, $i59, cmdloc_dummy_var_73, cmdloc_dummy_var_74, cmdloc_dummy_var_75);
    goto $bb23_last;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i61 := __fswab64($i60);
    call {:si_unique_call 1941} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i61);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i58);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p52, $mul.ref($i62, 1));
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p5);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 1942} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p63, $p64, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i58);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 8);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    call {:si_unique_call 1943} {:cexpr "lun_id_offset"} boogie_si_record_i8($i67);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i59, 1);
    call {:si_unique_call 1944} {:cexpr "lun_id"} boogie_si_record_i32($i68);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.50, $p55);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i70 := $ult.i32($i68, $i69);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i58, $i59 := $i67, $i68;
    goto $bb25_dummy;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $i50 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1938} {:cexpr "res"} boogie_si_record_i32($i50);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i42 := $i50;
    goto $bb9;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i42 := $i39;
    goto $bb9;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb9;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $i30 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1928} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8242;
}



const nvme_trans_request_sense: ref;

axiom nvme_trans_request_sense == $sub.ref(0, 627795);

procedure nvme_trans_request_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_trans_request_sense($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i33: i32;
  var $i32: i32;
  var $i34: i8;
  var $i35: i64;
  var $i36: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 1951} {:cexpr "alloc_len"} boogie_si_record_i8($i4);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 1952} {:cexpr "desc_format"} boogie_si_record_i8($i6);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 1953} {:cexpr "desc_format"} boogie_si_record_i8($i9);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 8 else 18);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1954} {:cexpr "resp_size"} boogie_si_record_i8($i13);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $p15 := kzalloc($i14, 208);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i9);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 112);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p15, $mul.ref(2, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p15, $mul.ref(7, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 10);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p15, $mul.ref(12, 1));
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p15, $mul.ref(13, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i4);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i13);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i28, $i29);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i13);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i32);
    call {:si_unique_call 1956} {:cexpr "xfer_len"} boogie_si_record_i8($i34);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $i36 := nvme_trans_copy_to_user($p1, $p15, $i35);
    call {:si_unique_call 1958} {:cexpr "res"} boogie_si_record_i32($i36);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} kfree($p15);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i18 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i4);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 114);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p15, $mul.ref(1, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p15, $mul.ref(2, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p15, $mul.ref(3, 1));
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const nvme_trans_security_protocol: ref;

axiom nvme_trans_security_protocol == $sub.ref(0, 628827);

procedure nvme_trans_security_protocol($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_trans_security_protocol($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i3 := nvme_trans_completion($p1, 2, 5, 32, 0);
    call {:si_unique_call 1961} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nvme_trans_start_stop: ref;

axiom nvme_trans_start_stop == $sub.ref(0, 629859);

procedure nvme_trans_start_stop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_trans_start_stop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i32: i32;
  var $i49: i32;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    call {:si_unique_call 1963} {:cexpr "immed"} boogie_si_record_i8($i5);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 1964} {:cexpr "pcmod"} boogie_si_record_i8($i7);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 1965} {:cexpr "pc"} boogie_si_record_i8($i9);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 1966} {:cexpr "no_flush"} boogie_si_record_i8($i11);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 1967} {:cexpr "start"} boogie_si_record_i8($i13);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i5);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 1968} {:cexpr "immed"} boogie_si_record_i8($i16);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i7);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 15);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    call {:si_unique_call 1969} {:cexpr "pcmod"} boogie_si_record_i8($i19);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i9);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i21 := $ashr.i32($i20, 4);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    call {:si_unique_call 1970} {:cexpr "pc"} boogie_si_record_i8($i22);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i11);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 4);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    call {:si_unique_call 1971} {:cexpr "no_flush"} boogie_si_record_i8($i25);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i13);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    call {:si_unique_call 1972} {:cexpr "start"} boogie_si_record_i8($i28);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i16);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i25);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i22);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i19);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i28);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i57 := nvme_trans_power_state($p0, $p1, $i52, $i54, $i56);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    call {:si_unique_call 1981} {:cexpr "res"} boogie_si_record_i32($i57);
    assume {:verifier.code 0} true;
    $i32 := $i57;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i49 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 1975} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, $p35, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i40);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i46 := nvme_submit_io_cmd($p45, $p0, $p3, $0.ref);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    call {:si_unique_call 1977} {:cexpr "nvme_sc"} boogie_si_record_i32($i46);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $i47 := nvme_trans_status_code($p1, $i46);
    call {:si_unique_call 1979} {:cexpr "res"} boogie_si_record_i32($i47);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i46, 0);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    goto $bb8;

  $bb6:
    assume $i48 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb8;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i31 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1974} {:cexpr "res"} boogie_si_record_i32($i31);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb3;
}



const nvme_trans_synchronize_cache: ref;

axiom nvme_trans_synchronize_cache == $sub.ref(0, 630891);

procedure nvme_trans_synchronize_cache($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_trans_synchronize_cache($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i1;
  var $i20: i32;
  var $i18: i32;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 1983} cmdloc_dummy_var_82 := $memset.i8(cmdloc_dummy_var_81, $p4, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i9);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i15 := nvme_submit_io_cmd($p14, $p0, $p3, $0.ref);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    call {:si_unique_call 1985} {:cexpr "nvme_sc"} boogie_si_record_i32($i15);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $i16 := nvme_trans_status_code($p1, $i15);
    call {:si_unique_call 1987} {:cexpr "res"} boogie_si_record_i32($i16);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i15, 0);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb3;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const nvme_trans_format_unit: ref;

axiom nvme_trans_format_unit == $sub.ref(0, 631923);

procedure nvme_trans_format_unit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_format_unit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i27: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    call {:si_unique_call 1989} {:cexpr "format_prot_info"} boogie_si_record_i8($i5);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    call {:si_unique_call 1990} {:cexpr "long_list"} boogie_si_record_i8($i7);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    call {:si_unique_call 1991} {:cexpr "format_data"} boogie_si_record_i8($i9);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i5);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 6);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 1992} {:cexpr "format_prot_info"} boogie_si_record_i8($i12);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i7);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 1993} {:cexpr "long_list"} boogie_si_record_i8($i15);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i9);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 1994} {:cexpr "format_data"} boogie_si_record_i8($i18);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i18);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i27);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i42 := nvme_trans_send_fw_cmd($p0, $p1, 16, 0, 0, 0);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    call {:si_unique_call 2000} {:cexpr "res"} boogie_si_record_i32($i42);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i43 := nvme_trans_fmt_set_blk_size_count($p0, $p1);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    call {:si_unique_call 2002} {:cexpr "res"} boogie_si_record_i32($i43);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.51, $p3);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $i48 := nvme_trans_fmt_send_cmd($p0, $p1, $i47);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    call {:si_unique_call 2004} {:cexpr "res"} boogie_si_record_i32($i48);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i33 := $i48;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i33 := $i43;
    goto $bb15;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i27);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i12);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i40 := nvme_trans_fmt_get_parm_header($p1, $i37, $i39, $p3);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    call {:si_unique_call 1998} {:cexpr "res"} boogie_si_record_i32($i40);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i33 := $i40;
    goto $bb15;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i12);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i32 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 1996} {:cexpr "res"} boogie_si_record_i32($i32);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb15;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i12);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i15);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb8;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i25 := 4;
    goto $bb7;
}



const nvme_trans_test_unit_ready: ref;

axiom nvme_trans_test_unit_ready == $sub.ref(0, 632955);

procedure nvme_trans_test_unit_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_trans_test_unit_ready($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} $i9 := readl($p8);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    call {:si_unique_call 2006} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} $i14 := nvme_trans_completion($p1, 0, 0, 0, 0);
    call {:si_unique_call 2010} {:cexpr "res"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $i12 := nvme_trans_completion($p1, 2, 2, 4, 0);
    call {:si_unique_call 2008} {:cexpr "res"} boogie_si_record_i32($i12);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const nvme_trans_write_buffer: ref;

axiom nvme_trans_write_buffer == $sub.ref(0, 633987);

procedure nvme_trans_write_buffer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_write_buffer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i56: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(6, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 16);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 8);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i6, $i10);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i11, $i14);
    call {:si_unique_call 2011} {:cexpr "parm_list_length"} boogie_si_record_i32($i15);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 3);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    call {:si_unique_call 2014} {:cexpr "buffer_id"} boogie_si_record_i8($i21);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 7);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 31);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    call {:si_unique_call 2017} {:cexpr "mode"} boogie_si_record_i8($i29);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 16);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 8);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, $i37);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i38, $i41);
    call {:si_unique_call 2018} {:cexpr "buffer_offset"} boogie_si_record_i32($i42);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i29);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 5);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i29);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 14);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i29);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 15);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} $i63 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2026} {:cexpr "res"} boogie_si_record_i32($i63);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i56 := $i63;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i19 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i21);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $i62 := nvme_trans_send_fw_cmd($p0, $p1, 16, $i15, $i42, $i61);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    call {:si_unique_call 2024} {:cexpr "res"} boogie_si_record_i32($i62);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i56 := $i62;
    goto $bb24;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i21);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $i59 := nvme_trans_send_fw_cmd($p0, $p1, 17, $i15, $i42, $i58);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    call {:si_unique_call 2022} {:cexpr "res"} boogie_si_record_i32($i59);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i56 := $i59;
    goto $bb24;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i21);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i51 := nvme_trans_send_fw_cmd($p0, $p1, 17, $i15, $i42, $i50);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    call {:si_unique_call 2020} {:cexpr "res"} boogie_si_record_i32($i51);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i21);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $i55 := nvme_trans_send_fw_cmd($p0, $p1, 16, $i15, $i42, $i54);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    call {:si_unique_call 2028} {:cexpr "res"} boogie_si_record_i32($i55);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb24;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i19 := $i51;
    goto $bb3;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $i24 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2016} {:cexpr "res"} boogie_si_record_i32($i24);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i19 := $i24;
    goto $bb3;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $i18 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2013} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;
}



const nvme_trans_unmap: ref;

axiom nvme_trans_unmap == $sub.ref(0, 635019);

procedure nvme_trans_unmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.54, $M.52, $M.0, $M.13, $CurrAddr, assertsPassed, $M.9;



implementation nvme_trans_unmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i64;
  var $p63: ref;
  var $i64: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i54: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i31: i32;
  var $p108: ref;
  var $i21: i32;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 8);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i32($i11);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i14);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i15);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i12, $i16);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 2031} {:cexpr "list_len"} boogie_si_record_i16($i18);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i64($i18);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} $p23 := kmalloc($i22, 208);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p24);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i64($i18);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $i29 := nvme_trans_copy_from_user($p1, $p27, $i28);
    call {:si_unique_call 2034} {:cexpr "res"} boogie_si_record_i32($i29);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} $i36 := __fswab16($i35);
    call {:si_unique_call 2037} {:cexpr "tmp___0"} boogie_si_record_i16($i36);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i37, 4);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    call {:si_unique_call 2038} {:cexpr "ndesc"} boogie_si_record_i16($i39);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 255);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i64($i39);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i47 := $mul.i64($i46, 16);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $p48 := dma_alloc_attrs($p45, $i47, $p4, 208, $0.ref);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i39);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32(0, $i52);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p3);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    call {:si_unique_call 2045} cmdloc_dummy_var_84 := $memset.i8(cmdloc_dummy_var_83, $p78, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_84;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 9);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i83);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.55, $p4);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i87);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i39);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, $sub.i32(0, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i92);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 4);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i99 := nvme_submit_io_cmd($p6, $p0, $p3, $0.ref);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    call {:si_unique_call 2047} {:cexpr "nvme_sc"} boogie_si_record_i32($i99);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $i100 := nvme_trans_status_code($p1, $i99);
    call {:si_unique_call 2049} {:cexpr "res"} boogie_si_record_i32($i100);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i64($i39);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i105 := $mul.i64($i104, 16);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p49);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.55, $p4);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} dma_free_attrs($p103, $i105, $p106, $i107, $0.ref);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i31 := $i100;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p24);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} kfree($p108);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb21;

  $bb21:
    call $i55, $p58, $i59, $i60, $i61, $p63, $i64, $p67, $i68, $i69, $i70, $p72, $i73, $p75, $i76, $i77, $i54 := nvme_trans_unmap_loop_$bb21($p24, $p49, $i52, $i55, $p58, $i59, $i60, $i61, $p63, $i64, $p67, $i68, $i69, $i70, $p72, $i73, $p75, $i76, $i77, $i54);
    goto $bb21_last;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i55, 16)), $mul.ref(8, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i60 := __fswab32($i59);
    call {:si_unique_call 2041} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i54);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p49, $mul.ref($i61, 16)), $mul.ref(4, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, $p63, $i60);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i54);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i64, 16)), $mul.ref(0, 1));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} $i69 := __fswab64($i68);
    call {:si_unique_call 2043} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i54);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p49, $mul.ref($i70, 16)), $mul.ref(8, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.54 := $store.i64($M.54, $p72, $i69);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i54);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p49, $mul.ref($i73, 16)), $mul.ref(0, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p75, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i54, 1);
    call {:si_unique_call 2044} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, $i52);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i77 == 1);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i76;
    goto $bb23_dummy;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb10;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb10;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8686;
}



const nvme_trans_completion: ref;

axiom nvme_trans_completion == $sub.ref(0, 636051);

procedure nvme_trans_completion($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_trans_completion($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i34: i32;
  var $i33: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i14: i32;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2052} {:cexpr "nvme_trans_completion:arg:status"} boogie_si_record_i8($i1);
    call {:si_unique_call 2053} {:cexpr "nvme_trans_completion:arg:sense_key"} boogie_si_record_i8($i2);
    call {:si_unique_call 2054} {:cexpr "nvme_trans_completion:arg:asc"} boogie_si_record_i8($i3);
    call {:si_unique_call 2055} {:cexpr "nvme_trans_completion:arg:ascq"} boogie_si_record_i8($i4);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} $i7 := scsi_status_is_good($i6);
    call {:si_unique_call 2057} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 1);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(65, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(70, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p5);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 2058} cmdloc_dummy_var_86 := $memset.i8(cmdloc_dummy_var_85, $p22, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_86;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 114);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $i2);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i3);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i4);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(9, 1));
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    call {:si_unique_call 2059} {:cexpr "__min1"} boogie_si_record_i8($i28);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32(8);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i29, $i30);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32(8);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i33);
    call {:si_unique_call 2060} {:cexpr "xfer_len"} boogie_si_record_i8($i35);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(67, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p5);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i35);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i41 := copy_to_user($p38, $p39, $i40);
    call {:si_unique_call 2062} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 14);
    goto $bb9;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i28);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(65, 1));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, 0);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(70, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, 0);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(67, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const scsi_status_is_good: ref;

axiom scsi_status_is_good == $sub.ref(0, 637083);

procedure scsi_status_is_good($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_status_is_good($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i1;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i3: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} {:cexpr "scsi_status_is_good:arg:status"} boogie_si_record_i32($i0);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 254);
    call {:si_unique_call 2064} {:cexpr "status"} boogie_si_record_i32($i1);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 16);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 20);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 34);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i3);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb7;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const nvme_trans_copy_from_user: ref;

axiom nvme_trans_copy_from_user == $sub.ref(0, 638115);

procedure nvme_trans_copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation nvme_trans_copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i32: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2066} {:cexpr "nvme_trans_copy_from_user:arg:n"} boogie_si_record_i64($i2);
    call {:si_unique_call 2067} {:cexpr "nvme_trans_copy_from_user:arg:remaining"} boogie_si_record_i64($i2);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $i42 := copy_from_user($p1, $p41, $i2);
    call {:si_unique_call 2076} {:cexpr "not_copied"} boogie_si_record_i64($i42);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i23 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 14);
    goto $bb28;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i10);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb10;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i12, $p13, $i14 := $i2, $p1, 0;
    goto $bb6;

  $bb6:
    call $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $p13, $i14 := nvme_trans_copy_from_user_loop_$bb6($p0, $p3, $p8, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $p13, $i14);
    goto $bb6_last;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 16);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p17, $mul.ref($i19, 1));
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $i21 := copy_from_user($p15, $p20, 16);
    call {:si_unique_call 2069} {:cexpr "not_copied"} boogie_si_record_i64($i21);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    call {:si_unique_call 2070} {:cexpr "_min2"} boogie_si_record_i64($i25);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i12, $i25);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} $i30 := copy_from_user($p13, $p29, $i27);
    call {:si_unique_call 2072} {:cexpr "not_copied"} boogie_si_record_i64($i30);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p13, $mul.ref($i27, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i12, $i27);
    call {:si_unique_call 2073} {:cexpr "remaining"} boogie_si_record_i64($i34);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i14, 1);
    call {:si_unique_call 2074} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p8);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, $i38);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13, $i14 := $i34, $p33, $i36;
    goto $bb22_dummy;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb17;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 14);
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i27 := $i12;
    goto $bb14;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 14);
    goto $bb10;

  $bb22_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8849;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 639147);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __fswab64: ref;

axiom __fswab64 == $sub.ref(0, 640179);

procedure __fswab64($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __fswab64($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} {:cexpr "__fswab64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} $i1 := llvm.bswap.i64($i0);
    call {:si_unique_call 2080} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const nvme_submit_io_cmd: ref;

axiom nvme_submit_io_cmd == $sub.ref(0, 641211);

procedure nvme_submit_io_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_submit_io_cmd($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $p6 := blk_mq_alloc_request($p5, 1, 208, 0);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} $i8 := IS_ERR($p7);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 2083} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $M.27;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 250);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} $i18 := nvme_submit_sync_cmd($p6, $p2, $p3, $i17);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    call {:si_unique_call 2087} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} blk_mq_free_request($p6);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i12 := PTR_ERR($p11);
    call {:si_unique_call 2085} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const llvm.bswap.i64: ref;

axiom llvm.bswap.i64 == $sub.ref(0, 642243);

procedure llvm.bswap.i64($i0: i64) returns ($r: i64);



const nvme_trans_send_fw_cmd: ref;

axiom nvme_trans_send_fw_cmd == $sub.ref(0, 643275);

procedure nvme_trans_send_fw_cmd($p0: ref, $p1: ref, $i2: i8, $i3: i32, $i4: i32, $i5: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_send_fw_cmd($p0: ref, $p1: ref, $i2: i8, $i3: i32, $i4: i32, $i5: i8) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p57: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i34: i32;
  var $p35: ref;
  var $i71: i32;
  var $i72: i1;
  var $i20: i32;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 2090} {:cexpr "nvme_trans_send_fw_cmd:arg:opcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 2091} {:cexpr "nvme_trans_send_fw_cmd:arg:tot_len"} boogie_si_record_i32($i3);
    call {:si_unique_call 2092} {:cexpr "nvme_trans_send_fw_cmd:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 2093} {:cexpr "nvme_trans_send_fw_cmd:arg:buffer_id"} boogie_si_record_i8($i5);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 2094} cmdloc_dummy_var_88 := $memset.i8(cmdloc_dummy_var_87, $p9, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i2);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i2);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 17);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i2);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 16);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i66 := nvme_submit_admin_cmd($p8, $p6, $0.ref);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    call {:si_unique_call 2106} {:cexpr "nvme_sc"} boogie_si_record_i32($i66);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i67 := nvme_trans_status_code($p1, $i66);
    call {:si_unique_call 2108} {:cexpr "res"} boogie_si_record_i32($i67);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i66, 0);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i67;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i34, $p35 := $i70, $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i2);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 17);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i20 := $i34;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb24:
    assume $i72 == 1;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} nvme_unmap_user_pages($p8, 1, $p35);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} nvme_free_iod($p8, $p35);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i70 := $i66;
    goto $bb23;

  $bb18:
    assume $i68 == 1;
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i34, $p35 := $i67, $p57;
    goto $bb12;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i59 == 1;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i5);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 8);
    call {:si_unique_call 2109} {:cexpr "cdw10"} boogie_si_record_i32($i61);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 4));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i61);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $p24 := nvme_map_user_pages($p8, 1, $i23, $i3);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $i26 := IS_ERR($p25);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 2099} {:cexpr "tmp___0"} boogie_si_record_i8($i27);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i32 := nvme_setup_prps($p8, $p24, $i3, 208);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    call {:si_unique_call 2104} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, $i3);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i39);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i44);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i48 := $udiv.i32($i3, 4);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, 1);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i49);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i53 := $udiv.i32($i4, 4);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i53);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p57 := $p24;
    goto $bb14;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i34, $p35 := $sub.i32(0, 12), $p24;
    goto $bb12;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p24);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $i30 := PTR_ERR($p29);
    call {:si_unique_call 2101} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    call {:si_unique_call 2102} {:cexpr "res"} boogie_si_record_i32($i31);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb5;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $i19 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2096} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;
}



const nvme_trans_fmt_get_parm_header: ref;

axiom nvme_trans_fmt_get_parm_header == $sub.ref(0, 644307);

procedure nvme_trans_fmt_get_parm_header($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.51, $CurrAddr, assertsPassed;



implementation nvme_trans_fmt_get_parm_header($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i46: i32;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} {:cexpr "nvme_trans_fmt_get_parm_header:arg:len"} boogie_si_record_i8($i1);
    call {:si_unique_call 2113} {:cexpr "nvme_trans_fmt_get_parm_header:arg:format_prot_info"} boogie_si_record_i8($i2);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i64($i1);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} $p5 := kmalloc($i4, 208);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i64($i1);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $i10 := nvme_trans_copy_from_user($p0, $p5, $i9);
    call {:si_unique_call 2116} {:cexpr "res"} boogie_si_record_i32($i10);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 8);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p5);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 7);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    call {:si_unique_call 2122} {:cexpr "pf_usage"} boogie_si_record_i8($i30);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i31, 2);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i2);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i34, $i35);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    call {:si_unique_call 2123} {:cexpr "pf_code"} boogie_si_record_i8($i37);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i37);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i37);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 3);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i37);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 7);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $i47 := nvme_trans_completion($p0, 2, 5, 36, 0);
    call {:si_unique_call 2125} {:cexpr "res"} boogie_si_record_i32($i47);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} kfree($p5);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 3);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i46 := $i10;
    goto $bb35;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 2);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i46 := $i10;
    goto $bb35;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 1);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i46 := $i10;
    goto $bb35;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 0);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i46 := $i10;
    goto $bb35;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p5, $mul.ref(3, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 15);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} $i26 := nvme_trans_completion($p0, 2, 5, 36, 0);
    call {:si_unique_call 2121} {:cexpr "res"} boogie_si_record_i32($i26);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb7;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $i18 := nvme_trans_completion($p0, 2, 5, 36, 0);
    call {:si_unique_call 2119} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const nvme_trans_fmt_set_blk_size_count: ref;

axiom nvme_trans_fmt_set_blk_size_count == $sub.ref(0, 645339);

procedure nvme_trans_fmt_set_blk_size_count($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_fmt_set_blk_size_count($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i24: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i17 := $i54;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $p14 := dma_alloc_attrs($p13, 4096, $p2, 208, $0.ref);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.57, $p2);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $i21 := nvme_identify($p4, $i19, 0, $i20);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    call {:si_unique_call 2129} {:cexpr "nvme_sc"} boogie_si_record_i32($i21);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $i22 := nvme_trans_status_code($p1, $i21);
    call {:si_unique_call 2131} {:cexpr "res"} boogie_si_record_i32($i22);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i21, 0);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p14);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.57, $p2);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} dma_free_attrs($p52, 4096, $p14, $i53, $0.ref);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i54 := $i24;
    goto $bb23;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.56, $p36);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 15);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 2133} {:cexpr "flbas"} boogie_si_record_i8($i40);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i42, 4)), $mul.ref(2, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.56, $p45);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32(1, $i47);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 4096)), $mul.ref(8, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.56, $p30);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i24 := $i21;
    goto $bb12;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const nvme_trans_fmt_send_cmd: ref;

axiom nvme_trans_fmt_send_cmd == $sub.ref(0, 646371);

procedure nvme_trans_fmt_send_cmd($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_fmt_send_cmd($p0: ref, $p1: ref, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i27: i8;
  var $i40: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i32;
  var $i20: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i13: i32;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 2136} {:cexpr "nvme_trans_fmt_send_cmd:arg:prot_info"} boogie_si_record_i8($i2);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $p10 := dma_alloc_attrs($p9, 4096, $p3, 208, $0.ref);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.59, $p3);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $i17 := nvme_identify($p6, $i15, 0, $i16);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    call {:si_unique_call 2139} {:cexpr "nvme_sc"} boogie_si_record_i32($i17);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} $i18 := nvme_trans_status_code($p1, $i17);
    call {:si_unique_call 2141} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i17, 0);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p10);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4096)), $mul.ref(25, 1));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.58, $p23);
    call {:si_unique_call 2143} {:cexpr "nlbaf"} boogie_si_record_i8($i24);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32(0, $i25);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i40 := $sub.i8(0, 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i40);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 15);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p22, $mul.ref(0, 4096)), $mul.ref(8, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.58, $p51);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i50, $i52);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i2);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i55, 5);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i57 := $or.i32(0, $i56);
    call {:si_unique_call 2149} {:cexpr "cdw10"} boogie_si_record_i32($i57);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i40);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 15);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i57, $i59);
    call {:si_unique_call 2150} {:cexpr "cdw10"} boogie_si_record_i32($i60);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p4);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 2151} cmdloc_dummy_var_90 := $memset.i8(cmdloc_dummy_var_89, $p61, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $sub.i8(0, 128));
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i66);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i60);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} $i73 := nvme_submit_admin_cmd($p6, $p4, $0.ref);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    call {:si_unique_call 2153} {:cexpr "nvme_sc"} boogie_si_record_i32($i73);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} $i74 := nvme_trans_status_code($p1, $i73);
    call {:si_unique_call 2155} {:cexpr "res"} boogie_si_record_i32($i74);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i73, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $i74;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i20 := $i77;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.59, $p3);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} dma_free_attrs($p80, 4096, $p10, $i81, $0.ref);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb33:
    assume $i76 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i77 := $i73;
    goto $bb35;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i20 := $i74;
    goto $bb7;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i53 == 1;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i54 := nvme_trans_completion($p1, 2, 5, 38, 0);
    call {:si_unique_call 2148} {:cexpr "res"} boogie_si_record_i32($i54);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $i48 := nvme_trans_completion($p1, 2, 5, 38, 0);
    call {:si_unique_call 2146} {:cexpr "res"} boogie_si_record_i32($i48);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb15;

  $bb15:
    call $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, $i45, $i27 := nvme_trans_fmt_send_cmd_loop_$bb15($p0, $p22, $i25, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, $i45, $i27);
    goto $bb15_last;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i27);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.58, $p34);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32(1, $i36);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i29, $i37);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i39 := $i27;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i27);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    call {:si_unique_call 2144} {:cexpr "i"} boogie_si_record_i8($i43);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, $i25);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i43;
    goto $bb21_dummy;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb19;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb7;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9243;
}



const nvme_trans_power_state: ref;

axiom nvme_trans_power_state == $sub.ref(0, 647403);

procedure nvme_trans_power_state($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_power_state($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i53: i32;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i55: i32;
  var $i52: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i64: i32;
  var $i71: i32;
  var $i47: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i19: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2157} {:cexpr "nvme_trans_power_state:arg:pc"} boogie_si_record_i8($i2);
    call {:si_unique_call 2158} {:cexpr "nvme_trans_power_state:arg:pcmod"} boogie_si_record_i8($i3);
    call {:si_unique_call 2159} {:cexpr "nvme_trans_power_state:arg:start"} boogie_si_record_i8($i4);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $p11 := dma_alloc_attrs($p10, 4096, $p5, 208, $0.ref);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.61, $p5);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $i16 := nvme_identify($p7, 0, 1, $i15);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    call {:si_unique_call 2162} {:cexpr "nvme_sc"} boogie_si_record_i32($i16);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i17 := nvme_trans_status_code($p1, $i16);
    call {:si_unique_call 2164} {:cexpr "res"} boogie_si_record_i32($i17);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i16, 0);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p11);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 4096)), $mul.ref(263, 1));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.62, $p22);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $sub.i32(0, 1));
    call {:si_unique_call 2166} {:cexpr "_max2"} boogie_si_record_i32($i25);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32(0, $i25);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i2);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i2);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i2);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 7);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $i71 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2168} {:cexpr "res"} boogie_si_record_i32($i71);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $i72 := nvme_set_features($p7, 2, $i47, 0, $0.ref);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    call {:si_unique_call 2170} {:cexpr "nvme_sc"} boogie_si_record_i32($i72);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i73 := nvme_trans_status_code($p1, $i72);
    call {:si_unique_call 2172} {:cexpr "res"} boogie_si_record_i32($i73);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i72, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $i73;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i19 := $i76;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.61, $p5);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} dma_free_attrs($p79, 4096, $p11, $i80, $0.ref);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb74:
    assume $i75 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i76 := $i72;
    goto $bb76;

  $bb71:
    assume $i74 == 1;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i19 := $i73;
    goto $bb7;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i37 == 1;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i3);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i60 == 1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i3);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i64 := $i70;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i47 := $i64;
    goto $bb45;

  $bb64:
    assume $i66 == 1;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i27, $sub.i32(0, 1));
    call {:si_unique_call 2174} {:cexpr "_max2___1"} boogie_si_record_i32($i67);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32(0, $i67);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i68 == 1);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb69;

  $bb66:
    assume $i68 == 1;
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb68;

  $bb58:
    assume $i60 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i27, $sub.i32(0, 2));
    call {:si_unique_call 2173} {:cexpr "_max2___0"} boogie_si_record_i32($i61);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32(0, $i61);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i62 == 1);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb63;

  $bb60:
    assume $i62 == 1;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb62;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i3);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i51 == 1);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i3);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i54 == 1);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i3);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 2);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55 := $i58;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i52 := $i55;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb45;

  $bb55:
    assume $i57 == 1;
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i58 := 3;
    goto $bb57;

  $bb52:
    assume $i54 == 1;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i55 := 2;
    goto $bb54;

  $bb49:
    assume $i51 == 1;
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb51;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i3);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb45;

  $bb46:
    assume $i49 == 1;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i3);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i3);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i4);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb45;

  $bb42:
    assume $i45 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i46 := $i27;
    goto $bb44;

  $bb36:
    assume $i39 == 1;
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i4);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb38;

  $bb39:
    assume $i41 == 1;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb14;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb7;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb7;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;
}



const nvme_trans_copy_to_user: ref;

axiom nvme_trans_copy_to_user == $sub.ref(0, 648435);

procedure nvme_trans_copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation nvme_trans_copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i32: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2176} {:cexpr "nvme_trans_copy_to_user:arg:n"} boogie_si_record_i64($i2);
    call {:si_unique_call 2177} {:cexpr "nvme_trans_copy_to_user:arg:remaining"} boogie_si_record_i64($i2);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $i42 := copy_to_user($p41, $p1, $i2);
    call {:si_unique_call 2186} {:cexpr "not_copied"} boogie_si_record_i64($i42);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i23 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 14);
    goto $bb28;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i10);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb10;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i12, $p13, $i14 := $i2, $p1, 0;
    goto $bb6;

  $bb6:
    call $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $p13, $i14 := nvme_trans_copy_to_user_loop_$bb6($p0, $p3, $p8, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $p13, $i14);
    goto $bb6_last;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 16);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p17, $mul.ref($i19, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $i21 := copy_from_user($p15, $p20, 16);
    call {:si_unique_call 2179} {:cexpr "not_copied"} boogie_si_record_i64($i21);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    call {:si_unique_call 2180} {:cexpr "_min2"} boogie_si_record_i64($i25);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i12, $i25);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} $i30 := copy_to_user($p29, $p13, $i27);
    call {:si_unique_call 2182} {:cexpr "not_copied"} boogie_si_record_i64($i30);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p13, $mul.ref($i27, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i34 := $sub.i64($i12, $i27);
    call {:si_unique_call 2183} {:cexpr "remaining"} boogie_si_record_i64($i34);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i14, 1);
    call {:si_unique_call 2184} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p8);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, $i38);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i12, $p13, $i14 := $i34, $p33, $i36;
    goto $bb22_dummy;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb17;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 14);
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i27 := $i12;
    goto $bb14;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 14);
    goto $bb10;

  $bb22_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9484;
}



const nvme_trans_fill_read_cap: ref;

axiom nvme_trans_fill_read_cap == $sub.ref(0, 649467);

procedure nvme_trans_fill_read_cap($p0: ref, $p1: ref, $i2: i8);
  free requires assertsPassed;
  modifies $M.63, $M.0, $CurrAddr;



implementation nvme_trans_fill_read_cap($p0: ref, $p1: ref, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i64;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2191} {:cexpr "nvme_trans_fill_read_cap:arg:cdb16"} boogie_si_record_i8($i2);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p7, 0);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p8, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p9, 1);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $M.63 := $store.i8($M.63, $p10, 2);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.29, $p11);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 15);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    call {:si_unique_call 2192} {:cexpr "flbas"} boogie_si_record_i8($i15);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i17, 4)), $mul.ref(2, 1));
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.29, $p20);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32(1, $i22);
    call {:si_unique_call 2193} {:cexpr "lba_length"} boogie_si_record_i32($i23);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 4096)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} $i25 := __le64_to_cpup($p24);
    call {:si_unique_call 2195} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i25, 1);
    call {:si_unique_call 2196} {:cexpr "rlba"} boogie_si_record_i64($i26);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 4096)), $mul.ref(29, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.29, $p27);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i2);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $i42 := __fswab64($i26);
    call {:si_unique_call 2198} {:cexpr "tmp___2"} boogie_si_record_i64($i42);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i42);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} $i43 := __fswab32($i23);
    call {:si_unique_call 2200} {:cexpr "tmp___3"} boogie_si_record_i32($i43);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i43);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p4);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 2201} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p0, $p44, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p6);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 2202} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p45, $p46, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 4096)), $mul.ref(29, 1));
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.29, $p47);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 3);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref($i51, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.63, $p52);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 1);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i57 := $sext.i8.i32($i56);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i31);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i57, $i58);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $i60);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64($i26, 4294967295);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i37 := __fswab32($i36);
    call {:si_unique_call 2204} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i37);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i38 := __fswab32($i23);
    call {:si_unique_call 2206} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i38);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p5);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 2207} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p0, $p39, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p6);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 2208} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p40, $p41, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i34 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i35 := 4294967295;
    goto $bb8;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb3;
}



const nvme_trans_fill_caching_page: ref;

axiom nvme_trans_fill_caching_page == $sub.ref(0, 650499);

procedure nvme_trans_fill_caching_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_fill_caching_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2210} {:cexpr "nvme_trans_fill_caching_page:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i3, 19);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $i9 := nvme_get_features($p6, 6, 0, 0, $p4);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    call {:si_unique_call 2212} {:cexpr "nvme_sc"} boogie_si_record_i32($i9);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i10 := nvme_trans_status_code($p1, $i9);
    call {:si_unique_call 2214} {:cexpr "res"} boogie_si_record_i32($i10);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i9, 0);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.33, $p4);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 2215} {:cexpr "vwc"} boogie_si_record_i8($i18);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 8);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 18);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i18);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 2);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb7;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;
}



const nvme_trans_mode_page_create: ref;

axiom nvme_trans_mode_page_create == $sub.ref(0, 651531);

procedure nvme_trans_mode_page_create($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $i6: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_mode_page_create($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $i6: i16) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i75: i64;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i85: i32;
  var $i84: i32;
  var $i86: i64;
  var $i87: i32;
  var $i65: i32;
  var $i54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} {:cexpr "nvme_trans_mode_page_create:arg:alloc_len"} boogie_si_record_i16($i3);
    call {:si_unique_call 2217} {:cexpr "nvme_trans_mode_page_create:arg:cdb10"} boogie_si_record_i8($i4);
    call {:si_unique_call 2218} {:cexpr "nvme_trans_mode_page_create:arg:mode_pages_tot_len"} boogie_si_record_i16($i6);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i10, 3);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    call {:si_unique_call 2219} {:cexpr "dbd"} boogie_si_record_i8($i12);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i17 := $ashr.i32($i16, 4);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 2220} {:cexpr "llbaa"} boogie_si_record_i8($i18);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i4);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 8 else 4);
    call {:si_unique_call 2221} {:cexpr "mph_size"} boogie_si_record_i32($i21);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i12);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i18);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} $i26 := nvme_trans_get_blk_desc_len($i23, $i25);
    call {:si_unique_call 2223} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 2224} {:cexpr "blk_desc_len"} boogie_si_record_i16($i27);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i21);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i27);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i29, $i30);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i6);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i31, $i32);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    call {:si_unique_call 2225} {:cexpr "resp_size"} boogie_si_record_i16($i34);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i4);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i38, 3);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i27);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i39, $i40);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i6);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i41, $i42);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 2226} {:cexpr "mode_data_length"} boogie_si_record_i16($i44);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i21);
    call {:si_unique_call 2227} {:cexpr "blk_desc_offset"} boogie_si_record_i16($i45);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i27);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i46, $i47);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    call {:si_unique_call 2228} {:cexpr "mode_pages_offset_1"} boogie_si_record_i16($i49);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i64($i34);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} $p51 := kzalloc($i50, 208);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i4);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i18);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i44);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i27);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} $i63 := nvme_trans_fill_mode_parm_hdr($p51, $i21, $i56, $i58, $i60, $i62);
    call {:si_unique_call 2231} {:cexpr "res"} boogie_si_record_i32($i63);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i27);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i64($i49);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p51, $mul.ref($i75, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i6);
    call {:si_unique_call 2235} $i78 := devirtbounce.27($p5, $p0, $p1, $p76, $i77);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    call {:si_unique_call 2236} {:cexpr "res"} boogie_si_record_i32($i78);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call {:si_unique_call 2237} {:cexpr "nvme_trans_mode_page_create:arg:_min1"} boogie_si_record_i16($i3);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i3);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i34);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i80, $i81);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i82 == 1);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i34);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i84 := $i85;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i84);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i87 := nvme_trans_copy_to_user($p1, $p51, $i86);
    call {:si_unique_call 2239} {:cexpr "res"} boogie_si_record_i32($i87);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i65 := $i87;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} kfree($p51);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i54 := $i65;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb18:
    assume $i82 == 1;
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i3);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb20;

  $bb15:
    assume $i79 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i65 := $i78;
    goto $bb7;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i67 == 1;
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i64($i45);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p51, $mul.ref($i68, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i27);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i18);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $i73 := nvme_trans_fill_blk_desc($p0, $p1, $p69, $i70, $i72);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    call {:si_unique_call 2234} {:cexpr "res"} boogie_si_record_i32($i73);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i74 == 1;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i65 := $i73;
    goto $bb7;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i64 == 1;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    goto $bb7;

  $bb1:
    assume $i53 == 1;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_931:
    assume !assertsPassed;
    return;
}



const nvme_trans_fill_control_page: ref;

axiom nvme_trans_fill_control_page == $sub.ref(0, 652563);

procedure nvme_trans_fill_control_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_trans_fill_control_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} {:cexpr "nvme_trans_fill_control_page:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 11);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 10);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 10);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 14);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 18);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 64);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $sub.i8(0, 1));
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p2, $mul.ref(9, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const nvme_trans_fill_pow_cnd_page: ref;

axiom nvme_trans_fill_pow_cnd_page == $sub.ref(0, 653595);

procedure nvme_trans_fill_pow_cnd_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_trans_fill_pow_cnd_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} {:cexpr "nvme_trans_fill_pow_cnd_page:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 39);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 26);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 38);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const nvme_trans_fill_inf_exc_page: ref;

axiom nvme_trans_fill_inf_exc_page == $sub.ref(0, 654627);

procedure nvme_trans_fill_inf_exc_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_trans_fill_inf_exc_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} {:cexpr "nvme_trans_fill_inf_exc_page:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 11);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 28);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 10);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 120));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const nvme_trans_fill_all_pages: ref;

axiom nvme_trans_fill_all_pages == $sub.ref(0, 655659);

procedure nvme_trans_fill_all_pages($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_fill_all_pages($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} {:cexpr "nvme_trans_fill_all_pages:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32(0);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 20);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    call {:si_unique_call 2244} {:cexpr "mode_pages_offset_2"} boogie_si_record_i16($i6);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 12);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 2245} {:cexpr "mode_pages_offset_3"} boogie_si_record_i16($i9);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 40);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 2246} {:cexpr "mode_pages_offset_4"} boogie_si_record_i16($i12);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i64(0);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref($i13, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $i15 := nvme_trans_fill_caching_page($p0, $p1, $p14, 20);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    call {:si_unique_call 2248} {:cexpr "res"} boogie_si_record_i32($i15);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i6);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 1));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $i20 := nvme_trans_fill_control_page($p0, $p1, $p19, 12);
    call {:si_unique_call 2250} {:cexpr "res"} boogie_si_record_i32($i20);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i64($i9);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref($i22, 1));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $i24 := nvme_trans_fill_pow_cnd_page($p0, $p1, $p23, 40);
    call {:si_unique_call 2252} {:cexpr "res"} boogie_si_record_i32($i24);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i64($i12);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 1));
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $i28 := nvme_trans_fill_inf_exc_page($p0, $p1, $p27, 12);
    call {:si_unique_call 2254} {:cexpr "res"} boogie_si_record_i32($i28);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const nvme_trans_get_blk_desc_len: ref;

axiom nvme_trans_get_blk_desc_len == $sub.ref(0, 656691);

procedure nvme_trans_get_blk_desc_len($i0: i8, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_trans_get_blk_desc_len($i0: i8, $i1: i8) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} {:cexpr "nvme_trans_get_blk_desc_len:arg:dbd"} boogie_si_record_i8($i0);
    call {:si_unique_call 2256} {:cexpr "nvme_trans_get_blk_desc_len:arg:llbaa"} boogie_si_record_i8($i1);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 8);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const nvme_trans_fill_mode_parm_hdr: ref;

axiom nvme_trans_fill_mode_parm_hdr == $sub.ref(0, 657723);

procedure nvme_trans_fill_mode_parm_hdr($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_trans_fill_mode_parm_hdr($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} {:cexpr "nvme_trans_fill_mode_parm_hdr:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 2258} {:cexpr "nvme_trans_fill_mode_parm_hdr:arg:cdb10"} boogie_si_record_i8($i2);
    call {:si_unique_call 2259} {:cexpr "nvme_trans_fill_mode_parm_hdr:arg:llbaa"} boogie_si_record_i8($i3);
    call {:si_unique_call 2260} {:cexpr "nvme_trans_fill_mode_parm_hdr:arg:mode_data_length"} boogie_si_record_i16($i4);
    call {:si_unique_call 2261} {:cexpr "nvme_trans_fill_mode_parm_hdr:arg:blk_desc_len"} boogie_si_record_i16($i5);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i2);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i16.i8($i4);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i28);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i16.i8($i5);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i4);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 8);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i17);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i16.i8($i4);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i3);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 0);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i5);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i23 := $ashr.i32($i22, 8);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i16.i8($i5);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i1, 3);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i1, 7);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;
}



const nvme_trans_fill_blk_desc: ref;

axiom nvme_trans_fill_blk_desc == $sub.ref(0, 658755);

procedure nvme_trans_fill_blk_desc($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_fill_blk_desc($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i32: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i25: i32;
  var $i15: i32;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2267} {:cexpr "nvme_trans_fill_blk_desc:arg:len"} boogie_si_record_i32($i3);
    call {:si_unique_call 2268} {:cexpr "nvme_trans_fill_blk_desc:arg:llbaa"} boogie_si_record_i8($i4);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i4);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i4);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $p22 := dma_alloc_attrs($p21, 4096, $p5, 208, $0.ref);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.65, $p5);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i29 := nvme_identify($p11, $i27, 0, $i28);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    call {:si_unique_call 2271} {:cexpr "nvme_sc"} boogie_si_record_i32($i29);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i30 := nvme_trans_status_code($p1, $i29);
    call {:si_unique_call 2273} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i29, 0);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p22);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(26, 1));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.64, $p35);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 15);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 2275} {:cexpr "flbas"} boogie_si_record_i8($i39);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref($i41, 4)), $mul.ref(2, 1));
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.64, $p44);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32(1, $i46);
    call {:si_unique_call 2276} {:cexpr "lba_length"} boogie_si_record_i32($i47);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i4);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(8, 1));
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.64, $p59);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $i61 := __fswab64($i60);
    call {:si_unique_call 2284} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i61);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} $i62 := __fswab32($i47);
    call {:si_unique_call 2286} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i62);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p8);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.0;
    cmdloc_dummy_var_110 := $M.0;
    call {:si_unique_call 2287} cmdloc_dummy_var_111 := $memcpy.i8(cmdloc_dummy_var_109, cmdloc_dummy_var_110, $p2, $p63, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_111;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p2, $mul.ref(12, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p9);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.0;
    cmdloc_dummy_var_113 := $M.0;
    call {:si_unique_call 2288} cmdloc_dummy_var_114 := $memcpy.i8(cmdloc_dummy_var_112, cmdloc_dummy_var_113, $p64, $p65, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_114;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.65, $p5);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} dma_free_attrs($p68, 4096, $p22, $i69, $0.ref);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i25 := $i32;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(8, 1));
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.64, $p50);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $i53 := __fswab32($i52);
    call {:si_unique_call 2278} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i53);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i47, 16777215);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} $i55 := __fswab32($i54);
    call {:si_unique_call 2280} {:cexpr "tmp___0"} boogie_si_record_i32($i55);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i55);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p6);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    cmdloc_dummy_var_104 := $M.0;
    call {:si_unique_call 2281} cmdloc_dummy_var_105 := $memcpy.i8(cmdloc_dummy_var_103, cmdloc_dummy_var_104, $p2, $p56, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_105;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p7);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_106 := $M.0;
    cmdloc_dummy_var_107 := $M.0;
    call {:si_unique_call 2282} cmdloc_dummy_var_108 := $memcpy.i8(cmdloc_dummy_var_106, cmdloc_dummy_var_107, $p57, $p58, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_108;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i33 == 1;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb20;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb20;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb16;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i3, 15);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i3, 7);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;
}



const nvme_get_features: ref;

axiom nvme_get_features == $sub.ref(0, 659787);

procedure nvme_get_features($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_get_features($p0: ref, $i1: i32, $i2: i32, $i3: i64, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 2290} {:cexpr "nvme_get_features:arg:fid"} boogie_si_record_i32($i1);
    call {:si_unique_call 2291} {:cexpr "nvme_get_features:arg:nsid"} boogie_si_record_i32($i2);
    call {:si_unique_call 2292} {:cexpr "nvme_get_features:arg:dma_addr"} boogie_si_record_i64($i3);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    call {:si_unique_call 2293} cmdloc_dummy_var_116 := $memset.i8(cmdloc_dummy_var_115, $p6, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_116;
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 10);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i2);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i3);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i1);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} $i19 := nvme_submit_admin_cmd($p0, $p5, $p4);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    call {:si_unique_call 2295} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const nvme_trans_modesel_data: ref;

axiom nvme_trans_modesel_data == $sub.ref(0, 660819);

procedure nvme_trans_modesel_data($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i8, $i5: i8, $i6: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.0, $M.67, $CurrAddr, assertsPassed, $M.13, $M.9;



implementation nvme_trans_modesel_data($p0: ref, $p1: ref, $p2: ref, $i3: i16, $i4: i8, $i5: i8, $i6: i8) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $i41: i16;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i16;
  var $i71: i64;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i92: i32;
  var $i17: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 2298} {:cexpr "nvme_trans_modesel_data:arg:parm_list_len"} boogie_si_record_i16($i3);
    call {:si_unique_call 2299} {:cexpr "nvme_trans_modesel_data:arg:pf"} boogie_si_record_i8($i4);
    call {:si_unique_call 2300} {:cexpr "nvme_trans_modesel_data:arg:sp"} boogie_si_record_i8($i5);
    call {:si_unique_call 2301} {:cexpr "nvme_trans_modesel_data:arg:cdb10"} boogie_si_record_i8($i6);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $M.66 := $store.i8($M.66, $p8, 0);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i3);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $p10 := kmalloc($i9, 208);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i64($i3);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i15 := nvme_trans_copy_from_user($p1, $p10, $i14);
    call {:si_unique_call 2304} {:cexpr "res"} boogie_si_record_i32($i15);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i6);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} nvme_trans_modesel_get_bd_len($p10, $i19, $p7, $p8);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i6);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i22 := (if $i21 == 1 then 8 else 4);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 2307} {:cexpr "index"} boogie_si_record_i16($i23);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.67, $p7);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i23;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb12;

  $bb12:
    call $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63, $i64, $i65, $i66, $i67, $i68, $i69 := nvme_trans_modesel_data_loop_$bb12($i3, $p10, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63, $i64, $i65, $i66, $i67, $i68, $i69);
    goto $bb12_last;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i64($i41);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p10, $mul.ref($i42, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 63);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    call {:si_unique_call 2310} {:cexpr "page_code"} boogie_si_record_i8($i47);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i64($i41);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 1);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p10, $mul.ref($i49, 1));
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i16($i51);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 2);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    call {:si_unique_call 2311} {:cexpr "mp_size"} boogie_si_record_i16($i55);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i47);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 8);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i41);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i55);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i63, $i64);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    call {:si_unique_call 2314} {:cexpr "index"} boogie_si_record_i16($i66);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i3);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, $i68);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i70 := $i40;
    goto $bb24;

  $bb24:
    call $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100 := nvme_trans_modesel_data_loop_$bb24($p0, $p1, $i3, $p10, $i70, $i71, $p72, $i73, $i74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100);
    goto $bb24_last;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i64($i70);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p10, $mul.ref($i71, 1));
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 63);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    call {:si_unique_call 2315} {:cexpr "page_code"} boogie_si_record_i8($i76);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i64($i70);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i77, 1);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p10, $mul.ref($i78, 1));
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i16($i80);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 2);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    call {:si_unique_call 2316} {:cexpr "mp_size"} boogie_si_record_i16($i84);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i64($i70);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p10, $mul.ref($i85, 1));
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i76);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} $i89 := nvme_trans_modesel_get_mp($p0, $p1, $p86, $i88);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    call {:si_unique_call 2318} {:cexpr "res"} boogie_si_record_i32($i89);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i70);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i84);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i93, $i94);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    call {:si_unique_call 2319} {:cexpr "index"} boogie_si_record_i16($i96);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i3);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i97, $i98);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i100 := $i89;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i92 := $i100;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i17 := $i92;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} kfree($p10);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb29:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i70 := $i96;
    goto $bb29_dummy;

  $bb25:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb27;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i66;
    goto $bb21_dummy;

  $bb13:
    assume $i57 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i47);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 10);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb15;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i47);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 26);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb15;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} $i62 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2313} {:cexpr "res"} boogie_si_record_i32($i62);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $i17 := $i62;
    goto $bb7;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i23);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.67, $p7);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.66, $p8);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} nvme_trans_modesel_save_bd($p0, $p10, $i28, $i31, $i34);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i23);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.67, $p7);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i35, $i37);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    call {:si_unique_call 2309} {:cexpr "index"} boogie_si_record_i16($i39);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb11;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb29_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10100;

  $bb21_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10063;
}



const nvme_trans_modesel_get_bd_len: ref;

axiom nvme_trans_modesel_get_bd_len == $sub.ref(0, 661851);

procedure nvme_trans_modesel_get_bd_len($p0: ref, $i1: i8, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.67, $M.66;



implementation nvme_trans_modesel_get_bd_len($p0: ref, $i1: i8, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} {:cexpr "nvme_trans_modesel_get_bd_len:arg:cdb10"} boogie_si_record_i8($i1);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i16($i23);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p2, $i24);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i16($i7);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 8);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i16($i12);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i10, $i14);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $M.67 := $store.i16($M.67, $p2, $i16);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.66 := $store.i8($M.66, $p3, $i21);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_trans_modesel_save_bd: ref;

axiom nvme_trans_modesel_save_bd == $sub.ref(0, 662883);

procedure nvme_trans_modesel_save_bd($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation nvme_trans_modesel_save_bd($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i8)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} {:cexpr "nvme_trans_modesel_save_bd:arg:idx"} boogie_si_record_i16($i2);
    call {:si_unique_call 2322} {:cexpr "nvme_trans_modesel_save_bd:arg:bd_len"} boogie_si_record_i16($i3);
    call {:si_unique_call 2323} {:cexpr "nvme_trans_modesel_save_bd:arg:llbaa"} boogie_si_record_i8($i4);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i64($i2);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref($i48, 1));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i52 := $shl.i64($i51, 56);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i64($i2);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 1);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p1, $mul.ref($i54, 1));
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i58 := $shl.i64($i57, 48);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i52, $i58);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i64($i2);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, 2);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p1, $mul.ref($i61, 1));
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i65 := $shl.i64($i64, 40);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i59, $i65);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i64($i2);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 3);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref($i68, 1));
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $i72 := $shl.i64($i71, 32);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i66, $i72);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i64($i2);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, 4);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p1, $mul.ref($i75, 1));
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i79 := $shl.i64($i78, 24);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i73, $i79);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i64($i2);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 5);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p1, $mul.ref($i82, 1));
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i86 := $shl.i64($i85, 16);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i87 := $add.i64($i80, $i86);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i64($i2);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i88, 6);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p1, $mul.ref($i89, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $i93 := $shl.i64($i92, 8);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i87, $i93);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i64($i2);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 7);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p1, $mul.ref($i96, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i100 := $add.i64($i94, $i99);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, $i100);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i64($i2);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 12);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p1, $mul.ref($i103, 1));
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i107 := $shl.i32($i106, 24);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i64($i2);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, 13);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p1, $mul.ref($i109, 1));
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i113 := $shl.i32($i112, 16);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i107, $i113);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i64($i2);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i116 := $add.i64($i115, 14);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p1, $mul.ref($i116, 1));
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i120 := $shl.i32($i119, 8);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i114, $i120);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i122 := $zext.i16.i64($i2);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i123 := $add.i64($i122, 15);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p1, $mul.ref($i123, 1));
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i121, $i126);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i64($i2);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 16);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i64($i2);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 2);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref($i14, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 8);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i12, $i18);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i2);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 3);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref($i21, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i19, $i24);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i64($i2);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 5);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref($i29, 1));
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 16);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i64($i2);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 6);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p1, $mul.ref($i35, 1));
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 8);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i33, $i39);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i64($i2);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 7);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p1, $mul.ref($i42, 1));
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i40, $i45);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_trans_modesel_get_mp: ref;

axiom nvme_trans_modesel_get_mp == $sub.ref(0, 663915);

procedure nvme_trans_modesel_get_mp($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_modesel_get_mp($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} {:cexpr "nvme_trans_modesel_get_mp:arg:page_code"} boogie_si_record_i8($i3);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i3);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 8);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i3);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 10);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i3);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 26);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} $i36 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2331} {:cexpr "res"} boogie_si_record_i32($i36);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i21 := $i38;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb30:
    assume $i37 == 1;
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb32;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i27 == 1);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 15);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb16;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} $i33 := nvme_trans_completion($p1, 2, 5, 38, 0);
    call {:si_unique_call 2333} {:cexpr "res"} boogie_si_record_i32($i33);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i33;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb16;

  $bb26:
    assume $i34 == 1;
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb28;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb22;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 4);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 2325} {:cexpr "dword11"} boogie_si_record_i32($i17);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} $i18 := nvme_set_features($p5, 6, $i17, 0, $0.ref);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    call {:si_unique_call 2327} {:cexpr "nvme_sc"} boogie_si_record_i32($i18);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} $i19 := nvme_trans_status_code($p1, $i18);
    call {:si_unique_call 2329} {:cexpr "res"} boogie_si_record_i32($i19);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i18, 0);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb16;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb16;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb16;

  SeqInstr_955:
    assume !assertsPassed;
    return;
}



const nvme_trans_log_supp_pages: ref;

axiom nvme_trans_log_supp_pages == $sub.ref(0, 664947);

procedure nvme_trans_log_supp_pages($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_trans_log_supp_pages($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} {:cexpr "nvme_trans_log_supp_pages:arg:alloc_len"} boogie_si_record_i32($i2);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} $p3 := kzalloc(7, 208);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref(3, 1));
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 3);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p3, $mul.ref(5, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 47);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref(6, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 13);
    call {:si_unique_call 2336} {:cexpr "nvme_trans_log_supp_pages:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 7);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i12 := 7;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} $i14 := nvme_trans_copy_to_user($p1, $p3, $i13);
    call {:si_unique_call 2338} {:cexpr "res"} boogie_si_record_i32($i14);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} kfree($p3);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i12 := $i2;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_958:
    assume !assertsPassed;
    return;
}



const nvme_trans_log_info_exceptions: ref;

axiom nvme_trans_log_info_exceptions == $sub.ref(0, 665979);

procedure nvme_trans_log_info_exceptions($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_log_info_exceptions($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i16;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i35: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i17: i32;
  var $i10: i32;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2342} {:cexpr "nvme_trans_log_info_exceptions:arg:alloc_len"} boogie_si_record_i32($i2);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} $p7 := kzalloc(12, 208);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} $p14 := dma_alloc_attrs($p13, 512, $p4, 208, $0.ref);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_117 := $M.0;
    call {:si_unique_call 2346} cmdloc_dummy_var_118 := $memset.i8(cmdloc_dummy_var_117, $p18, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_118;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 2);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 1));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.69, $p4);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i25);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 4));
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 8323074);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i33 := nvme_submit_admin_cmd($p6, $p3, $0.ref);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    call {:si_unique_call 2348} {:cexpr "res"} boogie_si_record_i32($i33);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p14);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 512)), $mul.ref(1, 1)), $mul.ref(1, 1));
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.68, $p38);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i16($i39);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 8);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 512)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.68, $p44);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i16($i45);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i42, $i47);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    call {:si_unique_call 2349} {:cexpr "temp_k"} boogie_si_record_i16($i49);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i16.i8($i49);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 239);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    call {:si_unique_call 2350} {:cexpr "temp_c"} boogie_si_record_i8($i53);
    assume {:verifier.code 0} true;
    $i35 := $i53;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 47);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p7, $mul.ref(3, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 8);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p7, $mul.ref(6, 1));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 35);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 4);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p7, $mul.ref(10, 1));
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i35);
    call {:si_unique_call 2351} {:cexpr "nvme_trans_log_info_exceptions:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i2, 12);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i59 := 12;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} $i61 := nvme_trans_copy_to_user($p1, $p7, $i60);
    call {:si_unique_call 2353} {:cexpr "res"} boogie_si_record_i32($i61);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.69, $p4);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} dma_free_attrs($p64, 512, $p14, $i65, $0.ref);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i17 := $i61;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} kfree($p7);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb12:
    assume $i58 == 1;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i59 := $i2;
    goto $bb14;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i35 := $sub.i8(0, 1);
    goto $bb11;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const nvme_trans_log_temperature: ref;

axiom nvme_trans_log_temperature == $sub.ref(0, 667011);

procedure nvme_trans_log_temperature($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_log_temperature($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p45: ref;
  var $i46: i8;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $i36: i8;
  var $i55: i32;
  var $i56: i1;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i57: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i18: i32;
  var $i11: i32;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 2358} {:cexpr "nvme_trans_log_temperature:arg:alloc_len"} boogie_si_record_i32($i2);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} $p8 := kzalloc(16, 208);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} $p15 := dma_alloc_attrs($p14, 512, $p4, 208, $0.ref);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.0;
    call {:si_unique_call 2362} cmdloc_dummy_var_120 := $memset.i8(cmdloc_dummy_var_119, $p19, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_120;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 2);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $sub.i32(0, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.71, $p4);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i26);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 4));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 8323074);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} $i34 := nvme_submit_admin_cmd($p7, $p3, $0.ref);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    call {:si_unique_call 2364} {:cexpr "res"} boogie_si_record_i32($i34);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p15);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 512)), $mul.ref(1, 1)), $mul.ref(1, 1));
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.70, $p39);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i16($i40);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 512)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.70, $p45);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i16($i46);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i43, $i48);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    call {:si_unique_call 2365} {:cexpr "temp_k"} boogie_si_record_i16($i50);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i16.i8($i50);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 239);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    call {:si_unique_call 2366} {:cexpr "temp_c_cur"} boogie_si_record_i8($i54);
    assume {:verifier.code 0} true;
    $i36 := $i54;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} $i55 := nvme_get_features($p7, 4, 0, 0, $p5);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    call {:si_unique_call 2368} {:cexpr "res"} boogie_si_record_i32($i55);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.33, $p5);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, 17);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    call {:si_unique_call 2369} {:cexpr "temp_c_thresh"} boogie_si_record_i8($i62);
    assume {:verifier.code 0} true;
    $i57 := $i62;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 13);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p8, $mul.ref(3, 1));
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 12);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p8, $mul.ref(6, 1));
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 1);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p8, $mul.ref(7, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 2);
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p8, $mul.ref(9, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i36);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p8, $mul.ref(11, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 1);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p8, $mul.ref(12, 1));
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 1);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p8, $mul.ref(13, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 2);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p8, $mul.ref(15, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i57);
    call {:si_unique_call 2370} {:cexpr "nvme_trans_log_temperature:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i2, 16);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i71 == 1);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $i72 := 16;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $i74 := nvme_trans_copy_to_user($p1, $p8, $i73);
    call {:si_unique_call 2372} {:cexpr "res"} boogie_si_record_i32($i74);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.71, $p4);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} dma_free_attrs($p77, 512, $p15, $i78, $0.ref);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i18 := $i74;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} kfree($p8);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb15:
    assume $i71 == 1;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i72 := $i2;
    goto $bb17;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i57 := $sub.i8(0, 1);
    goto $bb14;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $i36 := $sub.i8(0, 1);
    goto $bb11;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_967:
    assume !assertsPassed;
    return;
}



const nvme_trans_standard_inquiry_page: ref;

axiom nvme_trans_standard_inquiry_page == $sub.ref(0, 668043);

procedure nvme_trans_standard_inquiry_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_standard_inquiry_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i45: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $i56: i8;
  var $i44: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i32;
  var $i20: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i13: i32;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var vslice_dummy_var_193: ref;
  var vslice_dummy_var_194: ref;
  var vslice_dummy_var_195: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2375} {:cexpr "nvme_trans_standard_inquiry_page:arg:alloc_len"} boogie_si_record_i32($i3);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $p10 := dma_alloc_attrs($p9, 4096, $p4, 208, $0.ref);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.73, $p4);
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} $i17 := nvme_identify($p6, $i15, 0, $i16);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    call {:si_unique_call 2378} {:cexpr "nvme_sc"} boogie_si_record_i32($i17);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} $i18 := nvme_trans_status_code($p1, $i17);
    call {:si_unique_call 2380} {:cexpr "res"} boogie_si_record_i32($i18);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i17, 0);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p10);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4096)), $mul.ref(29, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.74, $p23);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.0;
    call {:si_unique_call 2382} cmdloc_dummy_var_122 := $memset.i8(cmdloc_dummy_var_121, $p2, 0, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_122;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 6);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 2);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 31);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i27);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 2);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} vslice_dummy_var_193 := strncpy($p33, .str.50, 8);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p2, $mul.ref(16, 1));
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(808, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} vslice_dummy_var_194 := strncpy($p35, $p37, 16);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(848, 1)), $mul.ref(7, 1));
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 32);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i44 := 8;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i44);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 252);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    call {:si_unique_call 2386} {:cexpr "fw_offset"} boogie_si_record_i8($i62);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(848, 1));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i62);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p65, $mul.ref($i66, 1));
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} vslice_dummy_var_195 := strncpy($p63, $p67, 4);
    call {:si_unique_call 2388} {:cexpr "nvme_trans_standard_inquiry_page:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i3, 36);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i70 := 36;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $i72 := nvme_trans_copy_to_user($p1, $p2, $i71);
    call {:si_unique_call 2390} {:cexpr "res"} boogie_si_record_i32($i72);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i20 := $i72;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.73, $p4);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} dma_free_attrs($p75, 4096, $p10, $i76, $0.ref);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i70 := $i3;
    goto $bb27;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i45 := 8;
    goto $bb18;

  $bb18:
    call $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i45, $i57, $i58, $i59, $i56 := nvme_trans_standard_inquiry_page_loop_$bb18($p6, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i45, $i57, $i58, $i59, $i56);
    goto $bb18_last;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i45);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i58 := $ugt.i32($i57, 4);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i59 := $i45;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $i44 := $i59;
    goto $bb17;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i46, 1);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    call {:si_unique_call 2385} {:cexpr "fw_offset"} boogie_si_record_i8($i48);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(848, 1)), $mul.ref($i51, 1));
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 32);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i56 := $i48;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i44 := $i56;
    goto $bb17;

  $bb20:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i48;
    goto $bb20_dummy;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb14;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb7;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10653;
}



const nvme_trans_supported_vpd_pages: ref;

axiom nvme_trans_supported_vpd_pages == $sub.ref(0, 669075);

procedure nvme_trans_supported_vpd_pages($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_trans_supported_vpd_pages($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} {:cexpr "nvme_trans_supported_vpd_pages:arg:alloc_len"} boogie_si_record_i32($i3);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.0;
    call {:si_unique_call 2392} cmdloc_dummy_var_124 := $memset.i8(cmdloc_dummy_var_123, $p2, 0, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_124;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 5);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 128));
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(6, 1));
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $sub.i8(0, 125));
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $sub.i8(0, 122));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $sub.i8(0, 79));
    call {:si_unique_call 2393} {:cexpr "nvme_trans_supported_vpd_pages:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 36);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i12 := 36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $i14 := nvme_trans_copy_to_user($p1, $p2, $i13);
    call {:si_unique_call 2395} {:cexpr "res"} boogie_si_record_i32($i14);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;
}



const nvme_trans_unit_serial_page: ref;

axiom nvme_trans_unit_serial_page == $sub.ref(0, 670107);

procedure nvme_trans_unit_serial_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nvme_trans_unit_serial_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i32;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var vslice_dummy_var_196: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} {:cexpr "nvme_trans_unit_serial_page:arg:alloc_len"} boogie_si_record_i32($i3);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 2397} cmdloc_dummy_var_126 := $memset.i8(cmdloc_dummy_var_125, $p2, 0, 36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 128));
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 20);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(788, 1));
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} vslice_dummy_var_196 := strncpy($p8, $p10, 20);
    call {:si_unique_call 2399} {:cexpr "nvme_trans_unit_serial_page:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 36);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i13 := 36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $i15 := nvme_trans_copy_to_user($p1, $p2, $i14);
    call {:si_unique_call 2401} {:cexpr "res"} boogie_si_record_i32($i15);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb3;
}



const nvme_trans_device_id_page: ref;

axiom nvme_trans_device_id_page == $sub.ref(0, 671139);

procedure nvme_trans_device_id_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $CurrAddr, $M.31, $M.21, $M.9, $M.11, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_trans_device_id_page($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i34: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i16: i32;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2403} {:cexpr "nvme_trans_device_id_page:arg:alloc_len"} boogie_si_record_i32($i3);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $i9 := __fswab32($i8);
    call {:si_unique_call 2405} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} $p13 := dma_alloc_attrs($p12, 4096, $p4, 208, $0.ref);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i3);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.0;
    call {:si_unique_call 2407} cmdloc_dummy_var_128 := $memset.i8(cmdloc_dummy_var_127, $p2, 0, $i17, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_128;
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 125));
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} $i23 := readl($p22);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    call {:si_unique_call 2409} {:cexpr "tmp___3"} boogie_si_record_i32($i23);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, 65791);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i68 := $sle.i32($i3, 71);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 72);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 3);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 8);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p2, $mul.ref(6, 1));
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 68);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 2976)), $mul.ref(60, 1));
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} vslice_dummy_var_197 := sprintf.ref.ref.i32($p75, .str.51, $i80);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p2, $mul.ref(12, 1));
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(808, 1));
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_132 := $M.0;
    cmdloc_dummy_var_133 := $M.0;
    call {:si_unique_call 2428} cmdloc_dummy_var_134 := $memcpy.i8(cmdloc_dummy_var_132, cmdloc_dummy_var_133, $p82, $p84, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_134;
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p2, $mul.ref(52, 1));
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} vslice_dummy_var_198 := sprintf.ref.ref.i32($p85, .str.51, $i9);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p2, $mul.ref(56, 1));
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(788, 1));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_135 := $M.0;
    cmdloc_dummy_var_136 := $M.0;
    call {:si_unique_call 2430} cmdloc_dummy_var_137 := $memcpy.i8(cmdloc_dummy_var_135, cmdloc_dummy_var_136, $p87, $p89, 20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_137;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call {:si_unique_call 2422} {:cexpr "nvme_trans_device_id_page:arg:xfer_len"} boogie_si_record_i32($i3);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i3);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $i91 := nvme_trans_copy_to_user($p1, $p2, $i90);
    call {:si_unique_call 2424} {:cexpr "res"} boogie_si_record_i32($i91);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    $i34 := $i91;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.75, $p4);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} dma_free_attrs($p94, 4096, $p13, $i95, $0.ref);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i16 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $i69 := nvme_trans_completion($p1, 2, 5, 36, 0);
    call {:si_unique_call 2426} {:cexpr "res"} boogie_si_record_i32($i69);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i34 := $i69;
    goto $bb9;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p13);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 4096)), $mul.ref(120, 1));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.75, $p4);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} $i31 := nvme_identify($p6, $i29, 0, $i30);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    call {:si_unique_call 2411} {:cexpr "nvme_sc"} boogie_si_record_i32($i31);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} $i32 := nvme_trans_status_code($p1, $i31);
    call {:si_unique_call 2413} {:cexpr "res"} boogie_si_record_i32($i32);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i31, 0);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} $i40 := readl($p39);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    call {:si_unique_call 2416} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 66047);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $p50, $i51 := $p26, 8;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p50);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $i53 := $mul.i32($i51, 8);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} $i54 := bitmap_empty($p52, $i53);
    call {:si_unique_call 2420} {:cexpr "tmp___2"} boogie_si_record_i32($i54);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i51);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 4);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i59);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, 1);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 2);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref(6, 1));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i51);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p2, $mul.ref(7, 1));
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $i64);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p2, $mul.ref(8, 1));
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i51);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_129 := $M.0;
    cmdloc_dummy_var_130 := $M.0;
    call {:si_unique_call 2421} cmdloc_dummy_var_131 := $memcpy.i8(cmdloc_dummy_var_129, cmdloc_dummy_var_130, $p66, $p50, $i67, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_131;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p27);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32(8, 8);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} $i44 := bitmap_empty($p42, $i43);
    call {:si_unique_call 2418} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $p48, $i49 := $p26, 8;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p48, $i49;
    goto $bb19;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 4096)), $mul.ref(104, 1));
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $p48, $i49 := $p46, 16;
    goto $bb18;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i35 == 1;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    goto $bb9;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb9;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;
}



const nvme_trans_ext_inq_page: ref;

axiom nvme_trans_ext_inq_page == $sub.ref(0, 672171);

procedure nvme_trans_ext_inq_page($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.76, $M.0, $CurrAddr, $M.13, assertsPassed, $M.9;



implementation nvme_trans_ext_inq_page($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i64;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i32;
  var $i32: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i25: i32;
  var $i18: i32;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2433} {:cexpr "nvme_trans_ext_inq_page:arg:alloc_len"} boogie_si_record_i32($i2);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p7, 0);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p8, 0);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p9, 2);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p10, 1);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p11, 4);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p12, 6);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p13, 5);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $M.76 := $store.i8($M.76, $p14, 7);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $p15 := kmalloc(60, 208);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p22 := dma_alloc_attrs($p21, 4096, $p3, 208, $0.ref);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.78, $p3);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $i29 := nvme_identify($p6, $i27, 0, $i28);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    call {:si_unique_call 2438} {:cexpr "nvme_sc"} boogie_si_record_i32($i29);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i30 := nvme_trans_status_code($p1, $i29);
    call {:si_unique_call 2440} {:cexpr "res"} boogie_si_record_i32($i30);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i29, 0);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p22);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(28, 1));
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.79, $p35);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 7);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref($i39, 1));
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.76, $p40);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 3);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    call {:si_unique_call 2442} {:cexpr "spt"} boogie_si_record_i8($i44);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p34, $mul.ref(0, 4096)), $mul.ref(29, 1));
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.80, $p45);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 2);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    call {:si_unique_call 2443} {:cexpr "grd_chk"} boogie_si_record_i8($i52);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i49);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 1);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    call {:si_unique_call 2444} {:cexpr "app_chk"} boogie_si_record_i8($i55);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.78, $p3);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i57 := nvme_identify($p6, 0, 1, $i56);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    call {:si_unique_call 2446} {:cexpr "nvme_sc"} boogie_si_record_i32($i57);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $i58 := nvme_trans_status_code($p1, $i57);
    call {:si_unique_call 2448} {:cexpr "res"} boogie_si_record_i32($i58);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i57, 0);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p22);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 4096)), $mul.ref(525, 1));
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.81, $p62);
    call {:si_unique_call 2449} {:cexpr "v_sup"} boogie_si_record_i8($i63);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_138 := $M.0;
    call {:si_unique_call 2450} cmdloc_dummy_var_139 := $memset.i8(cmdloc_dummy_var_138, $p15, 0, 60, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_139;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p15, $mul.ref(1, 1));
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $sub.i8(0, 122));
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p15, $mul.ref(2, 1));
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 0);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p15, $mul.ref(3, 1));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 60);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($sub.i8(0, 128));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i44);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i67, $i68);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i52);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i69, $i70);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i55);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i71, $i72);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i49);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i73, $i74);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i8($i75);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p15, $mul.ref(4, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $i76);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p15, $mul.ref(5, 1));
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p78, 32);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p15, $mul.ref(6, 1));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i63);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p15, $mul.ref(7, 1));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p15, $mul.ref(8, 1));
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p15, $mul.ref(9, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p82, 0);
    call {:si_unique_call 2451} {:cexpr "nvme_trans_ext_inq_page:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i2, 60);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i84 := 60;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} $i86 := nvme_trans_copy_to_user($p1, $p15, $i85);
    call {:si_unique_call 2453} {:cexpr "res"} boogie_si_record_i32($i86);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i32 := $i86;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.78, $p3);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} dma_free_attrs($p89, 4096, $p22, $i90, $0.ref);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i25 := $i32;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} kfree($p15);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i18 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i84 := $i2;
    goto $bb27;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i32 := $i57;
    goto $bb11;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i32 := $i58;
    goto $bb11;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb11;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    goto $bb11;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_988:
    assume !assertsPassed;
    return;
}



const nvme_trans_bdev_char_page: ref;

axiom nvme_trans_bdev_char_page == $sub.ref(0, 673203);

procedure nvme_trans_bdev_char_page($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_trans_bdev_char_page($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} {:cexpr "nvme_trans_bdev_char_page:arg:alloc_len"} boogie_si_record_i32($i2);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $p3 := kzalloc(60, 208);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 79));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref(2, 1));
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p3, $mul.ref(3, 1));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 60);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p3, $mul.ref(5, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p3, $mul.ref(6, 1));
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    call {:si_unique_call 2456} {:cexpr "nvme_trans_bdev_char_page:arg:_min1"} boogie_si_record_i32($i2);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 60);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i14 := 60;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $i16 := nvme_trans_copy_to_user($p1, $p3, $i15);
    call {:si_unique_call 2458} {:cexpr "res"} boogie_si_record_i32($i16);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} kfree($p3);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i14 := $i2;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_997:
    assume !assertsPassed;
    return;
}



const bitmap_empty: ref;

axiom bitmap_empty == $sub.ref(0, 674235);

procedure bitmap_empty($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_empty($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} {:cexpr "bitmap_empty:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} $i2 := __bitmap_empty($p0, $i1);
    call {:si_unique_call 2462} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_empty: ref;

axiom __bitmap_empty == $sub.ref(0, 675267);

procedure __bitmap_empty($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_empty($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2463} {:cexpr "__bitmap_empty:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2464} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 676299);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const nvme_trans_get_io_cdb6: ref;

axiom nvme_trans_get_io_cdb6 == $sub.ref(0, 677331);

procedure nvme_trans_get_io_cdb6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.46;



implementation nvme_trans_get_io_cdb6($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $M.82 := $store.i8($M.82, $p2, 0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $M.83 := $store.i8($M.83, $p3, 0);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p0);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 24);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 16);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i6, $i10);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 8);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, $i15);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i16, $i19);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 2097151);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $M.84 := $store.i64($M.84, $p23, $i22);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p27, $i26);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.46, $p28);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p31, 256);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nvme_trans_get_io_cdb10: ref;

axiom nvme_trans_get_io_cdb10 == $sub.ref(0, 678363);

procedure nvme_trans_get_io_cdb10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.46;



implementation nvme_trans_get_io_cdb10($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $M.82 := $store.i8($M.82, $p7, $i6);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 7);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $M.83 := $store.i8($M.83, $p13, $i12);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 24);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 16);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i27, $i30);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $M.84 := $store.i64($M.84, $p33, $i32);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 8);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, $i40);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p42, $i41);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    return;
}



const nvme_trans_get_io_cdb12: ref;

axiom nvme_trans_get_io_cdb12 == $sub.ref(0, 679395);

procedure nvme_trans_get_io_cdb12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.46;



implementation nvme_trans_get_io_cdb12($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $M.82 := $store.i8($M.82, $p7, $i6);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 7);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $M.83 := $store.i8($M.83, $p13, $i12);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 24);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 16);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, $i21);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i27, $i30);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $M.84 := $store.i64($M.84, $p33, $i32);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i36, 24);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32($i40, 16);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i37, $i41);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 8);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i42, $i46);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i47, $i50);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p52, $i51);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    return;
}



const nvme_trans_get_io_cdb16: ref;

axiom nvme_trans_get_io_cdb16 == $sub.ref(0, 680427);

procedure nvme_trans_get_io_cdb16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.46;



implementation nvme_trans_get_io_cdb16($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $M.82 := $store.i8($M.82, $p7, $i6);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 7);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $M.83 := $store.i8($M.83, $p13, $i12);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i17 := $shl.i64($i16, 56);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $i21 := $shl.i64($i20, 48);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i22 := $or.i64($i17, $i21);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i26 := $shl.i64($i25, 40);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i22, $i26);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i31 := $shl.i64($i30, 32);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i27, $i31);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p0, $mul.ref(6, 1));
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i36 := $shl.i64($i35, 24);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i37 := $or.i64($i32, $i36);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p0, $mul.ref(7, 1));
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i41 := $shl.i64($i40, 16);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i42 := $or.i64($i37, $i41);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p0, $mul.ref(8, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i46 := $shl.i64($i45, 8);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $i47 := $or.i64($i42, $i46);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p0, $mul.ref(9, 1));
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i51 := $or.i64($i47, $i50);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $M.84 := $store.i64($M.84, $p52, $i51);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p0, $mul.ref(10, 1));
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i55, 24);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p0, $mul.ref(11, 1));
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 16);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i56, $i60);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p0, $mul.ref(12, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 8);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i61, $i65);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p0, $mul.ref(13, 1));
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i66, $i69);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p71, $i70);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    return;
}



const nvme_trans_do_nvme_io: ref;

axiom nvme_trans_do_nvme_io == $sub.ref(0, 681459);

procedure nvme_trans_do_nvme_io($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation nvme_trans_do_nvme_io($p0: ref, $p1: ref, $p2: ref, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i16;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i1;
  var $i98: i8;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i17: i64;
  var $i18: i32;
  var $i139: i32;
  var $i104: i32;
  var $i33: i32;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2468} {:cexpr "nvme_trans_do_nvme_io:arg:is_write"} boogie_si_record_i8($i3);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i3);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i10 := (if $i9 == 1 then 1 else 2);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    call {:si_unique_call 2469} {:cexpr "opcode"} boogie_si_record_i8($i11);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $i14 := queue_max_hw_sectors($p13);
    call {:si_unique_call 2471} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} $i15 := nvme_trans_io_get_num_cmds($p1, $p2, $i14);
    call {:si_unique_call 2473} {:cexpr "num_cmds"} boogie_si_record_i32($i15);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32(0, $i15);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $i139 := nvme_trans_status_code($p1, 0);
    call {:si_unique_call 2506} {:cexpr "res"} boogie_si_record_i32($i139);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i104 := $i139;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i33 := $i104;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i17, $i18 := 0, 0;
    goto $bb4;

  $bb4:
    call $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $p34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $i42, $i43, $i44, $p45, $p65, $p66, $p67, $p68, $i69, $p70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $p100, $i105, $i106, $i107, $i108, $p109, $p113, $p114, $p115, $i116, $p117, $p118, $p119, $p120, $i121, $p122, $p123, $p124, $i125, $i126, $i127, $p128, $i129, $i134, $i135, $i136, $i137, $i138, $i17, $i18, cmdloc_dummy_var_140, cmdloc_dummy_var_141 := nvme_trans_do_nvme_io_loop_$bb4($p0, $p1, $p2, $i3, $p4, $p5, $p7, $i11, $i14, $i15, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $p34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $i42, $i43, $i44, $p45, $p65, $p66, $p67, $p68, $i69, $p70, $p71, $p72, $p73, $i74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $i82, $p83, $p84, $p85, $i86, $p87, $p88, $p89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $p100, $i105, $i106, $i107, $i108, $p109, $p113, $p114, $p115, $i116, $p117, $p118, $p119, $p120, $i121, $p122, $p123, $p124, $i125, $i126, $i127, $p128, $i129, $i134, $i135, $i136, $i137, $i138, $i17, $i18, cmdloc_dummy_var_140, cmdloc_dummy_var_141);
    goto $bb4_last;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_140 := $M.0;
    call {:si_unique_call 2474} cmdloc_dummy_var_141 := $memset.i8(cmdloc_dummy_var_140, $p19, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_141;
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i14);
    call {:si_unique_call 2478} {:cexpr "_min1"} boogie_si_record_i64($i46);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.46, $p47);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64($i49, $i17);
    call {:si_unique_call 2479} {:cexpr "_min2"} boogie_si_record_i64($i50);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i51 := $ult.i64($i46, $i50);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i52 := $i50;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $i56 := $shl.i64($i52, $i55);
    call {:si_unique_call 2487} {:cexpr "unit_len"} boogie_si_record_i64($i56);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32(1, $i60);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $i63 := $mul.i64($i62, $i17);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p58, $mul.ref($i63, 1));
    assume {:verifier.code 0} true;
    $i42, $i43, $i44, $p45 := $i17, $i56, $i52, $p64;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i11);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i69);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.84, $p73);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i75 := $add.i64($i74, $i17);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $i75);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i64.i16($i44);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i80, 1);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i82);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} $i86 := nvme_trans_io_get_control($p0, $p2);
    call {:si_unique_call 2483} {:cexpr "control"} boogie_si_record_i16($i86);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 64)), $mul.ref(50, 1));
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i86);
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i3);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i92 := (if $i91 == 1 then 1 else 2);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p45);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i32($i43);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} $p95 := nvme_map_user_pages($p7, $i92, $i93, $i94);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $i97 := IS_ERR($p96);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i8($i97);
    call {:si_unique_call 2486} {:cexpr "tmp___2"} boogie_si_record_i8($i98);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i98);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $p100 := $p95;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i43);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i106 := nvme_setup_prps($p7, $p95, $i105, 208);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    call {:si_unique_call 2492} {:cexpr "tmp___3"} boogie_si_record_i32($i106);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, $i43);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p109 := $p95;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p95, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.0, $p115);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p119, $i116);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p95, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.0, $p120);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p124, $i121);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i42, $i44);
    call {:si_unique_call 2495} {:cexpr "nvme_offset"} boogie_si_record_i64($i125);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $i126 := nvme_submit_io_cmd($p7, $p0, $p4, $0.ref);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    call {:si_unique_call 2497} {:cexpr "nvme_sc"} boogie_si_record_i32($i126);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $p128, $i129 := $p95, $i126;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i3);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $i136 := (if $i135 == 1 then 1 else 2);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} nvme_unmap_user_pages($p7, $i136, $p95);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} nvme_free_iod($p7, $p95);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i18, 1);
    call {:si_unique_call 2504} {:cexpr "i"} boogie_si_record_i32($i137);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i138 := $ult.i32($i137, $i15);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i138 == 1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i125, $i137;
    goto $bb26_dummy;

  $bb23:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i3);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i132 := (if $i131 == 1 then 1 else 2);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} nvme_unmap_user_pages($p7, $i132, $p128);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} nvme_free_iod($p7, $p128);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $i133 := nvme_trans_status_code($p1, $i129);
    call {:si_unique_call 2501} {:cexpr "res"} boogie_si_record_i32($i133);
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i104 := $i133;
    goto $bb18;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i3);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $i112 := (if $i111 == 1 then 1 else 2);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} nvme_unmap_user_pages($p7, $i112, $p109);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} nvme_free_iod($p7, $p109);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32(0, 12);
    goto $bb18;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $i102 := PTR_ERR($p101);
    call {:si_unique_call 2489} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    call {:si_unique_call 2490} {:cexpr "res"} boogie_si_record_i32($i103);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $i104 := $i103;
    goto $bb18;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i52 := $i46;
    goto $bb15;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p5);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i18);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i27, 16);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p26, $mul.ref($i28, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} $i30 := copy_from_user($p24, $p29, 16);
    call {:si_unique_call 2476} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    call {:si_unique_call 2477} {:cexpr "retcode"} boogie_si_record_i32($i31);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    call {:si_unique_call 2480} {:cexpr "unit_len"} boogie_si_record_i64($i35);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i64($i35, $i38);
    call {:si_unique_call 2481} {:cexpr "unit_num_blocks"} boogie_si_record_i64($i39);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i42, $i43, $i44, $p45 := $i17, $i35, $i39, $p41;
    goto $bb12;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 14);
    goto $bb10;

  $bb26_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11285;
}



const queue_max_hw_sectors: ref;

axiom queue_max_hw_sectors == $sub.ref(0, 682491);

procedure queue_max_hw_sectors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queue_max_hw_sectors($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3704)), $mul.ref(2976, 1)), $mul.ref(16, 1));
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nvme_trans_io_get_num_cmds: ref;

axiom nvme_trans_io_get_num_cmds == $sub.ref(0, 683523);

procedure nvme_trans_io_get_num_cmds($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nvme_trans_io_get_num_cmds($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} {:cexpr "nvme_trans_io_get_num_cmds:arg:max_blocks"} boogie_si_record_i32($i2);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.46, $p11);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i2);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.46, $p14);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i17 := $udiv.i32($i16, $i2);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const nvme_trans_io_get_control: ref;

axiom nvme_trans_io_get_control == $sub.ref(0, 684555);

procedure nvme_trans_io_get_control($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;



implementation nvme_trans_io_get_control($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.82, $p2);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32(0);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 16384);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    call {:si_unique_call 2508} {:cexpr "control"} boogie_si_record_i16($i8);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const __compiletime_assert_1762: ref;

axiom __compiletime_assert_1762 == $sub.ref(0, 685587);

procedure __compiletime_assert_1762();
  free requires assertsPassed;



implementation __compiletime_assert_1762()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_1788: ref;

axiom __compiletime_assert_1788 == $sub.ref(0, 686619);

procedure __compiletime_assert_1788();
  free requires assertsPassed;



implementation __compiletime_assert_1788()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    return;
}



const ldv_create_class: ref;

axiom ldv_create_class == $sub.ref(0, 687651);

procedure ldv_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $p0 := ldv_linux_drivers_base_class_create_class();
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} $p1 := ldv_linux_usb_gadget_create_class();
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} ldv_assume($i5);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_create_class: ref;

axiom ldv_linux_drivers_base_class_create_class == $sub.ref(0, 688683);

procedure ldv_linux_drivers_base_class_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_linux_drivers_base_class_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $p0 := ldv_undef_ptr();
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} ldv_assume($i2);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} $i3 := ldv_is_err($p0);
    call {:si_unique_call 2515} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i5 := $M.85;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} ldv_assert_linux_drivers_base_class__double_registration($i7);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 2517} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(1);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_create_class: ref;

axiom ldv_linux_usb_gadget_create_class == $sub.ref(0, 689715);

procedure ldv_linux_usb_gadget_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $p0 := ldv_undef_ptr();
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} ldv_assume($i2);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $i3 := ldv_is_err($p0);
    call {:si_unique_call 2521} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $i5 := $M.86;
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i7);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget == $sub.ref(0, 690747);

procedure ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} {:cexpr "ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2524} __VERIFIER_error();
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__double_registration: ref;

axiom ldv_assert_linux_drivers_base_class__double_registration == $sub.ref(0, 691779);

procedure ldv_assert_linux_drivers_base_class__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} {:cexpr "ldv_assert_linux_drivers_base_class__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2526} __VERIFIER_error();
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_EMGentry_exit_nvme_exit_14_2: ref;

axiom ldv_EMGentry_exit_nvme_exit_14_2 == $sub.ref(0, 692811);

procedure ldv_EMGentry_exit_nvme_exit_14_2($p0: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_EMGentry_exit_nvme_exit_14_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} nvme_exit();
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;
}



const nvme_exit: ref;

axiom nvme_exit == $sub.ref(0, 693843);

procedure nvme_exit();
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation nvme_exit()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} ldv_pci_unregister_driver_162(nvme_driver);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i0 := $M.28;
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} unregister_blkdev($i0, .str.5);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $p1 := $M.25;
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} destroy_workqueue($p1);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p2 := $M.1;
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} ldv_class_destroy_163($p2);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} __unregister_chrdev($i3, 0, 1048576, .str.5);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $p4 := $M.3;
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 2534} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} _nvme_check_size();
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $p11 := $M.3;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} $i13 := IS_ERR($p12);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2536} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2538} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    call {:si_unique_call 2539} devirtbounce.11(0, .str, 3177, 12);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb5;

  SeqInstr_1030:
    assume !assertsPassed;
    return;
}



const ldv_pci_unregister_driver_162: ref;

axiom ldv_pci_unregister_driver_162 == $sub.ref(0, 694875);

procedure ldv_pci_unregister_driver_162($p0: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver_162($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} pci_unregister_driver($p0);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} ldv_pci_unregister_driver($0.ref, $p0);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    return;
}



const unregister_blkdev: ref;

axiom unregister_blkdev == $sub.ref(0, 695907);

procedure unregister_blkdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_blkdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} {:cexpr "unregister_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 696939);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    return;
}



const ldv_class_destroy_163: ref;

axiom ldv_class_destroy_163 == $sub.ref(0, 697971);

procedure ldv_class_destroy_163($p0: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_class_destroy_163($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} ldv_linux_drivers_base_class_destroy_class($p0);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} ldv_linux_usb_gadget_destroy_class($p0);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 699003);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2547} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2548} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    return;
}



const _nvme_check_size: ref;

axiom _nvme_check_size == $sub.ref(0, 700035);

procedure _nvme_check_size();
  free requires assertsPassed;



implementation _nvme_check_size()
{
  var $i0: i1;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i0 := $trunc.i8.i1(0);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i0 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1(0);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(0);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(0);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1(0);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1(0);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(0);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(0);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(0);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(0);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(0);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1(0);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i11 == 1;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} __compiletime_assert_136();
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i10 == 1;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} __compiletime_assert_135();
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i9 == 1;
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} __compiletime_assert_134();
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i8 == 1;
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} __compiletime_assert_133();
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} __compiletime_assert_132();
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i6 == 1;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} __compiletime_assert_131();
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i5 == 1;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} __compiletime_assert_130();
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i4 == 1;
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} __compiletime_assert_129();
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i3 == 1;
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} __compiletime_assert_128();
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i2 == 1;
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} __compiletime_assert_127();
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i1 == 1;
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} __compiletime_assert_126();
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i0 == 1;
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} __compiletime_assert_125();
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __compiletime_assert_125: ref;

axiom __compiletime_assert_125 == $sub.ref(0, 701067);

procedure __compiletime_assert_125();
  free requires assertsPassed;



implementation __compiletime_assert_125()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_126: ref;

axiom __compiletime_assert_126 == $sub.ref(0, 702099);

procedure __compiletime_assert_126();
  free requires assertsPassed;



implementation __compiletime_assert_126()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_127: ref;

axiom __compiletime_assert_127 == $sub.ref(0, 703131);

procedure __compiletime_assert_127();
  free requires assertsPassed;



implementation __compiletime_assert_127()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_128: ref;

axiom __compiletime_assert_128 == $sub.ref(0, 704163);

procedure __compiletime_assert_128();
  free requires assertsPassed;



implementation __compiletime_assert_128()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_129: ref;

axiom __compiletime_assert_129 == $sub.ref(0, 705195);

procedure __compiletime_assert_129();
  free requires assertsPassed;



implementation __compiletime_assert_129()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_130: ref;

axiom __compiletime_assert_130 == $sub.ref(0, 706227);

procedure __compiletime_assert_130();
  free requires assertsPassed;



implementation __compiletime_assert_130()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_131: ref;

axiom __compiletime_assert_131 == $sub.ref(0, 707259);

procedure __compiletime_assert_131();
  free requires assertsPassed;



implementation __compiletime_assert_131()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_132: ref;

axiom __compiletime_assert_132 == $sub.ref(0, 708291);

procedure __compiletime_assert_132();
  free requires assertsPassed;



implementation __compiletime_assert_132()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_133: ref;

axiom __compiletime_assert_133 == $sub.ref(0, 709323);

procedure __compiletime_assert_133();
  free requires assertsPassed;



implementation __compiletime_assert_133()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_134: ref;

axiom __compiletime_assert_134 == $sub.ref(0, 710355);

procedure __compiletime_assert_134();
  free requires assertsPassed;



implementation __compiletime_assert_134()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_135: ref;

axiom __compiletime_assert_135 == $sub.ref(0, 711387);

procedure __compiletime_assert_135();
  free requires assertsPassed;



implementation __compiletime_assert_135()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    return;
}



const __compiletime_assert_136: ref;

axiom __compiletime_assert_136 == $sub.ref(0, 712419);

procedure __compiletime_assert_136();
  free requires assertsPassed;



implementation __compiletime_assert_136()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_drivers_base_class_destroy_class: ref;

axiom ldv_linux_drivers_base_class_destroy_class == $sub.ref(0, 713451);

procedure ldv_linux_drivers_base_class_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_linux_drivers_base_class_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $i4 := ldv_is_err($p3);
    call {:si_unique_call 2562} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} ldv_linux_drivers_base_class_unregister_class();
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_destroy_class: ref;

axiom ldv_linux_usb_gadget_destroy_class == $sub.ref(0, 714483);

procedure ldv_linux_usb_gadget_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $i4 := ldv_is_err($p3);
    call {:si_unique_call 2565} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} ldv_linux_usb_gadget_unregister_class();
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_unregister_class: ref;

axiom ldv_linux_usb_gadget_unregister_class == $sub.ref(0, 715515);

procedure ldv_linux_usb_gadget_unregister_class();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i0 := $M.86;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget == $sub.ref(0, 716547);

procedure ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} {:cexpr "ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2569} __VERIFIER_error();
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_drivers_base_class_unregister_class: ref;

axiom ldv_linux_drivers_base_class_unregister_class == $sub.ref(0, 717579);

procedure ldv_linux_drivers_base_class_unregister_class();
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_linux_drivers_base_class_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i0 := $M.85;
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} ldv_assert_linux_drivers_base_class__double_deregistration($i2);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 2571} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_drivers_base_class__double_deregistration: ref;

axiom ldv_assert_linux_drivers_base_class__double_deregistration == $sub.ref(0, 718611);

procedure ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} {:cexpr "ldv_assert_linux_drivers_base_class__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2573} __VERIFIER_error();
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 719643);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver: ref;

axiom ldv_pci_unregister_driver == $sub.ref(0, 720675);

procedure ldv_pci_unregister_driver($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} ldv_dispatch_deregister_12_1($p1);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_12_1: ref;

axiom ldv_dispatch_deregister_12_1 == $sub.ref(0, 721707);

procedure ldv_dispatch_deregister_12_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_12_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_nvme_init_14_10: ref;

axiom ldv_EMGentry_init_nvme_init_14_10 == $sub.ref(0, 722739);

procedure ldv_EMGentry_init_nvme_init_14_10($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.28, $M.2, $M.1, $M.85, $CurrAddr, $M.0, assertsPassed, $M.29, $M.13, $M.3, $M.88, $M.89, $M.21, $M.31, $M.90, $M.91, $M.32, $M.9, $M.17, $M.19, $M.18, $M.10, $M.11, $M.23, $M.51, $M.53, $M.54, $M.52, $M.20, $M.22, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.67, $M.36;



implementation ldv_EMGentry_init_nvme_init_14_10($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $i1 := nvme_init();
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    call {:si_unique_call 2576} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;
}



const nvme_init: ref;

axiom nvme_init == $sub.ref(0, 723771);

procedure nvme_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.28, $M.2, $M.1, $M.85, $CurrAddr, $M.0, assertsPassed, $M.29, $M.13, $M.3, $M.88, $M.89, $M.21, $M.31, $M.90, $M.91, $M.32, $M.9, $M.17, $M.19, $M.18, $M.10, $M.11, $M.23, $M.51, $M.53, $M.54, $M.52, $M.20, $M.22, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.67, $M.36;



implementation nvme_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i22: i32;
  var $i26: i32;
  var $i15: i32;
  var $i27: i32;
  var $i10: i32;
  var $p28: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} __init_waitqueue_head(nvme_kthread_wait, .str.6, $p0);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $p2 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.8, 131082, 1, $p1, .str.7, .str.5);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $M.25 := $p2;
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $p3 := $M.25;
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $M.28;
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $i8 := register_blkdev($i7, .str.5);
    call {:si_unique_call 2582} {:cexpr "result"} boogie_si_record_i32($i8);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i8, 0);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $i13 := ldv___register_chrdev_159($i12, 0, 1048576, .str.5, nvme_dev_fops);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    call {:si_unique_call 2586} {:cexpr "result"} boogie_si_record_i32($i13);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i13, 0);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $p17 := ldv_create_class();
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $M.1 := $p17;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $p19 := $M.1;
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $i23 := ldv___pci_register_driver_160(nvme_driver, __this_module, .str.5);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    call {:si_unique_call 2592} {:cexpr "result"} boogie_si_record_i32($i23);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p25 := $M.1;
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} ldv_class_destroy_161($p25);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i26 := $M.2;
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} __unregister_chrdev($i26, 0, 1048576, .str.5);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $i27 := $M.28;
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} unregister_blkdev($i27, .str.5);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $p28 := $M.25;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} destroy_workqueue($p28);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $i22 := $i13;
    goto $bb21;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $M.2 := $i13;
    call {:si_unique_call 2588} {:cexpr "nvme_char_major"} boogie_si_record_i32($i13);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb14;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $M.28 := $i8;
    call {:si_unique_call 2584} {:cexpr "nvme_major"} boogie_si_record_i32($i8);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 724803);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 725835);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2595} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $p5 := external_alloc();
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const register_blkdev: ref;

axiom register_blkdev == $sub.ref(0, 726867);

procedure register_blkdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_blkdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2597} {:cexpr "register_blkdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2598} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___register_chrdev_159: ref;

axiom ldv___register_chrdev_159 == $sub.ref(0, 727899);

procedure ldv___register_chrdev_159($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.13, $CurrAddr, $M.21, $M.31, assertsPassed, $M.9, $M.3, $M.23, $M.11, $M.51, $M.53, $M.54, $M.52, $M.32, $M.22, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.17, $M.19, $M.18, $M.10, $M.67, $M.36;



implementation ldv___register_chrdev_159($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} {:cexpr "ldv___register_chrdev_159:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 2601} {:cexpr "ldv___register_chrdev_159:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 2602} {:cexpr "ldv___register_chrdev_159:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} $i5 := __register_chrdev($i0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 2604} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i6 := ldv___register_chrdev($i5, $i0, $i1, $i2, $p3, $p4);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    call {:si_unique_call 2606} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;
}



const ldv___pci_register_driver_160: ref;

axiom ldv___pci_register_driver_160 == $sub.ref(0, 728931);

procedure ldv___pci_register_driver_160($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.88, $M.89, $CurrAddr, $M.90, $M.91, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv___pci_register_driver_160($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2608} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $i4 := ldv___pci_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    call {:si_unique_call 2610} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;
}



const ldv_class_destroy_161: ref;

axiom ldv_class_destroy_161 == $sub.ref(0, 729963);

procedure ldv_class_destroy_161($p0: ref);
  free requires assertsPassed;
  modifies $M.85, assertsPassed;



implementation ldv_class_destroy_161($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} ldv_linux_drivers_base_class_destroy_class($p0);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} ldv_linux_usb_gadget_destroy_class($p0);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 730995);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2613} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___pci_register_driver: ref;

axiom ldv___pci_register_driver == $sub.ref(0, 732027);

procedure ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.88, $M.89, $CurrAddr, $M.90, $M.91, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} {:cexpr "ldv___pci_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $i4 := ldv_undef_int();
    call {:si_unique_call 2617} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} ldv_assume($i9);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} ldv_assume($i7);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} ldv_dispatch_register_13_2($p1);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1084:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_13_2: ref;

axiom ldv_dispatch_register_13_2 == $sub.ref(0, 733059);

procedure ldv_dispatch_register_13_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.88, $M.89, $CurrAddr, $M.90, $M.91, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv_dispatch_register_13_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $p1 := ldv_xmalloc(16);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} ldv_pci_pci_instance_3($p4);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_3: ref;

axiom ldv_pci_pci_instance_3 == $sub.ref(0, 734091);

procedure ldv_pci_pci_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.88, $M.89, $CurrAddr, $M.90, $M.91, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv_pci_pci_instance_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i26: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $p9 := ldv_xmalloc(2968);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $p11 := ldv_xmalloc(32);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $i13 := ldv_undef_int();
    call {:si_unique_call 2628} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p10);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} ldv_free($p31);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p12);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} ldv_free($p32);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77 := ldv_pci_pci_instance_3_loop_$bb7($p1, $p8, $p10, $p12, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i33, $i26, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77);
    goto $bb7_last;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} $i17 := ldv_pci_instance_probe_3_17($p16, $p10, $p12);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    call {:si_unique_call 2633} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i18 := ldv_ldv_post_probe_169($i17);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    call {:si_unique_call 2635} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $i19 := ldv_undef_int();
    call {:si_unique_call 2637} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i18, 0);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} ldv_assume($i28);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $i29 := ldv_undef_int();
    call {:si_unique_call 2643} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb16_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} ldv_assume($i22);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb10;

  $bb10:
    call $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73 := ldv_pci_pci_instance_3_loop_$bb10($p1, $p8, $p10, $i23, $i24, $i25, $i33, $i26, $i34, $i35, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73);
    goto $bb10_last;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $i24 := ldv_undef_int();
    call {:si_unique_call 2641} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i26, 2);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i35 := $i26;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} ldv_stop();
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume $i36 == 1;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} ldv_pci_instance_shutdown_3_3($p75, $p10);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} ldv_pci_instance_release_3_2($p77, $p10);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i23;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $i50 := ldv_filter_err_code($i49);
    call {:si_unique_call 2653} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i50);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i50;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $i61 := ldv_filter_err_code($i60);
    call {:si_unique_call 2657} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i61);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i23 := $i61;
    goto $bb43_dummy;

  $bb41:
    assume $i71 == 1;
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_pci_instance_resume_3_5($p73, $p10);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i65 == 1;
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} ldv_pci_instance_resume_early_3_6($p67, $p10);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.87, $p57);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $i59 := ldv_pci_instance_suspend_late_3_7($p56, $p10, $i58);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    call {:si_unique_call 2655} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i59);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb37;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i43 == 1;
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.87, $p46);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $i48 := ldv_pci_instance_suspend_3_8($p45, $p10, $i47);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    call {:si_unique_call 2651} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i48);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb34;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $i33, $i37, $i38, $i39 := ldv_pci_pci_instance_3_loop_$bb14($p10, $i33, $i37, $i38, $i39);
    goto $bb14_last;

  $bb19:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($u7);
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_pci_instance_callback_3_10($u9, $p10, $i37);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} $i38 := ldv_undef_int();
    call {:si_unique_call 2646} {:cexpr "tmp___3"} boogie_si_record_i32($i38);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $i33 := $i38;
    assume true;
    goto $bb31, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i26 := $i33;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb31_dummy;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} ldv_free($p7);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb43_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11899;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} ldv_ldv_pre_probe_168();
    goto corral_source_split_11881;
}



const ldv_ldv_pre_probe_168: ref;

axiom ldv_ldv_pre_probe_168 == $sub.ref(0, 735123);

procedure ldv_ldv_pre_probe_168();
  free requires assertsPassed;
  modifies $M.90, $M.91;



implementation ldv_ldv_pre_probe_168()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} ldv_pre_probe();
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_3_17: ref;

axiom ldv_pci_instance_probe_3_17 == $sub.ref(0, 736155);

procedure ldv_pci_instance_probe_3_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, assertsPassed;



implementation ldv_pci_instance_probe_3_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} $i3 := nvme_probe($p1, $p2);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    call {:si_unique_call 2664} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_169: ref;

axiom ldv_ldv_post_probe_169 == $sub.ref(0, 737187);

procedure ldv_ldv_post_probe_169($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.90, $M.91, assertsPassed;



implementation ldv_ldv_post_probe_169($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} {:cexpr "ldv_ldv_post_probe_169:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2669} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_callback_3_10: ref;

axiom ldv_pci_instance_callback_3_10 == $sub.ref(0, 738219);

procedure ldv_pci_instance_callback_3_10($p0: ref, $p1: ref, $i2: i1);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv_pci_instance_callback_3_10($p0: ref, $p1: ref, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 2670} {:cexpr "ldv_pci_instance_callback_3_10:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} nvme_reset_notify($p1, $i4);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_3_8: ref;

axiom ldv_pci_instance_suspend_3_8 == $sub.ref(0, 739251);

procedure ldv_pci_instance_suspend_3_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.88, $CurrAddr, $M.21, assertsPassed, $M.0;



implementation ldv_pci_instance_suspend_3_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.88 := $store.i32($M.88, $p4, $i2);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.88, $p5);
    call {:si_unique_call 2673} $i7 := devirtbounce.28($p0, $p1, $i6);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    call {:si_unique_call 2674} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 740283);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2677} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_instance_suspend_late_3_7: ref;

axiom ldv_pci_instance_suspend_late_3_7 == $sub.ref(0, 741315);

procedure ldv_pci_instance_suspend_late_3_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.89, $CurrAddr, $M.21, assertsPassed, $M.0;



implementation ldv_pci_instance_suspend_late_3_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.89 := $store.i32($M.89, $p4, $i2);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.89, $p5);
    call {:si_unique_call 2679} $i7 := devirtbounce.28($p0, $p1, $i6);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    call {:si_unique_call 2680} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_early_3_6: ref;

axiom ldv_pci_instance_resume_early_3_6 == $sub.ref(0, 742347);

procedure ldv_pci_instance_resume_early_3_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation ldv_pci_instance_resume_early_3_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} vslice_dummy_var_199 := devirtbounce.29($p0, $p1);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_3_5: ref;

axiom ldv_pci_instance_resume_3_5 == $sub.ref(0, 743379);

procedure ldv_pci_instance_resume_3_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation ldv_pci_instance_resume_3_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_200 := devirtbounce.29($p0, $p1);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_shutdown_3_3: ref;

axiom ldv_pci_instance_shutdown_3_3 == $sub.ref(0, 744411);

procedure ldv_pci_instance_shutdown_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation ldv_pci_instance_shutdown_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} nvme_shutdown($p1);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_release_3_2: ref;

axiom ldv_pci_instance_release_3_2 == $sub.ref(0, 745443);

procedure ldv_pci_instance_release_3_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.21, $M.3, $M.23, assertsPassed, $M.29, $M.32, $M.17, $M.19, $M.18, $M.22, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, $M.13, $M.36;



implementation ldv_pci_instance_release_3_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} nvme_remove($p1);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 746475);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 747507);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} ldv_assume($i2);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 748539);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.90, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $i1 := $M.90;
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1147:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 749571);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.91, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $i1 := $M.91;
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1150:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 750603);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2695} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 751635);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2697} __VERIFIER_error();
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 752667);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.91;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 2698} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 753699);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2700} __VERIFIER_error();
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 754731);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.90;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 2701} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 755763);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    return;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 756795);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2702} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2703} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2704} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2705} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv___register_chrdev: ref;

axiom ldv___register_chrdev == $sub.ref(0, 757827);

procedure ldv___register_chrdev($i0: i32, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.13, $CurrAddr, $M.21, $M.31, assertsPassed, $M.9, $M.3, $M.23, $M.11, $M.51, $M.53, $M.54, $M.52, $M.32, $M.22, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.17, $M.19, $M.18, $M.10, $M.67, $M.36;



implementation ldv___register_chrdev($i0: i32, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} {:cexpr "ldv___register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2708} {:cexpr "ldv___register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2709} {:cexpr "ldv___register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2710} {:cexpr "ldv___register_chrdev:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} $i6 := ldv_undef_int();
    call {:si_unique_call 2712} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i0, 0);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} ldv_assume($i11);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 0);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_assume($i9);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} ldv_dispatch_register_11_2($p5);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1159:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_11_2: ref;

axiom ldv_dispatch_register_11_2 == $sub.ref(0, 758859);

procedure ldv_dispatch_register_11_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.13, $CurrAddr, $M.21, $M.31, assertsPassed, $M.9, $M.3, $M.23, $M.11, $M.51, $M.53, $M.54, $M.52, $M.32, $M.22, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.17, $M.19, $M.18, $M.10, $M.67, $M.36;



implementation ldv_dispatch_register_11_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} $p1 := ldv_xmalloc(16);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} ldv_file_operations_file_operations_instance_0($p4);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 759891);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.13, $M.21, $M.31, $CurrAddr, assertsPassed, $M.9, $M.3, $M.23, $M.11, $M.51, $M.53, $M.54, $M.52, $M.32, $M.22, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.17, $M.19, $M.18, $M.10, $M.67, $M.36;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} $p8 := ldv_xmalloc(504);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $p10 := ldv_xmalloc(976);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $p12 := ldv_xmalloc(480);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} $i14 := ldv_undef_int();
    call {:si_unique_call 2723} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $p16 := $i2p.i64.ref($i15);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} $i17 := ldv_undef_int();
    call {:si_unique_call 2725} {:cexpr "tmp___4"} boogie_si_record_i32($i17);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p9);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_free($p31);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p11);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} ldv_free($p32);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p13);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} ldv_free($p33);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i34, $i35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61 := ldv_file_operations_file_operations_instance_0_loop_$bb7($p7, $p9, $p11, $p13, $p16, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i34, $i35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61);
    goto $bb7_last;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} $i21 := ldv_file_operations_instance_probe_0_12($p20, $p11, $p9);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    call {:si_unique_call 2730} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i21);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} $i22 := ldv_filter_err_code($i21);
    call {:si_unique_call 2732} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i22);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} $i23 := ldv_undef_int();
    call {:si_unique_call 2734} {:cexpr "tmp___3"} boogie_si_record_i32($i23);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i22, 0);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_assume($i28);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} $i29 := ldv_undef_int();
    call {:si_unique_call 2740} {:cexpr "tmp___4"} boogie_si_record_i32($i29);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, 0);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} ldv_assume($i26);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i34, $i35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61 := ldv_file_operations_file_operations_instance_0_loop_$bb10($p7, $p9, $p13, $p16, $i34, $i35, $i36, $i37, $p38, $p39, $p40, $i41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61);
    goto $bb10_last;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, 2);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 3);
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} ldv_stop();
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb30_dummy;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} $i53 := ldv_undef_int();
    call {:si_unique_call 2746} {:cexpr "tmp___8"} boogie_si_record_i32($i53);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i53, 2);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, 3);
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i53, 4);
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i53, 5);
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} ldv_stop();
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb47:
    assume $i58 == 1;
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_file_operations_instance_callback_0_5($u11, $p9, $u2, $u1);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i57 == 1;
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} ldv_file_operations_instance_callback_0_22($u14, $p13, $u15);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb39:
    assume $i56 == 1;
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_file_operations_instance_callback_0_23($u13, $p13, $u2, $u2, $u1);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i55 == 1;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} $p59 := ldv_xmalloc(1736);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_file_operations_instance_callback_0_26($u12, $p60);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_free($p61);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i54 == 1;
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_file_operations_instance_callback_0_29($u11, $p9, $u2, $u1);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_file_operations_instance_release_0_2($p52, $p11, $p9);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} $p38 := ldv_xmalloc(1);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} $p39 := ldv_xmalloc(8);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p16);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i42 := $ule.i64($i41, 2147479552);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} ldv_assume($i43);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} ldv_free($p38);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p40);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} ldv_free($p50);
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} ldv_file_operations_instance_write_0_4($p49, $p9, $p38, $u1, $p40);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_free($p6);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} $i34 := ldv_undef_int();
    call {:si_unique_call 2738} {:cexpr "tmp___5"} boogie_si_record_i32($i34);
    goto corral_source_split_12148;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_12131;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 760923);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, assertsPassed;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} $i3 := nvme_dev_open($p1, $p2);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    call {:si_unique_call 2760} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 761955);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_201: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2762} vslice_dummy_var_201 := devirtbounce.30($p0, $p1, $p2, $i3, $p4);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_release_0_2: ref;

axiom ldv_file_operations_instance_release_0_2 == $sub.ref(0, 762987);

procedure ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} vslice_dummy_var_202 := nvme_dev_release($p1, $p2);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_29: ref;

axiom ldv_file_operations_instance_callback_0_29 == $sub.ref(0, 764019);

procedure ldv_file_operations_instance_callback_0_29($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation ldv_file_operations_instance_callback_0_29($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_203: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} {:cexpr "ldv_file_operations_instance_callback_0_29:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2765} {:cexpr "ldv_file_operations_instance_callback_0_29:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} vslice_dummy_var_203 := nvme_dev_ioctl($p1, $i2, $i3);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_26: ref;

axiom ldv_file_operations_instance_callback_0_26 == $sub.ref(0, 765051);

procedure ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.31, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref)
{
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} vslice_dummy_var_204 := nvme_revalidate_disk($p1);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_23: ref;

axiom ldv_file_operations_instance_callback_0_23 == $sub.ref(0, 766083);

procedure ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, $M.11, $M.51, $M.53, $M.54, $M.52, assertsPassed, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.29, $M.32, $M.3, $M.67, $M.31, $M.21, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64)
{
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2769} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2770} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} vslice_dummy_var_205 := nvme_ioctl($p1, $i2, $i3, $i4);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_22: ref;

axiom ldv_file_operations_instance_callback_0_22 == $sub.ref(0, 767115);

procedure ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} vslice_dummy_var_206 := nvme_getgeo($p1, $p2);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_5: ref;

axiom ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 768147);

procedure ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_207: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2774} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} vslice_dummy_var_207 := nvme_dev_ioctl($p1, $i2, $i3);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_file_operations_instance_4_14_4: ref;

axiom ldv_dispatch_deregister_file_operations_instance_4_14_4 == $sub.ref(0, 769179);

procedure ldv_dispatch_deregister_file_operations_instance_4_14_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_file_operations_instance_4_14_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_11_14_5: ref;

axiom ldv_dispatch_deregister_platform_instance_11_14_5 == $sub.ref(0, 770211);

procedure ldv_dispatch_deregister_platform_instance_11_14_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_11_14_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_5_5: ref;

axiom ldv_dispatch_pm_deregister_5_5 == $sub.ref(0, 771243);

procedure ldv_dispatch_pm_deregister_5_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_5_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_5_6: ref;

axiom ldv_dispatch_pm_register_5_6 == $sub.ref(0, 772275);

procedure ldv_dispatch_pm_register_5_6();
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_dispatch_pm_register_5_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $p0 := ldv_xmalloc(4);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} ldv_pm_pm_ops_instance_4($p2);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_4: ref;

axiom ldv_pm_pm_ops_instance_4 == $sub.ref(0, 773307);

procedure ldv_pm_pm_ops_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_pm_ops_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130 := ldv_pm_pm_ops_instance_4_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $p95, $p96, $i97, $i98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130);
    goto $bb1_last;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} ldv_stop();
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.98, $p25);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} $i31 := ldv_undef_int();
    call {:si_unique_call 2786} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} ldv_stop();
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.130, $p125);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb92:
    assume $i128 == 1;
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.131, $p129);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_pm_ops_instance_complete_4_3($p130, $u17);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.120, $p95);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_pm_ops_instance_poweroff_4_9($p96, $u17);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} $i97 := ldv_undef_int();
    call {:si_unique_call 2795} {:cexpr "tmp___3"} boogie_si_record_i32($i97);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i98 == 1);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.125, $p111);
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.127, $p117);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.129, $p123);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_pm_ops_instance_restore_4_4($p124, $u17);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i120 == 1;
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.128, $p121);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} ldv_pm_ops_instance_restore_noirq_4_5($p122, $u17);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i114 == 1;
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.126, $p115);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} ldv_pm_ops_instance_poweroff_noirq_4_6($p116, $u17);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i98 == 1;
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.121, $p99);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.123, $p105);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i108 == 1;
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.124, $p109);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} ldv_pm_ops_instance_restore_early_4_7($p110, $u17);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i102 == 1;
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.122, $p103);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_pm_ops_instance_poweroff_late_4_8($p104, $u17);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.110, $p65);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} ldv_pm_ops_instance_freeze_4_15($p66, $u17);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} $i67 := ldv_undef_int();
    call {:si_unique_call 2792} {:cexpr "tmp___2"} boogie_si_record_i32($i67);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i68 == 1);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.115, $p81);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.117, $p87);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.119, $p93);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} ldv_pm_ops_instance_thaw_4_10($p94, $u17);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i90 == 1;
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.118, $p91);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} ldv_pm_ops_instance_thaw_noirq_4_11($p92, $u17);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i84 == 1;
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.116, $p85);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} ldv_pm_ops_instance_freeze_noirq_4_12($p86, $u17);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i68 == 1;
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.111, $p69);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.113, $p75);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb66:
    assume $i78 == 1;
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.114, $p79);
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_pm_ops_instance_thaw_early_4_13($p80, $u17);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.112, $p73);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} ldv_pm_ops_instance_freeze_late_4_14($p74, $u17);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_1240:
    assume !assertsPassed;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.100, $p35);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} ldv_pm_ops_instance_suspend_4_21($p36, $u17);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $i37 := ldv_undef_int();
    call {:si_unique_call 2789} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.105, $p51);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.107, $p57);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.109, $p63);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} ldv_pm_ops_instance_resume_4_16($p64, $u17);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i60 == 1;
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.108, $p61);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} ldv_pm_ops_instance_resume_early_4_17($p62, $u17);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i54 == 1;
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.106, $p55);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} ldv_pm_ops_instance_suspend_late_4_18($p56, $u17);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1234:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.101, $p39);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.103, $p45);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i48 == 1;
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.104, $p49);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} ldv_pm_ops_instance_resume_noirq_4_19($p50, $u17);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i42 == 1;
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.102, $p43);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} ldv_pm_ops_instance_suspend_noirq_4_20($p44, $u17);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.99, $p29);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} ldv_pm_ops_instance_prepare_4_22($p30, $u17);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.94, $p13);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.96, $p19);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.97, $p23);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} ldv_pm_ops_instance_runtime_resume_4_24($p24, $u17);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.95, $p17);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} ldv_pm_ops_instance_runtime_suspend_4_25($p18, $u17);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.92, $p7);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.93, $p11);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} ldv_pm_ops_instance_runtime_idle_4_27($p12, $u17);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} $i1 := ldv_undef_int();
    call {:si_unique_call 2779} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12267;
}



const ldv_pm_ops_instance_runtime_idle_4_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_4_27 == $sub.ref(0, 774339);

procedure ldv_pm_ops_instance_runtime_idle_4_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_runtime_idle_4_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} vslice_dummy_var_208 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_4_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_4_25 == $sub.ref(0, 775371);

procedure ldv_pm_ops_instance_runtime_suspend_4_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_runtime_suspend_4_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} vslice_dummy_var_209 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_4_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_4_24 == $sub.ref(0, 776403);

procedure ldv_pm_ops_instance_runtime_resume_4_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_runtime_resume_4_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} vslice_dummy_var_210 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_4_22: ref;

axiom ldv_pm_ops_instance_prepare_4_22 == $sub.ref(0, 777435);

procedure ldv_pm_ops_instance_prepare_4_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_prepare_4_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} vslice_dummy_var_211 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_4_21: ref;

axiom ldv_pm_ops_instance_suspend_4_21 == $sub.ref(0, 778467);

procedure ldv_pm_ops_instance_suspend_4_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation ldv_pm_ops_instance_suspend_4_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} vslice_dummy_var_212 := nvme_suspend($p1);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_4_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_4_20 == $sub.ref(0, 779499);

procedure ldv_pm_ops_instance_suspend_noirq_4_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_suspend_noirq_4_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_213: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} vslice_dummy_var_213 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_4_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_4_19 == $sub.ref(0, 780531);

procedure ldv_pm_ops_instance_resume_noirq_4_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_resume_noirq_4_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} vslice_dummy_var_214 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_4_18: ref;

axiom ldv_pm_ops_instance_suspend_late_4_18 == $sub.ref(0, 781563);

procedure ldv_pm_ops_instance_suspend_late_4_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_suspend_late_4_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} vslice_dummy_var_215 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_4_17: ref;

axiom ldv_pm_ops_instance_resume_early_4_17 == $sub.ref(0, 782595);

procedure ldv_pm_ops_instance_resume_early_4_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_resume_early_4_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} vslice_dummy_var_216 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_4_16: ref;

axiom ldv_pm_ops_instance_resume_4_16 == $sub.ref(0, 783627);

procedure ldv_pm_ops_instance_resume_4_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation ldv_pm_ops_instance_resume_4_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} vslice_dummy_var_217 := nvme_resume($p1);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_4_15: ref;

axiom ldv_pm_ops_instance_freeze_4_15 == $sub.ref(0, 784659);

procedure ldv_pm_ops_instance_freeze_4_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation ldv_pm_ops_instance_freeze_4_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_218: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} vslice_dummy_var_218 := nvme_suspend($p1);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_4_14: ref;

axiom ldv_pm_ops_instance_freeze_late_4_14 == $sub.ref(0, 785691);

procedure ldv_pm_ops_instance_freeze_late_4_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_freeze_late_4_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} vslice_dummy_var_219 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_4_13: ref;

axiom ldv_pm_ops_instance_thaw_early_4_13 == $sub.ref(0, 786723);

procedure ldv_pm_ops_instance_thaw_early_4_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_thaw_early_4_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} vslice_dummy_var_220 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_4_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_4_12 == $sub.ref(0, 787755);

procedure ldv_pm_ops_instance_freeze_noirq_4_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_freeze_noirq_4_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} vslice_dummy_var_221 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_4_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_4_11 == $sub.ref(0, 788787);

procedure ldv_pm_ops_instance_thaw_noirq_4_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_thaw_noirq_4_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} vslice_dummy_var_222 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_4_10: ref;

axiom ldv_pm_ops_instance_thaw_4_10 == $sub.ref(0, 789819);

procedure ldv_pm_ops_instance_thaw_4_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation ldv_pm_ops_instance_thaw_4_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_223: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} vslice_dummy_var_223 := nvme_resume($p1);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_4_9: ref;

axiom ldv_pm_ops_instance_poweroff_4_9 == $sub.ref(0, 790851);

procedure ldv_pm_ops_instance_poweroff_4_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.29, $M.32, $M.17, $M.19, $M.18, $M.21, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, assertsPassed, $M.13, $M.23, $M.22, $M.36;



implementation ldv_pm_ops_instance_poweroff_4_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} vslice_dummy_var_224 := nvme_suspend($p1);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_4_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_4_8 == $sub.ref(0, 791883);

procedure ldv_pm_ops_instance_poweroff_late_4_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_poweroff_late_4_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_225: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} vslice_dummy_var_225 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_4_7: ref;

axiom ldv_pm_ops_instance_restore_early_4_7 == $sub.ref(0, 792915);

procedure ldv_pm_ops_instance_restore_early_4_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_restore_early_4_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} vslice_dummy_var_226 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_4_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_4_6 == $sub.ref(0, 793947);

procedure ldv_pm_ops_instance_poweroff_noirq_4_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_poweroff_noirq_4_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} vslice_dummy_var_227 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_4_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_4_5 == $sub.ref(0, 794979);

procedure ldv_pm_ops_instance_restore_noirq_4_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_ops_instance_restore_noirq_4_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} vslice_dummy_var_228 := devirtbounce.31($p0, $p1);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_4_4: ref;

axiom ldv_pm_ops_instance_restore_4_4 == $sub.ref(0, 796011);

procedure ldv_pm_ops_instance_restore_4_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.13, $M.20, $M.17, $M.19, $M.18, $M.22, $M.36;



implementation ldv_pm_ops_instance_restore_4_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} vslice_dummy_var_229 := nvme_resume($p1);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_4_3: ref;

axiom ldv_pm_ops_instance_complete_4_3 == $sub.ref(0, 797043);

procedure ldv_pm_ops_instance_complete_4_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.3, $M.21, $M.22, $M.29, $M.32, $CurrAddr, $M.9, assertsPassed, $M.10, $M.31, $M.11, $M.17, $M.19, $M.18, $M.13, $M.20, $M.36;



implementation ldv_pm_ops_instance_complete_4_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} devirtbounce.32($p0, $p1);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_platform_instance_11_14_6: ref;

axiom ldv_dispatch_register_platform_instance_11_14_6 == $sub.ref(0, 798075);

procedure ldv_dispatch_register_platform_instance_11_14_6();
  free requires assertsPassed;
  modifies $M.90, $M.91, $CurrAddr, $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, assertsPassed, $M.17, $M.19, $M.18, $M.10, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_dispatch_register_platform_instance_11_14_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} $p0 := ldv_xmalloc(4);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} ldv_pm_platform_instance_5($p2);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_5: ref;

axiom ldv_pm_platform_instance_5 == $sub.ref(0, 799107);

procedure ldv_pm_platform_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.90, $M.91, $M.0, $M.3, $M.29, $M.32, $CurrAddr, $M.21, $M.31, $M.9, $M.11, assertsPassed, $M.17, $M.19, $M.18, $M.10, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_platform_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} $i1 := ldv_undef_int();
    call {:si_unique_call 2839} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_5_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} ldv_ldv_pre_probe_170();
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.132, $p6);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} $i14 := ldv_ldv_post_probe_171($i13);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    call {:si_unique_call 2845} {:cexpr "ldv_5_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_free($p15);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} $i16 := ldv_undef_int();
    call {:si_unique_call 2848} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv_assume($i24);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} $i26 := ldv_undef_int();
    call {:si_unique_call 2854} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} ldv_assume($i19);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} $i20 := ldv_undef_int();
    call {:si_unique_call 2851} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_5_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} ldv_stop();
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_dispatch_pm_register_5_6();
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_dispatch_pm_deregister_5_5();
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} $i39 := ldv_undef_int();
    call {:si_unique_call 2862} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_12642;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.134, $p32);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} ldv_free($p38);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.135, $p36);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} ldv_platform_instance_release_5_3($p37, $p31);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.133, $p10);
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $i12 := ldv_platform_instance_probe_5_14($p11, $p5);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    call {:si_unique_call 2843} {:cexpr "ldv_5_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12571;
}



const ldv_ldv_pre_probe_170: ref;

axiom ldv_ldv_pre_probe_170 == $sub.ref(0, 800139);

procedure ldv_ldv_pre_probe_170();
  free requires assertsPassed;
  modifies $M.90, $M.91;



implementation ldv_ldv_pre_probe_170()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} ldv_pre_probe();
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_5_14: ref;

axiom ldv_platform_instance_probe_5_14 == $sub.ref(0, 801171);

procedure ldv_platform_instance_probe_5_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_platform_instance_probe_5_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $i2 := devirtbounce.33($p0, $p1);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    call {:si_unique_call 2867} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_171: ref;

axiom ldv_ldv_post_probe_171 == $sub.ref(0, 802203);

procedure ldv_ldv_post_probe_171($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.90, $M.91, assertsPassed;



implementation ldv_ldv_post_probe_171($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} {:cexpr "ldv_ldv_post_probe_171:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2872} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_5_3: ref;

axiom ldv_platform_instance_release_5_3 == $sub.ref(0, 803235);

procedure ldv_platform_instance_release_5_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_platform_instance_release_5_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} vslice_dummy_var_230 := devirtbounce.33($p0, $p1);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_14: ref;

axiom ldv_entry_EMGentry_14 == $sub.ref(0, 804267);

procedure ldv_entry_EMGentry_14($p0: ref);
  free requires assertsPassed;
  modifies $M.25, $M.28, $M.2, $M.1, $M.90, $M.91, $M.85, $CurrAddr, $M.0, $M.3, $M.29, $M.32, assertsPassed, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $M.10, $M.23, $M.13, $M.20, $M.88, $M.89, $M.22, $M.51, $M.53, $M.54, $M.52, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.36, $M.67;



implementation ldv_entry_EMGentry_14($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} $i1 := ldv_EMGentry_init_nvme_init_14_10($u19);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    call {:si_unique_call 2875} {:cexpr "ldv_14_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} $i2 := ldv_ldv_post_init_164($i1);
    call {:si_unique_call 2877} {:cexpr "ldv_14_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} $i3 := ldv_undef_int();
    call {:si_unique_call 2879} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} ldv_assume($i8);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} $i9 := ldv_undef_int();
    call {:si_unique_call 2885} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} ldv_EMGentry_exit_nvme_exit_14_2($u20);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} ldv_ldv_check_final_state_166();
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} ldv_stop();
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} ldv_dispatch_register_platform_instance_11_14_6();
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} ldv_dispatch_deregister_platform_instance_11_14_5();
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} ldv_dispatch_deregister_file_operations_instance_4_14_4();
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} ldv_assume($i6);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} ldv_ldv_check_final_state_165();
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} ldv_stop();
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_164: ref;

axiom ldv_ldv_post_init_164 == $sub.ref(0, 805299);

procedure ldv_ldv_post_init_164($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.90, $M.91;



implementation ldv_ldv_post_init_164($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} {:cexpr "ldv_ldv_post_init_164:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2896} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_165: ref;

axiom ldv_ldv_check_final_state_165 == $sub.ref(0, 806331);

procedure ldv_ldv_check_final_state_165();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_165()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  SeqInstr_1384:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_166: ref;

axiom ldv_ldv_check_final_state_166 == $sub.ref(0, 807363);

procedure ldv_ldv_check_final_state_166();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_166()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 808395);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1504:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 809427);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1507:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 810459);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1510:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 811491);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i0 := $M.136;
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 812523);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $i0 := $M.85;
    goto corral_source_split_12762;

  corral_source_split_12762:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1516:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 813555);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $i0 := $M.137;
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 814587);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $i0 := $M.138;
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 815619);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    $i0 := $M.139;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i3 := $M.140;
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 816651);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i0 := $M.141;
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 817683);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $i0 := $M.142;
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 818715);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $i0 := $M.143;
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 819747);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i0 := $M.144;
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 820779);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    $i0 := $M.145;
    goto corral_source_split_12814;

  corral_source_split_12814:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 821811);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $i0 := $M.146;
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $i3 := $M.146;
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 822843);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i0 := $M.147;
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 823875);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $i0 := $M.148;
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 824907);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $i0 := $M.149;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1555:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 825939);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i0 := $M.150;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1558:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 826971);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i0 := $M.86;
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1561:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 828003);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i0 := $M.151;
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1564:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 829035);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2959} __VERIFIER_error();
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 830067);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2961} __VERIFIER_error();
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1570:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 831099);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2963} __VERIFIER_error();
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1573:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 832131);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2965} __VERIFIER_error();
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1576:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 833163);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2967} __VERIFIER_error();
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 834195);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2969} __VERIFIER_error();
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1582:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 835227);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2971} __VERIFIER_error();
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1585:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 836259);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2973} __VERIFIER_error();
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 837291);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2975} __VERIFIER_error();
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 838323);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2977} __VERIFIER_error();
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1594:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 839355);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2979} __VERIFIER_error();
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 840387);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2981} __VERIFIER_error();
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1600:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 841419);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2983} __VERIFIER_error();
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 842451);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2985} __VERIFIER_error();
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1606:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 843483);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2987} __VERIFIER_error();
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1609:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 844515);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2989} __VERIFIER_error();
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 845547);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2991} __VERIFIER_error();
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1615:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 846579);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2993} __VERIFIER_error();
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1618:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 847611);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2995} __VERIFIER_error();
    goto SeqInstr_1621, SeqInstr_1622;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  SeqInstr_1623:
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1621:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 848643);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2997} __VERIFIER_error();
    goto SeqInstr_1624, SeqInstr_1625;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  SeqInstr_1626:
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1624:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 849675);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2999} __VERIFIER_error();
    goto SeqInstr_1627, SeqInstr_1628;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  SeqInstr_1629:
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1627:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 850707);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 3002} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 851739);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.31, $M.146, $M.20, $M.9, $M.21, $M.36, $M.23, $M.22, $M.45, $M.0, $M.34, $M.4, $M.160, $M.3, $M.2, $M.1, $M.25, $M.28, $M.12, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.151, $M.91, $M.86, $M.150, $M.149, $M.148, $M.90, $M.147, $M.144, $M.143, $M.142, $M.145, $M.141, $M.140, $M.139, $M.138, $M.137, $M.85, $M.136, $M.10, $M.35, $M.186, $M.187, $M.188, $CurrAddr, $M.29, $M.32, assertsPassed, $M.11, $M.17, $M.19, $M.18, $M.13, $M.88, $M.89, $M.51, $M.53, $M.54, $M.52, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.67;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 3003} $initialize();
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} ldv_ldv_initialize_167();
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} ldv_entry_EMGentry_14($0.ref);
    goto SeqInstr_1630, SeqInstr_1631;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  SeqInstr_1632:
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1630:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_167: ref;

axiom ldv_ldv_initialize_167 == $sub.ref(0, 852771);

procedure ldv_ldv_initialize_167();
  free requires assertsPassed;



implementation ldv_ldv_initialize_167()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 853803);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} ldv_assume($i2);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 854835);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3009} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 1} true;
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 855867);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 856899);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 857931);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1633, SeqInstr_1634;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  SeqInstr_1635:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1633:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 858963);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 859995);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 861027);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 862059);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 863091);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 864123);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 865155);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 866187);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 867219);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 868251);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3010} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 3011} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3012} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3013} __VERIFIER_assume($i4);
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 869283);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 870315);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 871347);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 872379);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3014} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3015} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3016} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3017} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3018} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3019} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3020} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 3021} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 3022} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3023} __VERIFIER_assume($i7);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3024} __VERIFIER_assume($i11);
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 873411);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 874443);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3025} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 3026} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3027} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3028} __VERIFIER_assume($i4);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 875475);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 876507);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 877539);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 878571);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 879603);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3029} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3030} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3031} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3032} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3033} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 3034} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3035} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 3036} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 3037} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3038} __VERIFIER_assume($i7);
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3039} __VERIFIER_assume($i11);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 880635);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 881667);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 882699);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 883731);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 884763);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 885795);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 886827);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 887859);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 888891);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3040} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 3041} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 3042} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3043} __VERIFIER_assume($i10);
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 889923);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3044} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 3045} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 3046} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 890955);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3047} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 3048} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 3049} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 891987);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3050} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 3051} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 893019);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 894051);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3052} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 3053} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 895083);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 896115);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 897147);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3054} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 3055} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3056} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 3057} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} $p6 := malloc($i5);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_142 := $M.0;
    call {:si_unique_call 3059} cmdloc_dummy_var_143 := $memset.i8(cmdloc_dummy_var_142, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_143;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 898179);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 899211);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.27, $M.31, $M.146, $M.20, $M.9, $M.21, $M.36, $M.23, $M.22, $M.45, $M.0, $M.34, $M.4, $M.160, $M.3, $M.2, $M.1, $M.25, $M.28, $M.12, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.151, $M.91, $M.86, $M.150, $M.149, $M.148, $M.90, $M.147, $M.144, $M.143, $M.142, $M.145, $M.141, $M.140, $M.139, $M.138, $M.137, $M.85, $M.136, $M.10, $M.35, $M.186, $M.187, $M.188;



implementation __SMACK_static_init()
{

  $bb0:
    $M.27 := 30;
    call {:si_unique_call 3060} {:cexpr "nvme_io_timeout"} boogie_si_record_i8(30);
    $M.31 := $store.ref($M.31, nvme_meta_noop, nvme_noop_generate);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(8, 1)), nvme_noop_verify);
    $M.31 := $store.i16($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(16, 1)), 0);
    $M.31 := $store.i16($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(18, 1)), 0);
    $M.31 := $store.i16($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(20, 1)), 0);
    $M.31 := $store.i16($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(22, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(24, 1)), .str.1);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(32, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(40, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(48, 1)), $0.ref);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.31 := $store.i64($M.31, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.31 := $store.ref($M.31, $add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.31 := $store.i32($M.31, $add.ref($add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.31 := $store.i8($M.31, $add.ref($add.ref($add.ref(nvme_meta_noop, $mul.ref(0, 328)), $mul.ref(32, 1)), $mul.ref(288, 1)), 0);
    $M.146 := 0;
    call {:si_unique_call 3061} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 3062} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 3063} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    $M.20 := 1;
    call {:si_unique_call 3064} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_queue_lock_of_request_queue"} boogie_si_record_i32(1);
    $M.9 := 1;
    call {:si_unique_call 3065} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_q_lock_of_nvme_queue"} boogie_si_record_i32(1);
    call {:si_unique_call 3066} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 3067} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 3068} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 3069} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 3070} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.21 := 1;
    call {:si_unique_call 3071} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_dev_list_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 3072} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.36 := 0;
    call {:si_unique_call 3073} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.23 := 0;
    call {:si_unique_call 3074} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 3075} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.45 := 30534;
    call {:si_unique_call 3076} {:cexpr "sg_version_num"} boogie_si_record_i32(30534);
    $M.0 := $store.ref($M.0, nvme_fops, nvme_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(8, 1)), nvme_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(24, 1)), nvme_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(32, 1)), nvme_compat_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(72, 1)), nvme_revalidate_disk);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(80, 1)), nvme_getgeo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_fops, $mul.ref(0, 104)), $mul.ref(96, 1)), __this_module);
    $M.0 := $store.ref($M.0, nvme_mq_ops, nvme_queue_rq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(8, 1)), blk_mq_map_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(16, 1)), nvme_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(32, 1)), nvme_init_hctx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(40, 1)), nvme_exit_hctx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(48, 1)), nvme_init_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_ops, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, nvme_mq_admin_ops, nvme_admin_queue_rq);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(8, 1)), blk_mq_map_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(16, 1)), nvme_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(32, 1)), nvme_admin_init_hctx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(40, 1)), nvme_exit_hctx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(48, 1)), nvme_admin_init_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_mq_admin_ops, $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.34 := 0;
    call {:si_unique_call 3077} {:cexpr "use_threaded_interrupts"} boogie_si_record_i32(0);
    $M.4 := 5;
    call {:si_unique_call 3078} {:cexpr "shutdown_timeout"} boogie_si_record_i8(5);
    $M.160 := $store.ref($M.160, nvme_instance_ida, $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.16);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.160 := $store.i64($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(nvme_instance_ida, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_list, dev_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_list, $mul.ref(0, 16)), $mul.ref(8, 1)), dev_list);
    $M.0 := $store.i32($M.0, dev_list_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(dev_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, nvme_dev_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(80, 1)), nvme_dev_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(88, 1)), nvme_dev_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(112, 1)), nvme_dev_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(128, 1)), nvme_dev_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_fops, $mul.ref(0, 240)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i32($M.0, nvme_kthread_wait, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_kthread_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.3 := $0.ref;
    $M.2 := 0;
    call {:si_unique_call 3079} {:cexpr "nvme_char_major"} boogie_si_record_i32(0);
    $M.1 := $0.ref;
    $M.25 := $0.ref;
    $M.28 := 0;
    call {:si_unique_call 3080} {:cexpr "nvme_major"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, nvme_dev_pm_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), nvme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), nvme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), nvme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), nvme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), nvme_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), nvme_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_dev_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, nvme_err_handler, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_err_handler, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_err_handler, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_err_handler, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_err_handler, $mul.ref(0, 48)), $mul.ref(32, 1)), nvme_reset_notify);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_err_handler, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, nvme_id_table, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 67586);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 16777215);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(nvme_id_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, nvme_driver, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.5);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), nvme_id_table);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), nvme_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), nvme_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), nvme_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), nvme_err_handler);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), nvme_dev_pm_ops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(nvme_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.12 := 60;
    call {:si_unique_call 3081} {:cexpr "admin_timeout"} boogie_si_record_i8(60);
    call {:si_unique_call 3082} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 3083} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 3084} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 3085} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.179 := $store.i32($M.179, __mod_pci__nvme_id_table_device_table, 0);
    $M.180 := $store.i32($M.180, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.181 := $store.i32($M.181, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.183 := $store.i32($M.183, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.184 := $store.i32($M.184, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.185 := $store.i64($M.185, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.179 := $store.i32($M.179, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.180 := $store.i32($M.180, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.181 := $store.i32($M.181, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.183 := $store.i32($M.183, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.184 := $store.i32($M.184, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.185 := $store.i64($M.185, $add.ref($add.ref($add.ref(__mod_pci__nvme_id_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.151 := 0;
    call {:si_unique_call 3086} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 3087} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 3088} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 3089} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.149 := 0;
    call {:si_unique_call 3090} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.148 := 0;
    call {:si_unique_call 3091} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 3092} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.147 := 0;
    call {:si_unique_call 3093} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.144 := 0;
    call {:si_unique_call 3094} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.143 := 0;
    call {:si_unique_call 3095} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.142 := 0;
    call {:si_unique_call 3096} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.145 := 0;
    call {:si_unique_call 3097} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.141 := 1;
    call {:si_unique_call 3098} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.140 := 1;
    call {:si_unique_call 3099} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.139 := 1;
    call {:si_unique_call 3100} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.138 := 0;
    call {:si_unique_call 3101} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.137 := 0;
    call {:si_unique_call 3102} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 3103} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.136 := 0;
    call {:si_unique_call 3104} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 3105} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.35 := 1;
    call {:si_unique_call 3106} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.0 := $store.i8($M.0, .str.5, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(1, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.186 := $store.i8($M.186, .str.49, 110);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(1, 1)), 118);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(6, 1)), 110);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.187 := $store.i8($M.187, .str.31, 110);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(1, 1)), 118);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(5, 1)), 100);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(6, 1)), 113);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(.str.31, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.14, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.14, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.188 := $store.i8($M.188, .str.51, 37);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(2, 1)), 52);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(3, 1)), 120);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.51, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(2, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 3107} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 900243);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(nvme_resume, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(nvme_suspend, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(nvme_remove_dead_ctrl, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(nvme_kthread, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(nvme_revalidate_disk, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(kthread_worker_fn, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_noop_verify, $p0);
    assume {:branchcond $i18} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(nvme_noop_generate, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3108} $i2 := nvme_noop_generate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3109} $i4 := nvme_noop_verify($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3110} $i6 := kthread_worker_fn($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3111} $i8 := nvme_revalidate_disk($p7);
    goto SeqInstr_1636, SeqInstr_1637;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  SeqInstr_1638:
    $r := $i8;
    return;

  SeqInstr_1636:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3112} $i10 := nvme_kthread($p9);
    goto SeqInstr_1639, SeqInstr_1640;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  SeqInstr_1641:
    $r := $i10;
    return;

  SeqInstr_1639:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3113} $i12 := nvme_remove_dead_ctrl($p11);
    goto SeqInstr_1642, SeqInstr_1643;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  SeqInstr_1644:
    $r := $i12;
    return;

  SeqInstr_1642:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3114} $i14 := nvme_suspend($p13);
    goto SeqInstr_1645, SeqInstr_1646;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  SeqInstr_1647:
    $r := $i14;
    return;

  SeqInstr_1645:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3115} $i16 := nvme_resume($p15);
    goto SeqInstr_1648, SeqInstr_1649;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  SeqInstr_1650:
    $r := $i16;
    return;

  SeqInstr_1648:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 901275);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(req_completion, $p0);
    assume {:branchcond $i6} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i6 == 1);
    $i5 := $eq.ref(abort_completion, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i5 == 1);
    $i4 := $eq.ref(async_req_completion, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i4 == 1);
    $i3 := $eq.ref(async_completion, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i3 == 1);
    $i2 := $eq.ref(sync_completion, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i2 == 1);
    $i1 := $eq.ref(special_completion, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 3116} special_completion(arg, arg1, arg2);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 3117} sync_completion(arg, arg1, arg2);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 3118} async_completion(arg, arg1, arg2);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 3119} async_req_completion(arg, arg1, arg2);
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 3120} abort_completion(arg, arg1, arg2);
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 3121} req_completion(arg, arg1, arg2);
    goto SeqInstr_1651, SeqInstr_1652;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  SeqInstr_1653:
    return;

  SeqInstr_1651:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 902307);

procedure devirtbounce.2(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 903339);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 904371);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 905403);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 906435);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 907467);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 908499);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 909531);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(nvme_remove_disks, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_async_probe, $p0);
    assume {:branchcond $i18} true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(nvme_reset_workfn, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(nvme_reset_failed_dev, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(nvme_free_dev, $p0);
    assume {:branchcond $i15} true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(nvme_del_cq_work_handler, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(nvme_del_sq_work_handler, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(nvme_del_queue_start, $p0);
    assume {:branchcond $i12} true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(nvme_shutdown, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(nvme_remove, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3122} nvme_remove($p1);
    goto SeqInstr_1654, SeqInstr_1655;

  SeqInstr_1655:
    assume assertsPassed;
    goto SeqInstr_1656;

  SeqInstr_1656:
    return;

  SeqInstr_1654:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3123} nvme_shutdown($p2);
    goto SeqInstr_1657, SeqInstr_1658;

  SeqInstr_1658:
    assume assertsPassed;
    goto SeqInstr_1659;

  SeqInstr_1659:
    return;

  SeqInstr_1657:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3124} nvme_del_queue_start($p3);
    goto SeqInstr_1660, SeqInstr_1661;

  SeqInstr_1661:
    assume assertsPassed;
    goto SeqInstr_1662;

  SeqInstr_1662:
    return;

  SeqInstr_1660:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3125} nvme_del_sq_work_handler($p4);
    goto SeqInstr_1663, SeqInstr_1664;

  SeqInstr_1664:
    assume assertsPassed;
    goto SeqInstr_1665;

  SeqInstr_1665:
    return;

  SeqInstr_1663:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3126} nvme_del_cq_work_handler($p5);
    return;

  $bb7:
    assume $i15 == 1;
    call {:si_unique_call 3127} nvme_free_dev(arg);
    goto SeqInstr_1666, SeqInstr_1667;

  SeqInstr_1667:
    assume assertsPassed;
    goto SeqInstr_1668;

  SeqInstr_1668:
    return;

  SeqInstr_1666:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3128} nvme_reset_failed_dev($p6);
    goto SeqInstr_1669, SeqInstr_1670;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  SeqInstr_1671:
    return;

  SeqInstr_1669:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3129} nvme_reset_workfn($p7);
    goto SeqInstr_1672, SeqInstr_1673;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  SeqInstr_1674:
    return;

  SeqInstr_1672:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3130} nvme_async_probe($p8);
    goto SeqInstr_1675, SeqInstr_1676;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  SeqInstr_1677:
    return;

  SeqInstr_1675:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3131} nvme_remove_disks($p9);
    goto SeqInstr_1678, SeqInstr_1679;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  SeqInstr_1680:
    return;

  SeqInstr_1678:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 910563);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 911595);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 912627);

procedure devirtbounce.12(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 913659);

procedure devirtbounce.13(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36;



implementation devirtbounce.13(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(nvme_remove_disks, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i16 == 1);
    $i15 := $eq.ref(nvme_async_probe, $p0);
    assume {:branchcond $i15} true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i15 == 1);
    $i14 := $eq.ref(nvme_reset_workfn, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i14 == 1);
    $i13 := $eq.ref(nvme_reset_failed_dev, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i13 == 1);
    $i12 := $eq.ref(nvme_free_dev, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i12 == 1);
    $i11 := $eq.ref(nvme_del_cq_work_handler, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i11 == 1);
    $i10 := $eq.ref(nvme_del_sq_work_handler, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i10 == 1);
    $i9 := $eq.ref(nvme_del_queue_start, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i9 == 1);
    $i8 := $eq.ref(nvme_shutdown, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i8 == 1);
    $i7 := $eq.ref(nvme_remove, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3132} nvme_remove($p1);
    goto SeqInstr_1681, SeqInstr_1682;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  SeqInstr_1683:
    return;

  SeqInstr_1681:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3133} nvme_shutdown($p2);
    goto SeqInstr_1684, SeqInstr_1685;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  SeqInstr_1686:
    return;

  SeqInstr_1684:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3134} nvme_del_queue_start($p3);
    goto SeqInstr_1687, SeqInstr_1688;

  SeqInstr_1688:
    assume assertsPassed;
    goto SeqInstr_1689;

  SeqInstr_1689:
    return;

  SeqInstr_1687:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3135} nvme_del_sq_work_handler($p4);
    goto SeqInstr_1690, SeqInstr_1691;

  SeqInstr_1691:
    assume assertsPassed;
    goto SeqInstr_1692;

  SeqInstr_1692:
    return;

  SeqInstr_1690:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3136} nvme_del_cq_work_handler($p5);
    return;

  $bb7:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3137} nvme_free_dev($p6);
    goto SeqInstr_1693, SeqInstr_1694;

  SeqInstr_1694:
    assume assertsPassed;
    goto SeqInstr_1695;

  SeqInstr_1695:
    return;

  SeqInstr_1693:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    call {:si_unique_call 3138} nvme_reset_failed_dev(arg);
    goto SeqInstr_1696, SeqInstr_1697;

  SeqInstr_1697:
    assume assertsPassed;
    goto SeqInstr_1698;

  SeqInstr_1698:
    return;

  SeqInstr_1696:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    call {:si_unique_call 3139} nvme_reset_workfn(arg);
    goto SeqInstr_1699, SeqInstr_1700;

  SeqInstr_1700:
    assume assertsPassed;
    goto SeqInstr_1701;

  SeqInstr_1701:
    return;

  SeqInstr_1699:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i15 == 1;
    call {:si_unique_call 3140} nvme_async_probe(arg);
    goto SeqInstr_1702, SeqInstr_1703;

  SeqInstr_1703:
    assume assertsPassed;
    goto SeqInstr_1704;

  SeqInstr_1704:
    return;

  SeqInstr_1702:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    call {:si_unique_call 3141} nvme_remove_disks(arg);
    goto SeqInstr_1705, SeqInstr_1706;

  SeqInstr_1706:
    assume assertsPassed;
    goto SeqInstr_1707;

  SeqInstr_1707:
    return;

  SeqInstr_1705:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 914691);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 915723);

procedure devirtbounce.15(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(nvme_irq, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(nvme_irq_check, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 3142} $i1 := nvme_irq_check(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 3143} $i2 := nvme_irq(arg, arg1);
    goto SeqInstr_1708, SeqInstr_1709;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  SeqInstr_1710:
    $r := $i2;
    return;

  SeqInstr_1708:
    assume !assertsPassed;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 916755);

procedure devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 917787);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 918819);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 919851);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 920883);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 921915);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 922947);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 923979);

procedure devirtbounce.23(funcPtr: ref, arg: i32, arg1: i32, arg2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.23(funcPtr: ref, arg: i32, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(nvme_dif_complete, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(nvme_dif_prep, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 3144} nvme_dif_prep(arg, arg1, arg2);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 3145} nvme_dif_complete(arg, arg1, arg2);
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 925011);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 926043);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 927075);

procedure devirtbounce.26(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $CurrAddr, $M.20, assertsPassed;



implementation devirtbounce.26(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(nvme_irq, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(nvme_irq_check, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3146} $i2 := nvme_irq_check(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3147} $i4 := nvme_irq(arg, $p3);
    goto SeqInstr_1711, SeqInstr_1712;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  SeqInstr_1713:
    $r := $i4;
    return;

  SeqInstr_1711:
    assume !assertsPassed;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 928107);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(nvme_trans_fill_all_pages, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(nvme_trans_fill_inf_exc_page, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(nvme_trans_fill_pow_cnd_page, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(nvme_trans_fill_control_page, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(nvme_trans_fill_caching_page, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 3148} $i1 := nvme_trans_fill_caching_page(arg, arg1, arg2, arg3);
    goto SeqInstr_1714, SeqInstr_1715;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  SeqInstr_1716:
    $r := $i1;
    return;

  SeqInstr_1714:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 3149} $i2 := nvme_trans_fill_control_page(arg, arg1, arg2, arg3);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 3150} $i3 := nvme_trans_fill_pow_cnd_page(arg, arg1, arg2, arg3);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 3151} $i4 := nvme_trans_fill_inf_exc_page(arg, arg1, arg2, arg3);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 3152} $i5 := nvme_trans_fill_all_pages(arg, arg1, arg2, arg3);
    goto SeqInstr_1717, SeqInstr_1718;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  SeqInstr_1719:
    $r := $i5;
    return;

  SeqInstr_1717:
    assume !assertsPassed;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 929139);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, assertsPassed, $M.0;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(nvme_open, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3153} $i2 := nvme_open($p1, arg1);
    goto SeqInstr_1720, SeqInstr_1721;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  SeqInstr_1722:
    $r := $i2;
    return;

  SeqInstr_1720:
    assume !assertsPassed;
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 930171);

procedure devirtbounce.29(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation devirtbounce.29(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(nvme_resume, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(nvme_suspend, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(nvme_remove_dead_ctrl, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(nvme_kthread, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(nvme_revalidate_disk, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(kthread_worker_fn, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_noop_verify, $p0);
    assume {:branchcond $i18} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(nvme_noop_generate, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3154} $i2 := nvme_noop_generate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3155} $i4 := nvme_noop_verify($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3156} $i6 := kthread_worker_fn($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3157} $i8 := nvme_revalidate_disk($p7);
    goto SeqInstr_1723, SeqInstr_1724;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  SeqInstr_1725:
    $r := $i8;
    return;

  SeqInstr_1723:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3158} $i10 := nvme_kthread($p9);
    goto SeqInstr_1726, SeqInstr_1727;

  SeqInstr_1727:
    assume assertsPassed;
    goto SeqInstr_1728;

  SeqInstr_1728:
    $r := $i10;
    return;

  SeqInstr_1726:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3159} $i12 := nvme_remove_dead_ctrl($p11);
    goto SeqInstr_1729, SeqInstr_1730;

  SeqInstr_1730:
    assume assertsPassed;
    goto SeqInstr_1731;

  SeqInstr_1731:
    $r := $i12;
    return;

  SeqInstr_1729:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3160} $i14 := nvme_suspend($p13);
    goto SeqInstr_1732, SeqInstr_1733;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  SeqInstr_1734:
    $r := $i14;
    return;

  SeqInstr_1732:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3161} $i16 := nvme_resume($p15);
    goto SeqInstr_1735, SeqInstr_1736;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  SeqInstr_1737:
    $r := $i16;
    return;

  SeqInstr_1735:
    assume !assertsPassed;
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 931203);

procedure devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 932235);

procedure devirtbounce.31(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation devirtbounce.31(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(nvme_kthread, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i22 == 1);
    $i21 := $eq.ref(nvme_revalidate_disk, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i21 == 1);
    $i20 := $eq.ref(nvme_remove_dead_ctrl, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i20 == 1);
    $i19 := $eq.ref(nvme_resume, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_suspend, $p0);
    assume {:branchcond $i18} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(kthread_worker_fn, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(nvme_noop_verify, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(nvme_noop_generate, $p0);
    assume {:branchcond $i15} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3162} $i2 := nvme_noop_generate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3163} $i4 := nvme_noop_verify($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3164} $i6 := kthread_worker_fn($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 3165} $i7 := nvme_suspend(arg);
    goto SeqInstr_1738, SeqInstr_1739;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  SeqInstr_1740:
    $r := $i7;
    return;

  SeqInstr_1738:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    call {:si_unique_call 3166} $i8 := nvme_resume(arg);
    goto SeqInstr_1741, SeqInstr_1742;

  SeqInstr_1742:
    assume assertsPassed;
    goto SeqInstr_1743;

  SeqInstr_1743:
    $r := $i8;
    return;

  SeqInstr_1741:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3167} $i10 := nvme_remove_dead_ctrl($p9);
    goto SeqInstr_1744, SeqInstr_1745;

  SeqInstr_1745:
    assume assertsPassed;
    goto SeqInstr_1746;

  SeqInstr_1746:
    $r := $i10;
    return;

  SeqInstr_1744:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3168} $i12 := nvme_revalidate_disk($p11);
    goto SeqInstr_1747, SeqInstr_1748;

  SeqInstr_1748:
    assume assertsPassed;
    goto SeqInstr_1749;

  SeqInstr_1749:
    $r := $i12;
    return;

  SeqInstr_1747:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3169} $i14 := nvme_kthread($p13);
    goto SeqInstr_1750, SeqInstr_1751;

  SeqInstr_1751:
    assume assertsPassed;
    goto SeqInstr_1752;

  SeqInstr_1752:
    $r := $i14;
    return;

  SeqInstr_1750:
    assume !assertsPassed;
    return;
}



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 933267);

procedure devirtbounce.32(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.3, $M.21, $M.22, $M.29, $M.32, $CurrAddr, $M.9, assertsPassed, $M.10, $M.31, $M.11, $M.17, $M.19, $M.18, $M.13, $M.20, $M.36;



implementation devirtbounce.32(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(nvme_shutdown, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(nvme_remove, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_reset_failed_dev, $p0);
    assume {:branchcond $i18} true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(nvme_reset_workfn, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(nvme_async_probe, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(nvme_remove_disks, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(nvme_free_dev, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(nvme_del_cq_work_handler, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(nvme_del_sq_work_handler, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(nvme_del_queue_start, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3170} nvme_del_queue_start($p1);
    goto SeqInstr_1753, SeqInstr_1754;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  SeqInstr_1755:
    return;

  SeqInstr_1753:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3171} nvme_del_sq_work_handler($p2);
    goto SeqInstr_1756, SeqInstr_1757;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  SeqInstr_1758:
    return;

  SeqInstr_1756:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3172} nvme_del_cq_work_handler($p3);
    return;

  $bb5:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3173} nvme_free_dev($p4);
    goto SeqInstr_1759, SeqInstr_1760;

  SeqInstr_1760:
    assume assertsPassed;
    goto SeqInstr_1761;

  SeqInstr_1761:
    return;

  SeqInstr_1759:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3174} nvme_remove_disks($p5);
    goto SeqInstr_1762, SeqInstr_1763;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  SeqInstr_1764:
    return;

  SeqInstr_1762:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i16 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3175} nvme_async_probe($p6);
    goto SeqInstr_1765, SeqInstr_1766;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  SeqInstr_1767:
    return;

  SeqInstr_1765:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3176} nvme_reset_workfn($p7);
    goto SeqInstr_1768, SeqInstr_1769;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  SeqInstr_1770:
    return;

  SeqInstr_1768:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3177} nvme_reset_failed_dev($p8);
    goto SeqInstr_1771, SeqInstr_1772;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  SeqInstr_1773:
    return;

  SeqInstr_1771:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3178} nvme_remove($p9);
    goto SeqInstr_1774, SeqInstr_1775;

  SeqInstr_1775:
    assume assertsPassed;
    goto SeqInstr_1776;

  SeqInstr_1776:
    return;

  SeqInstr_1774:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3179} nvme_shutdown($p10);
    goto SeqInstr_1777, SeqInstr_1778;

  SeqInstr_1778:
    assume assertsPassed;
    goto SeqInstr_1779;

  SeqInstr_1779:
    return;

  SeqInstr_1777:
    assume !assertsPassed;
    return;
}



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 934299);

procedure devirtbounce.33(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation devirtbounce.33(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(nvme_kthread, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(nvme_revalidate_disk, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(nvme_remove_dead_ctrl, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(nvme_resume, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(nvme_suspend, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(kthread_worker_fn, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(nvme_noop_verify, $p0);
    assume {:branchcond $i18} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(nvme_noop_generate, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3180} $i2 := nvme_noop_generate($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3181} $i4 := nvme_noop_verify($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3182} $i6 := kthread_worker_fn($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3183} $i8 := nvme_suspend($p7);
    goto SeqInstr_1780, SeqInstr_1781;

  SeqInstr_1781:
    assume assertsPassed;
    goto SeqInstr_1782;

  SeqInstr_1782:
    $r := $i8;
    return;

  SeqInstr_1780:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3184} $i10 := nvme_resume($p9);
    goto SeqInstr_1783, SeqInstr_1784;

  SeqInstr_1784:
    assume assertsPassed;
    goto SeqInstr_1785;

  SeqInstr_1785:
    $r := $i10;
    return;

  SeqInstr_1783:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3185} $i12 := nvme_remove_dead_ctrl($p11);
    goto SeqInstr_1786, SeqInstr_1787;

  SeqInstr_1787:
    assume assertsPassed;
    goto SeqInstr_1788;

  SeqInstr_1788:
    $r := $i12;
    return;

  SeqInstr_1786:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3186} $i14 := nvme_revalidate_disk($p13);
    goto SeqInstr_1789, SeqInstr_1790;

  SeqInstr_1790:
    assume assertsPassed;
    goto SeqInstr_1791;

  SeqInstr_1791:
    $r := $i14;
    return;

  SeqInstr_1789:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3187} $i16 := nvme_kthread($p15);
    goto SeqInstr_1792, SeqInstr_1793;

  SeqInstr_1793:
    assume assertsPassed;
    goto SeqInstr_1794;

  SeqInstr_1794:
    $r := $i16;
    return;

  SeqInstr_1792:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i64;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: i32;

const $u20: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: i8;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.27, $M.31, $M.146, $M.20, $M.9, $M.21, $M.36, $M.23, $M.22, $M.45, $M.0, $M.34, $M.4, $M.160, $M.3, $M.2, $M.1, $M.25, $M.28, $M.12, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.151, $M.91, $M.86, $M.150, $M.149, $M.148, $M.90, $M.147, $M.144, $M.143, $M.142, $M.145, $M.141, $M.140, $M.139, $M.138, $M.137, $M.85, $M.136, $M.10, $M.35, $M.186, $M.187, $M.188, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3188} __SMACK_static_init();
    call {:si_unique_call 3189} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.27, $M.31, $M.146, $M.20, $M.9, $M.21, $M.36, $M.23, $M.22, $M.45, $M.0, $M.34, $M.4, $M.160, $M.3, $M.2, $M.1, $M.25, $M.28, $M.12, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.151, $M.91, $M.86, $M.150, $M.149, $M.148, $M.90, $M.147, $M.144, $M.143, $M.142, $M.145, $M.141, $M.140, $M.139, $M.138, $M.137, $M.85, $M.136, $M.10, $M.35, $M.186, $M.187, $M.188, $CurrAddr, $M.29, $M.32, $M.11, $M.17, $M.19, $M.18, $M.13, $M.88, $M.89, $M.51, $M.53, $M.54, $M.52, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.67;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation nvme_dev_shutdown_loop_$bb18(in_$p0: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i31: i32)
{

  entry:
    out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i31 := in_$p32, in_$p33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i31;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  $bb20:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i37;
    goto $bb20_dummy;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$i38 := $sge.i32(out_$i37, 0);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i31, 1);
    call {:si_unique_call 74} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_254;

  SeqInstr_63:
    goto corral_source_split_253;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} nvme_clear_queue(out_$p36);
    goto SeqInstr_62;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_252;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p33, $mul.ref(out_$i34, 8));
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i31);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_249;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i31 := nvme_dev_shutdown_loop_$bb18(in_$p0, out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i31);
    return;

  exit:
    return;
}



procedure nvme_dev_shutdown_loop_$bb18(in_$p0: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i31: i32) returns (out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i31: i32);
  modifies $M.9, assertsPassed;



implementation nvme_dev_shutdown_loop_$bb9(in_$p0: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$i17: i32, in_vslice_dummy_var_150: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$i17: i32, out_vslice_dummy_var_150: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i17, out_vslice_dummy_var_150 := in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i24, in_$i25, in_$i17, in_vslice_dummy_var_150;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  $bb11:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i24;
    goto $bb11_dummy;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i25 := $sge.i32(out_$i24, 0);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 70} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_233;

  SeqInstr_57:
    goto corral_source_split_232;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_vslice_dummy_var_150 := nvme_suspend_queue(out_$p22);
    goto SeqInstr_56;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 8));
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_228;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i17, out_vslice_dummy_var_150 := nvme_dev_shutdown_loop_$bb9(in_$p0, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i24, out_$i25, out_$i17, out_vslice_dummy_var_150);
    return;

  exit:
    return;
}



procedure nvme_dev_shutdown_loop_$bb9(in_$p0: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i24: i32, in_$i25: i1, in_$i17: i32, in_vslice_dummy_var_150: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i24: i32, out_$i25: i1, out_$i17: i32, out_vslice_dummy_var_150: i32);
  modifies $M.0, $M.9, assertsPassed;



implementation nvme_freeze_queues_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p10: ref)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p10 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_304;

  $bb6:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p29;
    goto $bb6_dummy;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, in_$i8);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} blk_mq_stop_hw_queues(out_$p26);
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} blk_mq_cancel_requeue_work(out_$p24);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_322;

  SeqInstr_75:
    goto corral_source_split_321;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_spin_unlock_141(out_$p22);
    goto SeqInstr_74;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} queue_flag_set(2, out_$p18);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_314;

  SeqInstr_72:
    goto corral_source_split_313;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_spin_lock_140(out_$p16);
    goto SeqInstr_71;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 3704)), $mul.ref(2080, 1));
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} blk_mq_freeze_queue_start(out_$p12);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_307;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p10 := nvme_freeze_queues_loop_$bb4(in_$i8, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p10);
    return;

  exit:
    return;
}



procedure nvme_freeze_queues_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p10: ref);
  modifies $M.20, assertsPassed;



implementation nvme_disable_io_queues_loop_$bb22(in_$p0: ref, in_$p3: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i38: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_154: i1) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i38: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_154: i1)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p53, out_$p55, out_$p56, out_$p59, out_$p62, out_$p63, out_$p64, out_$p66, out_$i68, out_$i69, out_$i38, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_154 := in_$p39, in_$p40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p49, in_$p50, in_$p51, in_$p53, in_$p55, in_$p56, in_$p59, in_$p62, in_$p63, in_$p64, in_$p66, in_$i68, in_$i69, in_$i38, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_154;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  $bb28:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i68;
    goto $bb28_dummy;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i68, 0);
    goto corral_source_split_454;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i68 := $sub.i32(out_$i38, 1);
    call {:si_unique_call 116} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_453;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i45 == 1;
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_449;

  SeqInstr_93:
    call {:si_unique_call 115} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_448;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} out_$i44 := nvme_suspend_queue(out_$p43);
    goto SeqInstr_92;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(out_$i41, 8));
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i38);
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_444;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} out_vslice_dummy_var_154 := queue_kthread_work(out_$p64, out_$p66);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, nvme_del_queue_start);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} INIT_LIST_HEAD(out_$p59);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 118} out_cmdloc_dummy_var_10 := $memset.i8(out_cmdloc_dummy_var_9, out_$p56, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_10;
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p53, out_$p51);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(32, 1));
    goto corral_source_split_462;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, out_$p46);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 240)), $mul.ref(168, 1)), $mul.ref(56, 1));
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} out_$p46 := nvme_get_dq(in_$p3);
    goto corral_source_split_456;

  $bb25:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p53, out_$p55, out_$p56, out_$p59, out_$p62, out_$p63, out_$p64, out_$p66, out_$i68, out_$i69, out_$i38, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_154 := nvme_disable_io_queues_loop_$bb22(in_$p0, in_$p3, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p49, out_$p50, out_$p51, out_$p53, out_$p55, out_$p56, out_$p59, out_$p62, out_$p63, out_$p64, out_$p66, out_$i68, out_$i69, out_$i38, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_154);
    return;

  exit:
    return;
}



procedure nvme_disable_io_queues_loop_$bb22(in_$p0: ref, in_$p3: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p59: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i38: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_154: i1) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$p59: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i38: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_154: i1);
  modifies $M.0, $M.9, assertsPassed;



implementation nvme_disable_io_queues_loop_$bb12(in_$p0: ref, in_$i29: i32, in_$i30: i1, in_$i28: i32) returns (out_$i29: i32, out_$i30: i1, out_$i28: i32)
{

  entry:
    out_$i29, out_$i30, out_$i28 := in_$i29, in_$i30, in_$i28;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  $bb14:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i29;
    goto $bb14_dummy;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i32(out_$i29, 0);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i28, 1);
    call {:si_unique_call 111} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_423;

  SeqInstr_90:
    goto corral_source_split_422;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} nvme_disable_queue(in_$p0, out_$i28);
    goto SeqInstr_89;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i28 := nvme_disable_io_queues_loop_$bb12(in_$p0, out_$i29, out_$i30, out_$i28);
    return;

  exit:
    return;
}



procedure nvme_disable_io_queues_loop_$bb12(in_$p0: ref, in_$i29: i32, in_$i30: i1, in_$i28: i32) returns (out_$i29: i32, out_$i30: i1, out_$i28: i32);
  modifies $M.0, $M.29, $M.32, $M.3, $M.9, $M.31, $M.21, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_shutdown_ctrl_loop_$bb4(in_$i20: i64, in_$p21: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1) returns (out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43 := in_$p28, in_$i29, in_$i30, in_$i32, in_$i33, in_$i34, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb13_dummy;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 8);
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 12);
    goto corral_source_split_538;

  SeqInstr_102:
    call {:si_unique_call 133} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_537;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_$i41 := readl(out_$p40);
    goto SeqInstr_101;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_535;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, in_$p21);
    goto corral_source_split_534;

  $bb11:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i64(out_$i33, 0);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i64(in_$i20, out_$i32);
    goto corral_source_split_525;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, jiffies);
    goto corral_source_split_524;

  $bb7:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_$i29 := fatal_signal_pending(out_$p28);
    call {:si_unique_call 130} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$p28 := get_current();
    goto corral_source_split_516;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} msleep(100);
    goto corral_source_split_515;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43 := nvme_shutdown_ctrl_loop_$bb4(in_$i20, in_$p21, out_$p28, out_$i29, out_$i30, out_$i32, out_$i33, out_$i34, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure nvme_shutdown_ctrl_loop_$bb4(in_$i20: i64, in_$p21: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1) returns (out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1);
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation nvme_process_cq_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p14: ref, in_$i24: i16, in_$i25: i16, in_$i22: i16, in_$i23: i16, in_$p26: ref, in_$i27: i16, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i16, in_$i41: i16, in_$i42: i16, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8) returns (out_$i24: i16, out_$i25: i16, out_$i22: i16, out_$i23: i16, out_$p26: ref, out_$i27: i16, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i16, out_$i41: i16, out_$i42: i16, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8)
{

  entry:
    out_$i24, out_$i25, out_$i22, out_$i23, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := in_$i24, in_$i25, in_$i22, in_$i23, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i42, out_$i41;
    goto $bb11_dummy;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i41, out_$i42;
    assume true;
    goto $bb11;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i55, out_$i56);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i42);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 1);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i16($M.0, in_$p14);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.0;
    out_cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 202} out_cmdloc_dummy_var_16 := $memcpy.i8(out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, in_$p12, out_$p52, 16, $zext.i32.i64(4), 1 == 1);
    $M.0 := out_cmdloc_dummy_var_16;
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(out_$i50, 16));
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i64(out_$i41);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, in_$p8);
    goto corral_source_split_906;

  SeqInstr_168:
    goto corral_source_split_905;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.11, in_$p1);
    call {:si_unique_call 201} devirtbounce.1(out_$p48, in_$p0, out_$p47, in_$p2);
    goto SeqInstr_167;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} out_$p47 := nvme_finish_cmd(in_$p0, out_$i45, out_$p46);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i44);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i16($M.0, out_$p43);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_900;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  $bb9:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i31, out_$i22;
    goto $bb10;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := 0, out_$i40;
    goto $bb10;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    call {:si_unique_call 199} {:cexpr "phase"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i32(out_$i38);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i22);
    goto corral_source_split_894;

  $bb8:
    assume out_$i36 == 1;
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i32, out_$i35);
    goto corral_source_split_891;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.0, out_$p33);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(152, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i16.i32(out_$i31);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i32.i16(out_$i30);
    call {:si_unique_call 198} {:cexpr "head"} boogie_si_record_i16(out_$i31);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 1);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i23);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p28, out_$i27);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(156, 1));
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i16($M.0, out_$p26);
    goto corral_source_split_881;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_880;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i22, out_$i23, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := nvme_process_cq_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p8, in_$p12, in_$p14, out_$i24, out_$i25, out_$i22, out_$i23, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16);
    return;

  exit:
    return;
}



procedure nvme_process_cq_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p12: ref, in_$p14: ref, in_$i24: i16, in_$i25: i16, in_$i22: i16, in_$i23: i16, in_$p26: ref, in_$i27: i16, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i16, in_$i32: i32, in_$p33: ref, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i16, in_$i41: i16, in_$i42: i16, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8) returns (out_$i24: i16, out_$i25: i16, out_$i22: i16, out_$i23: i16, out_$p26: ref, out_$i27: i16, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i16, out_$i32: i32, out_$p33: ref, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i16, out_$i41: i16, out_$i42: i16, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8);
  modifies $M.0, $M.20, assertsPassed, $M.11;



implementation nvme_wait_dq_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p7: ref, out_$p8: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1)
{

  entry:
    out_$p7, out_$p8, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36 := in_$p7, in_$p8, in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$p7 := get_current();
    goto corral_source_split_1332;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} out_$i35 := fatal_signal_pending(out_$p34);
    call {:si_unique_call 346} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} out_$p34 := get_current();
    goto corral_source_split_1377;

  $bb14:
    assume !(out_$i33 == 1);
    goto corral_source_split_1376;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, 0);
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_$i32 := schedule_timeout(out_$i31);
    call {:si_unique_call 343} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_1370;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    out_$i30 := $mul.i32(out_$i29, 250);
    goto corral_source_split_1369;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1368;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i28 := $M.12;
    goto corral_source_split_1367;

  $bb10:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_$i26 := atomic_read(out_$p25);
    call {:si_unique_call 339} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_1355;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1354;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, in_$p2, out_$i24);
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 331} out_$i24 := devirtbounce.3(0, out_$p23, out_$i22, out_$p23);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.17, in_$p2);
    goto corral_source_split_1338;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} out_$p21 := get_current();
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, in_$p2, 130);
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p8, 0);
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_1333;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36 := nvme_wait_dq_loop_$bb1(in_$p0, in_$p2, out_$p7, out_$p8, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure nvme_wait_dq_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1) returns (out_$p7: ref, out_$p8: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1);
  modifies $M.0, $M.17;



implementation nvme_wait_ready_loop_$bb4(in_$i5: i32, in_$i12: i64, in_$p13: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37 := in_$p20, in_$i21, in_$i22, in_$i24, in_$i25, in_$i26, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb13_dummy;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, in_$i5);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 1);
    goto corral_source_split_1523;

  SeqInstr_213:
    call {:si_unique_call 395} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1522;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} out_$i35 := readl(out_$p34);
    goto SeqInstr_212;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_1521;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_1520;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, in_$p13);
    goto corral_source_split_1519;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i64(out_$i25, 0);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(in_$i12, out_$i24);
    goto corral_source_split_1508;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, jiffies);
    goto corral_source_split_1507;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} out_$i21 := fatal_signal_pending(out_$p20);
    call {:si_unique_call 392} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$p20 := get_current();
    goto corral_source_split_1499;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} msleep(100);
    goto corral_source_split_1498;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37 := nvme_wait_ready_loop_$bb4(in_$i5, in_$i12, in_$p13, out_$p20, out_$i21, out_$i22, out_$i24, out_$i25, out_$i26, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure nvme_wait_ready_loop_$bb4(in_$i5: i32, in_$i12: i64, in_$p13: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1);
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_dev_remove_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p10: ref)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p10 := in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1887;

  $bb15:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p38;
    goto $bb15_dummy;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i8);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1928;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_258:
    goto corral_source_split_1925;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ldv_blk_cleanup_queue_143(out_$p35);
    goto SeqInstr_257;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} blk_mq_abort_requeue_list(out_$p33);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1920;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} out_$i30 := constant_test_bit(5, out_$p29);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 3704)), $mul.ref(1992, 1));
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1914;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1913;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_255:
    goto corral_source_split_1911;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_del_gendisk_142(out_$p26);
    goto SeqInstr_254;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1910;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1909;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} blk_integrity_unregister(out_$p24);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1905;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1744)), $mul.ref(1728, 1));
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1897;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i32(out_$i14, 16);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 1744)), $mul.ref(1680, 1));
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_1890;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p10 := nvme_dev_remove_loop_$bb4(in_$i8, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p10);
    return;

  exit:
    return;
}



procedure nvme_dev_remove_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p10: ref);
  modifies $M.23, assertsPassed, $M.22;



implementation nvme_free_queues_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i20;
    goto $bb6_dummy;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i21 := $sge.i32(out_$i20, in_$i1);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} nvme_free_queue(out_$p11);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 8));
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p15, out_$i14);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(out_$i13, 1);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 8));
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_1969;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i6 := nvme_free_queues_loop_$bb4(in_$p0, in_$i1, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i6);
    return;

  exit:
    return;
}



procedure nvme_free_queues_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i6: i32);
  modifies $M.0;



implementation nvme_free_namespaces_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p14, out_$p15 := in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p24, in_$p25, in_$p27, in_$i28, in_$i29, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  $bb6:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p25, out_$p14;
    goto $bb6_dummy;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i12);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} kfree(out_$p22);
    goto corral_source_split_2102;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2101;

  SeqInstr_282:
    goto corral_source_split_2100;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_put_disk_150(out_$p21);
    goto SeqInstr_281;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2098;

  SeqInstr_279:
    goto corral_source_split_2097;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_278;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, $0.ref);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1744)), $mul.ref(1672, 1));
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2093;

  SeqInstr_276:
    goto corral_source_split_2092;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_275;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} list_del(out_$p16);
    goto corral_source_split_2091;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p14, out_$p15 := nvme_free_namespaces_loop_$bb4(in_$i12, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p24, out_$p25, out_$p27, out_$i28, out_$i29, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure nvme_free_namespaces_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p14: ref, out_$p15: ref);
  modifies $M.22, assertsPassed, $M.21, $M.0;



implementation nvme_set_instance_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32) returns (out_$i4: i32, out_$i5: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32)
{

  entry:
    out_$i4, out_$i5, out_$i7, out_$i8, out_$i9 := in_$i4, in_$i5, in_$i7, in_$i8, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb7_dummy;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i4, 0);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$i4 := ida_pre_get(nvme_instance_ida, 208);
    call {:si_unique_call 608} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_2349;

  $bb5:
    assume out_$i8 == 1;
    goto corral_source_split_2348;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i7;
    assume true;
    goto $bb5;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, $sub.i32(0, 11));
    goto corral_source_split_2359;

  SeqInstr_333:
    goto corral_source_split_2358;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_332;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$i7 := ida_get_new(nvme_instance_ida, in_$p1);
    call {:si_unique_call 611} {:cexpr "error"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2357;

  SeqInstr_330:
    goto corral_source_split_2356;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_329;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i7, out_$i8, out_$i9 := nvme_set_instance_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$i7, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure nvme_set_instance_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32) returns (out_$i4: i32, out_$i5: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32);
  modifies $M.21, assertsPassed;



implementation nvme_dev_start_loop_$bb29(in_$p1: ref, in_$i36: i64, in_$i37: i1, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1) returns (out_$i36: i64, out_$i37: i1, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1)
{

  entry:
    out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41 := in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i38;
    goto $bb36_dummy;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    out_$p39 := $M.3;
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} out_$i38 := prepare_to_wait_event(nvme_kthread_wait, in_$p1, 130);
    call {:si_unique_call 662} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_2546;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} schedule();
    goto corral_source_split_2545;

  $bb34:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2541;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41 := nvme_dev_start_loop_$bb29(in_$p1, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure nvme_dev_start_loop_$bb29(in_$p1: ref, in_$i36: i64, in_$i37: i1, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$i41: i1) returns (out_$i36: i64, out_$i37: i1, out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$i41: i1);



implementation nvme_dev_add_loop_$bb35(in_$p0: ref, in_$i28: i32, in_$i144: i32, in_$i145: i1, in_$i143: i32) returns (out_$i144: i32, out_$i145: i1, out_$i143: i32)
{

  entry:
    out_$i144, out_$i145, out_$i143 := in_$i144, in_$i145, in_$i143;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  $bb37:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := out_$i144;
    goto $bb37_dummy;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i145 := $ule.i32(out_$i144, in_$i28);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i143, 1);
    call {:si_unique_call 700} {:cexpr "i"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_2782;

  SeqInstr_378:
    goto corral_source_split_2781;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} nvme_alloc_ns(in_$p0, out_$i143);
    goto SeqInstr_377;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i144, out_$i145, out_$i143 := nvme_dev_add_loop_$bb35(in_$p0, in_$i28, out_$i144, out_$i145, out_$i143);
    return;

  exit:
    return;
}



procedure nvme_dev_add_loop_$bb35(in_$p0: ref, in_$i28: i32, in_$i144: i32, in_$i145: i1, in_$i143: i32) returns (out_$i144: i32, out_$i145: i1, out_$i143: i32);
  modifies $M.0, $M.23, $M.29, $M.31, $M.22, assertsPassed, $CurrAddr, $M.13, $M.9;



implementation nvme_set_irq_hints_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i16, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i4: i32, in_vslice_dummy_var_169: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i16, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i4: i32, out_vslice_dummy_var_169: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i29, out_$i4, out_vslice_dummy_var_169 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i27, in_$i28, in_$i29, in_$i4, in_vslice_dummy_var_169;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2794;

  $bb10:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i27;
    goto $bb10_dummy;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(out_$i27, out_$i28);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, in_$p1);
    goto corral_source_split_2809;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i4, 1);
    call {:si_unique_call 701} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2808;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 8));
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_2797;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} out_vslice_dummy_var_169 := irq_set_affinity_hint(out_$i21, out_$p25);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1080)), $mul.ref(544, 1));
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p9, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i18, 8)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i16.i64(out_$i17);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, out_$p16);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p9, $mul.ref(0, 240)), $mul.ref(154, 1));
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2813;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_2812;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i29, out_$i4, out_vslice_dummy_var_169 := nvme_set_irq_hints_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i29, out_$i4, out_vslice_dummy_var_169);
    return;

  exit:
    return;
}



procedure nvme_set_irq_hints_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i16, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i4: i32, in_vslice_dummy_var_169: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i16, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i4: i32, out_vslice_dummy_var_169: i32);



implementation nvme_kthread_loop_$bb34(in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p29: ref) returns (out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1)
{

  entry:
    out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79 := in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3807;

  $bb40:
    assume {:verifier.code 0} true;
    assume in_$i67 == 1;
    goto $bb40_dummy;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i74);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i8(out_$i73);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_3821;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3820;

  $bb37:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_3813;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i68 := nvme_submit_async_admin_req(in_$p29);
    call {:si_unique_call 892} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3812;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume out_$i79 == 1;
    goto corral_source_split_3830;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_3808;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79 := nvme_kthread_loop_$bb34(in_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, in_$p29);
    return;

  exit:
    return;
}



procedure nvme_kthread_loop_$bb34(in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p29: ref) returns (out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1);
  modifies $M.0, $CurrAddr;



implementation nvme_kthread_loop_$bb25(in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p29: ref, in_vslice_dummy_var_175: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_vslice_dummy_var_175: i32)
{

  entry:
    out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_vslice_dummy_var_175 := in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i57, in_vslice_dummy_var_175;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  $bb45:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i81;
    goto $bb45_dummy;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i83 := $ult.i32(out_$i81, out_$i82);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, in_$p54);
    goto corral_source_split_3797;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i57, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_3796;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i64 == 1;
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p59, $mul.ref(out_$i60, 8));
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3787;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_444:
    goto corral_source_split_3818;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_spin_unlock_irq_106(out_$p80);
    goto SeqInstr_443;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3817;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i69 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_3813;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i68 := nvme_submit_async_admin_req(in_$p29);
    call {:si_unique_call 892} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3812;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume out_$i79 == 1;
    goto corral_source_split_3830;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_3808;

  $bb34:
    call out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79 := nvme_kthread_loop_$bb34(out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, in_$p29);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    assume false;
    return;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i74);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i8(out_$i73);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_3821;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3820;

  $bb37:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume out_$i67 == 1;
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3803;

  SeqInstr_441:
    goto corral_source_split_3802;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_175 := nvme_process_cq(out_$p62);
    goto SeqInstr_440;

  SeqInstr_438:
    goto corral_source_split_3801;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_spin_lock_irq_105(out_$p65);
    goto SeqInstr_437;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3800;

  $bb28:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb33;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41:
    assume !(out_$i67 == 1);
    goto corral_source_split_3828;

  $bb43:
    assume !(out_$i79 == 1);
    goto corral_source_split_3832;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_vslice_dummy_var_175 := nvme_kthread_loop_$bb25(in_$p54, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, in_$p29, out_vslice_dummy_var_175);
    return;

  exit:
    return;
}



procedure nvme_kthread_loop_$bb25(in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p29: ref, in_vslice_dummy_var_175: i32) returns (out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_vslice_dummy_var_175: i32);
  modifies $M.9, assertsPassed, $M.0, $CurrAddr, $M.11, $M.20;



implementation nvme_kthread_loop_$bb13(in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p29: ref, in_$p30: ref, in_vslice_dummy_var_174: i1, in_vslice_dummy_var_175: i32) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_$p85: ref, out_$p86: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p29: ref, out_$p30: ref, out_vslice_dummy_var_174: i1, out_vslice_dummy_var_175: i32)
{

  entry:
    out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i57, in_$p85, in_$p86, in_$p88, in_$i89, in_$i90, in_$p29, in_$p30, in_vslice_dummy_var_174, in_vslice_dummy_var_175;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  $bb48:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$p29, out_$p30 := out_$p30, out_$p86;
    goto $bb48_dummy;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, $p2i.ref.i64(dev_list));
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p30, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3755;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i40 == 1;
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} out_$i39 := work_busy(out_$p38);
    call {:si_unique_call 882} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3748;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 2);
    goto corral_source_split_3744;

  SeqInstr_432:
    call {:si_unique_call 880} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3743;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i35 := readl(out_$p34);
    goto SeqInstr_431;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3740;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} out_vslice_dummy_var_174 := queue_work(out_$p51, out_$p52);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$p51 := $M.25;
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p50, nvme_reset_failed_dev);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} dev_warn.ref.ref.i32(out_$p49, .str.33, out_$i46);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3768;

  SeqInstr_435:
    call {:si_unique_call 885} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3767;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$i46 := readl(out_$p45);
    goto SeqInstr_434;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} list_del_init(out_$p41);
    goto corral_source_split_3762;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb24;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb46:
    assume !(out_$i83 == 1);
    goto corral_source_split_3834;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i83 := $ult.i32(out_$i81, out_$i82);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p54);
    goto corral_source_split_3797;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i57, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_3796;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i64 == 1;
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p59, $mul.ref(out_$i60, 8));
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3787;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_vslice_dummy_var_175 := nvme_kthread_loop_$bb25(out_$p54, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p29, out_vslice_dummy_var_175);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i57 := 0;
    goto $bb25;

  $bb45:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i81;
    assume false;
    return;

  $bb22:
    assume out_$i56 == 1;
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(0, out_$i55);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_3779;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_3778;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_444:
    goto corral_source_split_3818;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_spin_unlock_irq_106(out_$p80);
    goto SeqInstr_443;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3817;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i69 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_3813;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i68 := nvme_submit_async_admin_req(out_$p29);
    call {:si_unique_call 892} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3812;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume out_$i79 == 1;
    goto corral_source_split_3830;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_3808;

  $bb34:
    call out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79 := nvme_kthread_loop_$bb34(out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p29);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    assume false;
    return;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i74);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i8(out_$i73);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_3821;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3820;

  $bb37:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume out_$i67 == 1;
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3803;

  SeqInstr_441:
    goto corral_source_split_3802;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_175 := nvme_process_cq(out_$p62);
    goto SeqInstr_440;

  SeqInstr_438:
    goto corral_source_split_3801;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_spin_lock_irq_105(out_$p65);
    goto SeqInstr_437;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3800;

  $bb28:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb33;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41:
    assume !(out_$i67 == 1);
    goto corral_source_split_3828;

  $bb43:
    assume !(out_$i79 == 1);
    goto corral_source_split_3832;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := nvme_kthread_loop_$bb13(out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_vslice_dummy_var_174, out_vslice_dummy_var_175);
    return;

  exit:
    return;
}



procedure nvme_kthread_loop_$bb13(in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p29: ref, in_$p30: ref, in_vslice_dummy_var_174: i1, in_vslice_dummy_var_175: i32) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_$p85: ref, out_$p86: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p29: ref, out_$p30: ref, out_vslice_dummy_var_174: i1, out_vslice_dummy_var_175: i32);
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_kthread_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p29: ref, in_$p30: ref, in_$i91: i64, in_$i93: i1, in_$i94: i8, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_vslice_dummy_var_174: i1, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i64) returns (out_$p2: ref, out_$p3: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_$p85: ref, out_$p86: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p29: ref, out_$p30: ref, out_$i91: i64, out_$i93: i1, out_$i94: i8, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_vslice_dummy_var_174: i1, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i64)
{

  entry:
    out_$p2, out_$p3, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := in_$p2, in_$p3, in_$p16, in_$i17, in_$p18, in_$i19, in_$p20, in_$p21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p54, in_$i55, in_$i56, in_$p58, in_$p59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i57, in_$p85, in_$p86, in_$p88, in_$i89, in_$i90, in_$p29, in_$p30, in_$i91, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$i93 := kthread_should_stop();
    goto corral_source_split_3697;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840_dummy;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} out_vslice_dummy_var_176 := schedule_timeout(out_$i91);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$i91 := round_jiffies_relative(250);
    call {:si_unique_call 896} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_3839;

  SeqInstr_447:
    goto corral_source_split_3838;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_spin_unlock_127(dev_list_lock);
    goto SeqInstr_446;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb12;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb49:
    assume !(out_$i90 == 1);
    goto corral_source_split_3836;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, $p2i.ref.i64(dev_list));
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p30, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_3755;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i40 == 1;
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} out_$i39 := work_busy(out_$p38);
    call {:si_unique_call 882} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3748;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 2);
    goto corral_source_split_3744;

  SeqInstr_432:
    call {:si_unique_call 880} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3743;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i35 := readl(out_$p34);
    goto SeqInstr_431;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3740;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_vslice_dummy_var_174, out_vslice_dummy_var_175 := nvme_kthread_loop_$bb13(out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_vslice_dummy_var_174, out_vslice_dummy_var_175);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p29, out_$p30 := out_$p20, out_$p24;
    goto $bb13;

  $bb48:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$p29, out_$p30 := out_$p30, out_$p86;
    assume false;
    return;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_3735;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, $p2i.ref.i64(dev_list));
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, dev_list);
    goto corral_source_split_3724;

  SeqInstr_429:
    goto corral_source_split_3723;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_spin_lock_126(dev_list_lock);
    goto SeqInstr_428;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, in_$p1, out_$i19);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 870} out_$i19 := devirtbounce.3(0, out_$p18, out_$i17, out_$p18);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.32, in_$p1);
    goto corral_source_split_3707;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_$p16 := get_current();
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, in_$p1, 1);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p3, 0);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(out_$p2, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_3702;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$p2 := get_current();
    goto corral_source_split_3701;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb54:
    assume out_$i97 == 1;
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_3845;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  $bb52:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := 1;
    goto $bb53;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i96 := 0;
    goto $bb53;

  $bb51:
    assume out_$i95 == 1;
    goto corral_source_split_3842;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i8.i1(out_$i94);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i1.i8(out_$i93);
    call {:si_unique_call 867} {:cexpr "tmp___9"} boogie_si_record_i8(out_$i94);
    goto corral_source_split_3698;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} out_vslice_dummy_var_174 := queue_work(out_$p51, out_$p52);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(616, 1));
    goto corral_source_split_3775;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$p51 := $M.25;
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p50, nvme_reset_failed_dev);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(608, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} dev_warn.ref.ref.i32(out_$p49, .str.33, out_$i46);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(504, 1));
    goto corral_source_split_3768;

  SeqInstr_435:
    call {:si_unique_call 885} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3767;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_$i46 := readl(out_$p45);
    goto SeqInstr_434;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(568, 1));
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} list_del_init(out_$p41);
    goto corral_source_split_3762;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb24;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb46:
    assume !(out_$i83 == 1);
    goto corral_source_split_3834;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i83 := $ult.i32(out_$i81, out_$i82);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p54);
    goto corral_source_split_3797;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i57, 1);
    call {:si_unique_call 888} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_3796;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i64 == 1;
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p59, $mul.ref(out_$i60, 8));
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i57);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3787;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb25:
    call out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_vslice_dummy_var_175 := nvme_kthread_loop_$bb25(out_$p54, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p29, out_vslice_dummy_var_175);
    goto $bb25_last;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i57 := 0;
    goto $bb25;

  $bb45:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i81;
    assume false;
    return;

  $bb22:
    assume out_$i56 == 1;
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(0, out_$i55);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_3779;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(532, 1));
    goto corral_source_split_3778;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_444:
    goto corral_source_split_3818;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_spin_unlock_irq_106(out_$p80);
    goto SeqInstr_443;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3817;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i69 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_3813;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i68 := nvme_submit_async_admin_req(out_$p29);
    call {:si_unique_call 892} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_3812;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume out_$i79 == 1;
    goto corral_source_split_3830;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.0, out_$p76);
    goto corral_source_split_3808;

  $bb34:
    call out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79 := nvme_kthread_loop_$bb34(out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p29);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i67 == 1;
    assume false;
    return;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p75, out_$i74);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i8(out_$i73);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.0, out_$p70);
    goto corral_source_split_3821;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p29, $mul.ref(0, 880)), $mul.ref(872, 1));
    goto corral_source_split_3820;

  $bb37:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume out_$i67 == 1;
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3803;

  SeqInstr_441:
    goto corral_source_split_3802;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_175 := nvme_process_cq(out_$p62);
    goto SeqInstr_440;

  SeqInstr_438:
    goto corral_source_split_3801;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_spin_lock_irq_105(out_$p65);
    goto SeqInstr_437;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p62, $mul.ref(0, 240)), $mul.ref(40, 1));
    goto corral_source_split_3800;

  $bb28:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb33;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41:
    assume !(out_$i67 == 1);
    goto corral_source_split_3828;

  $bb43:
    assume !(out_$i79 == 1);
    goto corral_source_split_3832;

  corral_source_split_3840_dummy:
    call {:si_unique_call 1} out_$p2, out_$p3, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := nvme_kthread_loop_$bb1(in_$p1, out_$p2, out_$p3, out_$p16, out_$i17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p54, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i57, out_$p85, out_$p86, out_$p88, out_$i89, out_$i90, out_$p29, out_$p30, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176);
    return;

  exit:
    return;
}



procedure nvme_kthread_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i8, in_$p75: ref, in_$p76: ref, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32, in_$p85: ref, in_$p86: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p29: ref, in_$p30: ref, in_$i91: i64, in_$i93: i1, in_$i94: i8, in_$i95: i1, in_$i96: i32, in_$i97: i1, in_vslice_dummy_var_174: i1, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i64) returns (out_$p2: ref, out_$p3: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i8, out_$p75: ref, out_$p76: ref, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32, out_$p85: ref, out_$p86: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p29: ref, out_$p30: ref, out_$i91: i64, out_$i93: i1, out_$i94: i8, out_$i95: i1, out_$i96: i32, out_$i97: i1, out_vslice_dummy_var_174: i1, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i64);
  modifies $M.21, assertsPassed, $M.0, $M.29, $M.32, $M.3, $M.31, $M.9, $M.11, $CurrAddr, $M.13, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation nvme_setup_io_queues_loop_$bb44(in_$p0: ref, in_$p5: ref, in_$i78: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i82: i32) returns (out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i82: i32)
{

  entry:
    out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82 := in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$p90, in_$i91, in_$i92, in_$i82;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  $bb46:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i91;
    goto $bb46_dummy;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i91, in_$i78);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i82, 1);
    call {:si_unique_call 942} {:cexpr "i"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p90, out_$i85);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p87, $mul.ref(out_$i88, 8)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i82);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i82, out_$i84);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.0, out_$p83);
    goto corral_source_split_4101;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46_dummy:
    call {:si_unique_call 1} out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82 := nvme_setup_io_queues_loop_$bb44(in_$p0, in_$p5, in_$i78, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82);
    return;

  exit:
    return;
}



procedure nvme_setup_io_queues_loop_$bb44(in_$p0: ref, in_$p5: ref, in_$i78: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i82: i32) returns (out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i82: i32);
  modifies $M.0;



implementation nvme_setup_io_queues_loop_$bb28(in_$p0: ref, in_$i53: i32, in_$i64: i16, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i63: i32) returns (out_$i64: i16, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i63: i32)
{

  entry:
    out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i63 := in_$i64, in_$p65, in_$p66, in_$i67, in_$p69, in_$i70, in_$i71, in_$i63;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  $bb30:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i70;
    goto $bb30_dummy;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, in_$i53);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i63, 1);
    call {:si_unique_call 937} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p69, out_$i64);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 8)), $mul.ref(4, 1));
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i63);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(560, 1));
    goto corral_source_split_4062;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i16(out_$i63);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i63 := nvme_setup_io_queues_loop_$bb28(in_$p0, in_$i53, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$i70, out_$i71, out_$i63);
    return;

  exit:
    return;
}



procedure nvme_setup_io_queues_loop_$bb28(in_$p0: ref, in_$i53: i32, in_$i64: i16, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i63: i32) returns (out_$i64: i16, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i63: i32);
  modifies $M.0;



implementation nvme_setup_io_queues_loop_$bb13(in_$p0: ref, in_$p21: ref, in_$p26: ref, in_$p27: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1)
{

  entry:
    out_$i33, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p42, out_$i43, out_$i44 := in_$i33, in_$i32, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p42, in_$i43, in_$i44;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i34;
    goto $bb20_dummy;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    assume true;
    goto $bb20;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, in_$p27);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p26, out_$p40);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_$p40 := ioremap(out_$i38, out_$i39);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i37);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, in_$p21);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i36);
    call {:si_unique_call 933} {:cexpr "size"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_4031;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_$i36 := db_bar_size(in_$p0, out_$i34);
    call {:si_unique_call 932} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_4030;

  $bb18:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_4026;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 930} {:cexpr "nr_io_queues"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4025;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i33, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p42, out_$i43, out_$i44 := nvme_setup_io_queues_loop_$bb13(in_$p0, in_$p21, in_$p26, in_$p27, out_$i33, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure nvme_setup_io_queues_loop_$bb13(in_$p0: ref, in_$p21: ref, in_$p26: ref, in_$p27: ref, in_$i33: i32, in_$i32: i32, in_$i34: i32, in_$i35: i1, in_$i36: i64, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1) returns (out_$i33: i32, out_$i32: i32, out_$i34: i32, out_$i35: i1, out_$i36: i64, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1);
  modifies $M.0, $M.10;



implementation nvme_create_io_queues_loop_$bb16(in_$p0: ref, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i21 := in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i21;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  $bb22:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i29;
    goto $bb22_dummy;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i32 := $ule.i32(out_$i29, out_$i31);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    out_$i31 := $sub.i32(out_$i30, 1);
    goto corral_source_split_4265;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p17);
    goto corral_source_split_4264;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i21, 1);
    call {:si_unique_call 982} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4263;

  $bb19:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_4259;

  SeqInstr_483:
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_4258;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} out_$i27 := nvme_create_queue(out_$p26, out_$i21);
    goto SeqInstr_482;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(out_$i24, 8));
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i21);
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4254;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i21 := nvme_create_io_queues_loop_$bb16(in_$p0, in_$p17, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i21);
    return;

  exit:
    return;
}



procedure nvme_create_io_queues_loop_$bb16(in_$p0: ref, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32);
  modifies $M.0, $M.9, $CurrAddr, $M.13, assertsPassed, $M.36, $M.11, $M.20;



implementation nvme_create_io_queues_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i6 := in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i12;
    goto $bb10_dummy;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i14 := $ule.i32(out_$i12, out_$i13);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4244;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i6, 1);
    call {:si_unique_call 979} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4243;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_4231;

  SeqInstr_480:
    goto corral_source_split_4230;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} out_$p9 := nvme_alloc_queue(in_$p0, out_$i6, out_$i8);
    goto SeqInstr_479;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_4229;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(544, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i6 := nvme_create_io_queues_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i6);
    return;

  exit:
    return;
}



procedure nvme_create_io_queues_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i6: i32);
  modifies $M.0, $CurrAddr, assertsPassed;



implementation nvme_unfreeze_queues_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p10: ref)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p10 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5202;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p21;
    goto $bb6_dummy;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i8);
    goto corral_source_split_5221;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5217;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} blk_mq_kick_requeue_list(out_$p18);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} blk_mq_start_stopped_hw_queues(out_$p16, 1);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} blk_mq_unfreeze_queue(out_$p14);
    goto corral_source_split_5209;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} queue_flag_clear_unlocked(2, out_$p12);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5205;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p10 := nvme_unfreeze_queues_loop_$bb4(in_$i8, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p10);
    return;

  exit:
    return;
}



procedure nvme_unfreeze_queues_loop_$bb4(in_$i8: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p10: ref) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p10: ref);



implementation nvme_dev_open_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$p12, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p8 := in_$p9, in_$i10, in_$i11, in_$p12, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5344;

  $bb16:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p25;
    goto $bb16_dummy;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, $p2i.ref.i64(dev_list));
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_5372;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5371;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, in_$i2);
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_5347;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 880)), $mul.ref(528, 1));
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$p12, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p8 := nvme_dev_open_loop_$bb4(in_$i2, out_$p9, out_$i10, out_$i11, out_$p12, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p8);
    return;

  exit:
    return;
}



procedure nvme_dev_open_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p8: ref);



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 1350} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_5430;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_5428;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_5427;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 1348} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 1346} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5418;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_5417;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);
  modifies $M.0;



implementation nvme_map_user_pages_loop_$bb36(in_$p22: ref, in_$i30: i32, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i68: i32) returns (out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i68: i32)
{

  entry:
    out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i68 := in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i68;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5791;

  $bb38:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := out_$i72;
    goto $bb38_dummy;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i72, in_$i30);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i68, 1);
    call {:si_unique_call 1432} {:cexpr "i"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} put_page(out_$p71);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(in_$p22, $mul.ref(out_$i69, 8));
    goto corral_source_split_5794;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i68 := nvme_map_user_pages_loop_$bb36(in_$p22, in_$i30, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i68);
    return;

  exit:
    return;
}



procedure nvme_map_user_pages_loop_$bb36(in_$p22: ref, in_$i30: i32, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i68: i32) returns (out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i68: i32);



implementation nvme_map_user_pages_loop_$bb21(in_$i19: i32, in_$p22: ref, in_$p35: ref, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i53: i32) returns (out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i53: i32)
{

  entry:
    out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i38, out_$i39, out_$i40, out_$i53 := in_$i41, in_$i42, in_$p43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i38, in_$i39, in_$i40, in_$i53;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  $bb26:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i38, out_$i39, out_$i40 := 0, out_$i50, out_$i51;
    goto $bb26_dummy;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i51;
    assume true;
    goto $bb26;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, in_$i19);
    goto corral_source_split_5763;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i40, 1);
    call {:si_unique_call 1425} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_5762;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i32(out_$i49, 4096);
    call {:si_unique_call 1424} {:cexpr "length"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_5761;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i39, out_$i38);
    goto corral_source_split_5760;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} sg_set_page(out_$p43, out_$p46, out_$i48, out_$i38);
    goto corral_source_split_5759;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i41;
    goto $bb25;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    goto $bb25;

  $bb23:
    assume out_$i47 == 1;
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i47 := $ult.i32(out_$i39, out_$i41);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p22, $mul.ref(out_$i44, 8));
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i40);
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(in_$p35, $mul.ref(out_$i42, 40));
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i40);
    goto corral_source_split_5747;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(4096, out_$i38);
    call {:si_unique_call 1422} {:cexpr "__min2"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb24:
    assume !(out_$i47 == 1);
    goto corral_source_split_5756;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i38, out_$i39, out_$i40, out_$i53 := nvme_map_user_pages_loop_$bb21(in_$i19, in_$p22, in_$p35, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i38, out_$i39, out_$i40, out_$i53);
    return;

  exit:
    return;
}



procedure nvme_map_user_pages_loop_$bb21(in_$i19: i32, in_$p22: ref, in_$p35: ref, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i53: i32) returns (out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i53: i32);
  modifies $M.0;



implementation nvme_setup_prps_loop_$bb17(in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p13: ref, in_$i15: i32, in_$p43: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i101: i1, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$p98: ref, in_$i99: i32, in_$i100: i64) returns (out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i101: i1, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$p98: ref, out_$i99: i32, out_$i100: i64)
{

  entry:
    out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p98, out_$i99, out_$i100 := in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$p76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i108, in_$p109, in_$i110, in_$p98, in_$i99, in_$i100;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5885;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62 := out_$p98, out_$i95, out_$i99, out_$i100, out_$p87, out_$i89;
    goto corral_source_split_5936_dummy;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5936;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$p98, out_$i99, out_$i100 := out_$p106, out_$i110, out_$i108;
    goto $bb30;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$p98, out_$i99, out_$i100 := out_$p57, out_$i92, out_$i94;
    goto $bb30;

  $bb28:
    assume out_$i97 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i97 := $sgt.i32(out_$i92, 0);
    goto corral_source_split_5932;

  $bb25:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i96 := $sle.i32(out_$i95, 0);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i58, in_$i15);
    call {:si_unique_call 1457} {:cexpr "length"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i64(out_$i60, out_$i93);
    call {:si_unique_call 1456} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i32.i64(in_$i15);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i59, in_$i15);
    call {:si_unique_call 1455} {:cexpr "dma_len"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p91, out_$i60);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p87, $mul.ref(out_$i90, 8));
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i88);
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 1);
    call {:si_unique_call 1454} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_5920;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5919;

  $bb19:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$p87, out_$i88 := out_$p61, out_$i62;
    goto $bb23;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$p87, out_$i88 := out_$p65, 1;
    goto $bb23;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p86, out_$i83);
    goto corral_source_split_5917;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(out_$p61, $mul.ref(out_$i85, 8));
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i64(out_$i84, $sub.i64(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i62);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.37, in_$p4);
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p66, out_$i82);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i64($M.0, out_$p81);
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p61, $mul.ref(out_$i80, 8));
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i64(out_$i79, $sub.i64(0, 1));
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i62);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p78, out_$p65);
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(in_$p13, $mul.ref(out_$i77, 8));
    goto corral_source_split_5906;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i72);
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p76, out_$i75);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, 1);
    goto corral_source_split_5902;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    goto corral_source_split_5901;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5900;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    call {:si_unique_call 1453} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_5899;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5898;

  $bb21:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i58;
    assume true;
    goto $bb21;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i67, 0);
    goto corral_source_split_5893;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_5891;

  SeqInstr_669:
    goto corral_source_split_5890;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} out_$p65 := ldv_dma_pool_alloc_103(in_$p43, in_$i3, in_$p4);
    goto SeqInstr_668;

  $bb18:
    assume out_$i64 == 1;
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i62, out_$i63);
    goto corral_source_split_5887;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i63 := $lshr.i32(in_$i15, 3);
    goto corral_source_split_5886;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    call {:si_unique_call 1463} {:cexpr "dma_len"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p106, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.0, out_$p107);
    call {:si_unique_call 1462} {:cexpr "dma_addr"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5947;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_$p106 := sg_next(out_$p57);
    goto corral_source_split_5946;

  $bb33:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} out_$i104 := ldv__builtin_expect(out_$i103, 0);
    call {:si_unique_call 1459} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i103 := $sext.i32.i64(out_$i102);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i1.i32(out_$i101);
    goto corral_source_split_5939;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i92, 0);
    goto corral_source_split_5938;

  $bb29:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5936_dummy:
    call {:si_unique_call 1} out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p98, out_$i99, out_$i100 := nvme_setup_prps_loop_$bb17(in_$p1, in_$i3, in_$p4, in_$p13, in_$i15, in_$p43, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$p109, out_$i110, out_$p98, out_$i99, out_$i100);
    return;

  exit:
    return;
}



procedure nvme_setup_prps_loop_$bb17(in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$p13: ref, in_$i15: i32, in_$p43: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i32, in_$i96: i1, in_$i97: i1, in_$i101: i1, in_$i102: i32, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$p109: ref, in_$i110: i32, in_$p98: ref, in_$i99: i32, in_$i100: i64) returns (out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i32, out_$i96: i1, out_$i97: i1, out_$i101: i1, out_$i102: i32, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$p109: ref, out_$i110: i32, out_$p98: ref, out_$i99: i32, out_$i100: i64);
  modifies $M.0, assertsPassed;



implementation nvme_unmap_user_pages_loop_$bb4(in_$p2: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i15: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i15: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i15 := in_$p16, in_$p17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i21;
    goto $bb6_dummy;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i21, out_$i22);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, in_$p12);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1471} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} put_page(out_$p20);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} out_$p20 := sg_page(out_$p19);
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 40));
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_5975;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p2, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_5974;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i15 := nvme_unmap_user_pages_loop_$bb4(in_$p2, in_$p12, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i15);
    return;

  exit:
    return;
}



procedure nvme_unmap_user_pages_loop_$bb4(in_$p2: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i15: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i15: i32);



implementation nvme_free_iod_loop_$bb7(in_$p0: ref, in_$i5: i32, in_$p6: ref, in_$p16: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i19: i64, in_$i20: i32) returns (out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i19: i64, out_$i20: i32)
{

  entry:
    out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20 := in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i19, in_$i20;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  $bb9:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i26, out_$i30;
    goto $bb9_dummy;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p16);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i20, 1);
    call {:si_unique_call 1478} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} dma_pool_free(out_$p28, out_$p29, out_$i19);
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 880)), $mul.ref(512, 1));
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    call {:si_unique_call 1476} {:cexpr "next_prp_dma"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(out_$i24, 8));
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(in_$i5);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p6, $mul.ref(out_$i21, 8));
    goto corral_source_split_6014;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20 := nvme_free_iod_loop_$bb7(in_$p0, in_$i5, in_$p6, in_$p16, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure nvme_free_iod_loop_$bb7(in_$p0: ref, in_$i5: i32, in_$p6: ref, in_$p16: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i19: i64, in_$i20: i32) returns (out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i19: i64, out_$i20: i32);



implementation dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6218;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p13, out_$i12;
    goto $bb6_dummy;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, in_$i2);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_$p13 := sg_next(out_$p7);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1556} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} kmemcheck_mark_initialized(out_$p9, out_$i11);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6221;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} out_$p9 := sg_virt(out_$p7);
    goto corral_source_split_6220;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8 := dma_map_sg_attrs_loop_$bb4(in_$i2, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure dma_map_sg_attrs_loop_$bb4(in_$i2: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$p13: ref, in_$i14: i1, in_$p7: ref, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$p13: ref, out_$i14: i1, out_$p7: ref, out_$i8: i32);



implementation nvme_dif_remap_loop_$bb17(in_$p1: ref, in_$i39: i32, in_$i46: i32, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref) returns (out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref)
{

  entry:
    out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i50, out_$p51 := in_$p52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i48, in_$i49, in_$i50, in_$p51;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6440;

  $bb19:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i49, out_$i50, out_$p51 := out_$i56, out_$i57, out_$i55, out_$p54;
    goto $bb19_dummy;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    out_$i58 := $ult.i32(out_$i55, in_$i39);
    goto corral_source_split_6448;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i49, 1);
    call {:si_unique_call 1624} {:cexpr "phys"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i48, 1);
    call {:si_unique_call 1623} {:cexpr "virt"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_6446;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1622} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p51, $mul.ref(out_$i53, 1));
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(in_$i46);
    goto corral_source_split_6443;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    call {:si_unique_call 1621} devirtbounce.23(in_$p1, out_$i49, out_$i48, out_$p52);
    goto corral_source_split_6442;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i50, out_$p51 := nvme_dif_remap_loop_$bb17(in_$p1, in_$i39, in_$i46, out_$p52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i48, out_$i49, out_$i50, out_$p51);
    return;

  exit:
    return;
}



procedure nvme_dif_remap_loop_$bb17(in_$p1: ref, in_$i39: i32, in_$i46: i32, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref) returns (out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref);
  modifies $M.0;



implementation nvme_submit_io_loop_$bb69(in_$p180: ref, in_$p181: ref, in_$p212: ref, in_$p217: ref, in_$p218: ref, in_$i219: i64, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i64, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$i238: i1, in_$i239: i64, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i215: i32, in_$i216: i32, in_cmdloc_dummy_var_70: [ref]i8, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8) returns (out_$p217: ref, out_$p218: ref, out_$i219: i64, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i64, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$i238: i1, out_$i239: i64, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i215: i32, out_$i216: i32, out_cmdloc_dummy_var_70: [ref]i8, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8)
{

  entry:
    out_$p217, out_$p218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i223, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i215, out_$i216, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72 := in_$p217, in_$p218, in_$i219, in_$p220, in_$p221, in_$p222, in_$i223, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$p231, in_$i232, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i215, in_$i216, in_cmdloc_dummy_var_70, in_cmdloc_dummy_var_71, in_cmdloc_dummy_var_72;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7153;

  $bb74:
    assume out_$i247 == 1;
    assume {:verifier.code 0} true;
    out_$i215, out_$i216 := out_$i244, out_$i245;
    goto $bb74_dummy;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i247 := $slt.i32(out_$i245, out_$i246);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.0, in_$p212);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$i245 := $add.i32(out_$i216, 1);
    call {:si_unique_call 1759} {:cexpr "i"} boogie_si_record_i32(out_$i245);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$i244 := $add.i32(out_$i215, out_$i243);
    call {:si_unique_call 1758} {:cexpr "meta_offset___0"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i32($M.0, out_$p242);
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref($add.ref($add.ref(in_$p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i239, 40)), $mul.ref(20, 1));
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$i239 := $sext.i32.i64(out_$i216);
    goto corral_source_split_7179;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __kunmap_atomic(out_$p229);
    goto corral_source_split_7178;

  $bb72:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __compiletime_assert_1788();
    goto corral_source_split_7176;

  $bb71:
    assume out_$i238 == 1;
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i238 := $trunc.i8.i1(0);
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_70 := $M.0;
    out_cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 1755} out_cmdloc_dummy_var_72 := $memcpy.i8(out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_$p229, out_$p231, out_$i237, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_72;
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$i237 := $zext.i32.i64(out_$i236);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.0, out_$p235);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref($add.ref($add.ref(in_$p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i232, 40)), $mul.ref(20, 1));
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i216);
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref(in_$p181, $mul.ref(out_$i230, 1));
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    out_$i230 := $sext.i32.i64(out_$i215);
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref(out_$p222, $mul.ref(out_$i228, 1));
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$i228 := $zext.i32.i64(out_$i227);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, out_$p226);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref($add.ref(in_$p180, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i223, 40)), $mul.ref(16, 1));
    goto corral_source_split_7162;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i32.i64(out_$i216);
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_$p222 := kmap_atomic(out_$p221);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} out_$p221 := sg_page(out_$p220);
    goto corral_source_split_7159;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref(out_$p218, $mul.ref(out_$i219, 40));
    goto corral_source_split_7158;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$i219 := $sext.i32.i64(out_$i216);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    out_$p218 := $bitcast.ref.ref(out_$p217);
    goto corral_source_split_7156;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p180, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb74_dummy:
    call {:si_unique_call 1} out_$p217, out_$p218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i223, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i215, out_$i216, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72 := nvme_submit_io_loop_$bb69(in_$p180, in_$p181, in_$p212, out_$p217, out_$p218, out_$i219, out_$p220, out_$p221, out_$p222, out_$i223, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$p231, out_$i232, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i215, out_$i216, out_cmdloc_dummy_var_70, out_cmdloc_dummy_var_71, out_cmdloc_dummy_var_72);
    return;

  exit:
    return;
}



procedure nvme_submit_io_loop_$bb69(in_$p180: ref, in_$p181: ref, in_$p212: ref, in_$p217: ref, in_$p218: ref, in_$i219: i64, in_$p220: ref, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$p226: ref, in_$i227: i32, in_$i228: i64, in_$p229: ref, in_$i230: i64, in_$p231: ref, in_$i232: i64, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$i238: i1, in_$i239: i64, in_$p242: ref, in_$i243: i32, in_$i244: i32, in_$i245: i32, in_$i246: i32, in_$i247: i1, in_$i215: i32, in_$i216: i32, in_cmdloc_dummy_var_70: [ref]i8, in_cmdloc_dummy_var_71: [ref]i8, in_cmdloc_dummy_var_72: [ref]i8) returns (out_$p217: ref, out_$p218: ref, out_$i219: i64, out_$p220: ref, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$p226: ref, out_$i227: i32, out_$i228: i64, out_$p229: ref, out_$i230: i64, out_$p231: ref, out_$i232: i64, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$i238: i1, out_$i239: i64, out_$p242: ref, out_$i243: i32, out_$i244: i32, out_$i245: i32, out_$i246: i32, out_$i247: i1, out_$i215: i32, out_$i216: i32, out_cmdloc_dummy_var_70: [ref]i8, out_cmdloc_dummy_var_71: [ref]i8, out_cmdloc_dummy_var_72: [ref]i8);
  modifies $M.0;



implementation nvme_submit_io_loop_$bb46(in_$p118: ref, in_$p132: ref, in_$p140: ref, in_$p145: ref, in_$p146: ref, in_$i147: i64, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$p157: ref, in_$i158: i64, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i143: i32, in_$i144: i32, in_cmdloc_dummy_var_67: [ref]i8, in_cmdloc_dummy_var_68: [ref]i8, in_cmdloc_dummy_var_69: [ref]i8) returns (out_$p145: ref, out_$p146: ref, out_$i147: i64, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$p157: ref, out_$i158: i64, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i143: i32, out_$i144: i32, out_cmdloc_dummy_var_67: [ref]i8, out_cmdloc_dummy_var_68: [ref]i8, out_cmdloc_dummy_var_69: [ref]i8)
{

  entry:
    out_$p145, out_$p146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i143, out_$i144, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68, out_cmdloc_dummy_var_69 := in_$p145, in_$p146, in_$i147, in_$p148, in_$p149, in_$p150, in_$i151, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$p159, in_$i160, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i143, in_$i144, in_cmdloc_dummy_var_67, in_cmdloc_dummy_var_68, in_cmdloc_dummy_var_69;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7062;

  $bb51:
    assume out_$i175 == 1;
    assume {:verifier.code 0} true;
    out_$i143, out_$i144 := out_$i172, out_$i173;
    goto $bb51_dummy;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i173, out_$i174);
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i32($M.0, in_$p140);
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i144, 1);
    call {:si_unique_call 1748} {:cexpr "i"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i143, out_$i171);
    call {:si_unique_call 1747} {:cexpr "meta_offset"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.0, out_$p170);
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(in_$p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i167, 40)), $mul.ref(20, 1));
    goto corral_source_split_7089;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i144);
    goto corral_source_split_7088;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __kunmap_atomic(out_$p157);
    goto corral_source_split_7087;

  $bb49:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} __compiletime_assert_1762();
    goto corral_source_split_7085;

  $bb48:
    assume out_$i166 == 1;
    goto corral_source_split_7084;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i8.i1(0);
    goto corral_source_split_7082;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_67 := $M.0;
    out_cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 1744} out_cmdloc_dummy_var_69 := $memcpy.i8(out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68, out_$p159, out_$p157, out_$i165, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_69;
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i32.i64(out_$i164);
    goto corral_source_split_7080;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, out_$p163);
    goto corral_source_split_7079;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(in_$p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i160, 40)), $mul.ref(20, 1));
    goto corral_source_split_7078;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i160 := $sext.i32.i64(out_$i144);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref(in_$p132, $mul.ref(out_$i158, 1));
    goto corral_source_split_7076;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$i158 := $sext.i32.i64(out_$i143);
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref(out_$p150, $mul.ref(out_$i156, 1));
    goto corral_source_split_7074;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i32.i64(out_$i155);
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_7072;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref($add.ref($add.ref(in_$p118, $mul.ref(0, 72)), $mul.ref(72, 1)), $mul.ref(out_$i151, 40)), $mul.ref(16, 1));
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i151 := $sext.i32.i64(out_$i144);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} out_$p150 := kmap_atomic(out_$p149);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_$p149 := sg_page(out_$p148);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref(out_$p146, $mul.ref(out_$i147, 40));
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i144);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(out_$p145);
    goto corral_source_split_7065;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p118, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_7064;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p145, out_$p146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i143, out_$i144, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68, out_cmdloc_dummy_var_69 := nvme_submit_io_loop_$bb46(in_$p118, in_$p132, in_$p140, out_$p145, out_$p146, out_$i147, out_$p148, out_$p149, out_$p150, out_$i151, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i143, out_$i144, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68, out_cmdloc_dummy_var_69);
    return;

  exit:
    return;
}



procedure nvme_submit_io_loop_$bb46(in_$p118: ref, in_$p132: ref, in_$p140: ref, in_$p145: ref, in_$p146: ref, in_$i147: i64, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$p157: ref, in_$i158: i64, in_$p159: ref, in_$i160: i64, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i166: i1, in_$i167: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i143: i32, in_$i144: i32, in_cmdloc_dummy_var_67: [ref]i8, in_cmdloc_dummy_var_68: [ref]i8, in_cmdloc_dummy_var_69: [ref]i8) returns (out_$p145: ref, out_$p146: ref, out_$i147: i64, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$p157: ref, out_$i158: i64, out_$p159: ref, out_$i160: i64, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i166: i1, out_$i167: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i143: i32, out_$i144: i32, out_cmdloc_dummy_var_67: [ref]i8, out_cmdloc_dummy_var_68: [ref]i8, out_cmdloc_dummy_var_69: [ref]i8);
  modifies $M.0;



implementation nvme_trans_io_loop_$bb42(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p28: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i56: i32, in_$i57: i16, in_$i58: i32, in_$i59: i1, in_$i33: i32, in_$i34: i64, in_$i60: i64) returns (out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i56: i32, out_$i57: i16, out_$i58: i32, out_$i59: i1, out_$i33: i32, out_$i34: i64, out_$i60: i64)
{

  entry:
    out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i33, out_$i34, out_$i60 := in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i58, in_$i59, in_$i33, in_$i34, in_$i60;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7701;

  $bb51:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i56, out_$i46;
    goto $bb51_dummy;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i46;
    assume true;
    goto $bb51;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i56, out_$i58);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i57);
    goto corral_source_split_7733;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i16($M.0, in_$p28);
    goto corral_source_split_7732;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i33, 1);
    call {:si_unique_call 1840} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_7731;

  $bb49:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_7726;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    out_$i53 := $urem.i64(out_$i48, out_$i52);
    goto corral_source_split_7725;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_7724;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    out_$i51 := $shl.i32(1, out_$i50);
    goto corral_source_split_7723;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, out_$p47);
    goto corral_source_split_7720;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7719;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i34, out_$i45);
    call {:si_unique_call 1837} {:cexpr "sum_iov_len"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.0, out_$p44);
    goto corral_source_split_7717;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7716;

  $bb45:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_7710;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_$i41 := copy_from_user(out_$p35, out_$p40, 16);
    call {:si_unique_call 1836} {:cexpr "not_copied"} boogie_si_record_i64(out_$i41);
    goto corral_source_split_7709;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p37, $mul.ref(out_$i39, 1));
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$i39 := $mul.i64(out_$i38, 16);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i33);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_7705;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_7704;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7703;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i33, out_$i34, out_$i60 := nvme_trans_io_loop_$bb42(in_$p0, in_$p1, in_$p5, in_$p28, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i58, out_$i59, out_$i33, out_$i34, out_$i60);
    return;

  exit:
    return;
}



procedure nvme_trans_io_loop_$bb42(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p28: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i56: i32, in_$i57: i16, in_$i58: i32, in_$i59: i1, in_$i33: i32, in_$i34: i64, in_$i60: i64) returns (out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i56: i32, out_$i57: i16, out_$i58: i32, out_$i59: i1, out_$i33: i32, out_$i34: i64, out_$i60: i64);



implementation nvme_trans_report_luns_loop_$bb23(in_$p5: ref, in_$p52: ref, in_$p55: ref, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i58: i8, in_$i59: i32, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8, in_cmdloc_dummy_var_75: [ref]i8) returns (out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i58: i8, out_$i59: i32, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8, out_cmdloc_dummy_var_75: [ref]i8)
{

  entry:
    out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i58, out_$i59, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75 := in_$i60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i58, in_$i59, in_cmdloc_dummy_var_73, in_cmdloc_dummy_var_74, in_cmdloc_dummy_var_75;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8242;

  $bb25:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i67, out_$i68;
    goto $bb25_dummy;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i70 := $ult.i32(out_$i68, out_$i69);
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.50, in_$p55);
    goto corral_source_split_8255;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i59, 1);
    call {:si_unique_call 1944} {:cexpr "lun_id"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i8(out_$i66);
    call {:si_unique_call 1943} {:cexpr "lun_id_offset"} boogie_si_record_i8(out_$i67);
    goto corral_source_split_8253;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, 8);
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_73 := $M.0;
    out_cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 1942} out_cmdloc_dummy_var_75 := $memcpy.i8(out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74, out_$p63, out_$p64, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_75;
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p52, $mul.ref(out_$i62, 1));
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i64(out_$i58);
    goto corral_source_split_8247;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p5, out_$i61);
    goto corral_source_split_8246;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} out_$i61 := __fswab64(out_$i60);
    call {:si_unique_call 1941} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_8245;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i59);
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i58, out_$i59, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75 := nvme_trans_report_luns_loop_$bb23(in_$p5, in_$p52, in_$p55, out_$i60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i58, out_$i59, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74, out_cmdloc_dummy_var_75);
    return;

  exit:
    return;
}



procedure nvme_trans_report_luns_loop_$bb23(in_$p5: ref, in_$p52: ref, in_$p55: ref, in_$i60: i64, in_$i61: i64, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i8, in_$i68: i32, in_$i69: i32, in_$i70: i1, in_$i58: i8, in_$i59: i32, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8, in_cmdloc_dummy_var_75: [ref]i8) returns (out_$i60: i64, out_$i61: i64, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i8, out_$i68: i32, out_$i69: i32, out_$i70: i1, out_$i58: i8, out_$i59: i32, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8, out_cmdloc_dummy_var_75: [ref]i8);
  modifies $M.0;



implementation nvme_trans_unmap_loop_$bb21(in_$p24: ref, in_$p49: ref, in_$i52: i32, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i64, in_$p63: ref, in_$i64: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i64, out_$p63: ref, out_$i64: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i54: i32)
{

  entry:
    out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i54 := in_$i55, in_$p58, in_$i59, in_$i60, in_$i61, in_$p63, in_$i64, in_$p67, in_$i68, in_$i69, in_$i70, in_$p72, in_$i73, in_$p75, in_$i76, in_$i77, in_$i54;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8686;

  $bb23:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i76;
    goto $bb23_dummy;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i76, in_$i52);
    goto corral_source_split_8709;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i54, 1);
    call {:si_unique_call 2044} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_8708;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, out_$p75, 0);
    goto corral_source_split_8707;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p49, $mul.ref(out_$i73, 16)), $mul.ref(0, 1));
    goto corral_source_split_8706;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8704;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.54 := $store.i64($M.54, out_$p72, out_$i69);
    goto corral_source_split_8703;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p49, $mul.ref(out_$i70, 16)), $mul.ref(8, 1));
    goto corral_source_split_8702;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto corral_source_split_8701;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8700;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} out_$i69 := __fswab64(out_$i68);
    call {:si_unique_call 2043} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_8699;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i64($M.0, out_$p67);
    goto corral_source_split_8698;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i64, 16)), $mul.ref(0, 1));
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8696;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.53 := $store.i32($M.53, out_$p63, out_$i60);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p49, $mul.ref(out_$i61, 16)), $mul.ref(4, 1));
    goto corral_source_split_8694;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8692;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} out_$i60 := __fswab32(out_$i59);
    call {:si_unique_call 2041} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_8690;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i55, 16)), $mul.ref(8, 1));
    goto corral_source_split_8689;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i54);
    goto corral_source_split_8688;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i54 := nvme_trans_unmap_loop_$bb21(in_$p24, in_$p49, in_$i52, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i54);
    return;

  exit:
    return;
}



procedure nvme_trans_unmap_loop_$bb21(in_$p24: ref, in_$p49: ref, in_$i52: i32, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i64, in_$p63: ref, in_$i64: i64, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i54: i32) returns (out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i64, out_$p63: ref, out_$i64: i64, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i54: i32);
  modifies $M.52, $M.54, $M.53;



implementation nvme_trans_copy_from_user_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p8: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$p13: ref, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14 := in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i12, in_$p13, in_$i14;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8849;

  $bb22:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13, out_$i14 := out_$i34, out_$p33, out_$i36;
    goto $bb22_dummy;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, out_$i38);
    goto corral_source_split_8891;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_8890;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, in_$p8);
    goto corral_source_split_8889;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i14, 1);
    call {:si_unique_call 2074} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_8888;

  $bb20:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i64(out_$i12, out_$i27);
    call {:si_unique_call 2073} {:cexpr "remaining"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_8883;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p13, $mul.ref(out_$i27, 1));
    goto corral_source_split_8882;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} out_$i30 := copy_from_user(out_$p13, out_$p29, out_$i27);
    call {:si_unique_call 2072} {:cexpr "not_copied"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_8874;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8873;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    goto $bb14;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i12;
    goto $bb14;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_8868;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i64(out_$i12, out_$i25);
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    call {:si_unique_call 2070} {:cexpr "_min2"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_8865;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8864;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_8858;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} out_$i21 := copy_from_user(out_$p15, out_$p20, 16);
    call {:si_unique_call 2069} {:cexpr "not_copied"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_8857;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p17, $mul.ref(out_$i19, 1));
    goto corral_source_split_8856;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    out_$i19 := $mul.i64(out_$i18, 16);
    goto corral_source_split_8855;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i14);
    goto corral_source_split_8854;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_8853;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_8852;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_8851;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume !(out_$i26 == 1);
    goto corral_source_split_8870;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14 := nvme_trans_copy_from_user_loop_$bb6(in_$p0, in_$p3, in_$p8, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14);
    return;

  exit:
    return;
}



procedure nvme_trans_copy_from_user_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p8: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$p13: ref, out_$i14: i32);



implementation nvme_trans_fmt_send_cmd_loop_$bb15(in_$p0: ref, in_$p22: ref, in_$i25: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$i41: i32, in_$i42: i32, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$i27: i8) returns (out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$i41: i32, out_$i42: i32, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$i27: i8)
{

  entry:
    out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i27 := in_$p28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i27;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9243;

  $bb21:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i43;
    goto $bb21_dummy;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, in_$i25);
    goto corral_source_split_9265;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_9264;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i8(out_$i42);
    call {:si_unique_call 2144} {:cexpr "i"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_9263;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i41, 1);
    goto corral_source_split_9262;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i27);
    goto corral_source_split_9261;

  $bb18:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i27;
    assume true;
    goto $bb18;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i29, out_$i37);
    goto corral_source_split_9253;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$i37 := $shl.i32(1, out_$i36);
    goto corral_source_split_9252;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i8.i32(out_$i35);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.58, out_$p34);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 4096)), $mul.ref(128, 1)), $mul.ref(out_$i31, 4)), $mul.ref(2, 1));
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i27);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_9246;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i27 := nvme_trans_fmt_send_cmd_loop_$bb15(in_$p0, in_$p22, in_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i27);
    return;

  exit:
    return;
}



procedure nvme_trans_fmt_send_cmd_loop_$bb15(in_$p0: ref, in_$p22: ref, in_$i25: i32, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i64, in_$p34: ref, in_$i35: i8, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i8, in_$i41: i32, in_$i42: i32, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$i27: i8) returns (out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i64, out_$p34: ref, out_$i35: i8, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i8, out_$i41: i32, out_$i42: i32, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$i27: i8);



implementation nvme_trans_copy_to_user_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p8: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$p13: ref, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14 := in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i12, in_$p13, in_$i14;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9484;

  $bb22:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$p13, out_$i14 := out_$i34, out_$p33, out_$i36;
    goto $bb22_dummy;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, out_$i38);
    goto corral_source_split_9526;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, in_$p8);
    goto corral_source_split_9524;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i14, 1);
    call {:si_unique_call 2184} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_9523;

  $bb20:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i64(out_$i12, out_$i27);
    call {:si_unique_call 2183} {:cexpr "remaining"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_9518;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p13, $mul.ref(out_$i27, 1));
    goto corral_source_split_9517;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_9511;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} out_$i30 := copy_to_user(out_$p29, out_$p13, out_$i27);
    call {:si_unique_call 2182} {:cexpr "not_copied"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_9510;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_9509;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9508;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    goto $bb14;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i12;
    goto $bb14;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_9503;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i64(out_$i12, out_$i25);
    goto corral_source_split_9501;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    call {:si_unique_call 2180} {:cexpr "_min2"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_9500;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9499;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_9493;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} out_$i21 := copy_from_user(out_$p15, out_$p20, 16);
    call {:si_unique_call 2179} {:cexpr "not_copied"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p17, $mul.ref(out_$i19, 1));
    goto corral_source_split_9491;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i19 := $mul.i64(out_$i18, 16);
    goto corral_source_split_9490;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i14);
    goto corral_source_split_9489;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_9488;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_9487;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume !(out_$i26 == 1);
    goto corral_source_split_9505;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14 := nvme_trans_copy_to_user_loop_$bb6(in_$p0, in_$p3, in_$p8, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$p13, out_$i14);
    return;

  exit:
    return;
}



procedure nvme_trans_copy_to_user_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$p8: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$p13: ref, out_$i14: i32);



implementation nvme_trans_modesel_data_loop_$bb24(in_$p0: ref, in_$p1: ref, in_$i3: i16, in_$p10: ref, in_$i70: i16, in_$i71: i64, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i32, in_$i76: i8, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$i80: i8, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i16, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32) returns (out_$i70: i16, out_$i71: i64, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i32, out_$i76: i8, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$i80: i8, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i16, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32)
{

  entry:
    out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100 := in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10100;

  $bb29:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := out_$i96;
    goto $bb29_dummy;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i89;
    assume true;
    goto $bb29;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i97, out_$i98);
    goto corral_source_split_10132;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(in_$i3);
    goto corral_source_split_10131;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i16.i32(out_$i96);
    goto corral_source_split_10130;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i16(out_$i95);
    call {:si_unique_call 2319} {:cexpr "index"} boogie_si_record_i16(out_$i96);
    goto corral_source_split_10129;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i93, out_$i94);
    goto corral_source_split_10128;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i16.i32(out_$i84);
    goto corral_source_split_10127;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i70);
    goto corral_source_split_10126;

  $bb26:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i89;
    assume true;
    goto $bb26;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_10120;

  SeqInstr_954:
    call {:si_unique_call 2318} {:cexpr "res"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_10119;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} out_$i89 := nvme_trans_modesel_get_mp(in_$p0, in_$p1, out_$p86, out_$i88);
    goto SeqInstr_953;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i8(out_$i87);
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i76);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p10, $mul.ref(out_$i85, 1));
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i64(out_$i70);
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    out_$i84 := $trunc.i32.i16(out_$i83);
    call {:si_unique_call 2316} {:cexpr "mp_size"} boogie_si_record_i16(out_$i84);
    goto corral_source_split_10114;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 2);
    goto corral_source_split_10113;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i16(out_$i80);
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.0, out_$p79);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(in_$p10, $mul.ref(out_$i78, 1));
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i64(out_$i77, 1);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i64(out_$i70);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i8(out_$i75);
    call {:si_unique_call 2315} {:cexpr "page_code"} boogie_si_record_i8(out_$i76);
    goto corral_source_split_10106;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    out_$i75 := $and.i32(out_$i74, 63);
    goto corral_source_split_10105;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.0, out_$p72);
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p10, $mul.ref(out_$i71, 1));
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i64(out_$i70);
    goto corral_source_split_10101;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100 := nvme_trans_modesel_data_loop_$bb24(in_$p0, in_$p1, in_$i3, in_$p10, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100);
    return;

  exit:
    return;
}



procedure nvme_trans_modesel_data_loop_$bb24(in_$p0: ref, in_$p1: ref, in_$i3: i16, in_$p10: ref, in_$i70: i16, in_$i71: i64, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i32, in_$i76: i8, in_$i77: i64, in_$i78: i64, in_$p79: ref, in_$i80: i8, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i16, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i16, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32) returns (out_$i70: i16, out_$i71: i64, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i32, out_$i76: i8, out_$i77: i64, out_$i78: i64, out_$p79: ref, out_$i80: i8, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i16, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i16, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32);
  modifies $M.0, $CurrAddr, $M.13, $M.9, assertsPassed;



implementation nvme_trans_modesel_data_loop_$bb12(in_$i3: i16, in_$p10: ref, in_$i41: i16, in_$i42: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i8, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i1) returns (out_$i41: i16, out_$i42: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i8, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i1)
{

  entry:
    out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69 := in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10063;

  $bb21:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i66;
    goto $bb21_dummy;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, out_$i68);
    goto corral_source_split_10098;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i16.i32(in_$i3);
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 2314} {:cexpr "index"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_10095;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i63, out_$i64);
    goto corral_source_split_10094;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i55);
    goto corral_source_split_10093;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i41);
    goto corral_source_split_10092;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb15;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 26);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10086;

  $bb16:
    assume out_$i59 == 1;
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 10);
    goto corral_source_split_10083;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10082;

  $bb13:
    assume out_$i57 == 1;
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 8);
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i47);
    goto corral_source_split_10078;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i16(out_$i54);
    call {:si_unique_call 2311} {:cexpr "mp_size"} boogie_si_record_i16(out_$i55);
    goto corral_source_split_10077;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 2);
    goto corral_source_split_10076;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_10075;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i16(out_$i51);
    goto corral_source_split_10074;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_10073;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(in_$p10, $mul.ref(out_$i49, 1));
    goto corral_source_split_10072;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i48, 1);
    goto corral_source_split_10071;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i64(out_$i41);
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i8(out_$i46);
    call {:si_unique_call 2310} {:cexpr "page_code"} boogie_si_record_i8(out_$i47);
    goto corral_source_split_10069;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i45, 63);
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p43);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(in_$p10, $mul.ref(out_$i42, 1));
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i64(out_$i41);
    goto corral_source_split_10064;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69 := nvme_trans_modesel_data_loop_$bb12(in_$i3, in_$p10, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69);
    return;

  exit:
    return;
}



procedure nvme_trans_modesel_data_loop_$bb12(in_$i3: i16, in_$p10: ref, in_$i41: i16, in_$i42: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i8, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i1) returns (out_$i41: i16, out_$i42: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i8, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i1);



implementation nvme_trans_standard_inquiry_page_loop_$bb18(in_$p6: ref, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i45: i8, in_$i57: i32, in_$i58: i1, in_$i59: i8, in_$i56: i8) returns (out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i45: i8, out_$i57: i32, out_$i58: i1, out_$i59: i8, out_$i56: i8)
{

  entry:
    out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i45, out_$i57, out_$i58, out_$i59, out_$i56 := in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i45, in_$i57, in_$i58, in_$i59, in_$i56;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10653;

  $bb20:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i48;
    goto $bb20_dummy;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i48;
    assume true;
    goto $bb20;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 32);
    goto corral_source_split_10665;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i8.i32(out_$i53);
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.0, out_$p52);
    goto corral_source_split_10663;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i50);
    out_$p52 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 880)), $mul.ref(848, 1)), $mul.ref(out_$i51, 1));
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, $sub.i32(0, 1));
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i8(out_$i47);
    call {:si_unique_call 2385} {:cexpr "fw_offset"} boogie_si_record_i8(out_$i48);
    goto corral_source_split_10659;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i46, 1);
    goto corral_source_split_10658;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_10657;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume out_$i58 == 1;
    goto corral_source_split_10669;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i45;
    assume true;
    goto $bb22;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i58 := $ugt.i32(out_$i57, 4);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i45);
    goto corral_source_split_10654;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i45, out_$i57, out_$i58, out_$i59, out_$i56 := nvme_trans_standard_inquiry_page_loop_$bb18(in_$p6, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i45, out_$i57, out_$i58, out_$i59, out_$i56);
    return;

  exit:
    return;
}



procedure nvme_trans_standard_inquiry_page_loop_$bb18(in_$p6: ref, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i1, in_$i45: i8, in_$i57: i32, in_$i58: i1, in_$i59: i8, in_$i56: i8) returns (out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i1, out_$i45: i8, out_$i57: i32, out_$i58: i1, out_$i59: i8, out_$i56: i8);



implementation nvme_trans_do_nvme_io_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i8, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$i11: i8, in_$i14: i32, in_$i15: i32, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i16, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$i97: i1, in_$i98: i8, in_$i99: i1, in_$p100: ref, in_$i105: i32, in_$i106: i32, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i17: i64, in_$i18: i32, in_cmdloc_dummy_var_140: [ref]i8, in_cmdloc_dummy_var_141: [ref]i8) returns (out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i16, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$i97: i1, out_$i98: i8, out_$i99: i1, out_$p100: ref, out_$i105: i32, out_$i106: i32, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i17: i64, out_$i18: i32, out_cmdloc_dummy_var_140: [ref]i8, out_cmdloc_dummy_var_141: [ref]i8)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i42, out_$i43, out_$i44, out_$p45, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i17, out_$i18, out_cmdloc_dummy_var_140, out_cmdloc_dummy_var_141 := in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i42, in_$i43, in_$i44, in_$p45, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p113, in_$p114, in_$p115, in_$i116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i17, in_$i18, in_cmdloc_dummy_var_140, in_cmdloc_dummy_var_141;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11285;

  $bb26:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i125, out_$i137;
    goto $bb26_dummy;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    out_$i138 := $ult.i32(out_$i137, in_$i15);
    goto corral_source_split_11436;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i18, 1);
    call {:si_unique_call 2504} {:cexpr "i"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_11435;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} nvme_free_iod(in_$p7, out_$p95);
    goto corral_source_split_11434;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} nvme_unmap_user_pages(in_$p7, out_$i136, out_$p95);
    goto corral_source_split_11433;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    out_$i136 := (if out_$i135 == 1 then 1 else 2);
    goto corral_source_split_11432;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_11431;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(in_$i3);
    goto corral_source_split_11430;

  $bb24:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    out_$p128, out_$i129 := out_$p95, out_$i126;
    assume true;
    goto $bb24;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_11420;

  SeqInstr_1008:
    call {:si_unique_call 2497} {:cexpr "nvme_sc"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_11419;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} out_$i126 := nvme_submit_io_cmd(in_$p7, in_$p0, in_$p4, $0.ref);
    goto SeqInstr_1007;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i64(out_$i42, out_$i44);
    call {:si_unique_call 2495} {:cexpr "nvme_offset"} boogie_si_record_i64(out_$i125);
    goto corral_source_split_11418;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p124, out_$i121);
    goto corral_source_split_11417;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_11416;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    out_$p123 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_11415;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11414;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i64($M.0, out_$p120);
    goto corral_source_split_11413;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p95, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_11412;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p119, out_$i116);
    goto corral_source_split_11411;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p118, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11410;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(out_$p117);
    goto corral_source_split_11409;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11408;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i64($M.0, out_$p115);
    goto corral_source_split_11407;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_11406;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_11405;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p95, $mul.ref(0, 72)), $mul.ref(72, 1));
    goto corral_source_split_11404;

  $bb21:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    out_$p109 := out_$p95;
    assume true;
    goto $bb21;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, out_$i43);
    goto corral_source_split_11395;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i32.i64(out_$i106);
    goto corral_source_split_11394;

  SeqInstr_1005:
    call {:si_unique_call 2492} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_11393;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} out_$i106 := nvme_setup_prps(in_$p7, out_$p95, out_$i105, 208);
    goto SeqInstr_1004;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i105 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_11392;

  $bb17:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    out_$p100 := out_$p95;
    assume true;
    goto $bb17;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i8.i1(out_$i98);
    goto corral_source_split_11366;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i1.i8(out_$i97);
    call {:si_unique_call 2486} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i98);
    goto corral_source_split_11365;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} out_$i97 := IS_ERR(out_$p96);
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_11363;

  SeqInstr_1002:
    goto corral_source_split_11362;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} out_$p95 := nvme_map_user_pages(in_$p7, out_$i92, out_$i93, out_$i94);
    goto SeqInstr_1001;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i64.i32(out_$i43);
    goto corral_source_split_11361;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_11360;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$i92 := (if out_$i91 == 1 then 1 else 2);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_11358;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i8.i32(in_$i3);
    goto corral_source_split_11357;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p89, out_$i86);
    goto corral_source_split_11356;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 64)), $mul.ref(50, 1));
    goto corral_source_split_11355;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_11354;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11353;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} out_$i86 := nvme_trans_io_get_control(in_$p0, in_$p2);
    call {:si_unique_call 2483} {:cexpr "control"} boogie_si_record_i16(out_$i86);
    goto corral_source_split_11352;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p85, out_$i82);
    goto corral_source_split_11351;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_11350;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_11349;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11348;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i16(out_$i81);
    goto corral_source_split_11347;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i80, 1);
    goto corral_source_split_11346;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i16.i32(out_$i79);
    goto corral_source_split_11345;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i64.i16(out_$i44);
    goto corral_source_split_11344;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p78, out_$i75);
    goto corral_source_split_11343;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_11342;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_11341;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11340;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i64(out_$i74, out_$i17);
    goto corral_source_split_11339;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.84, out_$p73);
    goto corral_source_split_11338;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11337;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, out_$i69);
    goto corral_source_split_11336;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_11335;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_11334;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11333;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_11332;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_11331;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p67, in_$i11);
    goto corral_source_split_11330;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11329;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_11328;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11327;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11326;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p58, $mul.ref(out_$i63, 1));
    assume {:verifier.code 0} true;
    out_$i42, out_$i43, out_$i44, out_$p45 := out_$i17, out_$i56, out_$i52, out_$p64;
    goto $bb12;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43, out_$i44, out_$p45 := out_$i17, out_$i35, out_$i39, out_$p41;
    goto $bb12;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11324;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11323;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    out_$i39 := $lshr.i64(out_$i35, out_$i38);
    call {:si_unique_call 2481} {:cexpr "unit_num_blocks"} boogie_si_record_i64(out_$i39);
    goto corral_source_split_11322;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_11321;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_11320;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11319;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    call {:si_unique_call 2480} {:cexpr "unit_len"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_11318;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11317;

  $bb9:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_11303;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i64.i32(out_$i30);
    call {:si_unique_call 2477} {:cexpr "retcode"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_11302;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} out_$i30 := copy_from_user(out_$p24, out_$p29, 16);
    call {:si_unique_call 2476} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_11301;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p26, $mul.ref(out_$i28, 1));
    goto corral_source_split_11300;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    out_$i28 := $mul.i64(out_$i27, 16);
    goto corral_source_split_11299;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i32.i64(out_$i18);
    goto corral_source_split_11298;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_11297;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_11296;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_11295;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_11294;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_11292;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i16.i32(out_$i21);
    goto corral_source_split_11291;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i16($M.0, out_$p20);
    goto corral_source_split_11290;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(10, 1));
    goto corral_source_split_11289;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_140 := $M.0;
    call {:si_unique_call 2474} out_cmdloc_dummy_var_141 := $memset.i8(out_cmdloc_dummy_var_140, out_$p19, 0, 64, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_141;
    goto corral_source_split_11288;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_11287;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    out_$i63 := $mul.i64(out_$i62, out_$i17);
    goto corral_source_split_11383;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_11382;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    out_$i61 := $shl.i32(1, out_$i60);
    goto corral_source_split_11381;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_11380;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11379;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_11378;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_11377;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    out_$i56 := $shl.i64(out_$i52, out_$i55);
    call {:si_unique_call 2487} {:cexpr "unit_len"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_11376;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i54);
    goto corral_source_split_11375;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_11374;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_11373;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i50;
    goto $bb15;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i46;
    goto $bb15;

  $bb13:
    assume out_$i51 == 1;
    goto corral_source_split_11368;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i64(out_$i46, out_$i50);
    goto corral_source_split_11311;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i64(out_$i49, out_$i17);
    call {:si_unique_call 2479} {:cexpr "_min2"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_11310;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i48);
    goto corral_source_split_11309;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.46, out_$p47);
    goto corral_source_split_11308;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_11307;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(in_$i14);
    call {:si_unique_call 2478} {:cexpr "_min1"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_11306;

  $bb7:
    assume !(out_$i23 == 1);
    goto corral_source_split_11305;

  $bb14:
    assume !(out_$i51 == 1);
    goto corral_source_split_11370;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i42, out_$i43, out_$i44, out_$p45, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i17, out_$i18, out_cmdloc_dummy_var_140, out_cmdloc_dummy_var_141 := nvme_trans_do_nvme_io_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i3, in_$p4, in_$p5, in_$p7, in_$i11, in_$i14, in_$i15, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i42, out_$i43, out_$i44, out_$p45, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i17, out_$i18, out_cmdloc_dummy_var_140, out_cmdloc_dummy_var_141);
    return;

  exit:
    return;
}



procedure nvme_trans_do_nvme_io_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i8, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$i11: i8, in_$i14: i32, in_$i15: i32, in_$p19: ref, in_$p20: ref, in_$i21: i16, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$i52: i64, in_$p53: ref, in_$i54: i32, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$i63: i64, in_$p64: ref, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i16, in_$i80: i32, in_$i81: i32, in_$i82: i16, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i16, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$i97: i1, in_$i98: i8, in_$i99: i1, in_$p100: ref, in_$i105: i32, in_$i106: i32, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$i17: i64, in_$i18: i32, in_cmdloc_dummy_var_140: [ref]i8, in_cmdloc_dummy_var_141: [ref]i8) returns (out_$p19: ref, out_$p20: ref, out_$i21: i16, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$i52: i64, out_$p53: ref, out_$i54: i32, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$i63: i64, out_$p64: ref, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i16, out_$i80: i32, out_$i81: i32, out_$i82: i16, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i16, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$i97: i1, out_$i98: i8, out_$i99: i1, out_$p100: ref, out_$i105: i32, out_$i106: i32, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$i17: i64, out_$i18: i32, out_cmdloc_dummy_var_140: [ref]i8, out_cmdloc_dummy_var_141: [ref]i8);
  modifies $M.0, $M.13, $CurrAddr, $M.9, assertsPassed;



implementation ldv_pci_pci_instance_3_loop_$bb14(in_$p10: ref, in_$i33: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1)
{

  entry:
    out_$i33, out_$i37, out_$i38, out_$i39 := in_$i33, in_$i37, in_$i38, in_$i39;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb31_dummy;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i38;
    assume true;
    goto $bb31;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 1);
    goto corral_source_split_11913;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} out_$i38 := ldv_undef_int();
    call {:si_unique_call 2646} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_11912;

  SeqInstr_1098:
    goto corral_source_split_11911;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_pci_instance_callback_3_10($u9, in_$p10, out_$i37);
    goto SeqInstr_1097;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1($u7);
    goto corral_source_split_11910;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i33, out_$i37, out_$i38, out_$i39 := ldv_pci_pci_instance_3_loop_$bb14(in_$p10, out_$i33, out_$i37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb14(in_$p10: ref, in_$i33: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1) returns (out_$i33: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1);
  modifies $M.0, $M.3, $M.21, $M.29, $M.32, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.9, $M.31, $M.11, $M.23, $M.20, $M.13, $M.22, $M.36;



implementation ldv_pci_pci_instance_3_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73 := in_$i23, in_$i24, in_$i25, in_$i33, in_$i26, in_$i34, in_$i35, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11899;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i61;
    goto $bb43_dummy;

  $bb42:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_1116:
    goto corral_source_split_11980;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_pci_instance_resume_3_5(out_$p73, in_$p10);
    goto SeqInstr_1115;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_11979;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11978;

  $bb41:
    assume out_$i71 == 1;
    goto corral_source_split_11977;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_11975;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_11974;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_11973;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11972;

  $bb39:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_1113:
    goto corral_source_split_11970;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} ldv_pci_instance_resume_early_3_6(out_$p67, in_$p10);
    goto SeqInstr_1112;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_11969;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11968;

  $bb38:
    assume out_$i65 == 1;
    goto corral_source_split_11967;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_11965;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_11964;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_11963;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11962;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} out_$i61 := ldv_filter_err_code(out_$i60);
    call {:si_unique_call 2657} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_11961;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11960;

  $bb36:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i50;
    goto $bb37;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i59;
    goto $bb37;

  SeqInstr_1110:
    call {:si_unique_call 2655} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_11958;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} out_$i59 := ldv_pci_instance_suspend_late_3_7(out_$p56, in_$p10, out_$i58);
    goto SeqInstr_1109;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.87, out_$p57);
    goto corral_source_split_11957;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11956;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_11955;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11954;

  $bb35:
    assume out_$i54 == 1;
    goto corral_source_split_11953;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_11951;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_11950;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_11949;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11948;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 2653} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_11947;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11946;

  $bb33:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i23;
    goto $bb34;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb34;

  SeqInstr_1107:
    call {:si_unique_call 2651} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_11944;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} out_$i48 := ldv_pci_instance_suspend_3_8(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_1106;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.87, out_$p46);
    goto corral_source_split_11943;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11942;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_11941;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11940;

  $bb32:
    assume out_$i43 == 1;
    goto corral_source_split_11939;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_11924;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_11923;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11922;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11921;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_11919;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_11917;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11915;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i38;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 1);
    goto corral_source_split_11913;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} out_$i38 := ldv_undef_int();
    call {:si_unique_call 2646} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_11912;

  SeqInstr_1098:
    goto corral_source_split_11911;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_pci_instance_callback_3_10($u9, in_$p10, out_$i37);
    goto SeqInstr_1097;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1($u7);
    goto corral_source_split_11910;

  $bb14:
    call out_$i33, out_$i37, out_$i38, out_$i39 := ldv_pci_pci_instance_3_loop_$bb14(in_$p10, out_$i33, out_$i37, out_$i38, out_$i39);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_11903;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_11901;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2641} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11900;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73 := ldv_pci_pci_instance_3_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref);
  modifies $M.0, $M.29, $M.32, $M.3, $M.31, $M.21, $M.9, $M.11, $CurrAddr, $M.13, assertsPassed, $M.20, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36, $M.89, $M.88;



implementation ldv_pci_pci_instance_3_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i27, in_$i28, in_$i29, in_$i30, in_$i33, in_$i26, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} ldv_ldv_pre_probe_168();
    goto corral_source_split_11881;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb16_dummy;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_11906;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} out_$i29 := ldv_undef_int();
    call {:si_unique_call 2643} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_11905;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1104:
    goto corral_source_split_11935;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} ldv_pci_instance_release_3_2(out_$p77, in_$p10);
    goto SeqInstr_1103;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_11934;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_11933;

  SeqInstr_1101:
    goto corral_source_split_11932;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} ldv_pci_instance_shutdown_3_3(out_$p75, in_$p10);
    goto SeqInstr_1100;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_11931;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_11930;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i36 == 1;
    goto corral_source_split_11928;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 3);
    goto corral_source_split_11926;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i26;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i26, 2);
    goto corral_source_split_11917;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb13;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i33;
    goto $bb13;

  $bb20:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11915;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i38;
    assume true;
    goto $bb31, $bb20;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 1);
    goto corral_source_split_11913;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} out_$i38 := ldv_undef_int();
    call {:si_unique_call 2646} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_11912;

  SeqInstr_1098:
    goto corral_source_split_11911;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_pci_instance_callback_3_10($u9, in_$p10, out_$i37);
    goto SeqInstr_1097;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1($u7);
    goto corral_source_split_11910;

  $bb14:
    call out_$i33, out_$i37, out_$i38, out_$i39 := ldv_pci_pci_instance_3_loop_$bb14(in_$p10, out_$i33, out_$i37, out_$i38, out_$i39);
    goto $bb14_last;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    assume false;
    return;

  $bb11:
    assume out_$i25 == 1;
    goto corral_source_split_11903;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i24;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_11901;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2641} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11900;

  $bb10:
    call out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73 := ldv_pci_pci_instance_3_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i23, out_$i24, out_$i25, out_$i33, out_$i26, out_$i34, out_$i35, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11899;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i18;
    goto $bb10;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i61;
    assume false;
    return;

  $bb42:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_1116:
    goto corral_source_split_11980;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_pci_instance_resume_3_5(out_$p73, in_$p10);
    goto SeqInstr_1115;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_11979;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11978;

  $bb41:
    assume out_$i71 == 1;
    goto corral_source_split_11977;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_11975;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_11974;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_11973;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_11972;

  $bb39:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_1113:
    goto corral_source_split_11970;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} ldv_pci_instance_resume_early_3_6(out_$p67, in_$p10);
    goto SeqInstr_1112;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_11969;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11968;

  $bb38:
    assume out_$i65 == 1;
    goto corral_source_split_11967;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_11965;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_11964;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_11963;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_11962;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} out_$i61 := ldv_filter_err_code(out_$i60);
    call {:si_unique_call 2657} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_11961;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_11960;

  $bb36:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i50;
    goto $bb37;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i59;
    goto $bb37;

  SeqInstr_1110:
    call {:si_unique_call 2655} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_11958;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} out_$i59 := ldv_pci_instance_suspend_late_3_7(out_$p56, in_$p10, out_$i58);
    goto SeqInstr_1109;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.87, out_$p57);
    goto corral_source_split_11957;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11956;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_11955;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11954;

  $bb35:
    assume out_$i54 == 1;
    goto corral_source_split_11953;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_11951;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_11950;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_11949;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_11948;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 2653} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_11947;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_11946;

  $bb33:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i23;
    goto $bb34;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb34;

  SeqInstr_1107:
    call {:si_unique_call 2651} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_11944;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} out_$i48 := ldv_pci_instance_suspend_3_8(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_1106;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.87, out_$p46);
    goto corral_source_split_11943;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11942;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_11941;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11940;

  $bb32:
    assume out_$i43 == 1;
    goto corral_source_split_11939;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_11924;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_11923;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_11922;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_11921;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_11919;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} ldv_assume(out_$i22);
    goto corral_source_split_11892;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_11891;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    goto corral_source_split_11890;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_11889;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_11887;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} out_$i19 := ldv_undef_int();
    call {:si_unique_call 2637} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_11886;

  SeqInstr_1095:
    call {:si_unique_call 2635} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_11885;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} out_$i18 := ldv_ldv_post_probe_169(out_$i17);
    goto SeqInstr_1094;

  SeqInstr_1092:
    call {:si_unique_call 2633} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_11884;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} out_$i17 := ldv_pci_instance_probe_3_17(out_$p16, in_$p10, in_$p12);
    goto SeqInstr_1091;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_11883;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_11882;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} ldv_assume(out_$i28);
    goto corral_source_split_11897;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_11896;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i18, 0);
    goto corral_source_split_11895;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_11894;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77 := ldv_pci_pci_instance_3_loop_$bb7(in_$p1, in_$p8, in_$p10, in_$p12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i27, out_$i28, out_$i29, out_$i30, out_$i33, out_$i26, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_3_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i33: i32, in_$i26: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i33: i32, out_$i26: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref);
  modifies $M.90, $M.91, $M.0, $M.21, $M.3, $M.23, assertsPassed, $M.29, $M.32, $M.17, $M.19, $M.18, $M.22, $M.20, $M.31, $M.9, $M.11, $CurrAddr, $M.10, $M.13, $M.36, $M.89, $M.88;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p13: ref, in_$p16: ref, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61 := in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} out_$i34 := ldv_undef_int();
    call {:si_unique_call 2738} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_12148;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb30_dummy;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} ldv_free(out_$p50);
    goto corral_source_split_12194;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_12193;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} ldv_free(out_$p38);
    goto corral_source_split_12192;

  $bb28:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} ldv_file_operations_instance_write_0_4(out_$p49, in_$p9, out_$p38, $u1, out_$p40);
    goto corral_source_split_12190;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_12189;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12188;

  $bb27:
    assume out_$i47 == 1;
    goto corral_source_split_12187;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_12168;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_12167;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_12166;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12165;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} ldv_assume(out_$i43);
    goto corral_source_split_12164;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    goto corral_source_split_12163;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    out_$i42 := $ule.i64(out_$i41, 2147479552);
    goto corral_source_split_12162;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(in_$p16);
    goto corral_source_split_12161;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_12160;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} out_$p39 := ldv_xmalloc(8);
    goto corral_source_split_12159;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_12158;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_12156;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 1);
    goto corral_source_split_12149;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1173:
    goto corral_source_split_12198;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_file_operations_instance_callback_0_29($u11, in_$p9, $u2, $u1);
    goto SeqInstr_1172;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i54 == 1;
    goto corral_source_split_12196;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_12183;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} out_$i53 := ldv_undef_int();
    call {:si_unique_call 2746} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_12182;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i37 == 1;
    goto corral_source_split_12180;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i34, 3);
    goto corral_source_split_12178;

  $bb19:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i34, 2);
    goto corral_source_split_12170;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_free(out_$p61);
    goto corral_source_split_12208;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_12207;

  SeqInstr_1176:
    goto corral_source_split_12206;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_file_operations_instance_callback_0_26($u12, out_$p60);
    goto SeqInstr_1175;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_12205;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} out_$p59 := ldv_xmalloc(1736);
    goto corral_source_split_12204;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i55 == 1;
    goto corral_source_split_12202;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i53, 2);
    goto corral_source_split_12200;

  $bb32:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1179:
    goto corral_source_split_12214;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_file_operations_instance_callback_0_23($u13, in_$p13, $u2, $u2, $u1);
    goto SeqInstr_1178;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i56 == 1;
    goto corral_source_split_12212;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, 3);
    goto corral_source_split_12210;

  $bb36:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} ldv_file_operations_instance_callback_0_22($u14, in_$p13, $u15);
    goto corral_source_split_12220;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i57 == 1;
    goto corral_source_split_12218;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i53, 4);
    goto corral_source_split_12216;

  $bb40:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_1182:
    goto corral_source_split_12226;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_file_operations_instance_callback_0_5($u11, in_$p9, $u2, $u1);
    goto SeqInstr_1181;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i58 == 1;
    goto corral_source_split_12224;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i53, 5);
    goto corral_source_split_12222;

  $bb44:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} ldv_stop();
    goto corral_source_split_12228;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} ldv_stop();
    goto corral_source_split_12185;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p13, in_$p16, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p13: ref, in_$p16: ref, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref);
  modifies $CurrAddr, $M.0, $M.13, $M.9, assertsPassed, $M.29, $M.31, $M.11, $M.51, $M.53, $M.54, $M.52, $M.20, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.32, $M.3, $M.67, $M.21, $M.17, $M.19, $M.18, $M.10, $M.23, $M.22, $M.36;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61 := in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_12131;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb12_dummy;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_12152;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} out_$i29 := ldv_undef_int();
    call {:si_unique_call 2740} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_12151;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1170:
    goto corral_source_split_12176;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_file_operations_instance_release_0_2(out_$p52, in_$p11, in_$p9);
    goto SeqInstr_1169;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_12175;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_12174;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i36 == 1;
    goto corral_source_split_12172;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i34, 2);
    goto corral_source_split_12170;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 1);
    goto corral_source_split_12149;

  $bb10:
    call out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p13, in_$p16, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} out_$i34 := ldv_undef_int();
    call {:si_unique_call 2738} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_12148;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb30:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} ldv_free(out_$p50);
    goto corral_source_split_12194;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_12193;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} ldv_free(out_$p38);
    goto corral_source_split_12192;

  $bb28:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} ldv_file_operations_instance_write_0_4(out_$p49, in_$p9, out_$p38, $u1, out_$p40);
    goto corral_source_split_12190;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_12189;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12188;

  $bb27:
    assume out_$i47 == 1;
    goto corral_source_split_12187;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_12168;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_12167;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_12166;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_12165;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} ldv_assume(out_$i43);
    goto corral_source_split_12164;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i42);
    goto corral_source_split_12163;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    out_$i42 := $ule.i64(out_$i41, 2147479552);
    goto corral_source_split_12162;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(in_$p16);
    goto corral_source_split_12161;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_12160;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} out_$p39 := ldv_xmalloc(8);
    goto corral_source_split_12159;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_12158;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_12156;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1173:
    goto corral_source_split_12198;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} ldv_file_operations_instance_callback_0_29($u11, in_$p9, $u2, $u1);
    goto SeqInstr_1172;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i54 == 1;
    goto corral_source_split_12196;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_12183;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} out_$i53 := ldv_undef_int();
    call {:si_unique_call 2746} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_12182;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i37 == 1;
    goto corral_source_split_12180;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i34, 3);
    goto corral_source_split_12178;

  $bb19:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_free(out_$p61);
    goto corral_source_split_12208;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_12207;

  SeqInstr_1176:
    goto corral_source_split_12206;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_file_operations_instance_callback_0_26($u12, out_$p60);
    goto SeqInstr_1175;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_12205;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} out_$p59 := ldv_xmalloc(1736);
    goto corral_source_split_12204;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i55 == 1;
    goto corral_source_split_12202;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i53, 2);
    goto corral_source_split_12200;

  $bb32:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1179:
    goto corral_source_split_12214;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} ldv_file_operations_instance_callback_0_23($u13, in_$p13, $u2, $u2, $u1);
    goto SeqInstr_1178;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i56 == 1;
    goto corral_source_split_12212;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i53, 3);
    goto corral_source_split_12210;

  $bb36:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} ldv_file_operations_instance_callback_0_22($u14, in_$p13, $u15);
    goto corral_source_split_12220;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i57 == 1;
    goto corral_source_split_12218;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i53, 4);
    goto corral_source_split_12216;

  $bb40:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_1182:
    goto corral_source_split_12226;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} ldv_file_operations_instance_callback_0_5($u11, in_$p9, $u2, $u1);
    goto SeqInstr_1181;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i58 == 1;
    goto corral_source_split_12224;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i53, 5);
    goto corral_source_split_12222;

  $bb44:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} ldv_stop();
    goto corral_source_split_12228;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} ldv_stop();
    goto corral_source_split_12185;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} ldv_assume(out_$i26);
    goto corral_source_split_12141;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_12140;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i22, 0);
    goto corral_source_split_12139;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_12138;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_12136;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} out_$i23 := ldv_undef_int();
    call {:si_unique_call 2734} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_12135;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} out_$i22 := ldv_filter_err_code(out_$i21);
    call {:si_unique_call 2732} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_12134;

  SeqInstr_1167:
    call {:si_unique_call 2730} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_12133;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} out_$i21 := ldv_file_operations_instance_probe_0_12(out_$p20, in_$p11, in_$p9);
    goto SeqInstr_1166;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_12132;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_assume(out_$i28);
    goto corral_source_split_12146;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_12145;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i22, 0);
    goto corral_source_split_12144;

  $bb9:
    assume !(out_$i24 == 1);
    goto corral_source_split_12143;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61 := ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p13, in_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref) returns (out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref);
  modifies $M.0, $M.3, $M.23, $M.21, $M.29, $M.32, $M.22, assertsPassed, $M.17, $M.19, $M.18, $CurrAddr, $M.9, $M.10, $M.31, $M.11, $M.20, $M.13, $M.36, $M.51, $M.53, $M.54, $M.52, $M.82, $M.83, $M.84, $M.46, $M.76, $M.66, $M.63, $M.67;



implementation ldv_pm_pm_ops_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} out_$i1 := ldv_undef_int();
    call {:si_unique_call 2779} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_12267;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1206:
    goto corral_source_split_12304;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} ldv_pm_ops_instance_runtime_idle_4_27(out_$p12, $u17);
    goto SeqInstr_1205;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.93, out_$p11);
    goto corral_source_split_12303;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12302;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_12301;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_12275;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_12274;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.92, out_$p7);
    goto corral_source_split_12273;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_12272;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_12270;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_12268;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1212:
    goto corral_source_split_12319;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} ldv_pm_ops_instance_runtime_resume_4_24(out_$p24, $u17);
    goto SeqInstr_1211;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.97, out_$p23);
    goto corral_source_split_12318;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12317;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_12316;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_12314;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_12313;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.96, out_$p19);
    goto corral_source_split_12312;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_12311;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1209:
    goto corral_source_split_12309;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} ldv_pm_ops_instance_runtime_suspend_4_25(out_$p18, $u17);
    goto SeqInstr_1208;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.95, out_$p17);
    goto corral_source_split_12308;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12307;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_12306;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_12284;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_12283;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.94, out_$p13);
    goto corral_source_split_12282;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_12281;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_12279;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_12277;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb93:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_1272:
    goto corral_source_split_12505;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_pm_ops_instance_complete_4_3(out_$p130, $u17);
    goto SeqInstr_1271;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.131, out_$p129);
    goto corral_source_split_12504;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_12503;

  $bb92:
    assume out_$i128 == 1;
    goto corral_source_split_12502;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_12408;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_12407;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.130, out_$p125);
    goto corral_source_split_12406;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_12405;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_1233:
    goto corral_source_split_12388;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} ldv_pm_ops_instance_resume_4_16(out_$p64, $u17);
    goto SeqInstr_1232;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.109, out_$p63);
    goto corral_source_split_12387;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_12386;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1230:
    goto corral_source_split_12384;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} ldv_pm_ops_instance_resume_noirq_4_19(out_$p50, $u17);
    goto SeqInstr_1229;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.104, out_$p49);
    goto corral_source_split_12383;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12382;

  $bb50:
    assume out_$i48 == 1;
    goto corral_source_split_12381;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_12379;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_12378;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.103, out_$p45);
    goto corral_source_split_12377;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_12376;

  $bb48:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_1227:
    goto corral_source_split_12374;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} ldv_pm_ops_instance_suspend_noirq_4_20(out_$p44, $u17);
    goto SeqInstr_1226;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.102, out_$p43);
    goto corral_source_split_12373;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12372;

  $bb47:
    assume out_$i42 == 1;
    goto corral_source_split_12371;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, 0);
    goto corral_source_split_12363;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_12362;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.101, out_$p39);
    goto corral_source_split_12361;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_12360;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_12359;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_12335;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} out_$i37 := ldv_undef_int();
    call {:si_unique_call 2789} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_12334;

  SeqInstr_1218:
    goto corral_source_split_12333;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} ldv_pm_ops_instance_suspend_4_21(out_$p36, $u17);
    goto SeqInstr_1217;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.100, out_$p35);
    goto corral_source_split_12332;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_12331;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_12329;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_12327;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2786} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_12326;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1215:
    goto corral_source_split_12324;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} ldv_pm_ops_instance_prepare_4_22(out_$p30, $u17);
    goto SeqInstr_1214;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.99, out_$p29);
    goto corral_source_split_12323;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12322;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_12321;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_12293;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_12292;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.98, out_$p25);
    goto corral_source_split_12291;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_12290;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_12288;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_12286;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb58:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_1239:
    goto corral_source_split_12403;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} ldv_pm_ops_instance_resume_early_4_17(out_$p62, $u17);
    goto SeqInstr_1238;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.108, out_$p61);
    goto corral_source_split_12402;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12401;

  $bb57:
    assume out_$i60 == 1;
    goto corral_source_split_12400;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_12398;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_12397;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.107, out_$p57);
    goto corral_source_split_12396;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_12395;

  $bb55:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1236:
    goto corral_source_split_12393;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} ldv_pm_ops_instance_suspend_late_4_18(out_$p56, $u17);
    goto SeqInstr_1235;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.106, out_$p55);
    goto corral_source_split_12392;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12391;

  $bb54:
    assume out_$i54 == 1;
    goto corral_source_split_12390;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_12369;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_12368;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.105, out_$p51);
    goto corral_source_split_12367;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_12366;

  $bb46:
    assume !(out_$i38 == 1);
    goto corral_source_split_12365;

  SeqInstr_1248:
    goto corral_source_split_12439;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} ldv_pm_ops_instance_thaw_4_10(out_$p94, $u17);
    goto SeqInstr_1247;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.119, out_$p93);
    goto corral_source_split_12438;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_12437;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_1245:
    goto corral_source_split_12435;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_pm_ops_instance_thaw_early_4_13(out_$p80, $u17);
    goto SeqInstr_1244;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.114, out_$p79);
    goto corral_source_split_12434;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_12433;

  $bb66:
    assume out_$i78 == 1;
    goto corral_source_split_12432;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_12430;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_12429;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.113, out_$p75);
    goto corral_source_split_12428;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_12427;

  $bb64:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_1242:
    goto corral_source_split_12425;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} ldv_pm_ops_instance_freeze_late_4_14(out_$p74, $u17);
    goto SeqInstr_1241;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.112, out_$p73);
    goto corral_source_split_12424;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_12423;

  $bb63:
    assume out_$i72 == 1;
    goto corral_source_split_12422;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, 0);
    goto corral_source_split_12414;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_12413;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.111, out_$p69);
    goto corral_source_split_12412;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_12411;

  $bb61:
    assume out_$i68 == 1;
    goto corral_source_split_12410;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_12345;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} out_$i67 := ldv_undef_int();
    call {:si_unique_call 2792} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_12344;

  SeqInstr_1221:
    goto corral_source_split_12343;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} ldv_pm_ops_instance_freeze_4_15(out_$p66, $u17);
    goto SeqInstr_1220;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.110, out_$p65);
    goto corral_source_split_12342;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_12341;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_12339;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_12337;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb74:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_1254:
    goto corral_source_split_12454;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} ldv_pm_ops_instance_thaw_noirq_4_11(out_$p92, $u17);
    goto SeqInstr_1253;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.118, out_$p91);
    goto corral_source_split_12453;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_12452;

  $bb73:
    assume out_$i90 == 1;
    goto corral_source_split_12451;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_12449;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_12448;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.117, out_$p87);
    goto corral_source_split_12447;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_12446;

  $bb71:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_1251:
    goto corral_source_split_12444;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} ldv_pm_ops_instance_freeze_noirq_4_12(out_$p86, $u17);
    goto SeqInstr_1250;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.116, out_$p85);
    goto corral_source_split_12443;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_12442;

  $bb70:
    assume out_$i84 == 1;
    goto corral_source_split_12441;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_12420;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_12419;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.115, out_$p81);
    goto corral_source_split_12418;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_12417;

  $bb62:
    assume !(out_$i68 == 1);
    goto corral_source_split_12416;

  SeqInstr_1263:
    goto corral_source_split_12485;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_pm_ops_instance_restore_4_4(out_$p124, $u17);
    goto SeqInstr_1262;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.129, out_$p123);
    goto corral_source_split_12484;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_12483;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_1260:
    goto corral_source_split_12481;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} ldv_pm_ops_instance_restore_early_4_7(out_$p110, $u17);
    goto SeqInstr_1259;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.124, out_$p109);
    goto corral_source_split_12480;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_12479;

  $bb81:
    assume out_$i108 == 1;
    goto corral_source_split_12478;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_12476;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_12475;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.123, out_$p105);
    goto corral_source_split_12474;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_12473;

  $bb79:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_1257:
    goto corral_source_split_12471;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_pm_ops_instance_poweroff_late_4_8(out_$p104, $u17);
    goto SeqInstr_1256;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.122, out_$p103);
    goto corral_source_split_12470;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_12469;

  $bb78:
    assume out_$i102 == 1;
    goto corral_source_split_12468;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_12460;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_12459;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.121, out_$p99);
    goto corral_source_split_12458;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_12457;

  $bb76:
    assume out_$i98 == 1;
    goto corral_source_split_12456;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_12355;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} out_$i97 := ldv_undef_int();
    call {:si_unique_call 2795} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_12354;

  SeqInstr_1224:
    goto corral_source_split_12353;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_pm_ops_instance_poweroff_4_9(out_$p96, $u17);
    goto SeqInstr_1223;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.120, out_$p95);
    goto corral_source_split_12352;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_12351;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_12349;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_12347;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb89:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_1269:
    goto corral_source_split_12500;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} ldv_pm_ops_instance_restore_noirq_4_5(out_$p122, $u17);
    goto SeqInstr_1268;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.128, out_$p121);
    goto corral_source_split_12499;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_12498;

  $bb88:
    assume out_$i120 == 1;
    goto corral_source_split_12497;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, 0);
    goto corral_source_split_12495;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_12494;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.127, out_$p117);
    goto corral_source_split_12493;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_12492;

  $bb86:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_1266:
    goto corral_source_split_12490;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} ldv_pm_ops_instance_poweroff_noirq_4_6(out_$p116, $u17);
    goto SeqInstr_1265;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.126, out_$p115);
    goto corral_source_split_12489;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_12488;

  $bb85:
    assume out_$i114 == 1;
    goto corral_source_split_12487;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_12466;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_12465;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.125, out_$p111);
    goto corral_source_split_12464;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_12463;

  $bb77:
    assume !(out_$i98 == 1);
    goto corral_source_split_12462;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} ldv_stop();
    goto corral_source_split_12357;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130 := ldv_pm_pm_ops_instance_4_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref);
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_platform_instance_5_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_12643;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2862} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12642;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_12623;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_12621;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_dispatch_pm_deregister_5_5();
    goto corral_source_split_12630;

  SeqInstr_1353:
    goto corral_source_split_12629;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_dispatch_pm_register_5_6();
    goto SeqInstr_1352;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_12627;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_12625;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_5_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_5_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $M.0, $M.3, $CurrAddr, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36;



implementation ldv_pm_platform_instance_5_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_12571;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_12608;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2854} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_12607;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_12606;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} ldv_free(out_$p38);
    goto corral_source_split_12640;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_12639;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1356:
    goto corral_source_split_12637;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} ldv_platform_instance_release_5_3(out_$p37, out_$p31);
    goto SeqInstr_1355;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.135, out_$p36);
    goto corral_source_split_12636;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12635;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_12634;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_12619;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_12618;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.134, out_$p32);
    goto corral_source_split_12617;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12616;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_12615;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_12614;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_12597;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} out_$i20 := ldv_undef_int();
    call {:si_unique_call 2851} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_12596;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} ldv_assume(out_$i19);
    goto corral_source_split_12595;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_12594;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_12593;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_12592;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_12590;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} out_$i16 := ldv_undef_int();
    call {:si_unique_call 2848} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_12589;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_free(out_$p15);
    goto corral_source_split_12588;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_12587;

  SeqInstr_1350:
    call {:si_unique_call 2845} {:cexpr "ldv_5_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_12586;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} out_$i14 := ldv_ldv_post_probe_171(out_$i13);
    goto SeqInstr_1349;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12585;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_1347:
    call {:si_unique_call 2843} {:cexpr "ldv_5_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_12583;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  corral_source_split_12582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} out_$i12 := ldv_platform_instance_probe_5_14(out_$p11, out_$p5);
    goto SeqInstr_1346;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.133, out_$p10);
    goto corral_source_split_12582;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_12581;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_12580;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_12578;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_12577;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.132, out_$p6);
    goto corral_source_split_12576;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u18, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_12575;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} ldv_ldv_pre_probe_170();
    goto corral_source_split_12574;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_12573;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_12572;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_12612;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_12642:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_12643;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2862} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12642;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_12623;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_12621;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_5_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_12604;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_dispatch_pm_deregister_5_5();
    goto corral_source_split_12630;

  SeqInstr_1353:
    goto corral_source_split_12629;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_dispatch_pm_register_5_6();
    goto SeqInstr_1352;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_12627;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_12625;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv_assume(out_$i24);
    goto corral_source_split_12602;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_12601;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_12600;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_12599;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_5_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_5_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.0, $M.3, $M.29, $M.32, $M.21, $M.31, $M.9, $M.11, $M.17, $M.19, $M.18, $CurrAddr, $M.10, assertsPassed, $M.23, $M.13, $M.20, $M.22, $M.36, $M.90, $M.91;


